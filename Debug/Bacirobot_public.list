
Bacirobot_public.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015674  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08015848  08015848  00025848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015cc0  08015cc0  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  08015cc0  08015cc0  00025cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015cc8  08015cc8  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015cc8  08015cc8  00025cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015ccc  08015ccc  00025ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08015cd0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002858  200001d8  08015ea8  000301d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002a30  08015ea8  00032a30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001af5b  00000000  00000000  0003024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042db  00000000  00000000  0004b1a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019d8  00000000  00000000  0004f488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001437  00000000  00000000  00050e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002741f  00000000  00000000  00052297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021333  00000000  00000000  000796b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e788c  00000000  00000000  0009a9e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007e28  00000000  00000000  00182278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0018a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801582c 	.word	0x0801582c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0801582c 	.word	0x0801582c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 b970 	b.w	8000f20 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	460d      	mov	r5, r1
 8000c60:	4604      	mov	r4, r0
 8000c62:	460f      	mov	r7, r1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d14a      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4694      	mov	ip, r2
 8000c6c:	d965      	bls.n	8000d3a <__udivmoddi4+0xe2>
 8000c6e:	fab2 f382 	clz	r3, r2
 8000c72:	b143      	cbz	r3, 8000c86 <__udivmoddi4+0x2e>
 8000c74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c78:	f1c3 0220 	rsb	r2, r3, #32
 8000c7c:	409f      	lsls	r7, r3
 8000c7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c82:	4317      	orrs	r7, r2
 8000c84:	409c      	lsls	r4, r3
 8000c86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c8a:	fa1f f58c 	uxth.w	r5, ip
 8000c8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c92:	0c22      	lsrs	r2, r4, #16
 8000c94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c9c:	fb01 f005 	mul.w	r0, r1, r5
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x62>
 8000ca4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cac:	f080 811c 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	f240 8119 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	4462      	add	r2, ip
 8000cba:	1a12      	subs	r2, r2, r0
 8000cbc:	b2a4      	uxth	r4, r4
 8000cbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cca:	fb00 f505 	mul.w	r5, r0, r5
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	d90a      	bls.n	8000ce8 <__udivmoddi4+0x90>
 8000cd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cda:	f080 8107 	bcs.w	8000eec <__udivmoddi4+0x294>
 8000cde:	42a5      	cmp	r5, r4
 8000ce0:	f240 8104 	bls.w	8000eec <__udivmoddi4+0x294>
 8000ce4:	4464      	add	r4, ip
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cec:	1b64      	subs	r4, r4, r5
 8000cee:	2100      	movs	r1, #0
 8000cf0:	b11e      	cbz	r6, 8000cfa <__udivmoddi4+0xa2>
 8000cf2:	40dc      	lsrs	r4, r3
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0xbc>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80ed 	beq.w	8000ee2 <__udivmoddi4+0x28a>
 8000d08:	2100      	movs	r1, #0
 8000d0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d14:	fab3 f183 	clz	r1, r3
 8000d18:	2900      	cmp	r1, #0
 8000d1a:	d149      	bne.n	8000db0 <__udivmoddi4+0x158>
 8000d1c:	42ab      	cmp	r3, r5
 8000d1e:	d302      	bcc.n	8000d26 <__udivmoddi4+0xce>
 8000d20:	4282      	cmp	r2, r0
 8000d22:	f200 80f8 	bhi.w	8000f16 <__udivmoddi4+0x2be>
 8000d26:	1a84      	subs	r4, r0, r2
 8000d28:	eb65 0203 	sbc.w	r2, r5, r3
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	4617      	mov	r7, r2
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d0e2      	beq.n	8000cfa <__udivmoddi4+0xa2>
 8000d34:	e9c6 4700 	strd	r4, r7, [r6]
 8000d38:	e7df      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d3a:	b902      	cbnz	r2, 8000d3e <__udivmoddi4+0xe6>
 8000d3c:	deff      	udf	#255	; 0xff
 8000d3e:	fab2 f382 	clz	r3, r2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8090 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d48:	1a8a      	subs	r2, r1, r2
 8000d4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	2101      	movs	r1, #1
 8000d54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d58:	fb07 2015 	mls	r0, r7, r5, r2
 8000d5c:	0c22      	lsrs	r2, r4, #16
 8000d5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d62:	fb0e f005 	mul.w	r0, lr, r5
 8000d66:	4290      	cmp	r0, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d6e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4290      	cmp	r0, r2
 8000d76:	f200 80cb 	bhi.w	8000f10 <__udivmoddi4+0x2b8>
 8000d7a:	4645      	mov	r5, r8
 8000d7c:	1a12      	subs	r2, r2, r0
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d84:	fb07 2210 	mls	r2, r7, r0, r2
 8000d88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x14e>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x14c>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f200 80bb 	bhi.w	8000f1a <__udivmoddi4+0x2c2>
 8000da4:	4610      	mov	r0, r2
 8000da6:	eba4 040e 	sub.w	r4, r4, lr
 8000daa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dae:	e79f      	b.n	8000cf0 <__udivmoddi4+0x98>
 8000db0:	f1c1 0720 	rsb	r7, r1, #32
 8000db4:	408b      	lsls	r3, r1
 8000db6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dbe:	fa05 f401 	lsl.w	r4, r5, r1
 8000dc2:	fa20 f307 	lsr.w	r3, r0, r7
 8000dc6:	40fd      	lsrs	r5, r7
 8000dc8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dcc:	4323      	orrs	r3, r4
 8000dce:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dda:	0c1c      	lsrs	r4, r3, #16
 8000ddc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000de0:	fb08 f50e 	mul.w	r5, r8, lr
 8000de4:	42a5      	cmp	r5, r4
 8000de6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dea:	fa00 f001 	lsl.w	r0, r0, r1
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000df8:	f080 8088 	bcs.w	8000f0c <__udivmoddi4+0x2b4>
 8000dfc:	42a5      	cmp	r5, r4
 8000dfe:	f240 8085 	bls.w	8000f0c <__udivmoddi4+0x2b4>
 8000e02:	f1a8 0802 	sub.w	r8, r8, #2
 8000e06:	4464      	add	r4, ip
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	b29d      	uxth	r5, r3
 8000e0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e10:	fb09 4413 	mls	r4, r9, r3, r4
 8000e14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e28:	d26c      	bcs.n	8000f04 <__udivmoddi4+0x2ac>
 8000e2a:	45a6      	cmp	lr, r4
 8000e2c:	d96a      	bls.n	8000f04 <__udivmoddi4+0x2ac>
 8000e2e:	3b02      	subs	r3, #2
 8000e30:	4464      	add	r4, ip
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fba3 9502 	umull	r9, r5, r3, r2
 8000e3a:	eba4 040e 	sub.w	r4, r4, lr
 8000e3e:	42ac      	cmp	r4, r5
 8000e40:	46c8      	mov	r8, r9
 8000e42:	46ae      	mov	lr, r5
 8000e44:	d356      	bcc.n	8000ef4 <__udivmoddi4+0x29c>
 8000e46:	d053      	beq.n	8000ef0 <__udivmoddi4+0x298>
 8000e48:	b156      	cbz	r6, 8000e60 <__udivmoddi4+0x208>
 8000e4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e52:	fa04 f707 	lsl.w	r7, r4, r7
 8000e56:	40ca      	lsrs	r2, r1
 8000e58:	40cc      	lsrs	r4, r1
 8000e5a:	4317      	orrs	r7, r2
 8000e5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e60:	4618      	mov	r0, r3
 8000e62:	2100      	movs	r1, #0
 8000e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e68:	f1c3 0120 	rsb	r1, r3, #32
 8000e6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e70:	fa20 f201 	lsr.w	r2, r0, r1
 8000e74:	fa25 f101 	lsr.w	r1, r5, r1
 8000e78:	409d      	lsls	r5, r3
 8000e7a:	432a      	orrs	r2, r5
 8000e7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1510 	mls	r5, r7, r0, r1
 8000e8c:	0c11      	lsrs	r1, r2, #16
 8000e8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e92:	fb00 f50e 	mul.w	r5, r0, lr
 8000e96:	428d      	cmp	r5, r1
 8000e98:	fa04 f403 	lsl.w	r4, r4, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x258>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ea6:	d22f      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000ea8:	428d      	cmp	r5, r1
 8000eaa:	d92d      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000eac:	3802      	subs	r0, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1b49      	subs	r1, r1, r5
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ebc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ec4:	4291      	cmp	r1, r2
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x282>
 8000ec8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ecc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ed0:	d216      	bcs.n	8000f00 <__udivmoddi4+0x2a8>
 8000ed2:	4291      	cmp	r1, r2
 8000ed4:	d914      	bls.n	8000f00 <__udivmoddi4+0x2a8>
 8000ed6:	3d02      	subs	r5, #2
 8000ed8:	4462      	add	r2, ip
 8000eda:	1a52      	subs	r2, r2, r1
 8000edc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ee0:	e738      	b.n	8000d54 <__udivmoddi4+0xfc>
 8000ee2:	4631      	mov	r1, r6
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	e708      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000ee8:	4639      	mov	r1, r7
 8000eea:	e6e6      	b.n	8000cba <__udivmoddi4+0x62>
 8000eec:	4610      	mov	r0, r2
 8000eee:	e6fb      	b.n	8000ce8 <__udivmoddi4+0x90>
 8000ef0:	4548      	cmp	r0, r9
 8000ef2:	d2a9      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000efc:	3b01      	subs	r3, #1
 8000efe:	e7a3      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000f00:	4645      	mov	r5, r8
 8000f02:	e7ea      	b.n	8000eda <__udivmoddi4+0x282>
 8000f04:	462b      	mov	r3, r5
 8000f06:	e794      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f08:	4640      	mov	r0, r8
 8000f0a:	e7d1      	b.n	8000eb0 <__udivmoddi4+0x258>
 8000f0c:	46d0      	mov	r8, sl
 8000f0e:	e77b      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f10:	3d02      	subs	r5, #2
 8000f12:	4462      	add	r2, ip
 8000f14:	e732      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f16:	4608      	mov	r0, r1
 8000f18:	e70a      	b.n	8000d30 <__udivmoddi4+0xd8>
 8000f1a:	4464      	add	r4, ip
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	e742      	b.n	8000da6 <__udivmoddi4+0x14e>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <AddressInit>:


// SYSTEM
//==================================================================================================================== SYSTEM_START
void AddressInit(void)	// used to initialize the Address Module. Called from main.c file @ init section
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
	m_ucRobotAddress = 0;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <AddressInit+0x14>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]

	return;
 8000f2e:	bf00      	nop
}
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	200001f6 	.word	0x200001f6

08000f3c <AddressMainLoop>:
//----------------------------------------------------------------------------------
void AddressMainLoop(void)	// loop function of the Address Module. Called from the main.c file @ main loop section
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
	// skip real time
	if(m_uiAddressSkipRealTime)
 8000f42:	4b3a      	ldr	r3, [pc, #232]	; (800102c <AddressMainLoop+0xf0>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d006      	beq.n	8000f58 <AddressMainLoop+0x1c>
	{
		m_uiAddressSkipRealTime --;
 8000f4a:	4b38      	ldr	r3, [pc, #224]	; (800102c <AddressMainLoop+0xf0>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	4b36      	ldr	r3, [pc, #216]	; (800102c <AddressMainLoop+0xf0>)
 8000f54:	801a      	strh	r2, [r3, #0]
		return;
 8000f56:	e066      	b.n	8001026 <AddressMainLoop+0xea>
	}
	m_uiAddressSkipRealTime = ADDRESS_SKIP_REAL_TIME;
 8000f58:	4b34      	ldr	r3, [pc, #208]	; (800102c <AddressMainLoop+0xf0>)
 8000f5a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f5e:	801a      	strh	r2, [r3, #0]
	//--------------------------------------------------------


	// get the address
	uint8_t ucTempAddress = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	71fb      	strb	r3, [r7, #7]

	if(HAL_GPIO_ReadPin(ADD0_GPIO_Port, ADD0_Pin) == GPIO_PIN_RESET)	ucTempAddress |= (1<<0);
 8000f64:	2101      	movs	r1, #1
 8000f66:	4832      	ldr	r0, [pc, #200]	; (8001030 <AddressMainLoop+0xf4>)
 8000f68:	f00a ff38 	bl	800bddc <HAL_GPIO_ReadPin>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d103      	bne.n	8000f7a <AddressMainLoop+0x3e>
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(ADD1_GPIO_Port, ADD1_Pin) == GPIO_PIN_RESET)	ucTempAddress |= (1<<1);
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	482c      	ldr	r0, [pc, #176]	; (8001030 <AddressMainLoop+0xf4>)
 8000f7e:	f00a ff2d 	bl	800bddc <HAL_GPIO_ReadPin>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d103      	bne.n	8000f90 <AddressMainLoop+0x54>
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(ADD2_GPIO_Port, ADD2_Pin) == GPIO_PIN_RESET)	ucTempAddress |= (1<<2);
 8000f90:	2104      	movs	r1, #4
 8000f92:	4827      	ldr	r0, [pc, #156]	; (8001030 <AddressMainLoop+0xf4>)
 8000f94:	f00a ff22 	bl	800bddc <HAL_GPIO_ReadPin>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d103      	bne.n	8000fa6 <AddressMainLoop+0x6a>
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(ADD3_GPIO_Port, ADD3_Pin) == GPIO_PIN_RESET)	ucTempAddress |= (1<<3);
 8000fa6:	2108      	movs	r1, #8
 8000fa8:	4821      	ldr	r0, [pc, #132]	; (8001030 <AddressMainLoop+0xf4>)
 8000faa:	f00a ff17 	bl	800bddc <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d103      	bne.n	8000fbc <AddressMainLoop+0x80>
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f043 0308 	orr.w	r3, r3, #8
 8000fba:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(ADD4_GPIO_Port, ADD4_Pin) == GPIO_PIN_RESET)	ucTempAddress |= (1<<4);
 8000fbc:	2110      	movs	r1, #16
 8000fbe:	481c      	ldr	r0, [pc, #112]	; (8001030 <AddressMainLoop+0xf4>)
 8000fc0:	f00a ff0c 	bl	800bddc <HAL_GPIO_ReadPin>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d103      	bne.n	8000fd2 <AddressMainLoop+0x96>
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f043 0310 	orr.w	r3, r3, #16
 8000fd0:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(ADD5_GPIO_Port, ADD5_Pin) == GPIO_PIN_RESET)	ucTempAddress |= (1<<5);
 8000fd2:	2180      	movs	r1, #128	; 0x80
 8000fd4:	4816      	ldr	r0, [pc, #88]	; (8001030 <AddressMainLoop+0xf4>)
 8000fd6:	f00a ff01 	bl	800bddc <HAL_GPIO_ReadPin>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d103      	bne.n	8000fe8 <AddressMainLoop+0xac>
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	f043 0320 	orr.w	r3, r3, #32
 8000fe6:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(ADD6_GPIO_Port, ADD6_Pin) == GPIO_PIN_RESET)	ucTempAddress |= (1<<6);
 8000fe8:	2110      	movs	r1, #16
 8000fea:	4812      	ldr	r0, [pc, #72]	; (8001034 <AddressMainLoop+0xf8>)
 8000fec:	f00a fef6 	bl	800bddc <HAL_GPIO_ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d103      	bne.n	8000ffe <AddressMainLoop+0xc2>
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ffc:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(ADD7_GPIO_Port, ADD7_Pin) == GPIO_PIN_RESET)	ucTempAddress |= (1<<7);
 8000ffe:	2120      	movs	r1, #32
 8001000:	480c      	ldr	r0, [pc, #48]	; (8001034 <AddressMainLoop+0xf8>)
 8001002:	f00a feeb 	bl	800bddc <HAL_GPIO_ReadPin>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d103      	bne.n	8001014 <AddressMainLoop+0xd8>
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001012:	71fb      	strb	r3, [r7, #7]

	if(ucTempAddress != m_ucRobotAddress)
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <AddressMainLoop+0xfc>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	79fa      	ldrb	r2, [r7, #7]
 800101a:	429a      	cmp	r2, r3
 800101c:	d002      	beq.n	8001024 <AddressMainLoop+0xe8>
	{
		m_ucRobotAddress = ucTempAddress;
 800101e:	4a06      	ldr	r2, [pc, #24]	; (8001038 <AddressMainLoop+0xfc>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	7013      	strb	r3, [r2, #0]

	}



	return;
 8001024:	bf00      	nop
}
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200001f4 	.word	0x200001f4
 8001030:	40020c00 	.word	0x40020c00
 8001034:	40020400 	.word	0x40020400
 8001038:	200001f6 	.word	0x200001f6

0800103c <AddressTimer1KHZISR>:
//----------------------------------------------------------------------------------
void AddressTimer1KHZISR(void)	// 1KHZ timer function called from System ISR from stm32f4xx_it.c file @ SysTick Function (!!! keep as short as possible !!!)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0


	return;
 8001040:	bf00      	nop
}
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <InteractionNewResultAvailableCallback>:
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
//==================================================================================================================== API_END


void InteractionNewResultAvailableCallback(InteractionResultDataStructure NewInteractionResult, IDPatternResultDataStructure NewIDResult) {
 800104c:	b084      	sub	sp, #16
 800104e:	b590      	push	{r4, r7, lr}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	f107 0418 	add.w	r4, r7, #24
 8001058:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	m_NewInteractionResult = NewInteractionResult;
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <InteractionNewResultAvailableCallback+0x74>)
 800105e:	4618      	mov	r0, r3
 8001060:	f107 0318 	add.w	r3, r7, #24
 8001064:	2278      	movs	r2, #120	; 0x78
 8001066:	4619      	mov	r1, r3
 8001068:	f012 f865 	bl	8013136 <memcpy>
	m_NewIDResult = NewIDResult;
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <InteractionNewResultAvailableCallback+0x78>)
 800106e:	461c      	mov	r4, r3
 8001070:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001074:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001078:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	for(uint8_t i=0;i<6;i++)
 800107c:	2300      	movs	r3, #0
 800107e:	71fb      	strb	r3, [r7, #7]
 8001080:	e012      	b.n	80010a8 <InteractionNewResultAvailableCallback+0x5c>
	{
		if( (m_ucInteractionOtherRobotsAddressOld[i] != m_NewIDResult.ucDetectedRobotID[i] ) )
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	4a10      	ldr	r2, [pc, #64]	; (80010c8 <InteractionNewResultAvailableCallback+0x7c>)
 8001086:	5cd2      	ldrb	r2, [r2, r3]
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	490e      	ldr	r1, [pc, #56]	; (80010c4 <InteractionNewResultAvailableCallback+0x78>)
 800108c:	440b      	add	r3, r1
 800108e:	799b      	ldrb	r3, [r3, #6]
 8001090:	429a      	cmp	r2, r3
 8001092:	d006      	beq.n	80010a2 <InteractionNewResultAvailableCallback+0x56>
		{
			m_ucInteractionOtherRobotsAddressOld[i] = m_NewIDResult.ucDetectedRobotID[i];
 8001094:	79fa      	ldrb	r2, [r7, #7]
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	490a      	ldr	r1, [pc, #40]	; (80010c4 <InteractionNewResultAvailableCallback+0x78>)
 800109a:	440a      	add	r2, r1
 800109c:	7991      	ldrb	r1, [r2, #6]
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <InteractionNewResultAvailableCallback+0x7c>)
 80010a0:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<6;i++)
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	3301      	adds	r3, #1
 80010a6:	71fb      	strb	r3, [r7, #7]
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2b05      	cmp	r3, #5
 80010ac:	d9e9      	bls.n	8001082 <InteractionNewResultAvailableCallback+0x36>
		}
	}
}
 80010ae:	bf00      	nop
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010ba:	b004      	add	sp, #16
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	200001fc 	.word	0x200001fc
 80010c4:	20000274 	.word	0x20000274
 80010c8:	20000280 	.word	0x20000280

080010cc <WheelRobotCommandEndCallback>:

void WheelRobotCommandEndCallback(COMMAND_CALLBACK_REASON CallbackReason) {
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
	m_NewCallbackReason = CallbackReason;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <WheelRobotCommandEndCallback+0x1c>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	7013      	strb	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	20000286 	.word	0x20000286

080010ec <ApplicationInit>:

// SYSTEM
//==================================================================================================================== SYSTEM_START
void ApplicationInit(void)	// used to initialize the Application Module. Called from main.c file @ init section
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af02      	add	r7, sp, #8
	srand(HAL_GetTick());
 80010f2:	f009 fb99 	bl	800a828 <HAL_GetTick>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f011 fe67 	bl	8012dcc <srand>

	m_NewCallbackReason = 1;
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <ApplicationInit+0xb4>)
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]

	run_timer = RUN_TIMER_DEFAULT;
 8001104:	4b27      	ldr	r3, [pc, #156]	; (80011a4 <ApplicationInit+0xb8>)
 8001106:	220a      	movs	r2, #10
 8001108:	801a      	strh	r2, [r3, #0]
	run_or_tumble = RUN;
 800110a:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <ApplicationInit+0xbc>)
 800110c:	2201      	movs	r2, #1
 800110e:	701a      	strb	r2, [r3, #0]

	myR = 255;
 8001110:	4b26      	ldr	r3, [pc, #152]	; (80011ac <ApplicationInit+0xc0>)
 8001112:	22ff      	movs	r2, #255	; 0xff
 8001114:	701a      	strb	r2, [r3, #0]
	myG = 0;
 8001116:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <ApplicationInit+0xc4>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
	myB = 255;
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <ApplicationInit+0xc8>)
 800111e:	22ff      	movs	r2, #255	; 0xff
 8001120:	701a      	strb	r2, [r3, #0]

	WS2812SetDisplay(DISPLY_SYSTEM_1, 1, 50, myR, myG, myB);
 8001122:	4b22      	ldr	r3, [pc, #136]	; (80011ac <ApplicationInit+0xc0>)
 8001124:	7819      	ldrb	r1, [r3, #0]
 8001126:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <ApplicationInit+0xc4>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	4a22      	ldr	r2, [pc, #136]	; (80011b4 <ApplicationInit+0xc8>)
 800112c:	7812      	ldrb	r2, [r2, #0]
 800112e:	9201      	str	r2, [sp, #4]
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	460b      	mov	r3, r1
 8001134:	2232      	movs	r2, #50	; 0x32
 8001136:	2101      	movs	r1, #1
 8001138:	2002      	movs	r0, #2
 800113a:	f005 f99d 	bl	8006478 <WS2812SetDisplay>
	WS2812SetDisplay(DISPLY_SYSTEM_1, 2, 50, myR, myG, myB);
 800113e:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <ApplicationInit+0xc0>)
 8001140:	7819      	ldrb	r1, [r3, #0]
 8001142:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <ApplicationInit+0xc4>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	4a1b      	ldr	r2, [pc, #108]	; (80011b4 <ApplicationInit+0xc8>)
 8001148:	7812      	ldrb	r2, [r2, #0]
 800114a:	9201      	str	r2, [sp, #4]
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	460b      	mov	r3, r1
 8001150:	2232      	movs	r2, #50	; 0x32
 8001152:	2102      	movs	r1, #2
 8001154:	2002      	movs	r0, #2
 8001156:	f005 f98f 	bl	8006478 <WS2812SetDisplay>
	WS2812SetDisplay(DISPLY_SYSTEM_1, 7, 50, myR, myG, myB);
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <ApplicationInit+0xc0>)
 800115c:	7819      	ldrb	r1, [r3, #0]
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <ApplicationInit+0xc4>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <ApplicationInit+0xc8>)
 8001164:	7812      	ldrb	r2, [r2, #0]
 8001166:	9201      	str	r2, [sp, #4]
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	460b      	mov	r3, r1
 800116c:	2232      	movs	r2, #50	; 0x32
 800116e:	2107      	movs	r1, #7
 8001170:	2002      	movs	r0, #2
 8001172:	f005 f981 	bl	8006478 <WS2812SetDisplay>
	WS2812SetDisplay(DISPLY_SYSTEM_1, 8, 50, myR, myG, myB);
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <ApplicationInit+0xc0>)
 8001178:	7819      	ldrb	r1, [r3, #0]
 800117a:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <ApplicationInit+0xc4>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <ApplicationInit+0xc8>)
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	9201      	str	r2, [sp, #4]
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	460b      	mov	r3, r1
 8001188:	2232      	movs	r2, #50	; 0x32
 800118a:	2108      	movs	r1, #8
 800118c:	2002      	movs	r0, #2
 800118e:	f005 f973 	bl	8006478 <WS2812SetDisplay>
	WS2812ShowDisplay(DISPLY_SYSTEM_1, 100);
 8001192:	2164      	movs	r1, #100	; 0x64
 8001194:	2002      	movs	r0, #2
 8001196:	f005 fa2d 	bl	80065f4 <WS2812ShowDisplay>

	return;
 800119a:	bf00      	nop
}
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000286 	.word	0x20000286
 80011a4:	200001f8 	.word	0x200001f8
 80011a8:	200001fa 	.word	0x200001fa
 80011ac:	200002a0 	.word	0x200002a0
 80011b0:	200002a1 	.word	0x200002a1
 80011b4:	200002a2 	.word	0x200002a2

080011b8 <ApplicationMainLoop>:
//----------------------------------------------------------------------------------
void ApplicationMainLoop(void)	// loop function of the Application Module. Called from the main.c file @ main loop section
{
 80011b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af02      	add	r7, sp, #8
	// skip real time
	if(m_uiApplicationSkipRealTime)
 80011c0:	4b4d      	ldr	r3, [pc, #308]	; (80012f8 <ApplicationMainLoop+0x140>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d006      	beq.n	80011d6 <ApplicationMainLoop+0x1e>
	{
		m_uiApplicationSkipRealTime --;
 80011c8:	4b4b      	ldr	r3, [pc, #300]	; (80012f8 <ApplicationMainLoop+0x140>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	4b49      	ldr	r3, [pc, #292]	; (80012f8 <ApplicationMainLoop+0x140>)
 80011d2:	801a      	strh	r2, [r3, #0]
		return;
 80011d4:	e3ea      	b.n	80019ac <ApplicationMainLoop+0x7f4>
	}
	m_uiApplicationSkipRealTime = APPLICATION_SKIP_REAL_TIME;
 80011d6:	4b48      	ldr	r3, [pc, #288]	; (80012f8 <ApplicationMainLoop+0x140>)
 80011d8:	22c8      	movs	r2, #200	; 0xc8
 80011da:	801a      	strh	r2, [r3, #0]
	//--------------------------------------------------------

	if (run_timer == 0) {
 80011dc:	4b47      	ldr	r3, [pc, #284]	; (80012fc <ApplicationMainLoop+0x144>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f040 83e2 	bne.w	80019aa <ApplicationMainLoop+0x7f2>
		run_timer = RUN_TIMER_DEFAULT;
 80011e6:	4b45      	ldr	r3, [pc, #276]	; (80012fc <ApplicationMainLoop+0x144>)
 80011e8:	220a      	movs	r2, #10
 80011ea:	801a      	strh	r2, [r3, #0]

		if (m_NewCallbackReason != 0) {
 80011ec:	4b44      	ldr	r3, [pc, #272]	; (8001300 <ApplicationMainLoop+0x148>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 83da 	beq.w	80019aa <ApplicationMainLoop+0x7f2>
			m_NewCallbackReason = 0;
 80011f6:	4b42      	ldr	r3, [pc, #264]	; (8001300 <ApplicationMainLoop+0x148>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
			if (run_or_tumble == RUN) {
 80011fc:	4b41      	ldr	r3, [pc, #260]	; (8001304 <ApplicationMainLoop+0x14c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d108      	bne.n	8001216 <ApplicationMainLoop+0x5e>
				run_or_tumble = TUMBLE;
 8001204:	4b3f      	ldr	r3, [pc, #252]	; (8001304 <ApplicationMainLoop+0x14c>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]

				WheelRobotGoSpeedTmo(GOING_FORWARD, WHEEL_RUN_SPEED, 7);
 800120a:	2207      	movs	r2, #7
 800120c:	2132      	movs	r1, #50	; 0x32
 800120e:	2001      	movs	r0, #1
 8001210:	f006 faa6 	bl	8007760 <WheelRobotGoSpeedTmo>
				WS2812ShowDisplay(DISPLY_SYSTEM_1, 0);
			}
		}
	}

	return;
 8001214:	e3c9      	b.n	80019aa <ApplicationMainLoop+0x7f2>
				WS2812EmptyDisplay(DISPLY_SYSTEM_1);
 8001216:	2002      	movs	r0, #2
 8001218:	f005 fa14 	bl	8006644 <WS2812EmptyDisplay>
				WS2812SetDisplay(DISPLY_SYSTEM_1, 1, 10, 255, 255, 255);
 800121c:	23ff      	movs	r3, #255	; 0xff
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	23ff      	movs	r3, #255	; 0xff
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	23ff      	movs	r3, #255	; 0xff
 8001226:	220a      	movs	r2, #10
 8001228:	2101      	movs	r1, #1
 800122a:	2002      	movs	r0, #2
 800122c:	f005 f924 	bl	8006478 <WS2812SetDisplay>
				WS2812SetDisplay(DISPLY_SYSTEM_1, 2, 10, 255, 255, 255);
 8001230:	23ff      	movs	r3, #255	; 0xff
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	23ff      	movs	r3, #255	; 0xff
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	23ff      	movs	r3, #255	; 0xff
 800123a:	220a      	movs	r2, #10
 800123c:	2102      	movs	r1, #2
 800123e:	2002      	movs	r0, #2
 8001240:	f005 f91a 	bl	8006478 <WS2812SetDisplay>
				WS2812SetDisplay(DISPLY_SYSTEM_1, 7, 10, 255, 255, 255);
 8001244:	23ff      	movs	r3, #255	; 0xff
 8001246:	9301      	str	r3, [sp, #4]
 8001248:	23ff      	movs	r3, #255	; 0xff
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	23ff      	movs	r3, #255	; 0xff
 800124e:	220a      	movs	r2, #10
 8001250:	2107      	movs	r1, #7
 8001252:	2002      	movs	r0, #2
 8001254:	f005 f910 	bl	8006478 <WS2812SetDisplay>
				WS2812SetDisplay(DISPLY_SYSTEM_1, 8, 10, 255, 255, 255);
 8001258:	23ff      	movs	r3, #255	; 0xff
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	23ff      	movs	r3, #255	; 0xff
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	23ff      	movs	r3, #255	; 0xff
 8001262:	220a      	movs	r2, #10
 8001264:	2108      	movs	r1, #8
 8001266:	2002      	movs	r0, #2
 8001268:	f005 f906 	bl	8006478 <WS2812SetDisplay>
				IR0 = (m_NewInteractionResult.ucFinalDataFromOtherRobot[0] < IR_THRESHOLD) ? 0 : m_NewInteractionResult.ucFinalDataFromOtherRobot[0];
 800126c:	4b26      	ldr	r3, [pc, #152]	; (8001308 <ApplicationMainLoop+0x150>)
 800126e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001272:	2b13      	cmp	r3, #19
 8001274:	d903      	bls.n	800127e <ApplicationMainLoop+0xc6>
 8001276:	4b24      	ldr	r3, [pc, #144]	; (8001308 <ApplicationMainLoop+0x150>)
 8001278:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800127c:	e000      	b.n	8001280 <ApplicationMainLoop+0xc8>
 800127e:	2300      	movs	r3, #0
 8001280:	4a22      	ldr	r2, [pc, #136]	; (800130c <ApplicationMainLoop+0x154>)
 8001282:	7013      	strb	r3, [r2, #0]
				IR1 = (m_NewInteractionResult.ucFinalDataFromOtherRobot[1] < IR_THRESHOLD) ? 0 : m_NewInteractionResult.ucFinalDataFromOtherRobot[1];
 8001284:	4b20      	ldr	r3, [pc, #128]	; (8001308 <ApplicationMainLoop+0x150>)
 8001286:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800128a:	2b13      	cmp	r3, #19
 800128c:	d903      	bls.n	8001296 <ApplicationMainLoop+0xde>
 800128e:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <ApplicationMainLoop+0x150>)
 8001290:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001294:	e000      	b.n	8001298 <ApplicationMainLoop+0xe0>
 8001296:	2300      	movs	r3, #0
 8001298:	4a1d      	ldr	r2, [pc, #116]	; (8001310 <ApplicationMainLoop+0x158>)
 800129a:	7013      	strb	r3, [r2, #0]
				IR2 = (m_NewInteractionResult.ucFinalDataFromOtherRobot[2] < IR_THRESHOLD) ? 0 : m_NewInteractionResult.ucFinalDataFromOtherRobot[2];
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <ApplicationMainLoop+0x150>)
 800129e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80012a2:	2b13      	cmp	r3, #19
 80012a4:	d903      	bls.n	80012ae <ApplicationMainLoop+0xf6>
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <ApplicationMainLoop+0x150>)
 80012a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80012ac:	e000      	b.n	80012b0 <ApplicationMainLoop+0xf8>
 80012ae:	2300      	movs	r3, #0
 80012b0:	4a18      	ldr	r2, [pc, #96]	; (8001314 <ApplicationMainLoop+0x15c>)
 80012b2:	7013      	strb	r3, [r2, #0]
				IR3 = (m_NewInteractionResult.ucFinalDataFromOtherRobot[3] < IR_THRESHOLD) ? 0 : m_NewInteractionResult.ucFinalDataFromOtherRobot[3];
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <ApplicationMainLoop+0x150>)
 80012b6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80012ba:	2b13      	cmp	r3, #19
 80012bc:	d903      	bls.n	80012c6 <ApplicationMainLoop+0x10e>
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <ApplicationMainLoop+0x150>)
 80012c0:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80012c4:	e000      	b.n	80012c8 <ApplicationMainLoop+0x110>
 80012c6:	2300      	movs	r3, #0
 80012c8:	4a13      	ldr	r2, [pc, #76]	; (8001318 <ApplicationMainLoop+0x160>)
 80012ca:	7013      	strb	r3, [r2, #0]
				IR4 = (m_NewInteractionResult.ucFinalDataFromOtherRobot[4] < IR_THRESHOLD) ? 0 : m_NewInteractionResult.ucFinalDataFromOtherRobot[4];
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <ApplicationMainLoop+0x150>)
 80012ce:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80012d2:	2b13      	cmp	r3, #19
 80012d4:	d903      	bls.n	80012de <ApplicationMainLoop+0x126>
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <ApplicationMainLoop+0x150>)
 80012d8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80012dc:	e000      	b.n	80012e0 <ApplicationMainLoop+0x128>
 80012de:	2300      	movs	r3, #0
 80012e0:	4a0e      	ldr	r2, [pc, #56]	; (800131c <ApplicationMainLoop+0x164>)
 80012e2:	7013      	strb	r3, [r2, #0]
				IR5 = (m_NewInteractionResult.ucFinalDataFromOtherRobot[5] < IR_THRESHOLD) ? 0 : m_NewInteractionResult.ucFinalDataFromOtherRobot[5];
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <ApplicationMainLoop+0x150>)
 80012e6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80012ea:	2b13      	cmp	r3, #19
 80012ec:	d918      	bls.n	8001320 <ApplicationMainLoop+0x168>
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <ApplicationMainLoop+0x150>)
 80012f0:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80012f4:	e015      	b.n	8001322 <ApplicationMainLoop+0x16a>
 80012f6:	bf00      	nop
 80012f8:	200002a4 	.word	0x200002a4
 80012fc:	200001f8 	.word	0x200001f8
 8001300:	20000286 	.word	0x20000286
 8001304:	200001fa 	.word	0x200001fa
 8001308:	200001fc 	.word	0x200001fc
 800130c:	2000029a 	.word	0x2000029a
 8001310:	2000029b 	.word	0x2000029b
 8001314:	2000029c 	.word	0x2000029c
 8001318:	2000029d 	.word	0x2000029d
 800131c:	2000029e 	.word	0x2000029e
 8001320:	2300      	movs	r3, #0
 8001322:	4abd      	ldr	r2, [pc, #756]	; (8001618 <ApplicationMainLoop+0x460>)
 8001324:	7013      	strb	r3, [r2, #0]
				new_x = - IR0
 8001326:	4bbd      	ldr	r3, [pc, #756]	; (800161c <ApplicationMainLoop+0x464>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	425b      	negs	r3, r3
					- (0.5*IR1)
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f919 	bl	8000564 <__aeabi_i2d>
 8001332:	4680      	mov	r8, r0
 8001334:	4689      	mov	r9, r1
 8001336:	4bba      	ldr	r3, [pc, #744]	; (8001620 <ApplicationMainLoop+0x468>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f912 	bl	8000564 <__aeabi_i2d>
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	4bb7      	ldr	r3, [pc, #732]	; (8001624 <ApplicationMainLoop+0x46c>)
 8001346:	f7ff f977 	bl	8000638 <__aeabi_dmul>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4640      	mov	r0, r8
 8001350:	4649      	mov	r1, r9
 8001352:	f7fe ffb9 	bl	80002c8 <__aeabi_dsub>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4690      	mov	r8, r2
 800135c:	4699      	mov	r9, r3
					+ (0.5*IR2)
 800135e:	4bb2      	ldr	r3, [pc, #712]	; (8001628 <ApplicationMainLoop+0x470>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f8fe 	bl	8000564 <__aeabi_i2d>
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	4bad      	ldr	r3, [pc, #692]	; (8001624 <ApplicationMainLoop+0x46c>)
 800136e:	f7ff f963 	bl	8000638 <__aeabi_dmul>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4640      	mov	r0, r8
 8001378:	4649      	mov	r1, r9
 800137a:	f7fe ffa7 	bl	80002cc <__adddf3>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4690      	mov	r8, r2
 8001384:	4699      	mov	r9, r3
					+ IR3
 8001386:	4ba9      	ldr	r3, [pc, #676]	; (800162c <ApplicationMainLoop+0x474>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f8ea 	bl	8000564 <__aeabi_i2d>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4640      	mov	r0, r8
 8001396:	4649      	mov	r1, r9
 8001398:	f7fe ff98 	bl	80002cc <__adddf3>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4690      	mov	r8, r2
 80013a2:	4699      	mov	r9, r3
					+ (0.5*IR4)
 80013a4:	4ba2      	ldr	r3, [pc, #648]	; (8001630 <ApplicationMainLoop+0x478>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f8db 	bl	8000564 <__aeabi_i2d>
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	4b9c      	ldr	r3, [pc, #624]	; (8001624 <ApplicationMainLoop+0x46c>)
 80013b4:	f7ff f940 	bl	8000638 <__aeabi_dmul>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4640      	mov	r0, r8
 80013be:	4649      	mov	r1, r9
 80013c0:	f7fe ff84 	bl	80002cc <__adddf3>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4690      	mov	r8, r2
 80013ca:	4699      	mov	r9, r3
					- (0.5*IR5);
 80013cc:	4b92      	ldr	r3, [pc, #584]	; (8001618 <ApplicationMainLoop+0x460>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8c7 	bl	8000564 <__aeabi_i2d>
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	4b92      	ldr	r3, [pc, #584]	; (8001624 <ApplicationMainLoop+0x46c>)
 80013dc:	f7ff f92c 	bl	8000638 <__aeabi_dmul>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4640      	mov	r0, r8
 80013e6:	4649      	mov	r1, r9
 80013e8:	f7fe ff6e 	bl	80002c8 <__aeabi_dsub>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
				new_x = - IR0
 80013f0:	4990      	ldr	r1, [pc, #576]	; (8001634 <ApplicationMainLoop+0x47c>)
 80013f2:	e9c1 2300 	strd	r2, r3, [r1]
				new_y = - (0.866*IR1)
 80013f6:	4b8a      	ldr	r3, [pc, #552]	; (8001620 <ApplicationMainLoop+0x468>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f8b2 	bl	8000564 <__aeabi_i2d>
 8001400:	a381      	add	r3, pc, #516	; (adr r3, 8001608 <ApplicationMainLoop+0x450>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	f7ff f917 	bl	8000638 <__aeabi_dmul>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4614      	mov	r4, r2
 8001410:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
					- (0.866*IR2)
 8001414:	4b84      	ldr	r3, [pc, #528]	; (8001628 <ApplicationMainLoop+0x470>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f8a3 	bl	8000564 <__aeabi_i2d>
 800141e:	a37a      	add	r3, pc, #488	; (adr r3, 8001608 <ApplicationMainLoop+0x450>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff f908 	bl	8000638 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4620      	mov	r0, r4
 800142e:	4629      	mov	r1, r5
 8001430:	f7fe ff4a 	bl	80002c8 <__aeabi_dsub>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4614      	mov	r4, r2
 800143a:	461d      	mov	r5, r3
					+ (0.866*IR4)
 800143c:	4b7c      	ldr	r3, [pc, #496]	; (8001630 <ApplicationMainLoop+0x478>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f88f 	bl	8000564 <__aeabi_i2d>
 8001446:	a370      	add	r3, pc, #448	; (adr r3, 8001608 <ApplicationMainLoop+0x450>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f7ff f8f4 	bl	8000638 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4620      	mov	r0, r4
 8001456:	4629      	mov	r1, r5
 8001458:	f7fe ff38 	bl	80002cc <__adddf3>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4614      	mov	r4, r2
 8001462:	461d      	mov	r5, r3
					+ (0.866*IR5);
 8001464:	4b6c      	ldr	r3, [pc, #432]	; (8001618 <ApplicationMainLoop+0x460>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f87b 	bl	8000564 <__aeabi_i2d>
 800146e:	a366      	add	r3, pc, #408	; (adr r3, 8001608 <ApplicationMainLoop+0x450>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	f7ff f8e0 	bl	8000638 <__aeabi_dmul>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4620      	mov	r0, r4
 800147e:	4629      	mov	r1, r5
 8001480:	f7fe ff24 	bl	80002cc <__adddf3>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
				new_y = - (0.866*IR1)
 8001488:	496b      	ldr	r1, [pc, #428]	; (8001638 <ApplicationMainLoop+0x480>)
 800148a:	e9c1 2300 	strd	r2, r3, [r1]
				calculated_angle = atan2(new_y, new_x) * 180 / 3.14159;
 800148e:	4b6a      	ldr	r3, [pc, #424]	; (8001638 <ApplicationMainLoop+0x480>)
 8001490:	ed93 7b00 	vldr	d7, [r3]
 8001494:	4b67      	ldr	r3, [pc, #412]	; (8001634 <ApplicationMainLoop+0x47c>)
 8001496:	ed93 6b00 	vldr	d6, [r3]
 800149a:	eeb0 1a46 	vmov.f32	s2, s12
 800149e:	eef0 1a66 	vmov.f32	s3, s13
 80014a2:	eeb0 0a47 	vmov.f32	s0, s14
 80014a6:	eef0 0a67 	vmov.f32	s1, s15
 80014aa:	f013 ff4b 	bl	8015344 <atan2>
 80014ae:	ec51 0b10 	vmov	r0, r1, d0
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	4b61      	ldr	r3, [pc, #388]	; (800163c <ApplicationMainLoop+0x484>)
 80014b8:	f7ff f8be 	bl	8000638 <__aeabi_dmul>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	a352      	add	r3, pc, #328	; (adr r3, 8001610 <ApplicationMainLoop+0x458>)
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	f7ff f9df 	bl	800088c <__aeabi_ddiv>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	f7ff fb5f 	bl	8000b98 <__aeabi_d2iz>
 80014da:	4603      	mov	r3, r0
 80014dc:	b21a      	sxth	r2, r3
 80014de:	4b58      	ldr	r3, [pc, #352]	; (8001640 <ApplicationMainLoop+0x488>)
 80014e0:	801a      	strh	r2, [r3, #0]
				uiDisplayChannel = 0;
 80014e2:	4b58      	ldr	r3, [pc, #352]	; (8001644 <ApplicationMainLoop+0x48c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
				if( (m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel] != 0) ) { // there is signal detected from another robot => RED=0 and display GREEN / BLUE
 80014e8:	4b56      	ldr	r3, [pc, #344]	; (8001644 <ApplicationMainLoop+0x48c>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b56      	ldr	r3, [pc, #344]	; (8001648 <ApplicationMainLoop+0x490>)
 80014f0:	4413      	add	r3, r2
 80014f2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d04c      	beq.n	8001594 <ApplicationMainLoop+0x3dc>
					if( (m_NewIDResult.ucDetectedRobotID[uiDisplayChannel] == 0) ) { // robot is too far away => GREEN
 80014fa:	4b52      	ldr	r3, [pc, #328]	; (8001644 <ApplicationMainLoop+0x48c>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	4b52      	ldr	r3, [pc, #328]	; (800164c <ApplicationMainLoop+0x494>)
 8001502:	4413      	add	r3, r2
 8001504:	799b      	ldrb	r3, [r3, #6]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d122      	bne.n	8001550 <ApplicationMainLoop+0x398>
						WS2812SetDisplay(DISPLY_SYSTEM_1, 1, ucWS2812Intensity, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel], 0);
 800150a:	4b51      	ldr	r3, [pc, #324]	; (8001650 <ApplicationMainLoop+0x498>)
 800150c:	781a      	ldrb	r2, [r3, #0]
 800150e:	4b4d      	ldr	r3, [pc, #308]	; (8001644 <ApplicationMainLoop+0x48c>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	4619      	mov	r1, r3
 8001514:	4b4c      	ldr	r3, [pc, #304]	; (8001648 <ApplicationMainLoop+0x490>)
 8001516:	440b      	add	r3, r1
 8001518:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800151c:	2100      	movs	r1, #0
 800151e:	9101      	str	r1, [sp, #4]
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	2300      	movs	r3, #0
 8001524:	2101      	movs	r1, #1
 8001526:	2002      	movs	r0, #2
 8001528:	f004 ffa6 	bl	8006478 <WS2812SetDisplay>
						WS2812SetDisplay(DISPLY_SYSTEM_1, 2, ucWS2812Intensity, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel], 0);
 800152c:	4b48      	ldr	r3, [pc, #288]	; (8001650 <ApplicationMainLoop+0x498>)
 800152e:	781a      	ldrb	r2, [r3, #0]
 8001530:	4b44      	ldr	r3, [pc, #272]	; (8001644 <ApplicationMainLoop+0x48c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	4b44      	ldr	r3, [pc, #272]	; (8001648 <ApplicationMainLoop+0x490>)
 8001538:	440b      	add	r3, r1
 800153a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800153e:	2100      	movs	r1, #0
 8001540:	9101      	str	r1, [sp, #4]
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2300      	movs	r3, #0
 8001546:	2102      	movs	r1, #2
 8001548:	2002      	movs	r0, #2
 800154a:	f004 ff95 	bl	8006478 <WS2812SetDisplay>
 800154e:	e021      	b.n	8001594 <ApplicationMainLoop+0x3dc>
						WS2812SetDisplay(DISPLY_SYSTEM_1, 1, ucWS2812Intensity, 0, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel]);
 8001550:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <ApplicationMainLoop+0x498>)
 8001552:	781a      	ldrb	r2, [r3, #0]
 8001554:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <ApplicationMainLoop+0x48c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	4b3b      	ldr	r3, [pc, #236]	; (8001648 <ApplicationMainLoop+0x490>)
 800155c:	440b      	add	r3, r1
 800155e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	2300      	movs	r3, #0
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2300      	movs	r3, #0
 800156a:	2101      	movs	r1, #1
 800156c:	2002      	movs	r0, #2
 800156e:	f004 ff83 	bl	8006478 <WS2812SetDisplay>
						WS2812SetDisplay(DISPLY_SYSTEM_1, 2, ucWS2812Intensity, 0, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel]);
 8001572:	4b37      	ldr	r3, [pc, #220]	; (8001650 <ApplicationMainLoop+0x498>)
 8001574:	781a      	ldrb	r2, [r3, #0]
 8001576:	4b33      	ldr	r3, [pc, #204]	; (8001644 <ApplicationMainLoop+0x48c>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	4619      	mov	r1, r3
 800157c:	4b32      	ldr	r3, [pc, #200]	; (8001648 <ApplicationMainLoop+0x490>)
 800157e:	440b      	add	r3, r1
 8001580:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001584:	9301      	str	r3, [sp, #4]
 8001586:	2300      	movs	r3, #0
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2300      	movs	r3, #0
 800158c:	2102      	movs	r1, #2
 800158e:	2002      	movs	r0, #2
 8001590:	f004 ff72 	bl	8006478 <WS2812SetDisplay>
				uiDisplayChannel = 1;
 8001594:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <ApplicationMainLoop+0x48c>)
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
				if( (m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel] != 0) ) { // there is signal detected from another robot => RED=0 and display GREEN / BLUE
 800159a:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <ApplicationMainLoop+0x48c>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	4b29      	ldr	r3, [pc, #164]	; (8001648 <ApplicationMainLoop+0x490>)
 80015a2:	4413      	add	r3, r2
 80015a4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d075      	beq.n	8001698 <ApplicationMainLoop+0x4e0>
					if( (m_NewIDResult.ucDetectedRobotID[uiDisplayChannel] == 0) ) { // robot is too far away => GREEN
 80015ac:	4b25      	ldr	r3, [pc, #148]	; (8001644 <ApplicationMainLoop+0x48c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b26      	ldr	r3, [pc, #152]	; (800164c <ApplicationMainLoop+0x494>)
 80015b4:	4413      	add	r3, r2
 80015b6:	799b      	ldrb	r3, [r3, #6]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d14b      	bne.n	8001654 <ApplicationMainLoop+0x49c>
						WS2812SetDisplay(DISPLY_SYSTEM_1, 3, ucWS2812Intensity, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel], 0);
 80015bc:	4b24      	ldr	r3, [pc, #144]	; (8001650 <ApplicationMainLoop+0x498>)
 80015be:	781a      	ldrb	r2, [r3, #0]
 80015c0:	4b20      	ldr	r3, [pc, #128]	; (8001644 <ApplicationMainLoop+0x48c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	4b20      	ldr	r3, [pc, #128]	; (8001648 <ApplicationMainLoop+0x490>)
 80015c8:	440b      	add	r3, r1
 80015ca:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80015ce:	2100      	movs	r1, #0
 80015d0:	9101      	str	r1, [sp, #4]
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2300      	movs	r3, #0
 80015d6:	2103      	movs	r1, #3
 80015d8:	2002      	movs	r0, #2
 80015da:	f004 ff4d 	bl	8006478 <WS2812SetDisplay>
						WS2812SetDisplay(DISPLY_SYSTEM_1, 4, ucWS2812Intensity, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel], 0);
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <ApplicationMainLoop+0x498>)
 80015e0:	781a      	ldrb	r2, [r3, #0]
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <ApplicationMainLoop+0x48c>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	4619      	mov	r1, r3
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <ApplicationMainLoop+0x490>)
 80015ea:	440b      	add	r3, r1
 80015ec:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80015f0:	2100      	movs	r1, #0
 80015f2:	9101      	str	r1, [sp, #4]
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2300      	movs	r3, #0
 80015f8:	2104      	movs	r1, #4
 80015fa:	2002      	movs	r0, #2
 80015fc:	f004 ff3c 	bl	8006478 <WS2812SetDisplay>
 8001600:	e04a      	b.n	8001698 <ApplicationMainLoop+0x4e0>
 8001602:	bf00      	nop
 8001604:	f3af 8000 	nop.w
 8001608:	a1cac083 	.word	0xa1cac083
 800160c:	3febb645 	.word	0x3febb645
 8001610:	f01b866e 	.word	0xf01b866e
 8001614:	400921f9 	.word	0x400921f9
 8001618:	2000029f 	.word	0x2000029f
 800161c:	2000029a 	.word	0x2000029a
 8001620:	2000029b 	.word	0x2000029b
 8001624:	3fe00000 	.word	0x3fe00000
 8001628:	2000029c 	.word	0x2000029c
 800162c:	2000029d 	.word	0x2000029d
 8001630:	2000029e 	.word	0x2000029e
 8001634:	20000288 	.word	0x20000288
 8001638:	20000290 	.word	0x20000290
 800163c:	40668000 	.word	0x40668000
 8001640:	20000298 	.word	0x20000298
 8001644:	200001fb 	.word	0x200001fb
 8001648:	200001fc 	.word	0x200001fc
 800164c:	20000274 	.word	0x20000274
 8001650:	20000000 	.word	0x20000000
						WS2812SetDisplay(DISPLY_SYSTEM_1, 3, ucWS2812Intensity, 0, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel]);
 8001654:	4b85      	ldr	r3, [pc, #532]	; (800186c <ApplicationMainLoop+0x6b4>)
 8001656:	781a      	ldrb	r2, [r3, #0]
 8001658:	4b85      	ldr	r3, [pc, #532]	; (8001870 <ApplicationMainLoop+0x6b8>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	4b85      	ldr	r3, [pc, #532]	; (8001874 <ApplicationMainLoop+0x6bc>)
 8001660:	440b      	add	r3, r1
 8001662:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	2300      	movs	r3, #0
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2300      	movs	r3, #0
 800166e:	2103      	movs	r1, #3
 8001670:	2002      	movs	r0, #2
 8001672:	f004 ff01 	bl	8006478 <WS2812SetDisplay>
						WS2812SetDisplay(DISPLY_SYSTEM_1, 4, ucWS2812Intensity, 0, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel]);
 8001676:	4b7d      	ldr	r3, [pc, #500]	; (800186c <ApplicationMainLoop+0x6b4>)
 8001678:	781a      	ldrb	r2, [r3, #0]
 800167a:	4b7d      	ldr	r3, [pc, #500]	; (8001870 <ApplicationMainLoop+0x6b8>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	4619      	mov	r1, r3
 8001680:	4b7c      	ldr	r3, [pc, #496]	; (8001874 <ApplicationMainLoop+0x6bc>)
 8001682:	440b      	add	r3, r1
 8001684:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	2300      	movs	r3, #0
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	2300      	movs	r3, #0
 8001690:	2104      	movs	r1, #4
 8001692:	2002      	movs	r0, #2
 8001694:	f004 fef0 	bl	8006478 <WS2812SetDisplay>
				uiDisplayChannel = 2;
 8001698:	4b75      	ldr	r3, [pc, #468]	; (8001870 <ApplicationMainLoop+0x6b8>)
 800169a:	2202      	movs	r2, #2
 800169c:	701a      	strb	r2, [r3, #0]
				if( (m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel] != 0) ) { // there is signal detected from another robot => RED=0 and display GREEN / BLUE
 800169e:	4b74      	ldr	r3, [pc, #464]	; (8001870 <ApplicationMainLoop+0x6b8>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b73      	ldr	r3, [pc, #460]	; (8001874 <ApplicationMainLoop+0x6bc>)
 80016a6:	4413      	add	r3, r2
 80016a8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d04c      	beq.n	800174a <ApplicationMainLoop+0x592>
					if( (m_NewIDResult.ucDetectedRobotID[uiDisplayChannel] == 0) ) { // robot is too far away => GREEN
 80016b0:	4b6f      	ldr	r3, [pc, #444]	; (8001870 <ApplicationMainLoop+0x6b8>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b70      	ldr	r3, [pc, #448]	; (8001878 <ApplicationMainLoop+0x6c0>)
 80016b8:	4413      	add	r3, r2
 80016ba:	799b      	ldrb	r3, [r3, #6]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d122      	bne.n	8001706 <ApplicationMainLoop+0x54e>
						WS2812SetDisplay(DISPLY_SYSTEM_1, 5, ucWS2812Intensity, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel], 0);
 80016c0:	4b6a      	ldr	r3, [pc, #424]	; (800186c <ApplicationMainLoop+0x6b4>)
 80016c2:	781a      	ldrb	r2, [r3, #0]
 80016c4:	4b6a      	ldr	r3, [pc, #424]	; (8001870 <ApplicationMainLoop+0x6b8>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	4b6a      	ldr	r3, [pc, #424]	; (8001874 <ApplicationMainLoop+0x6bc>)
 80016cc:	440b      	add	r3, r1
 80016ce:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016d2:	2100      	movs	r1, #0
 80016d4:	9101      	str	r1, [sp, #4]
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	2300      	movs	r3, #0
 80016da:	2105      	movs	r1, #5
 80016dc:	2002      	movs	r0, #2
 80016de:	f004 fecb 	bl	8006478 <WS2812SetDisplay>
						WS2812SetDisplay(DISPLY_SYSTEM_1, 6, ucWS2812Intensity, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel], 0);
 80016e2:	4b62      	ldr	r3, [pc, #392]	; (800186c <ApplicationMainLoop+0x6b4>)
 80016e4:	781a      	ldrb	r2, [r3, #0]
 80016e6:	4b62      	ldr	r3, [pc, #392]	; (8001870 <ApplicationMainLoop+0x6b8>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	4619      	mov	r1, r3
 80016ec:	4b61      	ldr	r3, [pc, #388]	; (8001874 <ApplicationMainLoop+0x6bc>)
 80016ee:	440b      	add	r3, r1
 80016f0:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016f4:	2100      	movs	r1, #0
 80016f6:	9101      	str	r1, [sp, #4]
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2300      	movs	r3, #0
 80016fc:	2106      	movs	r1, #6
 80016fe:	2002      	movs	r0, #2
 8001700:	f004 feba 	bl	8006478 <WS2812SetDisplay>
 8001704:	e021      	b.n	800174a <ApplicationMainLoop+0x592>
						WS2812SetDisplay(DISPLY_SYSTEM_1, 5, ucWS2812Intensity, 0, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel]);
 8001706:	4b59      	ldr	r3, [pc, #356]	; (800186c <ApplicationMainLoop+0x6b4>)
 8001708:	781a      	ldrb	r2, [r3, #0]
 800170a:	4b59      	ldr	r3, [pc, #356]	; (8001870 <ApplicationMainLoop+0x6b8>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	4619      	mov	r1, r3
 8001710:	4b58      	ldr	r3, [pc, #352]	; (8001874 <ApplicationMainLoop+0x6bc>)
 8001712:	440b      	add	r3, r1
 8001714:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	2300      	movs	r3, #0
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2300      	movs	r3, #0
 8001720:	2105      	movs	r1, #5
 8001722:	2002      	movs	r0, #2
 8001724:	f004 fea8 	bl	8006478 <WS2812SetDisplay>
						WS2812SetDisplay(DISPLY_SYSTEM_1, 6, ucWS2812Intensity, 0, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel]);
 8001728:	4b50      	ldr	r3, [pc, #320]	; (800186c <ApplicationMainLoop+0x6b4>)
 800172a:	781a      	ldrb	r2, [r3, #0]
 800172c:	4b50      	ldr	r3, [pc, #320]	; (8001870 <ApplicationMainLoop+0x6b8>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
 8001732:	4b50      	ldr	r3, [pc, #320]	; (8001874 <ApplicationMainLoop+0x6bc>)
 8001734:	440b      	add	r3, r1
 8001736:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800173a:	9301      	str	r3, [sp, #4]
 800173c:	2300      	movs	r3, #0
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	2300      	movs	r3, #0
 8001742:	2106      	movs	r1, #6
 8001744:	2002      	movs	r0, #2
 8001746:	f004 fe97 	bl	8006478 <WS2812SetDisplay>
				uiDisplayChannel = 3;
 800174a:	4b49      	ldr	r3, [pc, #292]	; (8001870 <ApplicationMainLoop+0x6b8>)
 800174c:	2203      	movs	r2, #3
 800174e:	701a      	strb	r2, [r3, #0]
				if( (m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel] != 0) ) { // there is signal detected from another robot => RED=0 and display GREEN / BLUE
 8001750:	4b47      	ldr	r3, [pc, #284]	; (8001870 <ApplicationMainLoop+0x6b8>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b47      	ldr	r3, [pc, #284]	; (8001874 <ApplicationMainLoop+0x6bc>)
 8001758:	4413      	add	r3, r2
 800175a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800175e:	2b00      	cmp	r3, #0
 8001760:	d04c      	beq.n	80017fc <ApplicationMainLoop+0x644>
					if( (m_NewIDResult.ucDetectedRobotID[uiDisplayChannel] == 0) ) { // robot is too far away => GREEN
 8001762:	4b43      	ldr	r3, [pc, #268]	; (8001870 <ApplicationMainLoop+0x6b8>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	4b43      	ldr	r3, [pc, #268]	; (8001878 <ApplicationMainLoop+0x6c0>)
 800176a:	4413      	add	r3, r2
 800176c:	799b      	ldrb	r3, [r3, #6]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d122      	bne.n	80017b8 <ApplicationMainLoop+0x600>
						WS2812SetDisplay(DISPLY_SYSTEM_1, 7, ucWS2812Intensity, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel], 0);
 8001772:	4b3e      	ldr	r3, [pc, #248]	; (800186c <ApplicationMainLoop+0x6b4>)
 8001774:	781a      	ldrb	r2, [r3, #0]
 8001776:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <ApplicationMainLoop+0x6b8>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	4619      	mov	r1, r3
 800177c:	4b3d      	ldr	r3, [pc, #244]	; (8001874 <ApplicationMainLoop+0x6bc>)
 800177e:	440b      	add	r3, r1
 8001780:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001784:	2100      	movs	r1, #0
 8001786:	9101      	str	r1, [sp, #4]
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2300      	movs	r3, #0
 800178c:	2107      	movs	r1, #7
 800178e:	2002      	movs	r0, #2
 8001790:	f004 fe72 	bl	8006478 <WS2812SetDisplay>
						WS2812SetDisplay(DISPLY_SYSTEM_1, 8, ucWS2812Intensity, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel], 0);
 8001794:	4b35      	ldr	r3, [pc, #212]	; (800186c <ApplicationMainLoop+0x6b4>)
 8001796:	781a      	ldrb	r2, [r3, #0]
 8001798:	4b35      	ldr	r3, [pc, #212]	; (8001870 <ApplicationMainLoop+0x6b8>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	4b35      	ldr	r3, [pc, #212]	; (8001874 <ApplicationMainLoop+0x6bc>)
 80017a0:	440b      	add	r3, r1
 80017a2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80017a6:	2100      	movs	r1, #0
 80017a8:	9101      	str	r1, [sp, #4]
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2300      	movs	r3, #0
 80017ae:	2108      	movs	r1, #8
 80017b0:	2002      	movs	r0, #2
 80017b2:	f004 fe61 	bl	8006478 <WS2812SetDisplay>
 80017b6:	e021      	b.n	80017fc <ApplicationMainLoop+0x644>
						WS2812SetDisplay(DISPLY_SYSTEM_1, 7, ucWS2812Intensity, 0, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel]);
 80017b8:	4b2c      	ldr	r3, [pc, #176]	; (800186c <ApplicationMainLoop+0x6b4>)
 80017ba:	781a      	ldrb	r2, [r3, #0]
 80017bc:	4b2c      	ldr	r3, [pc, #176]	; (8001870 <ApplicationMainLoop+0x6b8>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	4b2c      	ldr	r3, [pc, #176]	; (8001874 <ApplicationMainLoop+0x6bc>)
 80017c4:	440b      	add	r3, r1
 80017c6:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80017ca:	9301      	str	r3, [sp, #4]
 80017cc:	2300      	movs	r3, #0
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	2300      	movs	r3, #0
 80017d2:	2107      	movs	r1, #7
 80017d4:	2002      	movs	r0, #2
 80017d6:	f004 fe4f 	bl	8006478 <WS2812SetDisplay>
						WS2812SetDisplay(DISPLY_SYSTEM_1, 8, ucWS2812Intensity, 0, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel]);
 80017da:	4b24      	ldr	r3, [pc, #144]	; (800186c <ApplicationMainLoop+0x6b4>)
 80017dc:	781a      	ldrb	r2, [r3, #0]
 80017de:	4b24      	ldr	r3, [pc, #144]	; (8001870 <ApplicationMainLoop+0x6b8>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	4619      	mov	r1, r3
 80017e4:	4b23      	ldr	r3, [pc, #140]	; (8001874 <ApplicationMainLoop+0x6bc>)
 80017e6:	440b      	add	r3, r1
 80017e8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	2300      	movs	r3, #0
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	2300      	movs	r3, #0
 80017f4:	2108      	movs	r1, #8
 80017f6:	2002      	movs	r0, #2
 80017f8:	f004 fe3e 	bl	8006478 <WS2812SetDisplay>
				uiDisplayChannel = 4;
 80017fc:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <ApplicationMainLoop+0x6b8>)
 80017fe:	2204      	movs	r2, #4
 8001800:	701a      	strb	r2, [r3, #0]
				if( (m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel] != 0) ) { // there is signal detected from another robot => RED=0 and display GREEN / BLUE
 8001802:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <ApplicationMainLoop+0x6b8>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <ApplicationMainLoop+0x6bc>)
 800180a:	4413      	add	r3, r2
 800180c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001810:	2b00      	cmp	r3, #0
 8001812:	d055      	beq.n	80018c0 <ApplicationMainLoop+0x708>
					if( (m_NewIDResult.ucDetectedRobotID[uiDisplayChannel] == 0) ) { // robot is too far away => GREEN
 8001814:	4b16      	ldr	r3, [pc, #88]	; (8001870 <ApplicationMainLoop+0x6b8>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4b17      	ldr	r3, [pc, #92]	; (8001878 <ApplicationMainLoop+0x6c0>)
 800181c:	4413      	add	r3, r2
 800181e:	799b      	ldrb	r3, [r3, #6]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d12b      	bne.n	800187c <ApplicationMainLoop+0x6c4>
						WS2812SetDisplay(DISPLY_SYSTEM_1, 9, ucWS2812Intensity, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel], 0);
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <ApplicationMainLoop+0x6b4>)
 8001826:	781a      	ldrb	r2, [r3, #0]
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <ApplicationMainLoop+0x6b8>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <ApplicationMainLoop+0x6bc>)
 8001830:	440b      	add	r3, r1
 8001832:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001836:	2100      	movs	r1, #0
 8001838:	9101      	str	r1, [sp, #4]
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2300      	movs	r3, #0
 800183e:	2109      	movs	r1, #9
 8001840:	2002      	movs	r0, #2
 8001842:	f004 fe19 	bl	8006478 <WS2812SetDisplay>
						WS2812SetDisplay(DISPLY_SYSTEM_1, 10, ucWS2812Intensity, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel], 0);
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <ApplicationMainLoop+0x6b4>)
 8001848:	781a      	ldrb	r2, [r3, #0]
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <ApplicationMainLoop+0x6b8>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	4619      	mov	r1, r3
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <ApplicationMainLoop+0x6bc>)
 8001852:	440b      	add	r3, r1
 8001854:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001858:	2100      	movs	r1, #0
 800185a:	9101      	str	r1, [sp, #4]
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2300      	movs	r3, #0
 8001860:	210a      	movs	r1, #10
 8001862:	2002      	movs	r0, #2
 8001864:	f004 fe08 	bl	8006478 <WS2812SetDisplay>
 8001868:	e02a      	b.n	80018c0 <ApplicationMainLoop+0x708>
 800186a:	bf00      	nop
 800186c:	20000000 	.word	0x20000000
 8001870:	200001fb 	.word	0x200001fb
 8001874:	200001fc 	.word	0x200001fc
 8001878:	20000274 	.word	0x20000274
						WS2812SetDisplay(DISPLY_SYSTEM_1, 9, ucWS2812Intensity, 0, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel]);
 800187c:	4b4d      	ldr	r3, [pc, #308]	; (80019b4 <ApplicationMainLoop+0x7fc>)
 800187e:	781a      	ldrb	r2, [r3, #0]
 8001880:	4b4d      	ldr	r3, [pc, #308]	; (80019b8 <ApplicationMainLoop+0x800>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	4b4d      	ldr	r3, [pc, #308]	; (80019bc <ApplicationMainLoop+0x804>)
 8001888:	440b      	add	r3, r1
 800188a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	2300      	movs	r3, #0
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2300      	movs	r3, #0
 8001896:	2109      	movs	r1, #9
 8001898:	2002      	movs	r0, #2
 800189a:	f004 fded 	bl	8006478 <WS2812SetDisplay>
						WS2812SetDisplay(DISPLY_SYSTEM_1, 10, ucWS2812Intensity, 0, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel]);
 800189e:	4b45      	ldr	r3, [pc, #276]	; (80019b4 <ApplicationMainLoop+0x7fc>)
 80018a0:	781a      	ldrb	r2, [r3, #0]
 80018a2:	4b45      	ldr	r3, [pc, #276]	; (80019b8 <ApplicationMainLoop+0x800>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	4619      	mov	r1, r3
 80018a8:	4b44      	ldr	r3, [pc, #272]	; (80019bc <ApplicationMainLoop+0x804>)
 80018aa:	440b      	add	r3, r1
 80018ac:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80018b0:	9301      	str	r3, [sp, #4]
 80018b2:	2300      	movs	r3, #0
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2300      	movs	r3, #0
 80018b8:	210a      	movs	r1, #10
 80018ba:	2002      	movs	r0, #2
 80018bc:	f004 fddc 	bl	8006478 <WS2812SetDisplay>
				uiDisplayChannel = 5;
 80018c0:	4b3d      	ldr	r3, [pc, #244]	; (80019b8 <ApplicationMainLoop+0x800>)
 80018c2:	2205      	movs	r2, #5
 80018c4:	701a      	strb	r2, [r3, #0]
				if( (m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel] != 0) ) { // there is signal detected from another robot => RED=0 and display GREEN / BLUE
 80018c6:	4b3c      	ldr	r3, [pc, #240]	; (80019b8 <ApplicationMainLoop+0x800>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <ApplicationMainLoop+0x804>)
 80018ce:	4413      	add	r3, r2
 80018d0:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d04c      	beq.n	8001972 <ApplicationMainLoop+0x7ba>
					if( (m_NewIDResult.ucDetectedRobotID[uiDisplayChannel] == 0) ) { // robot is too far away => GREEN
 80018d8:	4b37      	ldr	r3, [pc, #220]	; (80019b8 <ApplicationMainLoop+0x800>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <ApplicationMainLoop+0x808>)
 80018e0:	4413      	add	r3, r2
 80018e2:	799b      	ldrb	r3, [r3, #6]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d122      	bne.n	800192e <ApplicationMainLoop+0x776>
						WS2812SetDisplay(DISPLY_SYSTEM_1, 11, ucWS2812Intensity, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel], 0);
 80018e8:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <ApplicationMainLoop+0x7fc>)
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <ApplicationMainLoop+0x800>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4619      	mov	r1, r3
 80018f2:	4b32      	ldr	r3, [pc, #200]	; (80019bc <ApplicationMainLoop+0x804>)
 80018f4:	440b      	add	r3, r1
 80018f6:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80018fa:	2100      	movs	r1, #0
 80018fc:	9101      	str	r1, [sp, #4]
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2300      	movs	r3, #0
 8001902:	210b      	movs	r1, #11
 8001904:	2002      	movs	r0, #2
 8001906:	f004 fdb7 	bl	8006478 <WS2812SetDisplay>
						WS2812SetDisplay(DISPLY_SYSTEM_1, 12, ucWS2812Intensity, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel], 0);
 800190a:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <ApplicationMainLoop+0x7fc>)
 800190c:	781a      	ldrb	r2, [r3, #0]
 800190e:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <ApplicationMainLoop+0x800>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	4619      	mov	r1, r3
 8001914:	4b29      	ldr	r3, [pc, #164]	; (80019bc <ApplicationMainLoop+0x804>)
 8001916:	440b      	add	r3, r1
 8001918:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800191c:	2100      	movs	r1, #0
 800191e:	9101      	str	r1, [sp, #4]
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2300      	movs	r3, #0
 8001924:	210c      	movs	r1, #12
 8001926:	2002      	movs	r0, #2
 8001928:	f004 fda6 	bl	8006478 <WS2812SetDisplay>
 800192c:	e021      	b.n	8001972 <ApplicationMainLoop+0x7ba>
						WS2812SetDisplay(DISPLY_SYSTEM_1, 11, ucWS2812Intensity, 0, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel]);
 800192e:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <ApplicationMainLoop+0x7fc>)
 8001930:	781a      	ldrb	r2, [r3, #0]
 8001932:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <ApplicationMainLoop+0x800>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	4619      	mov	r1, r3
 8001938:	4b20      	ldr	r3, [pc, #128]	; (80019bc <ApplicationMainLoop+0x804>)
 800193a:	440b      	add	r3, r1
 800193c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	2300      	movs	r3, #0
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2300      	movs	r3, #0
 8001948:	210b      	movs	r1, #11
 800194a:	2002      	movs	r0, #2
 800194c:	f004 fd94 	bl	8006478 <WS2812SetDisplay>
						WS2812SetDisplay(DISPLY_SYSTEM_1, 12, ucWS2812Intensity, 0, 0, m_NewInteractionResult.ucFinalDataFromOtherRobot[uiDisplayChannel]);
 8001950:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <ApplicationMainLoop+0x7fc>)
 8001952:	781a      	ldrb	r2, [r3, #0]
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <ApplicationMainLoop+0x800>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	4b18      	ldr	r3, [pc, #96]	; (80019bc <ApplicationMainLoop+0x804>)
 800195c:	440b      	add	r3, r1
 800195e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001962:	9301      	str	r3, [sp, #4]
 8001964:	2300      	movs	r3, #0
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	2300      	movs	r3, #0
 800196a:	210c      	movs	r1, #12
 800196c:	2002      	movs	r0, #2
 800196e:	f004 fd83 	bl	8006478 <WS2812SetDisplay>
				if ( (calculated_angle >-9) && (calculated_angle < 9) ) { // minimum angle is -9 or 9
 8001972:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <ApplicationMainLoop+0x80c>)
 8001974:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001978:	f113 0f08 	cmn.w	r3, #8
 800197c:	db0a      	blt.n	8001994 <ApplicationMainLoop+0x7dc>
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <ApplicationMainLoop+0x80c>)
 8001980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001984:	2b08      	cmp	r3, #8
 8001986:	dc05      	bgt.n	8001994 <ApplicationMainLoop+0x7dc>
					WheelRobotGoSpeedTmo(GOING_FORWARD, WHEEL_RUN_SPEED, 1);
 8001988:	2201      	movs	r2, #1
 800198a:	2132      	movs	r1, #50	; 0x32
 800198c:	2001      	movs	r0, #1
 800198e:	f005 fee7 	bl	8007760 <WheelRobotGoSpeedTmo>
 8001992:	e006      	b.n	80019a2 <ApplicationMainLoop+0x7ea>
					WheelRobotRotateTmo(calculated_angle, 15);
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <ApplicationMainLoop+0x80c>)
 8001996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199a:	210f      	movs	r1, #15
 800199c:	4618      	mov	r0, r3
 800199e:	f005 ff1d 	bl	80077dc <WheelRobotRotateTmo>
				WS2812ShowDisplay(DISPLY_SYSTEM_1, 0);
 80019a2:	2100      	movs	r1, #0
 80019a4:	2002      	movs	r0, #2
 80019a6:	f004 fe25 	bl	80065f4 <WS2812ShowDisplay>
	return;
 80019aa:	bf00      	nop
}
 80019ac:	46bd      	mov	sp, r7
 80019ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019b2:	bf00      	nop
 80019b4:	20000000 	.word	0x20000000
 80019b8:	200001fb 	.word	0x200001fb
 80019bc:	200001fc 	.word	0x200001fc
 80019c0:	20000274 	.word	0x20000274
 80019c4:	20000298 	.word	0x20000298

080019c8 <ApplicationTimer1KHZISR>:
//----------------------------------------------------------------------------------
void ApplicationTimer1KHZISR(void)	// 1KHZ timer function called from System ISR from stm32f4xx_it.c file @ SysTick Function (!!! keep as short as possible !!!)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
	run_timer--;
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <ApplicationTimer1KHZISR+0x1c>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <ApplicationTimer1KHZISR+0x1c>)
 80019d6:	801a      	strh	r2, [r3, #0]

	return;
 80019d8:	bf00      	nop
}
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	200001f8 	.word	0x200001f8

080019e8 <ApplicationDebugRXChar>:
{

	return;
}
void ApplicationDebugRXChar(uint8_t ucRXBuffer)	// used to receive RX char from the debug interface
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]

	return;
 80019f2:	bf00      	nop
}
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <AudioPlayPartiture>:

// API
//==================================================================================================================== API_START

uint8_t AudioPlayPartiture(uint8_t ucPartitureIndex)			// used to play a partiturte with a specific index
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
	if( (ucPartitureIndex >= AUDIO_MAXIMUM_NUMBER_OF_PARTITURES) )		return 1;	// out of range partiture index
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	2b09      	cmp	r3, #9
 8001a0e:	d901      	bls.n	8001a14 <AudioPlayPartiture+0x14>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e01d      	b.n	8001a50 <AudioPlayPartiture+0x50>

	if( (PlayingPartiture.ucPartitureIsPlaying == 1) )
 8001a14:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <AudioPlayPartiture+0x58>)
 8001a16:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d112      	bne.n	8001a46 <AudioPlayPartiture+0x46>
	{
		if( (ucPartitureIndex == PlayingPartiture.ucPartitureID) )		return 2;	// already playing
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <AudioPlayPartiture+0x58>)
 8001a22:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	79fa      	ldrb	r2, [r7, #7]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d101      	bne.n	8001a32 <AudioPlayPartiture+0x32>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e00e      	b.n	8001a50 <AudioPlayPartiture+0x50>
		else
		{
			PlayingPartiture.ucPartitureIsPlaying = 0;
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <AudioPlayPartiture+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
			LoadPartiture(ucPartitureIndex);
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 f869 	bl	8001b14 <LoadPartiture>
			return 0;	// stop current partiture and play another
 8001a42:	2300      	movs	r3, #0
 8001a44:	e004      	b.n	8001a50 <AudioPlayPartiture+0x50>
		}
	}
	else
	{	// nothing is playing => start a partiture
		LoadPartiture(ucPartitureIndex);
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 f863 	bl	8001b14 <LoadPartiture>
		return 0;
 8001a4e:	2300      	movs	r3, #0
	}
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000780 	.word	0x20000780

08001a5c <AudioInit>:


// SYSTEM
//==================================================================================================================== SYSTEM_START
void AudioInit(void)	// used to initialize the Audio Module. Called from main.c file @ init section
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	// turn off the buzzer
	AudioOff();	// disable the buzzer
 8001a60:	f000 f838 	bl	8001ad4 <AudioOff>

	// HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
	if(HAL_TIM_OC_Start(&htim12,TIM_CHANNEL_1) != HAL_OK)	// start the audio timer (TIM12_CH1)
 8001a64:	2100      	movs	r1, #0
 8001a66:	4806      	ldr	r0, [pc, #24]	; (8001a80 <AudioInit+0x24>)
 8001a68:	f00d fe7a 	bl	800f760 <HAL_TIM_OC_Start>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d004      	beq.n	8001a7c <AudioInit+0x20>
	{
		Error_Handler2(ERROR_CODE_AUDIO_INIT_001);
 8001a72:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001a76:	f007 ff4d 	bl	8009914 <Error_Handler2>
		return;
 8001a7a:	e000      	b.n	8001a7e <AudioInit+0x22>
	#ifdef AUDIO_DEBUG_MODE
	PartitureInit();
	#endif


	return;
 8001a7c:	bf00      	nop
}
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200024ec 	.word	0x200024ec

08001a84 <AudioMainLoop>:
//----------------------------------------------------------------------------------
void AudioMainLoop(void)	// loop function of the Audio Module. Called from the main.c file @ main loop section
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0

	// skip real time
	if(m_uiAudioSkipRealTime)
 8001a88:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <AudioMainLoop+0x3c>)
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d006      	beq.n	8001a9e <AudioMainLoop+0x1a>
	{
		m_uiAudioSkipRealTime --;
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <AudioMainLoop+0x3c>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <AudioMainLoop+0x3c>)
 8001a9a:	801a      	strh	r2, [r3, #0]
		return;
 8001a9c:	e00f      	b.n	8001abe <AudioMainLoop+0x3a>
	}
	m_uiAudioSkipRealTime = AUDIO_SKIP_REAL_TIME;
 8001a9e:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <AudioMainLoop+0x3c>)
 8001aa0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001aa4:	801a      	strh	r2, [r3, #0]

	#ifdef AUDIO_DEBUG_MODE
	PrintInfoMainLoop();
	#endif

	if( m_ucStartPlayDone == 0 )
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <AudioMainLoop+0x40>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d105      	bne.n	8001abc <AudioMainLoop+0x38>
	{
		AudioPlayPartiture(1);
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f7ff ffa5 	bl	8001a00 <AudioPlayPartiture>
		m_ucStartPlayDone = 1;
 8001ab6:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <AudioMainLoop+0x40>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	701a      	strb	r2, [r3, #0]





	return;
 8001abc:	bf00      	nop
}
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	200002a6 	.word	0x200002a6
 8001ac4:	200007fc 	.word	0x200007fc

08001ac8 <AudioTimer1KHZISR>:
//----------------------------------------------------------------------------------
void AudioTimer1KHZISR(void)	// 1KHZ timer function called from System ISR from stm32f4xx_it.c file @ SysTick Function (!!! keep as short as possible !!!)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	PlayPartitureTimer1KHZISR();
 8001acc:	f000 f888 	bl	8001be0 <PlayPartitureTimer1KHZISR>

	return;
 8001ad0:	bf00      	nop
}
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <AudioOff>:

//----------------------------------------------------------------------------------
// #define BUZZER_Pin GPIO_PIN_14
// #define BUZZER_GPIO_Port GPIOB
static void AudioOff(void)	// used torn off the buzzer
{	// BUZZER is PB14
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
	*/

	// PB14 = input => MODER[29][28] = [0,0] => cleared
	BUZZER_GPIO_Port->MODER &= ~(0x03 << 28U) ;
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <AudioOff+0x1c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <AudioOff+0x1c>)
 8001ade:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001ae2:	6013      	str	r3, [r2, #0]

	return;
 8001ae4:	bf00      	nop
}
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40020400 	.word	0x40020400

08001af4 <AudioOn>:
//----------------------------------------------------------------------------------
static void AudioOn(void)	// used to connect the timer to the Buzzer
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
	*/

	// PB14 = alternative function mode => MODE[29][28] = [1,0]
	BUZZER_GPIO_Port->MODER |= (0x02 << 28U);
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <AudioOn+0x1c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <AudioOn+0x1c>)
 8001afe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b02:	6013      	str	r3, [r2, #0]

	return;
 8001b04:	bf00      	nop
}
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40020400 	.word	0x40020400

08001b14 <LoadPartiture>:
	return;
}
#endif
//----------------------------------------------------------------------------------
static void LoadPartiture(uint8_t  ucPartitureIndex)			// it is used to load a partiture from the partiture buffer "PartitureBuffer[]" into the "PlayingPartiture" variable and start playing that partiture
{
 8001b14:	b490      	push	{r4, r7}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	if( (ucPartitureIndex >= AUDIO_MAXIMUM_NUMBER_OF_PARTITURES) )		return;		//index out of range
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	2b09      	cmp	r3, #9
 8001b22:	d851      	bhi.n	8001bc8 <LoadPartiture+0xb4>

	if( (PartitureBuffer[ucPartitureIndex].ui16PartitureNote[0] == 0) )	return;		// this partiture is empty
 8001b24:	79fa      	ldrb	r2, [r7, #7]
 8001b26:	492c      	ldr	r1, [pc, #176]	; (8001bd8 <LoadPartiture+0xc4>)
 8001b28:	4613      	mov	r3, r2
 8001b2a:	015b      	lsls	r3, r3, #5
 8001b2c:	1a9b      	subs	r3, r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d048      	beq.n	8001bcc <LoadPartiture+0xb8>

	for(i=0;i<AUDIO_MAXIMUM_PARTITURE_SIZE;i++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	73fb      	strb	r3, [r7, #15]
 8001b3e:	e026      	b.n	8001b8e <LoadPartiture+0x7a>
	{
		PlayingPartiture.ui16PartitureNote[i]	= PartitureBuffer[ucPartitureIndex].ui16PartitureNote[i];
 8001b40:	79fa      	ldrb	r2, [r7, #7]
 8001b42:	7bf8      	ldrb	r0, [r7, #15]
 8001b44:	7bf9      	ldrb	r1, [r7, #15]
 8001b46:	4c24      	ldr	r4, [pc, #144]	; (8001bd8 <LoadPartiture+0xc4>)
 8001b48:	4613      	mov	r3, r2
 8001b4a:	015b      	lsls	r3, r3, #5
 8001b4c:	1a9b      	subs	r3, r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4403      	add	r3, r0
 8001b52:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <LoadPartiture+0xc8>)
 8001b5a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		PlayingPartiture.ui16PartitureTime[i]	= PartitureBuffer[ucPartitureIndex].ui16PartitureTime[i];
 8001b5e:	79fa      	ldrb	r2, [r7, #7]
 8001b60:	7bf8      	ldrb	r0, [r7, #15]
 8001b62:	7bf9      	ldrb	r1, [r7, #15]
 8001b64:	4c1c      	ldr	r4, [pc, #112]	; (8001bd8 <LoadPartiture+0xc4>)
 8001b66:	4613      	mov	r3, r2
 8001b68:	015b      	lsls	r3, r3, #5
 8001b6a:	1a9b      	subs	r3, r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4403      	add	r3, r0
 8001b70:	331c      	adds	r3, #28
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4423      	add	r3, r4
 8001b76:	889b      	ldrh	r3, [r3, #4]
 8001b78:	b298      	uxth	r0, r3
 8001b7a:	4a18      	ldr	r2, [pc, #96]	; (8001bdc <LoadPartiture+0xc8>)
 8001b7c:	f101 031c 	add.w	r3, r1, #28
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	4602      	mov	r2, r0
 8001b86:	809a      	strh	r2, [r3, #4]
	for(i=0;i<AUDIO_MAXIMUM_PARTITURE_SIZE;i++)
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	73fb      	strb	r3, [r7, #15]
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	2b1d      	cmp	r3, #29
 8001b92:	d9d5      	bls.n	8001b40 <LoadPartiture+0x2c>
	}
	PlayingPartiture.ucPartitureID = ucPartitureIndex;
 8001b94:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <LoadPartiture+0xc8>)
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a

	PlayingPartiture.ucPartitureEndIndex = PartitureBuffer[ucPartitureIndex].ucPartitureEndIndex;
 8001b9c:	79fa      	ldrb	r2, [r7, #7]
 8001b9e:	490e      	ldr	r1, [pc, #56]	; (8001bd8 <LoadPartiture+0xc4>)
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	015b      	lsls	r3, r3, #5
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	3379      	adds	r3, #121	; 0x79
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <LoadPartiture+0xc8>)
 8001bb2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

	PlayingPartiture.ucPartiturePlayIndex = 255;	// indicating to start playing
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <LoadPartiture+0xc8>)
 8001bb8:	22ff      	movs	r2, #255	; 0xff
 8001bba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

	PlayingPartiture.ucPartitureIsPlaying = 0;	// not playing yet but it will start from "PlayPartitureTimer1KHZISR()" function
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <LoadPartiture+0xc8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	return;
 8001bc6:	e002      	b.n	8001bce <LoadPartiture+0xba>
	if( (ucPartitureIndex >= AUDIO_MAXIMUM_NUMBER_OF_PARTITURES) )		return;		//index out of range
 8001bc8:	bf00      	nop
 8001bca:	e000      	b.n	8001bce <LoadPartiture+0xba>
	if( (PartitureBuffer[ucPartitureIndex].ui16PartitureNote[0] == 0) )	return;		// this partiture is empty
 8001bcc:	bf00      	nop
}
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc90      	pop	{r4, r7}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	200002a8 	.word	0x200002a8
 8001bdc:	20000780 	.word	0x20000780

08001be0 <PlayPartitureTimer1KHZISR>:
//----------------------------------------------------------------------------------
static void PlayPartitureTimer1KHZISR(void)					// called from the timer to play the active partiture
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
	// check if a partiture is about to start
	if( (PlayingPartiture.ucPartiturePlayIndex == 255) )
 8001be4:	4b51      	ldr	r3, [pc, #324]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001be6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2bff      	cmp	r3, #255	; 0xff
 8001bee:	d12e      	bne.n	8001c4e <PlayPartitureTimer1KHZISR+0x6e>
	{
		PlayingPartiture.ucPartiturePlayIndex = 0;
 8001bf0:	4b4e      	ldr	r3, [pc, #312]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		PlayingPartiture.ucPartitureIsPlaying = 1;
 8001bf8:	4b4c      	ldr	r3, [pc, #304]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

		if( (PlayingPartiture.ui16PartitureNote[PlayingPartiture.ucPartiturePlayIndex] != AUDIO_MUTE) )
 8001c00:	4b4a      	ldr	r3, [pc, #296]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001c02:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b48      	ldr	r3, [pc, #288]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001c0c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 8086 	beq.w	8001d24 <PlayPartitureTimer1KHZISR+0x144>
		{	// play the note if it is not mute time
			__HAL_TIM_SET_AUTORELOAD(&htim12, PlayingPartiture.ui16PartitureNote[PlayingPartiture.ucPartiturePlayIndex]);
 8001c18:	4b44      	ldr	r3, [pc, #272]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001c1a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b42      	ldr	r3, [pc, #264]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001c24:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	4b41      	ldr	r3, [pc, #260]	; (8001d30 <PlayPartitureTimer1KHZISR+0x150>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c30:	4b3e      	ldr	r3, [pc, #248]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001c32:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b3c      	ldr	r3, [pc, #240]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001c3c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b3a      	ldr	r3, [pc, #232]	; (8001d30 <PlayPartitureTimer1KHZISR+0x150>)
 8001c46:	60da      	str	r2, [r3, #12]
			AudioOn();
 8001c48:	f7ff ff54 	bl	8001af4 <AudioOn>
		}
		return;
 8001c4c:	e06a      	b.n	8001d24 <PlayPartitureTimer1KHZISR+0x144>
	}

	// check if a partiture is being played
	if( (PlayingPartiture.ucPartitureIsPlaying == 1) )
 8001c4e:	4b37      	ldr	r3, [pc, #220]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001c50:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d166      	bne.n	8001d28 <PlayPartitureTimer1KHZISR+0x148>
	{
		if( (PlayingPartiture.ui16PartitureTime[PlayingPartiture.ucPartiturePlayIndex] > 0) )
 8001c5a:	4b34      	ldr	r3, [pc, #208]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001c5c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	4a32      	ldr	r2, [pc, #200]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001c64:	331c      	adds	r3, #28
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	889b      	ldrh	r3, [r3, #4]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d015      	beq.n	8001c9e <PlayPartitureTimer1KHZISR+0xbe>
		{	// still playing
			PlayingPartiture.ui16PartitureTime[PlayingPartiture.ucPartiturePlayIndex] --;
 8001c72:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001c74:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	492b      	ldr	r1, [pc, #172]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001c7e:	f102 031c 	add.w	r3, r2, #28
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	440b      	add	r3, r1
 8001c86:	889b      	ldrh	r3, [r3, #4]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b298      	uxth	r0, r3
 8001c8e:	4927      	ldr	r1, [pc, #156]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001c90:	f102 031c 	add.w	r3, r2, #28
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	440b      	add	r3, r1
 8001c98:	4602      	mov	r2, r0
 8001c9a:	809a      	strh	r2, [r3, #4]
				AudioOff();
			}
		}
	}

	return;
 8001c9c:	e044      	b.n	8001d28 <PlayPartitureTimer1KHZISR+0x148>
			if( (PlayingPartiture.ucPartiturePlayIndex < PlayingPartiture.ucPartitureEndIndex) )
 8001c9e:	4b23      	ldr	r3, [pc, #140]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001ca0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001ca8:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d231      	bcs.n	8001d16 <PlayPartitureTimer1KHZISR+0x136>
				PlayingPartiture.ucPartiturePlayIndex ++;
 8001cb2:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001cb4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001cc0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
				if( (PlayingPartiture.ui16PartitureNote[PlayingPartiture.ucPartiturePlayIndex] == AUDIO_MUTE) )
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001cc6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001cd0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d102      	bne.n	8001ce0 <PlayPartitureTimer1KHZISR+0x100>
					AudioOff();
 8001cda:	f7ff fefb 	bl	8001ad4 <AudioOff>
	return;
 8001cde:	e023      	b.n	8001d28 <PlayPartitureTimer1KHZISR+0x148>
					__HAL_TIM_SET_AUTORELOAD(&htim12, PlayingPartiture.ui16PartitureNote[PlayingPartiture.ucPartiturePlayIndex]);
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001ce2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001cec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <PlayPartitureTimer1KHZISR+0x150>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001cfa:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001d04:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <PlayPartitureTimer1KHZISR+0x150>)
 8001d0e:	60da      	str	r2, [r3, #12]
					AudioOn();
 8001d10:	f7ff fef0 	bl	8001af4 <AudioOn>
	return;
 8001d14:	e008      	b.n	8001d28 <PlayPartitureTimer1KHZISR+0x148>
				PlayingPartiture.ucPartitureIsPlaying = 0;
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <PlayPartitureTimer1KHZISR+0x14c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
				AudioOff();
 8001d1e:	f7ff fed9 	bl	8001ad4 <AudioOff>
	return;
 8001d22:	e001      	b.n	8001d28 <PlayPartitureTimer1KHZISR+0x148>
		return;
 8001d24:	bf00      	nop
 8001d26:	e000      	b.n	8001d2a <PlayPartitureTimer1KHZISR+0x14a>
	return;
 8001d28:	bf00      	nop
}
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000780 	.word	0x20000780
 8001d30:	200024ec 	.word	0x200024ec

08001d34 <I2CVEML3328DataAvailableCallback>:
//==================================================================================================================== API_START

// VEML3328 Color Sensor
// the callback functions:
__attribute__((weak)) void I2CVEML3328DataAvailableCallback(SIDE SensorSide)	// can be used to notify the application that new VEML3328 data is available
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
				myVEML3328Result.uiGreen, myVEML3328Result.uiGreen, myVEML3328Result.uiIR);
		DebugSendData(m_ucDebugBuffer,strlen((char *)m_ucDebugBuffer));
	}
	*/

	return;
 8001d3e:	bf00      	nop
}
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <I2CVEML3328BothDataAvailableCallback>:
//----------------------------------------------------------------------------------
__attribute__((weak)) void I2CVEML3328BothDataAvailableCallback(void)	// this callback will be called only after both VEML3328 sensors were read and the results are ok (in case of error, at least with one sensor this function will not be called)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
																 myVEML3328ResultLeft.uiRed,myVEML3328ResultLeft.uiGreen,myVEML3328ResultLeft.uiBlue);
		DebugSendData(m_ucDebugBuffer,strlen((char *)m_ucDebugBuffer));
	}
#endif

	return;
 8001d4e:	bf00      	nop
}
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <I2CEEPROMReadIS>:
//----------------------------------------------------------------------------------

// 24C512 EEPROM section
// ------- FOR INITIALIZATION SECTION USE ONLY (NO MAIN LOOP) ---------
HAL_StatusTypeDef 	I2CEEPROMReadIS(volatile EEPROMDataTypeDef *pData)		// function usable in the INITIALIZATION section of the code for read a uint32_t data from the EEPROM
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af04      	add	r7, sp, #16
 8001d5e:	6078      	str	r0, [r7, #4]
	uint16_t	ui16EEAddress;
	//uint32_t	ui32EEData;
	uint8_t		ucEEData[4];
	//-------------------------------

	ui16EEAddress 	= (uint16_t)pData->ui16EEPROMAddress;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	81fb      	strh	r3, [r7, #14]

	// HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_I2C_ADDRESS_ON_I2C1, ui16EEAddress, 2,ucEEData,4, HAL_MAX_DELAY) != HAL_OK)
 8001d66:	89fa      	ldrh	r2, [r7, #14]
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d6c:	9302      	str	r3, [sp, #8]
 8001d6e:	2304      	movs	r3, #4
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	f107 0308 	add.w	r3, r7, #8
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	2302      	movs	r3, #2
 8001d7a:	21a0      	movs	r1, #160	; 0xa0
 8001d7c:	480b      	ldr	r0, [pc, #44]	; (8001dac <I2CEEPROMReadIS+0x54>)
 8001d7e:	f00a fab5 	bl	800c2ec <HAL_I2C_Mem_Read>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <I2CEEPROMReadIS+0x34>
	{
		//Error_Handler2(ERROR_CODE_I2CDEVICES_DEBUG_001);
		return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e00a      	b.n	8001da2 <I2CEEPROMReadIS+0x4a>
	}
	EEPROMWriteDelay();	// the 10ms write delay (not critical for read operations)
 8001d8c:	f000 fef6 	bl	8002b7c <EEPROMWriteDelay>
	//pData->ui32EEPROMData |= ui32EEData;	// 3/4
	// DIGIT0 = LSD
	//ui32EEData = (uint32_t)ucEEData[0];
	//ui32EEData <<= (0*8);	// shift with 0 bits
	//pData->ui32EEPROMData |= ui32EEData;	// 4/4
	EEPROM8To32(ucEEData, &(pData->ui32EEPROMData));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	1d1a      	adds	r2, r3, #4
 8001d94:	f107 0308 	add.w	r3, r7, #8
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 feb5 	bl	8002b0a <EEPROM8To32>


	return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2000224c 	.word	0x2000224c

08001db0 <I2CEEPROMWriteIS>:
// --------------------------------------------------------------------
HAL_StatusTypeDef 	I2CEEPROMWriteIS(volatile EEPROMDataTypeDef *pData)		// function usable in the INITIALIZATION section only
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af04      	add	r7, sp, #16
 8001db6:	6078      	str	r0, [r7, #4]
	uint16_t	ui16EEAddress;
	uint32_t	ui32EEData;
	uint8_t		ucEEData[4];
	//-------------------------------

	ui16EEAddress 	= (uint16_t)pData->ui16EEPROMAddress;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	82fb      	strh	r3, [r7, #22]
	ui32EEData		= pData->ui32EEPROMData;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	613b      	str	r3, [r7, #16]

	//ucEEData[0]		= (uint8_t)((ui32EEData >> (0*8)) & 0x000000FF);	// shifted with 0  bits	LSD	= Less Significant Digit
	//ucEEData[1]		= (uint8_t)((ui32EEData >> (1*8)) & 0x000000FF);	// shifted with 8  bits
	//ucEEData[2]		= (uint8_t)((ui32EEData >> (2*8)) & 0x000000FF);	// shifted with 16 bits
	//ucEEData[3]		= (uint8_t)((ui32EEData >> (3*8)) & 0x000000FF);	// shifted with 24 bits	MSD = MostSignificant Digit
	EEPROM32To8(ui32EEData, ucEEData);
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	4619      	mov	r1, r3
 8001dca:	6938      	ldr	r0, [r7, #16]
 8001dcc:	f000 fe7c 	bl	8002ac8 <EEPROM32To8>

	// HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_I2C_ADDRESS_ON_I2C1, ui16EEAddress, 2,ucEEData,4, HAL_MAX_DELAY) != HAL_OK)
 8001dd0:	8afa      	ldrh	r2, [r7, #22]
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dd6:	9302      	str	r3, [sp, #8]
 8001dd8:	2304      	movs	r3, #4
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	2302      	movs	r3, #2
 8001de4:	21a0      	movs	r1, #160	; 0xa0
 8001de6:	4807      	ldr	r0, [pc, #28]	; (8001e04 <I2CEEPROMWriteIS+0x54>)
 8001de8:	f00a f986 	bl	800c0f8 <HAL_I2C_Mem_Write>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <I2CEEPROMWriteIS+0x46>
	{
		//Error_Handler2(ERROR_CODE_I2CDEVICES_DEBUG_001);
		return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e002      	b.n	8001dfc <I2CEEPROMWriteIS+0x4c>
	}
	EEPROMWriteDelay();	// the 10ms write delay
 8001df6:	f000 fec1 	bl	8002b7c <EEPROMWriteDelay>

	return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	2000224c 	.word	0x2000224c

08001e08 <I2CEEPROMChekListStatusML>:
// --------------------------------------------------------------------
// ---- FOR MAIN LOOP SECTION USE ONLY (NO INITIALIZATION SECTION) ----
EEPROM_LIST_STATUS 	I2CEEPROMChekListStatusML(void)								// used to check the status of the list. if the list is empty one can read or write to the EEPROM using a function from below. if the list is not empty one need to wait to empty up before requesting anything to the EEPROM
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
	return EEpromDataList.ucListIsPopulated;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <I2CEEPROMChekListStatusML+0x14>)
 8001e0e:	785b      	ldrb	r3, [r3, #1]
 8001e10:	b2db      	uxtb	r3, r3
	//return LIST_IS_EMPTY;
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	20000978 	.word	0x20000978

08001e20 <I2CEEPROMReadWriteListML>:
// --------------------------------------------------------------------
//HAL_StatusTypeDef	I2CEEPROMReadWriteListML(volatile EEPROMDataListTypeDef EEListData)		// -usable only in the main loop , not in initialization section- used to write/read data into/from the EEPROM. if everything is ok all the data from the list will be written/read into/from the EEPROM => the callback will be called @ the end
HAL_StatusTypeDef	I2CEEPROMReadWriteListML(volatile EEPROMDataListTypeDef EEListData, void (*EEpromDoneCallback)(EEPROMDataListTypeDef) )
{
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	f107 0308 	add.w	r3, r7, #8
 8001e2a:	e883 0003 	stmia.w	r3, {r0, r1}
 8001e2e:	607a      	str	r2, [r7, #4]
	uint8_t i;	// only for indexing

	// check if the list is not already populated
	if( (EEpromDataList.ucListIsPopulated == LIST_IS_FULL) )	return HAL_ERROR;
 8001e30:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <I2CEEPROMReadWriteListML+0x90>)
 8001e32:	785b      	ldrb	r3, [r3, #1]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <I2CEEPROMReadWriteListML+0x1e>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e031      	b.n	8001ea2 <I2CEEPROMReadWriteListML+0x82>

	// the list was not populated but it is now
	EEpromDataList.ucListIsPopulated 	= LIST_IS_FULL;
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <I2CEEPROMReadWriteListML+0x90>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	705a      	strb	r2, [r3, #1]
	EEpromDataList.ucReadWrite 			= EEListData.ucReadWrite;
 8001e44:	7abb      	ldrb	r3, [r7, #10]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <I2CEEPROMReadWriteListML+0x90>)
 8001e4a:	709a      	strb	r2, [r3, #2]
	EEpromDataList.ucSizeOfTheList 		= EEListData.ucSizeOfTheList;
 8001e4c:	7afb      	ldrb	r3, [r7, #11]
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <I2CEEPROMReadWriteListML+0x90>)
 8001e52:	70da      	strb	r2, [r3, #3]

	// set the pointer of the callback function
	EEDoneCallbackFunction = EEpromDoneCallback;
 8001e54:	4a17      	ldr	r2, [pc, #92]	; (8001eb4 <I2CEEPROMReadWriteListML+0x94>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6013      	str	r3, [r2, #0]

	for(i=0; i<EEpromDataList.ucSizeOfTheList; i++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	75fb      	strb	r3, [r7, #23]
 8001e5e:	e019      	b.n	8001e94 <I2CEEPROMReadWriteListML+0x74>
	{	// copy the input list content into the local list
		EEpromDataList.pEEDTList[i].ui16EEPROMAddress 		= EEListData.pEEDTList[i].ui16EEPROMAddress;	// all the EEPROM addresses (important for both READ and WRITE)
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	441a      	add	r2, r3
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <I2CEEPROMReadWriteListML+0x90>)
 8001e6a:	6859      	ldr	r1, [r3, #4]
 8001e6c:	7dfb      	ldrb	r3, [r7, #23]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	440b      	add	r3, r1
 8001e72:	8812      	ldrh	r2, [r2, #0]
 8001e74:	b292      	uxth	r2, r2
 8001e76:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[i].ui32EEPROMData			= EEListData.pEEDTList[i].ui32EEPROMData;		// all the data what will be written into the EEPROM (only important for EEPROM_WRITE case)
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	7dfb      	ldrb	r3, [r7, #23]
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	441a      	add	r2, r3
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <I2CEEPROMReadWriteListML+0x90>)
 8001e82:	6859      	ldr	r1, [r3, #4]
 8001e84:	7dfb      	ldrb	r3, [r7, #23]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	440b      	add	r3, r1
 8001e8a:	6852      	ldr	r2, [r2, #4]
 8001e8c:	605a      	str	r2, [r3, #4]
	for(i=0; i<EEpromDataList.ucSizeOfTheList; i++)
 8001e8e:	7dfb      	ldrb	r3, [r7, #23]
 8001e90:	3301      	adds	r3, #1
 8001e92:	75fb      	strb	r3, [r7, #23]
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <I2CEEPROMReadWriteListML+0x90>)
 8001e96:	78db      	ldrb	r3, [r3, #3]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	7dfa      	ldrb	r2, [r7, #23]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d3df      	bcc.n	8001e60 <I2CEEPROMReadWriteListML+0x40>
	}

	return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	371c      	adds	r7, #28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000978 	.word	0x20000978
 8001eb4:	20000980 	.word	0x20000980

08001eb8 <I2CTSL25911DataAvailableCallback>:
//----------------------------------------------------------------------------------

// TSL25911
// callback
__attribute__ ((weak)) void I2CTSL25911DataAvailableCallback(TSL25911Result RightSesnor, TSL25911Result LeftSensor)		// must be implemented in the application code if the TSL25911 data is needed
{	// it is called only if both sensor are working properly
 8001eb8:	b490      	push	{r4, r7}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	f107 0408 	add.w	r4, r7, #8
 8001ec2:	e884 0003 	stmia.w	r4, {r0, r1}
 8001ec6:	4639      	mov	r1, r7
 8001ec8:	e881 000c 	stmia.w	r1, {r2, r3}
																		LeftSensor.ui16CH1Result);
	DebugSendData(m_ucDebugBuffer,strlen((char *)m_ucDebugBuffer));
	#endif


	return;
 8001ecc:	bf00      	nop
}
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc90      	pop	{r4, r7}
 8001ed4:	4770      	bx	lr

08001ed6 <I2CErrorCallback>:
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------

// I2C related functions
__attribute__ ((weak)) void I2CErrorCallback(uint8_t ucError)	// used to indicate that at least one of the two I2C engine has some error
{	// called each time a change in the I2C hardware state is detected
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	71fb      	strb	r3, [r7, #7]
#ifdef I2CDEVICES_DEBUG_MODE
	sprintf((char *)m_ucDebugBuffer,"I2C Error = 0x%02X\r\n",ucError);
	DebugSendData(m_ucDebugBuffer,strlen((char *)m_ucDebugBuffer));
#endif

	return;
 8001ee0:	bf00      	nop
}
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <I2CDevicesInit>:


// SYSTEM
//==================================================================================================================== SYSTEM_START
void I2CDevicesInit(void)	// used to initialize the I2CDevices Module. Called from main.c file @ init section
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
	// VEML3328
	RightVEML3328.SensorSide = RIGHT;	// I2C1
 8001ef0:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <I2CDevicesInit+0x48>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
	RightVEML3328.uiI2CAddress = 0x20;	// I2C1 VEML3328 Address (0x20 = 0x10<<1)
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <I2CDevicesInit+0x48>)
 8001ef8:	2220      	movs	r2, #32
 8001efa:	805a      	strh	r2, [r3, #2]
	RightVEML3328.I2CReadingState = NoI2CReadingInProgress;
 8001efc:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <I2CDevicesInit+0x48>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	711a      	strb	r2, [r3, #4]
	RightVEML3328Result.NewMeasuredData = NO_NEW_DATA_IS_AVAILABLE;	// no new data from the right color sensor
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <I2CDevicesInit+0x4c>)
 8001f04:	2202      	movs	r2, #2
 8001f06:	739a      	strb	r2, [r3, #14]
	LeftVEML3328.SensorSide = LEFT;		// I2C3
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <I2CDevicesInit+0x50>)
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	701a      	strb	r2, [r3, #0]
	LeftVEML3328.uiI2CAddress = 0x20;	// I2C3 VEML3328 Address (0x20 = 0x10<<1)
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <I2CDevicesInit+0x50>)
 8001f10:	2220      	movs	r2, #32
 8001f12:	805a      	strh	r2, [r3, #2]
	LeftVEML3328.I2CReadingState = NoI2CReadingInProgress;
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <I2CDevicesInit+0x50>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	711a      	strb	r2, [r3, #4]
	LeftVEML3328Result.NewMeasuredData = NO_NEW_DATA_IS_AVAILABLE;	// no new data from the left color sensor
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <I2CDevicesInit+0x54>)
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	739a      	strb	r2, [r3, #14]

	// 24C512
	EEPROMInitialization();
 8001f20:	f000 fd1e 	bl	8002960 <EEPROMInitialization>


	// TSL25911
	TSL25911Init();
 8001f24:	f000 fe54 	bl	8002bd0 <TSL25911Init>

	// some other I2c

	m_ui32I2CDevicesSkipRealTime = 100000;	// 100K, Max Value in 32 bit uint = 4,294,967,295
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <I2CDevicesInit+0x58>)
 8001f2a:	4a07      	ldr	r2, [pc, #28]	; (8001f48 <I2CDevicesInit+0x5c>)
 8001f2c:	601a      	str	r2, [r3, #0]
	return;
 8001f2e:	bf00      	nop
}
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	2000081c 	.word	0x2000081c
 8001f38:	20000838 	.word	0x20000838
 8001f3c:	20000848 	.word	0x20000848
 8001f40:	20000864 	.word	0x20000864
 8001f44:	20000800 	.word	0x20000800
 8001f48:	000186a0 	.word	0x000186a0

08001f4c <I2CDevicesMainLoop>:
//----------------------------------------------------------------------------------
void I2CDevicesMainLoop(void)	// loop function of the I2CDevices Module. Called from the main.c file @ main loop section
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
	// skip real time
	if(m_ui32I2CDevicesSkipRealTime)
 8001f50:	4b46      	ldr	r3, [pc, #280]	; (800206c <I2CDevicesMainLoop+0x120>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <I2CDevicesMainLoop+0x18>
	{
		m_ui32I2CDevicesSkipRealTime --;
 8001f58:	4b44      	ldr	r3, [pc, #272]	; (800206c <I2CDevicesMainLoop+0x120>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	4a43      	ldr	r2, [pc, #268]	; (800206c <I2CDevicesMainLoop+0x120>)
 8001f60:	6013      	str	r3, [r2, #0]
		return;
 8001f62:	e081      	b.n	8002068 <I2CDevicesMainLoop+0x11c>
	}
	m_ui32I2CDevicesSkipRealTime = I2CDEVICES_SKIP_REAL_TIME;
 8001f64:	4b41      	ldr	r3, [pc, #260]	; (800206c <I2CDevicesMainLoop+0x120>)
 8001f66:	f240 3235 	movw	r2, #821	; 0x335
 8001f6a:	601a      	str	r2, [r3, #0]
	//--------------------------------------------------------
	// check the state of the I2C hardware interfaces and in case of error trigger the error callback function
	I2CErrorChecker();
 8001f6c:	f001 f824 	bl	8002fb8 <I2CErrorChecker>
	//--------------------------------------------------------

	// 24C512 @I2C1 driver
	//--------------------------------------------------------	24C512 START
	if( (EEpromDataList.ucListIsPopulated == LIST_IS_FULL) )
 8001f70:	4b3f      	ldr	r3, [pc, #252]	; (8002070 <I2CDevicesMainLoop+0x124>)
 8001f72:	785b      	ldrb	r3, [r3, #1]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <I2CDevicesMainLoop+0x32>
	{	// some data is available to be read-from or write-into the EEPROM
		// !!! the EEPROM function will access the EEPROM only if no other scheduled I2C1 operation is in progress: no waiting for I2C interrupt complete situation !!!
		// for further detail check the implementation of the EEPROM main loop function from below.
		EEPROMMainLoop();
 8001f7a:	f000 fcff 	bl	800297c <EEPROMMainLoop>
	//--------------------------------------------------------	24C512 END

	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH
	// VEML3328
	// ------------------------------------------------------- Right VEML START
	if( (RightVEML3328.I2CReadingState != I2CReadingDone) )
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <I2CDevicesMainLoop+0x128>)
 8001f80:	791b      	ldrb	r3, [r3, #4]
 8001f82:	2b0a      	cmp	r3, #10
 8001f84:	d003      	beq.n	8001f8e <I2CDevicesMainLoop+0x42>
	{	//VEML3328 @I2C1 driver
		//HandleRightVEML3328Loop();
		HandleVEML3328Loop(&RightVEML3328);
 8001f86:	483b      	ldr	r0, [pc, #236]	; (8002074 <I2CDevicesMainLoop+0x128>)
 8001f88:	f000 f94a 	bl	8002220 <HandleVEML3328Loop>
		//if(m_ucDebugChar1) HandleVEML3328Loop(&RightVEML3328);
		return;
 8001f8c:	e06c      	b.n	8002068 <I2CDevicesMainLoop+0x11c>
	// ------------------------------------------------------- Right VEML END
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  //	debug on PC13 LOW

	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH
	// ------------------------------------------------------- Left VEML START
	if( (LeftVEML3328.I2CReadingState != I2CReadingDone) )
 8001f8e:	4b3a      	ldr	r3, [pc, #232]	; (8002078 <I2CDevicesMainLoop+0x12c>)
 8001f90:	791b      	ldrb	r3, [r3, #4]
 8001f92:	2b0a      	cmp	r3, #10
 8001f94:	d003      	beq.n	8001f9e <I2CDevicesMainLoop+0x52>
	{	//VEML3328 @I2C3 driver
		HandleVEML3328Loop(&LeftVEML3328);
 8001f96:	4838      	ldr	r0, [pc, #224]	; (8002078 <I2CDevicesMainLoop+0x12c>)
 8001f98:	f000 f942 	bl	8002220 <HandleVEML3328Loop>
		return;
 8001f9c:	e064      	b.n	8002068 <I2CDevicesMainLoop+0x11c>




	// ------- CALLBACK for both VEML3328 sensors done ------- START
	if( (LeftVEML3328.MeasuredData.NewMeasuredData == NEW_DATA_IS_AVAILABLE) && (RightVEML3328.MeasuredData.NewMeasuredData == NEW_DATA_IS_AVAILABLE))
 8001f9e:	4b36      	ldr	r3, [pc, #216]	; (8002078 <I2CDevicesMainLoop+0x12c>)
 8001fa0:	7d1b      	ldrb	r3, [r3, #20]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d10c      	bne.n	8001fc0 <I2CDevicesMainLoop+0x74>
 8001fa6:	4b33      	ldr	r3, [pc, #204]	; (8002074 <I2CDevicesMainLoop+0x128>)
 8001fa8:	7d1b      	ldrb	r3, [r3, #20]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d108      	bne.n	8001fc0 <I2CDevicesMainLoop+0x74>
	{
		LeftVEML3328.MeasuredData.NewMeasuredData  = NO_NEW_DATA_IS_AVAILABLE;
 8001fae:	4b32      	ldr	r3, [pc, #200]	; (8002078 <I2CDevicesMainLoop+0x12c>)
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	751a      	strb	r2, [r3, #20]
		RightVEML3328.MeasuredData.NewMeasuredData = NO_NEW_DATA_IS_AVAILABLE;
 8001fb4:	4b2f      	ldr	r3, [pc, #188]	; (8002074 <I2CDevicesMainLoop+0x128>)
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	751a      	strb	r2, [r3, #20]
		// call the callback function
		// this callback will be called only after both VEML3328 sensors were read and the results are ok (in case of error at least with one sensor this function will not be called)
		I2CVEML3328BothDataAvailableCallback();
 8001fba:	f7ff fec6 	bl	8001d4a <I2CVEML3328BothDataAvailableCallback>
		return;
 8001fbe:	e053      	b.n	8002068 <I2CDevicesMainLoop+0x11c>


	// TSL25911
	//--------------------------------------------------------	TSL25911 START
	// ---- TSL25911 Right @ I2C1 driver ----
	if( (RightTSL25911.ucOperationStatus != TSL25911_ERROR) )
 8001fc0:	4b2e      	ldr	r3, [pc, #184]	; (800207c <I2CDevicesMainLoop+0x130>)
 8001fc2:	785b      	ldrb	r3, [r3, #1]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d008      	beq.n	8001fdc <I2CDevicesMainLoop+0x90>
	{
		//if( (RightTSL25911.ucOperationStatus == TSL25911_UNKNOWN_STATE) 	||
		//		(RightTSL25911.ucOperationStatus == TSL25911_ENABLED) 		||
		//		(RightTSL25911.ucOperationStatus == TSL25911_CONFIGURED) 	||
		//		(RightTSL25911.ucOperationStatus == TSL25911_CH_READ_DONE) 		)
		if( (RightTSL25911.ucOperationStatus != TSL25911_WAIT_NEXT_READ) )
 8001fca:	4b2c      	ldr	r3, [pc, #176]	; (800207c <I2CDevicesMainLoop+0x130>)
 8001fcc:	785b      	ldrb	r3, [r3, #1]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d003      	beq.n	8001fdc <I2CDevicesMainLoop+0x90>
		{
			TSL25911MainLoop(RIGHT);
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	f000 fe1f 	bl	8002c18 <TSL25911MainLoop>
			return;
 8001fda:	e045      	b.n	8002068 <I2CDevicesMainLoop+0x11c>
		}
	}
	// --------------------------------------

	// ---- TSL25911 Left  @ I2C3 driver ----
	if( (LeftTSL25911.ucOperationStatus != TSL25911_ERROR) )
 8001fdc:	4b28      	ldr	r3, [pc, #160]	; (8002080 <I2CDevicesMainLoop+0x134>)
 8001fde:	785b      	ldrb	r3, [r3, #1]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d008      	beq.n	8001ff8 <I2CDevicesMainLoop+0xac>
	{
		//if( (LeftTSL25911.ucOperationStatus == TSL25911_UNKNOWN_STATE) 		||
		//		(LeftTSL25911.ucOperationStatus == TSL25911_ENABLED) 		||
		//		(LeftTSL25911.ucOperationStatus == TSL25911_CONFIGURED) 	||
		//		(LeftTSL25911.ucOperationStatus == TSL25911_CH_READ_DONE) 		)
		if( (LeftTSL25911.ucOperationStatus != TSL25911_WAIT_NEXT_READ) )
 8001fe6:	4b26      	ldr	r3, [pc, #152]	; (8002080 <I2CDevicesMainLoop+0x134>)
 8001fe8:	785b      	ldrb	r3, [r3, #1]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d003      	beq.n	8001ff8 <I2CDevicesMainLoop+0xac>
		{
			TSL25911MainLoop(LEFT);
 8001ff0:	2002      	movs	r0, #2
 8001ff2:	f000 fe11 	bl	8002c18 <TSL25911MainLoop>
			return;
 8001ff6:	e037      	b.n	8002068 <I2CDevicesMainLoop+0x11c>
		}
	}
	// --------------------------------------

	// ---- check the callback condition ----
	if( (RightTSL25911Result.ucNewResultIsAvailable) && (LeftTSL25911Result.ucNewResultIsAvailable) )
 8001ff8:	4b22      	ldr	r3, [pc, #136]	; (8002084 <I2CDevicesMainLoop+0x138>)
 8001ffa:	791b      	ldrb	r3, [r3, #4]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d011      	beq.n	8002026 <I2CDevicesMainLoop+0xda>
 8002002:	4b21      	ldr	r3, [pc, #132]	; (8002088 <I2CDevicesMainLoop+0x13c>)
 8002004:	791b      	ldrb	r3, [r3, #4]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00c      	beq.n	8002026 <I2CDevicesMainLoop+0xda>
	{
		I2CTSL25911DataAvailableCallback(RightTSL25911Result, LeftTSL25911Result);
 800200c:	4b1e      	ldr	r3, [pc, #120]	; (8002088 <I2CDevicesMainLoop+0x13c>)
 800200e:	491d      	ldr	r1, [pc, #116]	; (8002084 <I2CDevicesMainLoop+0x138>)
 8002010:	cb0c      	ldmia	r3, {r2, r3}
 8002012:	c903      	ldmia	r1, {r0, r1}
 8002014:	f7ff ff50 	bl	8001eb8 <I2CTSL25911DataAvailableCallback>
		RightTSL25911Result.ucNewResultIsAvailable = 0;
 8002018:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <I2CDevicesMainLoop+0x138>)
 800201a:	2200      	movs	r2, #0
 800201c:	711a      	strb	r2, [r3, #4]
		LeftTSL25911Result.ucNewResultIsAvailable = 0;
 800201e:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <I2CDevicesMainLoop+0x13c>)
 8002020:	2200      	movs	r2, #0
 8002022:	711a      	strb	r2, [r3, #4]
		return;
 8002024:	e020      	b.n	8002068 <I2CDevicesMainLoop+0x11c>



	// VEML3328
	// restart sensor reading
	RightVEML3328.I2CReadingState = NoI2CReadingInProgress;		// restart RIGHT VEML
 8002026:	4b13      	ldr	r3, [pc, #76]	; (8002074 <I2CDevicesMainLoop+0x128>)
 8002028:	2200      	movs	r2, #0
 800202a:	711a      	strb	r2, [r3, #4]
	LeftVEML3328.I2CReadingState  = NoI2CReadingInProgress;		// restart LEFT VEML
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <I2CDevicesMainLoop+0x12c>)
 800202e:	2200      	movs	r2, #0
 8002030:	711a      	strb	r2, [r3, #4]

	// TSL25911
	// restart reading
	if( (RightTSL25911.ucOperationStatus 	!= TSL25911_ERROR) && (RightTSL25911.ucOperationStatus 	== TSL25911_WAIT_NEXT_READ) ) 	RightTSL25911.ucOperationStatus = TSL25911_CONFIGURED;		// the sensor is supposed to be configured => ready for another read try
 8002032:	4b12      	ldr	r3, [pc, #72]	; (800207c <I2CDevicesMainLoop+0x130>)
 8002034:	785b      	ldrb	r3, [r3, #1]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b01      	cmp	r3, #1
 800203a:	d007      	beq.n	800204c <I2CDevicesMainLoop+0x100>
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <I2CDevicesMainLoop+0x130>)
 800203e:	785b      	ldrb	r3, [r3, #1]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b08      	cmp	r3, #8
 8002044:	d102      	bne.n	800204c <I2CDevicesMainLoop+0x100>
 8002046:	4b0d      	ldr	r3, [pc, #52]	; (800207c <I2CDevicesMainLoop+0x130>)
 8002048:	2205      	movs	r2, #5
 800204a:	705a      	strb	r2, [r3, #1]
	if( (LeftTSL25911.ucOperationStatus 	!= TSL25911_ERROR) && (LeftTSL25911.ucOperationStatus 	== TSL25911_WAIT_NEXT_READ) ) 	LeftTSL25911.ucOperationStatus	= TSL25911_CONFIGURED;		// the sensor is supposed to be configured => ready for another read try
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <I2CDevicesMainLoop+0x134>)
 800204e:	785b      	ldrb	r3, [r3, #1]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b01      	cmp	r3, #1
 8002054:	d007      	beq.n	8002066 <I2CDevicesMainLoop+0x11a>
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <I2CDevicesMainLoop+0x134>)
 8002058:	785b      	ldrb	r3, [r3, #1]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b08      	cmp	r3, #8
 800205e:	d102      	bne.n	8002066 <I2CDevicesMainLoop+0x11a>
 8002060:	4b07      	ldr	r3, [pc, #28]	; (8002080 <I2CDevicesMainLoop+0x134>)
 8002062:	2205      	movs	r2, #5
 8002064:	705a      	strb	r2, [r3, #1]




	return;
 8002066:	bf00      	nop
}
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000800 	.word	0x20000800
 8002070:	20000978 	.word	0x20000978
 8002074:	2000081c 	.word	0x2000081c
 8002078:	20000848 	.word	0x20000848
 800207c:	20000984 	.word	0x20000984
 8002080:	20000998 	.word	0x20000998
 8002084:	20000990 	.word	0x20000990
 8002088:	200009a4 	.word	0x200009a4

0800208c <I2CDevicesTimer1KHZISR>:
//----------------------------------------------------------------------------------
void I2CDevicesTimer1KHZISR(void)	// 1KHZ timer function called from System ISR from stm32f4xx_it.c file @ SysTick Function (!!! keep as short as possible !!!)
{	// used for timeout checking of the I2C operations
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0

	// EEPROM 24C16
	EEPROMTimer1KHZISR();
 8002090:	f000 fd88 	bl	8002ba4 <EEPROMTimer1KHZISR>

	// TSL25911
	TSL25911Timer1KHZISR();
 8002094:	f000 ff6c 	bl	8002f70 <TSL25911Timer1KHZISR>


	// VEML3328
	if(m_ucTimerSharing100HZCounter < I2C_TIMER_SHARING_1KHZ)		m_ucTimerSharing100HZCounter ++;	// 0->1,1->2,2->3,3->4,4->5,5->6,6->7,7->8,8->9
 8002098:	4b21      	ldr	r3, [pc, #132]	; (8002120 <I2CDevicesTimer1KHZISR+0x94>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b08      	cmp	r3, #8
 800209e:	d806      	bhi.n	80020ae <I2CDevicesTimer1KHZISR+0x22>
 80020a0:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <I2CDevicesTimer1KHZISR+0x94>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	3301      	adds	r3, #1
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <I2CDevicesTimer1KHZISR+0x94>)
 80020aa:	701a      	strb	r2, [r3, #0]
 80020ac:	e002      	b.n	80020b4 <I2CDevicesTimer1KHZISR+0x28>
	else 															m_ucTimerSharing100HZCounter = 0;	// 9->0  => total number of rounds = (I2C_TIMER_SHARING_1KHZ + 1) =in range of= [0 ... I2C_TIMER_SHARING_1KHZ]
 80020ae:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <I2CDevicesTimer1KHZISR+0x94>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
																											// freq. rate = 1KHZ/(I2C_TIMER_SHARING_1KHZ + 1)

	// case 0 => RIGHT Side VEML3328 color sensor timeout checking
	if( (m_ucTimerSharing100HZCounter == 0) )
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <I2CDevicesTimer1KHZISR+0x94>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <I2CDevicesTimer1KHZISR+0x36>
	{
		VEML3328RightTimeout100HZ();
 80020bc:	f000 fc00 	bl	80028c0 <VEML3328RightTimeout100HZ>
		return;
 80020c0:	e02c      	b.n	800211c <I2CDevicesTimer1KHZISR+0x90>
	}

	// case 1 => LEFT Side VEML3328 color sensor timeout checking
	if( (m_ucTimerSharing100HZCounter == 1) )
 80020c2:	4b17      	ldr	r3, [pc, #92]	; (8002120 <I2CDevicesTimer1KHZISR+0x94>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d102      	bne.n	80020d0 <I2CDevicesTimer1KHZISR+0x44>
	{
		VEML3328LeftTimeout100HZ();
 80020ca:	f000 fc21 	bl	8002910 <VEML3328LeftTimeout100HZ>
		return;
 80020ce:	e025      	b.n	800211c <I2CDevicesTimer1KHZISR+0x90>
	}


	// case 2 => TSL25911 Right
	if( (m_ucTimerSharing100HZCounter == 2) )
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <I2CDevicesTimer1KHZISR+0x94>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d016      	beq.n	8002106 <I2CDevicesTimer1KHZISR+0x7a>
	{
		return;
	}
	// case 3 => TSL25911 Left
	if( (m_ucTimerSharing100HZCounter == 3) )
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <I2CDevicesTimer1KHZISR+0x94>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d014      	beq.n	800210a <I2CDevicesTimer1KHZISR+0x7e>
	{
		return;
	}

	// case 4 => LSM9DS1 Magnetometer
	if( (m_ucTimerSharing100HZCounter == 4) )
 80020e0:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <I2CDevicesTimer1KHZISR+0x94>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d012      	beq.n	800210e <I2CDevicesTimer1KHZISR+0x82>
	{
		return;
	}
	// case 5 => LSM9DS1 Accelerometer
	if( (m_ucTimerSharing100HZCounter == 5) )
 80020e8:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <I2CDevicesTimer1KHZISR+0x94>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b05      	cmp	r3, #5
 80020ee:	d010      	beq.n	8002112 <I2CDevicesTimer1KHZISR+0x86>
	{
		return;
	}

	// case 6 => INA219
	if( (m_ucTimerSharing100HZCounter == 6) )
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <I2CDevicesTimer1KHZISR+0x94>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b06      	cmp	r3, #6
 80020f6:	d00e      	beq.n	8002116 <I2CDevicesTimer1KHZISR+0x8a>
	}

	// case 7 =>
	// case 8 =>
	// case 9 => I2C Error management
	if( (m_ucTimerSharing100HZCounter == 9) )
 80020f8:	4b09      	ldr	r3, [pc, #36]	; (8002120 <I2CDevicesTimer1KHZISR+0x94>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b09      	cmp	r3, #9
 80020fe:	d10c      	bne.n	800211a <I2CDevicesTimer1KHZISR+0x8e>
	{
		I2CErrorTimer100HZ();
 8002100:	f000 ffb4 	bl	800306c <I2CErrorTimer100HZ>
		return;
 8002104:	e00a      	b.n	800211c <I2CDevicesTimer1KHZISR+0x90>
		return;
 8002106:	bf00      	nop
 8002108:	e008      	b.n	800211c <I2CDevicesTimer1KHZISR+0x90>
		return;
 800210a:	bf00      	nop
 800210c:	e006      	b.n	800211c <I2CDevicesTimer1KHZISR+0x90>
		return;
 800210e:	bf00      	nop
 8002110:	e004      	b.n	800211c <I2CDevicesTimer1KHZISR+0x90>
		return;
 8002112:	bf00      	nop
 8002114:	e002      	b.n	800211c <I2CDevicesTimer1KHZISR+0x90>
		return;
 8002116:	bf00      	nop
 8002118:	e000      	b.n	800211c <I2CDevicesTimer1KHZISR+0x90>





	return;
 800211a:	bf00      	nop
}
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000819 	.word	0x20000819

08002124 <HAL_I2C_MemTxCpltCallback>:


// STM32 HAL CALLBACK
//==================================================================================================================== HAL_START
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)		// TX Complete callback
{	//UNUSED(hi2c);
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance == I2C1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a10      	ldr	r2, [pc, #64]	; (8002174 <HAL_I2C_MemTxCpltCallback+0x50>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d107      	bne.n	8002146 <HAL_I2C_MemTxCpltCallback+0x22>
  {	// I2C1 = RIGHT Side => TX done on I2C1

	  // ----------- VEML3328 -----------
	  // check if the VEML3328 configuration is in progress (command 0x00 to set the device to normal operation mode and not power down mode or standby SD0=0, SD1=0)
	  if( (RightVEML3328.I2CReadingState == I2CSetConfigRegister) )
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_I2C_MemTxCpltCallback+0x54>)
 8002138:	791b      	ldrb	r3, [r3, #4]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d110      	bne.n	8002160 <HAL_I2C_MemTxCpltCallback+0x3c>
	  {		// VEML3328 communication is in progress.
		  RightVEML3328.TXCallbackStatus = CALLBACK_RECEIVED;	// the last I2C operation is finished
 800213e:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <HAL_I2C_MemTxCpltCallback+0x54>)
 8002140:	2201      	movs	r2, #1
 8002142:	75da      	strb	r2, [r3, #23]
		  return;
 8002144:	e011      	b.n	800216a <HAL_I2C_MemTxCpltCallback+0x46>


	  return;
  }

  if(hi2c->Instance == I2C3)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a0c      	ldr	r2, [pc, #48]	; (800217c <HAL_I2C_MemTxCpltCallback+0x58>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d109      	bne.n	8002164 <HAL_I2C_MemTxCpltCallback+0x40>
  {	// I2C3 = LEFT Side => TX done on I2C3

	  // ----------- VEML3328 -----------
	  // check if the VEML3328 configuration is in progress (command 0x00 to set the device to normal operation mode and not power down mode or standby SD0=0, SD1=0)
	  if( (LeftVEML3328.I2CReadingState == I2CSetConfigRegister) )
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_I2C_MemTxCpltCallback+0x5c>)
 8002152:	791b      	ldrb	r3, [r3, #4]
 8002154:	2b02      	cmp	r3, #2
 8002156:	d107      	bne.n	8002168 <HAL_I2C_MemTxCpltCallback+0x44>
	  {		// VEML3328 communication is in progress.
		  LeftVEML3328.TXCallbackStatus = CALLBACK_RECEIVED;	// the last I2C operation is finished
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_I2C_MemTxCpltCallback+0x5c>)
 800215a:	2201      	movs	r2, #1
 800215c:	75da      	strb	r2, [r3, #23]
		  return;
 800215e:	e004      	b.n	800216a <HAL_I2C_MemTxCpltCallback+0x46>
	  return;
 8002160:	bf00      	nop
 8002162:	e002      	b.n	800216a <HAL_I2C_MemTxCpltCallback+0x46>
	  return;
  }



  return;
 8002164:	bf00      	nop
 8002166:	e000      	b.n	800216a <HAL_I2C_MemTxCpltCallback+0x46>
	  return;
 8002168:	bf00      	nop
}
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	40005400 	.word	0x40005400
 8002178:	2000081c 	.word	0x2000081c
 800217c:	40005c00 	.word	0x40005c00
 8002180:	20000848 	.word	0x20000848

08002184 <HAL_I2C_MemRxCpltCallback>:
//----------------------------------------------------------------------------------
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)		// RX Complete callback
{	//UNUSED(hi2c);
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance == I2C1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <HAL_I2C_MemRxCpltCallback+0x84>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d114      	bne.n	80021c0 <HAL_I2C_MemRxCpltCallback+0x3c>
  {	// I2C1 = RIGHT Side => RX done on I2C1

	  // ----------- VEML3328 -----------
	  // check if the VEML3328 reading is in progress
	  if( (RightVEML3328.I2CReadingState != I2CReadingDone) && (RightVEML3328.I2CReadingState != NoI2CReadingInProgress) )
 8002196:	4b1d      	ldr	r3, [pc, #116]	; (800220c <HAL_I2C_MemRxCpltCallback+0x88>)
 8002198:	791b      	ldrb	r3, [r3, #4]
 800219a:	2b0a      	cmp	r3, #10
 800219c:	d007      	beq.n	80021ae <HAL_I2C_MemRxCpltCallback+0x2a>
 800219e:	4b1b      	ldr	r3, [pc, #108]	; (800220c <HAL_I2C_MemRxCpltCallback+0x88>)
 80021a0:	791b      	ldrb	r3, [r3, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_I2C_MemRxCpltCallback+0x2a>
	  {		// VEML3328 communication is in progress, and the last reading is now done.
		  RightVEML3328.RXCallbackStatus = CALLBACK_RECEIVED;	// the last I2C operation is finished
 80021a6:	4b19      	ldr	r3, [pc, #100]	; (800220c <HAL_I2C_MemRxCpltCallback+0x88>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	759a      	strb	r2, [r3, #22]
		  return;
 80021ac:	e027      	b.n	80021fe <HAL_I2C_MemRxCpltCallback+0x7a>
	  }
	  // --------------------------------

	  // ----------- TSL25911 -----------
	  if( RightTSL25911.ucOperationStatus == TSL25911_TRY_2_READ )
 80021ae:	4b18      	ldr	r3, [pc, #96]	; (8002210 <HAL_I2C_MemRxCpltCallback+0x8c>)
 80021b0:	785b      	ldrb	r3, [r3, #1]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b06      	cmp	r3, #6
 80021b6:	d11d      	bne.n	80021f4 <HAL_I2C_MemRxCpltCallback+0x70>
	  {	// Reading (read) DONE
		  RightTSL25911.ucOperationStatus = TSL25911_CH_READ_DONE;
 80021b8:	4b15      	ldr	r3, [pc, #84]	; (8002210 <HAL_I2C_MemRxCpltCallback+0x8c>)
 80021ba:	2207      	movs	r2, #7
 80021bc:	705a      	strb	r2, [r3, #1]
		  return;
 80021be:	e01e      	b.n	80021fe <HAL_I2C_MemRxCpltCallback+0x7a>


	  return;
  }

  if(hi2c->Instance == I2C3)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a13      	ldr	r2, [pc, #76]	; (8002214 <HAL_I2C_MemRxCpltCallback+0x90>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d116      	bne.n	80021f8 <HAL_I2C_MemRxCpltCallback+0x74>
  {	// I2C3 = LEFT Side => RX done on I2C2

	  // ----------- VEML3328 -----------
	  // check if the VEML3328 reading is in progress
	  if( (LeftVEML3328.I2CReadingState != I2CReadingDone) && (LeftVEML3328.I2CReadingState != NoI2CReadingInProgress) )
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <HAL_I2C_MemRxCpltCallback+0x94>)
 80021cc:	791b      	ldrb	r3, [r3, #4]
 80021ce:	2b0a      	cmp	r3, #10
 80021d0:	d007      	beq.n	80021e2 <HAL_I2C_MemRxCpltCallback+0x5e>
 80021d2:	4b11      	ldr	r3, [pc, #68]	; (8002218 <HAL_I2C_MemRxCpltCallback+0x94>)
 80021d4:	791b      	ldrb	r3, [r3, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_I2C_MemRxCpltCallback+0x5e>
	  {		// VEML3328 communication is in progress, and the last reading is now done.
		  LeftVEML3328.RXCallbackStatus = CALLBACK_RECEIVED;	// the last I2C operation is finished
 80021da:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <HAL_I2C_MemRxCpltCallback+0x94>)
 80021dc:	2201      	movs	r2, #1
 80021de:	759a      	strb	r2, [r3, #22]
		  return;
 80021e0:	e00d      	b.n	80021fe <HAL_I2C_MemRxCpltCallback+0x7a>
	  }
	  // --------------------------------

	  // ----------- TSL25911 -----------
	  if( LeftTSL25911.ucOperationStatus == TSL25911_TRY_2_READ )
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <HAL_I2C_MemRxCpltCallback+0x98>)
 80021e4:	785b      	ldrb	r3, [r3, #1]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b06      	cmp	r3, #6
 80021ea:	d107      	bne.n	80021fc <HAL_I2C_MemRxCpltCallback+0x78>
	  {	// Reading (read) DONE
		  LeftTSL25911.ucOperationStatus = TSL25911_CH_READ_DONE;
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_I2C_MemRxCpltCallback+0x98>)
 80021ee:	2207      	movs	r2, #7
 80021f0:	705a      	strb	r2, [r3, #1]
		  return;
 80021f2:	e004      	b.n	80021fe <HAL_I2C_MemRxCpltCallback+0x7a>
	  return;
 80021f4:	bf00      	nop
 80021f6:	e002      	b.n	80021fe <HAL_I2C_MemRxCpltCallback+0x7a>
	  return;
  }



  return;
 80021f8:	bf00      	nop
 80021fa:	e000      	b.n	80021fe <HAL_I2C_MemRxCpltCallback+0x7a>
	  return;
 80021fc:	bf00      	nop

}
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	40005400 	.word	0x40005400
 800220c:	2000081c 	.word	0x2000081c
 8002210:	20000984 	.word	0x20000984
 8002214:	40005c00 	.word	0x40005c00
 8002218:	20000848 	.word	0x20000848
 800221c:	20000998 	.word	0x20000998

08002220 <HandleVEML3328Loop>:
	return;
}
*/
//----------------------------------------------------------------------------------
static void HandleVEML3328Loop(VEML3328TypeDef *VEML3328)
{
 8002220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002222:	b087      	sub	sp, #28
 8002224:	af04      	add	r7, sp, #16
 8002226:	6078      	str	r0, [r7, #4]
	// ----------- STEP 0 ------------
	if( (VEML3328->I2CReadingState == NoI2CReadingInProgress) )
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	791b      	ldrb	r3, [r3, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d132      	bne.n	8002296 <HandleVEML3328Loop+0x76>
	{	// no reading is in progress => start a new reading
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH
		// HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
		// !!!!! in case of I2C Error this function "HAL_I2C_Mem_Read_IT()" takes up to 30ms => STUPID HALL LAYER !!!!!
		if( (VEML3328->SensorSide == RIGHT) )		HAL_ErrorCode = HAL_I2C_Mem_Read_IT(&hi2c1, VEML3328->uiI2CAddress, (uint16_t)0x00, (uint16_t)1, m_ucI2CRXDataBuffer, (uint16_t)2);		// RIGHT => I2C1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d10f      	bne.n	8002258 <HandleVEML3328Loop+0x38>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	8859      	ldrh	r1, [r3, #2]
 800223c:	2302      	movs	r3, #2
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	4b9a      	ldr	r3, [pc, #616]	; (80024ac <HandleVEML3328Loop+0x28c>)
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	2301      	movs	r3, #1
 8002246:	2200      	movs	r2, #0
 8002248:	4899      	ldr	r0, [pc, #612]	; (80024b0 <HandleVEML3328Loop+0x290>)
 800224a:	f00a fb27 	bl	800c89c <HAL_I2C_Mem_Read_IT>
 800224e:	4603      	mov	r3, r0
 8002250:	461a      	mov	r2, r3
 8002252:	4b98      	ldr	r3, [pc, #608]	; (80024b4 <HandleVEML3328Loop+0x294>)
 8002254:	701a      	strb	r2, [r3, #0]
 8002256:	e00e      	b.n	8002276 <HandleVEML3328Loop+0x56>
		else										HAL_ErrorCode = HAL_I2C_Mem_Read_IT(&hi2c3, VEML3328->uiI2CAddress, (uint16_t)0x00, (uint16_t)1, m_ucI2CRXDataBuffer, (uint16_t)2);		// LEFT  => I2C3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	8859      	ldrh	r1, [r3, #2]
 800225c:	2302      	movs	r3, #2
 800225e:	9301      	str	r3, [sp, #4]
 8002260:	4b92      	ldr	r3, [pc, #584]	; (80024ac <HandleVEML3328Loop+0x28c>)
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	2301      	movs	r3, #1
 8002266:	2200      	movs	r2, #0
 8002268:	4893      	ldr	r0, [pc, #588]	; (80024b8 <HandleVEML3328Loop+0x298>)
 800226a:	f00a fb17 	bl	800c89c <HAL_I2C_Mem_Read_IT>
 800226e:	4603      	mov	r3, r0
 8002270:	461a      	mov	r2, r3
 8002272:	4b90      	ldr	r3, [pc, #576]	; (80024b4 <HandleVEML3328Loop+0x294>)
 8002274:	701a      	strb	r2, [r3, #0]
		{	// not yet finished the previous I2C operation
			// !!! some timeout may be useful !!! (there is the system timeout)
			return;
		}
		*/
		if( (HAL_ErrorCode != HAL_OK) )
 8002276:	4b8f      	ldr	r3, [pc, #572]	; (80024b4 <HandleVEML3328Loop+0x294>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d007      	beq.n	800228e <HandleVEML3328Loop+0x6e>
		{	// it can also be that the return was HAL_BUSY, but just treat it as an ERROR
			VEML3328ErrorDetected(VEML3328,ERROR_VEML3328_01);		// set the error on the sensor data
 800227e:	2101      	movs	r1, #1
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 fa91 	bl	80027a8 <VEML3328ErrorDetected>
			VEML3328->I2CReadingState = I2CReadingDone;	// indicate that the reading is done because of some I2CError
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	220a      	movs	r2, #10
 800228a:	711a      	strb	r2, [r3, #4]
			return;
 800228c:	e287      	b.n	800279e <HandleVEML3328Loop+0x57e>
		}
		VEML3328->I2CReadingState = I2CReadingConfigRegister;	// indicate that the conf. register is expected to be read by the I2C engine (waiting for RXCallback)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	711a      	strb	r2, [r3, #4]
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  //	debug on PC13 LOW
		return;
 8002294:	e283      	b.n	800279e <HandleVEML3328Loop+0x57e>
	}
	// -------------------------------

	// ----------- STEP 1 ------------
	if( (VEML3328->I2CReadingState == I2CReadingConfigRegister) )
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	791b      	ldrb	r3, [r3, #4]
 800229a:	2b01      	cmp	r3, #1
 800229c:	f040 8093 	bne.w	80023c6 <HandleVEML3328Loop+0x1a6>
	{	// no reading is in progress => start a new reading
		// check first if the I2CRX complete callback was received after the previous step
		if( (VEML3328->RXCallbackStatus != CALLBACK_RECEIVED) )
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7d9b      	ldrb	r3, [r3, #22]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	f040 826b 	bne.w	8002780 <HandleVEML3328Loop+0x560>
		{	// previous operation not yet done
			// !!! some timeout may be useful !!!
			return;
		}
		// else => callback was received so get to the next step and clear the callback flag
		VEML3328->RXCallbackStatus = CALLBACK_NOT_RECEIVED;	// clear the callback flag
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	759a      	strb	r2, [r3, #22]
		// store the status register data in the sensor variable
		VEML3328->MeasuredData.uiConfiguration   = (uint16_t)m_ucI2CRXDataBuffer[1];	// high byte
 80022b0:	4b7e      	ldr	r3, [pc, #504]	; (80024ac <HandleVEML3328Loop+0x28c>)
 80022b2:	785b      	ldrb	r3, [r3, #1]
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	811a      	strh	r2, [r3, #8]
		VEML3328->MeasuredData.uiConfiguration <<= 8;	// shift to high part
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	891b      	ldrh	r3, [r3, #8]
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	811a      	strh	r2, [r3, #8]
		VEML3328->MeasuredData.uiConfiguration  |= (uint16_t)m_ucI2CRXDataBuffer[0];	// low byte
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	891a      	ldrh	r2, [r3, #8]
 80022ca:	4b78      	ldr	r3, [pc, #480]	; (80024ac <HandleVEML3328Loop+0x28c>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	4313      	orrs	r3, r2
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	811a      	strh	r2, [r3, #8]
		// check if the sensor is in power down mode or not
		if( (VEML3328->MeasuredData.uiConfiguration & (0x0001<<15U)) || (VEML3328->MeasuredData.uiConfiguration & (0x0001 << 0U)) )
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	891b      	ldrh	r3, [r3, #8]
 80022dc:	b21b      	sxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	db05      	blt.n	80022ee <HandleVEML3328Loop+0xce>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	891b      	ldrh	r3, [r3, #8]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d038      	beq.n	8002360 <HandleVEML3328Loop+0x140>
		{	// at least one of the SD1 or SD0 are not set to 0 => both must be set to 0 to enable POWER ON mode of the sensor
			m_ucI2CRXDataBuffer[0] = 0;
 80022ee:	4b6f      	ldr	r3, [pc, #444]	; (80024ac <HandleVEML3328Loop+0x28c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
			m_ucI2CRXDataBuffer[1] = 0;
 80022f4:	4b6d      	ldr	r3, [pc, #436]	; (80024ac <HandleVEML3328Loop+0x28c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	705a      	strb	r2, [r3, #1]
			// HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
			if( (VEML3328->SensorSide == RIGHT) ) 		HAL_ErrorCode = HAL_I2C_Mem_Write_IT(&hi2c1, VEML3328->uiI2CAddress, (uint16_t)0x00, (uint16_t)1, m_ucI2CRXDataBuffer, (uint16_t)2);		// RIGHT => I2C1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d10f      	bne.n	8002322 <HandleVEML3328Loop+0x102>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	8859      	ldrh	r1, [r3, #2]
 8002306:	2302      	movs	r3, #2
 8002308:	9301      	str	r3, [sp, #4]
 800230a:	4b68      	ldr	r3, [pc, #416]	; (80024ac <HandleVEML3328Loop+0x28c>)
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	2301      	movs	r3, #1
 8002310:	2200      	movs	r2, #0
 8002312:	4867      	ldr	r0, [pc, #412]	; (80024b0 <HandleVEML3328Loop+0x290>)
 8002314:	f00a fa10 	bl	800c738 <HAL_I2C_Mem_Write_IT>
 8002318:	4603      	mov	r3, r0
 800231a:	461a      	mov	r2, r3
 800231c:	4b65      	ldr	r3, [pc, #404]	; (80024b4 <HandleVEML3328Loop+0x294>)
 800231e:	701a      	strb	r2, [r3, #0]
 8002320:	e00e      	b.n	8002340 <HandleVEML3328Loop+0x120>
			else 										HAL_ErrorCode = HAL_I2C_Mem_Write_IT(&hi2c3, VEML3328->uiI2CAddress, (uint16_t)0x00, (uint16_t)1, m_ucI2CRXDataBuffer, (uint16_t)2);		// LEFT  => I2C3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	8859      	ldrh	r1, [r3, #2]
 8002326:	2302      	movs	r3, #2
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	4b60      	ldr	r3, [pc, #384]	; (80024ac <HandleVEML3328Loop+0x28c>)
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	2301      	movs	r3, #1
 8002330:	2200      	movs	r2, #0
 8002332:	4861      	ldr	r0, [pc, #388]	; (80024b8 <HandleVEML3328Loop+0x298>)
 8002334:	f00a fa00 	bl	800c738 <HAL_I2C_Mem_Write_IT>
 8002338:	4603      	mov	r3, r0
 800233a:	461a      	mov	r2, r3
 800233c:	4b5d      	ldr	r3, [pc, #372]	; (80024b4 <HandleVEML3328Loop+0x294>)
 800233e:	701a      	strb	r2, [r3, #0]
			if( (HAL_ErrorCode != HAL_OK) )
 8002340:	4b5c      	ldr	r3, [pc, #368]	; (80024b4 <HandleVEML3328Loop+0x294>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d007      	beq.n	8002358 <HandleVEML3328Loop+0x138>
			{	// it can also be that the return was HAL_BUSY, but just treat it as an ERROR
				VEML3328ErrorDetected(VEML3328,ERROR_VEML3328_02);		// set the error on the sensor data
 8002348:	2102      	movs	r1, #2
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fa2c 	bl	80027a8 <VEML3328ErrorDetected>
				VEML3328->I2CReadingState = I2CReadingDone;	// indicate that the reading is done because of some I2CError
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	220a      	movs	r2, #10
 8002354:	711a      	strb	r2, [r3, #4]
				return;
 8002356:	e222      	b.n	800279e <HandleVEML3328Loop+0x57e>
			}
			VEML3328->I2CReadingState = I2CSetConfigRegister;	// indicate that the conf. register is expected to be read by the I2C engine (now waiting for TXCallback)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	711a      	strb	r2, [r3, #4]
			return;
 800235e:	e21e      	b.n	800279e <HandleVEML3328Loop+0x57e>
		}
		else
		{	// SD0 and SD1 are both in logical 0 state => the sensor is in POWER ON mode => can read the CLEAR data
			// HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
			if( (VEML3328->SensorSide == RIGHT) ) 		HAL_ErrorCode = HAL_I2C_Mem_Read_IT(&hi2c1, VEML3328->uiI2CAddress, (uint16_t)0x04, (uint16_t)1, m_ucI2CRXDataBuffer, (uint16_t)2);		// RIGHT => I2C1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d10f      	bne.n	8002388 <HandleVEML3328Loop+0x168>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	8859      	ldrh	r1, [r3, #2]
 800236c:	2302      	movs	r3, #2
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	4b4e      	ldr	r3, [pc, #312]	; (80024ac <HandleVEML3328Loop+0x28c>)
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2301      	movs	r3, #1
 8002376:	2204      	movs	r2, #4
 8002378:	484d      	ldr	r0, [pc, #308]	; (80024b0 <HandleVEML3328Loop+0x290>)
 800237a:	f00a fa8f 	bl	800c89c <HAL_I2C_Mem_Read_IT>
 800237e:	4603      	mov	r3, r0
 8002380:	461a      	mov	r2, r3
 8002382:	4b4c      	ldr	r3, [pc, #304]	; (80024b4 <HandleVEML3328Loop+0x294>)
 8002384:	701a      	strb	r2, [r3, #0]
 8002386:	e00e      	b.n	80023a6 <HandleVEML3328Loop+0x186>
			else 										HAL_ErrorCode = HAL_I2C_Mem_Read_IT(&hi2c3, VEML3328->uiI2CAddress, (uint16_t)0x04, (uint16_t)1, m_ucI2CRXDataBuffer, (uint16_t)2);		// LEFT  => I2C3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	8859      	ldrh	r1, [r3, #2]
 800238c:	2302      	movs	r3, #2
 800238e:	9301      	str	r3, [sp, #4]
 8002390:	4b46      	ldr	r3, [pc, #280]	; (80024ac <HandleVEML3328Loop+0x28c>)
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	2301      	movs	r3, #1
 8002396:	2204      	movs	r2, #4
 8002398:	4847      	ldr	r0, [pc, #284]	; (80024b8 <HandleVEML3328Loop+0x298>)
 800239a:	f00a fa7f 	bl	800c89c <HAL_I2C_Mem_Read_IT>
 800239e:	4603      	mov	r3, r0
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b44      	ldr	r3, [pc, #272]	; (80024b4 <HandleVEML3328Loop+0x294>)
 80023a4:	701a      	strb	r2, [r3, #0]
			if( (HAL_ErrorCode != HAL_OK) )
 80023a6:	4b43      	ldr	r3, [pc, #268]	; (80024b4 <HandleVEML3328Loop+0x294>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d007      	beq.n	80023be <HandleVEML3328Loop+0x19e>
			{	// it can also be that the return was HAL_BUSY, but just treat it as an ERROR
				VEML3328ErrorDetected(VEML3328,ERROR_VEML3328_03);		// set the error on the sensor data
 80023ae:	2104      	movs	r1, #4
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f9f9 	bl	80027a8 <VEML3328ErrorDetected>
				VEML3328->I2CReadingState = I2CReadingDone;		// indicate that the reading is done because of some I2CError
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	220a      	movs	r2, #10
 80023ba:	711a      	strb	r2, [r3, #4]
				return;
 80023bc:	e1ef      	b.n	800279e <HandleVEML3328Loop+0x57e>
			}
			VEML3328->I2CReadingState = I2CReadingClearData;	// indicate that the CLEAR. register is expected to be read by the I2C engine (waiting for RXCallback)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2203      	movs	r2, #3
 80023c2:	711a      	strb	r2, [r3, #4]
			return;
 80023c4:	e1eb      	b.n	800279e <HandleVEML3328Loop+0x57e>

	}
	// -------------------------------

	// ---------- STEP (2) ---------- (if the configuration register was previously configured this step is skipped)
	if( (VEML3328->I2CReadingState == I2CSetConfigRegister) )
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	791b      	ldrb	r3, [r3, #4]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d13a      	bne.n	8002444 <HandleVEML3328Loop+0x224>
	{	// the configuration register was set and now continue with reading the CLEAR data register
		if( (VEML3328->TXCallbackStatus != CALLBACK_RECEIVED) )
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	7ddb      	ldrb	r3, [r3, #23]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	f040 81d6 	bne.w	8002784 <HandleVEML3328Loop+0x564>
		{	// last operation is not yet done .. must wait longer
			// !!! some timeout may be useful !!!
			return;
		}
		// else => callback was received so get to the next step and clear the callback flag
		VEML3328->TXCallbackStatus = CALLBACK_NOT_RECEIVED;	// clear the callback flag
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	75da      	strb	r2, [r3, #23]

		// HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
		if( (VEML3328->SensorSide == RIGHT) ) 		HAL_ErrorCode = HAL_I2C_Mem_Read_IT(&hi2c1, VEML3328->uiI2CAddress, (uint16_t)0x04, (uint16_t)1, m_ucI2CRXDataBuffer, (uint16_t)2); 		// RIGHT => I2C1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d10f      	bne.n	8002406 <HandleVEML3328Loop+0x1e6>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	8859      	ldrh	r1, [r3, #2]
 80023ea:	2302      	movs	r3, #2
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	4b2f      	ldr	r3, [pc, #188]	; (80024ac <HandleVEML3328Loop+0x28c>)
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	2301      	movs	r3, #1
 80023f4:	2204      	movs	r2, #4
 80023f6:	482e      	ldr	r0, [pc, #184]	; (80024b0 <HandleVEML3328Loop+0x290>)
 80023f8:	f00a fa50 	bl	800c89c <HAL_I2C_Mem_Read_IT>
 80023fc:	4603      	mov	r3, r0
 80023fe:	461a      	mov	r2, r3
 8002400:	4b2c      	ldr	r3, [pc, #176]	; (80024b4 <HandleVEML3328Loop+0x294>)
 8002402:	701a      	strb	r2, [r3, #0]
 8002404:	e00e      	b.n	8002424 <HandleVEML3328Loop+0x204>
		else 										HAL_ErrorCode = HAL_I2C_Mem_Read_IT(&hi2c3, VEML3328->uiI2CAddress, (uint16_t)0x04, (uint16_t)1, m_ucI2CRXDataBuffer, (uint16_t)2);			// LEFT  => I2C3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	8859      	ldrh	r1, [r3, #2]
 800240a:	2302      	movs	r3, #2
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	4b27      	ldr	r3, [pc, #156]	; (80024ac <HandleVEML3328Loop+0x28c>)
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2301      	movs	r3, #1
 8002414:	2204      	movs	r2, #4
 8002416:	4828      	ldr	r0, [pc, #160]	; (80024b8 <HandleVEML3328Loop+0x298>)
 8002418:	f00a fa40 	bl	800c89c <HAL_I2C_Mem_Read_IT>
 800241c:	4603      	mov	r3, r0
 800241e:	461a      	mov	r2, r3
 8002420:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <HandleVEML3328Loop+0x294>)
 8002422:	701a      	strb	r2, [r3, #0]
		if( (HAL_ErrorCode != HAL_OK) )
 8002424:	4b23      	ldr	r3, [pc, #140]	; (80024b4 <HandleVEML3328Loop+0x294>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d007      	beq.n	800243c <HandleVEML3328Loop+0x21c>
		{	// it can also be that the return was HAL_BUSY, but just treat it as an ERROR
			VEML3328ErrorDetected(VEML3328,ERROR_VEML3328_04);		// set the error on the sensor data
 800242c:	2108      	movs	r1, #8
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f9ba 	bl	80027a8 <VEML3328ErrorDetected>
			VEML3328->I2CReadingState = I2CReadingDone;	// indicate that the reading is done because of some I2CError
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	220a      	movs	r2, #10
 8002438:	711a      	strb	r2, [r3, #4]
			return;
 800243a:	e1b0      	b.n	800279e <HandleVEML3328Loop+0x57e>
		}
		VEML3328->I2CReadingState = I2CReadingClearData;	// indicate that the CLEAR. register is expected to be read by the I2C engine (waiting for RXCallback)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2203      	movs	r2, #3
 8002440:	711a      	strb	r2, [r3, #4]
		return;
 8002442:	e1ac      	b.n	800279e <HandleVEML3328Loop+0x57e>
	}
	// -------------------------------

	// ----------- STEP 3 ------------
	if( (VEML3328->I2CReadingState == I2CReadingClearData) )
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	791b      	ldrb	r3, [r3, #4]
 8002448:	2b03      	cmp	r3, #3
 800244a:	d156      	bne.n	80024fa <HandleVEML3328Loop+0x2da>
	{	// check if reading CLEAR register is done
		if( (VEML3328->RXCallbackStatus != CALLBACK_RECEIVED) )
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7d9b      	ldrb	r3, [r3, #22]
 8002450:	2b01      	cmp	r3, #1
 8002452:	f040 8199 	bne.w	8002788 <HandleVEML3328Loop+0x568>
		{	// not yet, last operation is not yet done .. must wait longer
			// !!! some timeout may be useful !!!
			return;
		}
		// else => callback was received so get to the next step and clear the callback flag
		VEML3328->RXCallbackStatus = CALLBACK_NOT_RECEIVED;	// clear the callback flag
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	759a      	strb	r2, [r3, #22]

		// store the CLEAR data in the Sensor variable
		VEML3328->MeasuredData.uiClear   = (uint16_t)m_ucI2CRXDataBuffer[1];	// high byte
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <HandleVEML3328Loop+0x28c>)
 800245e:	785b      	ldrb	r3, [r3, #1]
 8002460:	b29a      	uxth	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	815a      	strh	r2, [r3, #10]
		VEML3328->MeasuredData.uiClear <<= 8;	//(*256)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	895b      	ldrh	r3, [r3, #10]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	b29a      	uxth	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	815a      	strh	r2, [r3, #10]
		VEML3328->MeasuredData.uiClear  += (uint16_t)m_ucI2CRXDataBuffer[0];	// low byte
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	895a      	ldrh	r2, [r3, #10]
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <HandleVEML3328Loop+0x28c>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	4413      	add	r3, r2
 800247e:	b29a      	uxth	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	815a      	strh	r2, [r3, #10]

		// start next I2C operation
		// HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
		if( (VEML3328->SensorSide == RIGHT) ) 		HAL_ErrorCode = HAL_I2C_Mem_Read_IT(&hi2c1, VEML3328->uiI2CAddress, (uint16_t)0x05, (uint16_t)1, m_ucI2CRXDataBuffer, (uint16_t)2); 		// RIGHT => I2C1
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d117      	bne.n	80024bc <HandleVEML3328Loop+0x29c>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	8859      	ldrh	r1, [r3, #2]
 8002490:	2302      	movs	r3, #2
 8002492:	9301      	str	r3, [sp, #4]
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HandleVEML3328Loop+0x28c>)
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	2301      	movs	r3, #1
 800249a:	2205      	movs	r2, #5
 800249c:	4804      	ldr	r0, [pc, #16]	; (80024b0 <HandleVEML3328Loop+0x290>)
 800249e:	f00a f9fd 	bl	800c89c <HAL_I2C_Mem_Read_IT>
 80024a2:	4603      	mov	r3, r0
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <HandleVEML3328Loop+0x294>)
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	e016      	b.n	80024da <HandleVEML3328Loop+0x2ba>
 80024ac:	20000804 	.word	0x20000804
 80024b0:	2000224c 	.word	0x2000224c
 80024b4:	20000818 	.word	0x20000818
 80024b8:	200022a0 	.word	0x200022a0
		else 										HAL_ErrorCode = HAL_I2C_Mem_Read_IT(&hi2c3, VEML3328->uiI2CAddress, (uint16_t)0x05, (uint16_t)1, m_ucI2CRXDataBuffer, (uint16_t)2);			// LEFT  => I2C3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	8859      	ldrh	r1, [r3, #2]
 80024c0:	2302      	movs	r3, #2
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	4b89      	ldr	r3, [pc, #548]	; (80026ec <HandleVEML3328Loop+0x4cc>)
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2301      	movs	r3, #1
 80024ca:	2205      	movs	r2, #5
 80024cc:	4888      	ldr	r0, [pc, #544]	; (80026f0 <HandleVEML3328Loop+0x4d0>)
 80024ce:	f00a f9e5 	bl	800c89c <HAL_I2C_Mem_Read_IT>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b87      	ldr	r3, [pc, #540]	; (80026f4 <HandleVEML3328Loop+0x4d4>)
 80024d8:	701a      	strb	r2, [r3, #0]
		if( (HAL_ErrorCode != HAL_OK) )
 80024da:	4b86      	ldr	r3, [pc, #536]	; (80026f4 <HandleVEML3328Loop+0x4d4>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <HandleVEML3328Loop+0x2d2>
		{	// it can also be that the return was HAL_BUSY, but just treat it as an ERROR
			VEML3328ErrorDetected(VEML3328,ERROR_VEML3328_05);		// set the error on the sensor data
 80024e2:	2110      	movs	r1, #16
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f95f 	bl	80027a8 <VEML3328ErrorDetected>
			VEML3328->I2CReadingState = I2CReadingDone;	// indicate that the reading is done because of some I2CError
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	220a      	movs	r2, #10
 80024ee:	711a      	strb	r2, [r3, #4]
			return;
 80024f0:	e155      	b.n	800279e <HandleVEML3328Loop+0x57e>
		}


		VEML3328->I2CReadingState = I2CReadingRedData;	// indicate that the RED. register is expected to be read by the I2C engine (waiting for RXCallback)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2204      	movs	r2, #4
 80024f6:	711a      	strb	r2, [r3, #4]
		return;
 80024f8:	e151      	b.n	800279e <HandleVEML3328Loop+0x57e>
	}
	// -------------------------------

	// ----------- STEP 4 ------------
	if( (VEML3328->I2CReadingState == I2CReadingRedData) )
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	791b      	ldrb	r3, [r3, #4]
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d14e      	bne.n	80025a0 <HandleVEML3328Loop+0x380>
	{	// check if reading RED register is done
		if( (VEML3328->RXCallbackStatus != CALLBACK_RECEIVED) )
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	7d9b      	ldrb	r3, [r3, #22]
 8002506:	2b01      	cmp	r3, #1
 8002508:	f040 8140 	bne.w	800278c <HandleVEML3328Loop+0x56c>
		{	// not yet, last operation is not yet done .. must wait longer
			// !!! some timeout may be useful !!!
			return;
		}
		// else => callback was received so get to the next step and clear the callback flag
		VEML3328->RXCallbackStatus = CALLBACK_NOT_RECEIVED;	// clear the callback flag
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	759a      	strb	r2, [r3, #22]

		// store the RED data in the Sensor variable
		VEML3328->MeasuredData.uiRed   = (uint16_t)m_ucI2CRXDataBuffer[1];	// high byte
 8002512:	4b76      	ldr	r3, [pc, #472]	; (80026ec <HandleVEML3328Loop+0x4cc>)
 8002514:	785b      	ldrb	r3, [r3, #1]
 8002516:	b29a      	uxth	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	819a      	strh	r2, [r3, #12]
		VEML3328->MeasuredData.uiRed <<= 8;	//(*256)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	899b      	ldrh	r3, [r3, #12]
 8002520:	021b      	lsls	r3, r3, #8
 8002522:	b29a      	uxth	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	819a      	strh	r2, [r3, #12]
		VEML3328->MeasuredData.uiRed  += (uint16_t)m_ucI2CRXDataBuffer[0];	// low byte
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	899a      	ldrh	r2, [r3, #12]
 800252c:	4b6f      	ldr	r3, [pc, #444]	; (80026ec <HandleVEML3328Loop+0x4cc>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	b29b      	uxth	r3, r3
 8002532:	4413      	add	r3, r2
 8002534:	b29a      	uxth	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	819a      	strh	r2, [r3, #12]

		// start next I2C operation
		// HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
		if( (VEML3328->SensorSide == RIGHT) ) 		HAL_ErrorCode = HAL_I2C_Mem_Read_IT(&hi2c1, VEML3328->uiI2CAddress, (uint16_t)0x06, (uint16_t)1, m_ucI2CRXDataBuffer, (uint16_t)2); 		// RIGHT => I2C1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d10f      	bne.n	8002562 <HandleVEML3328Loop+0x342>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	8859      	ldrh	r1, [r3, #2]
 8002546:	2302      	movs	r3, #2
 8002548:	9301      	str	r3, [sp, #4]
 800254a:	4b68      	ldr	r3, [pc, #416]	; (80026ec <HandleVEML3328Loop+0x4cc>)
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	2301      	movs	r3, #1
 8002550:	2206      	movs	r2, #6
 8002552:	4869      	ldr	r0, [pc, #420]	; (80026f8 <HandleVEML3328Loop+0x4d8>)
 8002554:	f00a f9a2 	bl	800c89c <HAL_I2C_Mem_Read_IT>
 8002558:	4603      	mov	r3, r0
 800255a:	461a      	mov	r2, r3
 800255c:	4b65      	ldr	r3, [pc, #404]	; (80026f4 <HandleVEML3328Loop+0x4d4>)
 800255e:	701a      	strb	r2, [r3, #0]
 8002560:	e00e      	b.n	8002580 <HandleVEML3328Loop+0x360>
		else 										HAL_ErrorCode = HAL_I2C_Mem_Read_IT(&hi2c3, VEML3328->uiI2CAddress, (uint16_t)0x06, (uint16_t)1, m_ucI2CRXDataBuffer, (uint16_t)2);			// LEFT  => I2C3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	8859      	ldrh	r1, [r3, #2]
 8002566:	2302      	movs	r3, #2
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	4b60      	ldr	r3, [pc, #384]	; (80026ec <HandleVEML3328Loop+0x4cc>)
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2301      	movs	r3, #1
 8002570:	2206      	movs	r2, #6
 8002572:	485f      	ldr	r0, [pc, #380]	; (80026f0 <HandleVEML3328Loop+0x4d0>)
 8002574:	f00a f992 	bl	800c89c <HAL_I2C_Mem_Read_IT>
 8002578:	4603      	mov	r3, r0
 800257a:	461a      	mov	r2, r3
 800257c:	4b5d      	ldr	r3, [pc, #372]	; (80026f4 <HandleVEML3328Loop+0x4d4>)
 800257e:	701a      	strb	r2, [r3, #0]
		if( (HAL_ErrorCode != HAL_OK) )
 8002580:	4b5c      	ldr	r3, [pc, #368]	; (80026f4 <HandleVEML3328Loop+0x4d4>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d007      	beq.n	8002598 <HandleVEML3328Loop+0x378>
		{	// it can also be that the return was HAL_BUSY, but just treat it as an ERROR
			VEML3328ErrorDetected(VEML3328,ERROR_VEML3328_06);		// set the error on the sensor data
 8002588:	2120      	movs	r1, #32
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f90c 	bl	80027a8 <VEML3328ErrorDetected>
			VEML3328->I2CReadingState = I2CReadingDone;	// indicate that the reading is done because of some I2CError
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	220a      	movs	r2, #10
 8002594:	711a      	strb	r2, [r3, #4]
			return;
 8002596:	e102      	b.n	800279e <HandleVEML3328Loop+0x57e>
		}


		VEML3328->I2CReadingState = I2CReadingGreenData;	// indicate that the GREEN. register is expected to be read by the I2C engine (waiting for RXCallback)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2205      	movs	r2, #5
 800259c:	711a      	strb	r2, [r3, #4]
		return;
 800259e:	e0fe      	b.n	800279e <HandleVEML3328Loop+0x57e>
	}
	// -------------------------------

	// ----------- STEP 5 ------------
	if( (VEML3328->I2CReadingState == I2CReadingGreenData) )
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	791b      	ldrb	r3, [r3, #4]
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	d14e      	bne.n	8002646 <HandleVEML3328Loop+0x426>
	{	// check if reading GREEN register is done
		if( (VEML3328->RXCallbackStatus != CALLBACK_RECEIVED) )
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	7d9b      	ldrb	r3, [r3, #22]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	f040 80ef 	bne.w	8002790 <HandleVEML3328Loop+0x570>
		{	// not yet, last operation is not yet done .. must wait longer
			// !!! some timeout may be useful !!!
			return;
		}
		// else => callback was received so get to the next step and clear the callback flag
		VEML3328->RXCallbackStatus = CALLBACK_NOT_RECEIVED;	// clear the callback flag
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	759a      	strb	r2, [r3, #22]

		// store the GREEN data in the Sensor variable
		VEML3328->MeasuredData.uiGreen   = (uint16_t)m_ucI2CRXDataBuffer[1];	// high byte
 80025b8:	4b4c      	ldr	r3, [pc, #304]	; (80026ec <HandleVEML3328Loop+0x4cc>)
 80025ba:	785b      	ldrb	r3, [r3, #1]
 80025bc:	b29a      	uxth	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	81da      	strh	r2, [r3, #14]
		VEML3328->MeasuredData.uiGreen <<= 8;	//(*256)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	89db      	ldrh	r3, [r3, #14]
 80025c6:	021b      	lsls	r3, r3, #8
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	81da      	strh	r2, [r3, #14]
		VEML3328->MeasuredData.uiGreen  += (uint16_t)m_ucI2CRXDataBuffer[0];	// low byte
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	89da      	ldrh	r2, [r3, #14]
 80025d2:	4b46      	ldr	r3, [pc, #280]	; (80026ec <HandleVEML3328Loop+0x4cc>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	4413      	add	r3, r2
 80025da:	b29a      	uxth	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	81da      	strh	r2, [r3, #14]

		// start next I2C operation
		// HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
		if( (VEML3328->SensorSide == RIGHT) ) 		HAL_ErrorCode = HAL_I2C_Mem_Read_IT(&hi2c1, VEML3328->uiI2CAddress, (uint16_t)0x07, (uint16_t)1, m_ucI2CRXDataBuffer, (uint16_t)2); 		// RIGHT => I2C1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d10f      	bne.n	8002608 <HandleVEML3328Loop+0x3e8>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	8859      	ldrh	r1, [r3, #2]
 80025ec:	2302      	movs	r3, #2
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	4b3e      	ldr	r3, [pc, #248]	; (80026ec <HandleVEML3328Loop+0x4cc>)
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	2301      	movs	r3, #1
 80025f6:	2207      	movs	r2, #7
 80025f8:	483f      	ldr	r0, [pc, #252]	; (80026f8 <HandleVEML3328Loop+0x4d8>)
 80025fa:	f00a f94f 	bl	800c89c <HAL_I2C_Mem_Read_IT>
 80025fe:	4603      	mov	r3, r0
 8002600:	461a      	mov	r2, r3
 8002602:	4b3c      	ldr	r3, [pc, #240]	; (80026f4 <HandleVEML3328Loop+0x4d4>)
 8002604:	701a      	strb	r2, [r3, #0]
 8002606:	e00e      	b.n	8002626 <HandleVEML3328Loop+0x406>
		else 										HAL_ErrorCode = HAL_I2C_Mem_Read_IT(&hi2c3, VEML3328->uiI2CAddress, (uint16_t)0x07, (uint16_t)1, m_ucI2CRXDataBuffer, (uint16_t)2);			// LEFT  => I2C3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	8859      	ldrh	r1, [r3, #2]
 800260c:	2302      	movs	r3, #2
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	4b36      	ldr	r3, [pc, #216]	; (80026ec <HandleVEML3328Loop+0x4cc>)
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	2301      	movs	r3, #1
 8002616:	2207      	movs	r2, #7
 8002618:	4835      	ldr	r0, [pc, #212]	; (80026f0 <HandleVEML3328Loop+0x4d0>)
 800261a:	f00a f93f 	bl	800c89c <HAL_I2C_Mem_Read_IT>
 800261e:	4603      	mov	r3, r0
 8002620:	461a      	mov	r2, r3
 8002622:	4b34      	ldr	r3, [pc, #208]	; (80026f4 <HandleVEML3328Loop+0x4d4>)
 8002624:	701a      	strb	r2, [r3, #0]
		if( (HAL_ErrorCode != HAL_OK) )
 8002626:	4b33      	ldr	r3, [pc, #204]	; (80026f4 <HandleVEML3328Loop+0x4d4>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <HandleVEML3328Loop+0x41e>
		{	// it can also be that the return was HAL_BUSY, but just treat it as an ERROR
			VEML3328ErrorDetected(VEML3328,ERROR_VEML3328_07);		// set the error on the sensor data
 800262e:	2140      	movs	r1, #64	; 0x40
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f8b9 	bl	80027a8 <VEML3328ErrorDetected>
			VEML3328->I2CReadingState = I2CReadingDone;	// indicate that the reading is done because of some I2CError
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	220a      	movs	r2, #10
 800263a:	711a      	strb	r2, [r3, #4]
			return;
 800263c:	e0af      	b.n	800279e <HandleVEML3328Loop+0x57e>
		}


		VEML3328->I2CReadingState = I2CReadingBlueData;	// indicate that the BLUE. register is expected to be read by the I2C engine (waiting for RXCallback)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2206      	movs	r2, #6
 8002642:	711a      	strb	r2, [r3, #4]
		return;
 8002644:	e0ab      	b.n	800279e <HandleVEML3328Loop+0x57e>
	}
	// -------------------------------

	// ----------- STEP 6 ------------
	if( (VEML3328->I2CReadingState == I2CReadingBlueData) )
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	791b      	ldrb	r3, [r3, #4]
 800264a:	2b06      	cmp	r3, #6
 800264c:	d156      	bne.n	80026fc <HandleVEML3328Loop+0x4dc>
	{	// check if reading BLUE register is done
		if( (VEML3328->RXCallbackStatus != CALLBACK_RECEIVED) )
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	7d9b      	ldrb	r3, [r3, #22]
 8002652:	2b01      	cmp	r3, #1
 8002654:	f040 809e 	bne.w	8002794 <HandleVEML3328Loop+0x574>
		{	// not yet, last operation is not yet done .. must wait longer
			// !!! some timeout may be useful !!!
			return;
		}
		// else => callback was received so get to the next step and clear the callback flag
		VEML3328->RXCallbackStatus = CALLBACK_NOT_RECEIVED;	// clear the callback flag
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	759a      	strb	r2, [r3, #22]

		// store the BLUE data in the Sensor variable
		VEML3328->MeasuredData.uiBlue   = (uint16_t)m_ucI2CRXDataBuffer[1];	// high byte
 800265e:	4b23      	ldr	r3, [pc, #140]	; (80026ec <HandleVEML3328Loop+0x4cc>)
 8002660:	785b      	ldrb	r3, [r3, #1]
 8002662:	b29a      	uxth	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	821a      	strh	r2, [r3, #16]
		VEML3328->MeasuredData.uiBlue <<= 8;	//(*256)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	8a1b      	ldrh	r3, [r3, #16]
 800266c:	021b      	lsls	r3, r3, #8
 800266e:	b29a      	uxth	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	821a      	strh	r2, [r3, #16]
		VEML3328->MeasuredData.uiBlue  += (uint16_t)m_ucI2CRXDataBuffer[0];	// low byte
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	8a1a      	ldrh	r2, [r3, #16]
 8002678:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <HandleVEML3328Loop+0x4cc>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	b29b      	uxth	r3, r3
 800267e:	4413      	add	r3, r2
 8002680:	b29a      	uxth	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	821a      	strh	r2, [r3, #16]

		// start next I2C operation
		// HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
		if( (VEML3328->SensorSide == RIGHT) ) 		HAL_ErrorCode = HAL_I2C_Mem_Read_IT(&hi2c1, VEML3328->uiI2CAddress, (uint16_t)0x08, (uint16_t)1, m_ucI2CRXDataBuffer, (uint16_t)2); 		// RIGHT => I2C1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d10f      	bne.n	80026ae <HandleVEML3328Loop+0x48e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	8859      	ldrh	r1, [r3, #2]
 8002692:	2302      	movs	r3, #2
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <HandleVEML3328Loop+0x4cc>)
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	2301      	movs	r3, #1
 800269c:	2208      	movs	r2, #8
 800269e:	4816      	ldr	r0, [pc, #88]	; (80026f8 <HandleVEML3328Loop+0x4d8>)
 80026a0:	f00a f8fc 	bl	800c89c <HAL_I2C_Mem_Read_IT>
 80026a4:	4603      	mov	r3, r0
 80026a6:	461a      	mov	r2, r3
 80026a8:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <HandleVEML3328Loop+0x4d4>)
 80026aa:	701a      	strb	r2, [r3, #0]
 80026ac:	e00e      	b.n	80026cc <HandleVEML3328Loop+0x4ac>
		else 										HAL_ErrorCode = HAL_I2C_Mem_Read_IT(&hi2c3, VEML3328->uiI2CAddress, (uint16_t)0x08, (uint16_t)1, m_ucI2CRXDataBuffer, (uint16_t)2);			// LEFT  => I2C3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	8859      	ldrh	r1, [r3, #2]
 80026b2:	2302      	movs	r3, #2
 80026b4:	9301      	str	r3, [sp, #4]
 80026b6:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <HandleVEML3328Loop+0x4cc>)
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	2301      	movs	r3, #1
 80026bc:	2208      	movs	r2, #8
 80026be:	480c      	ldr	r0, [pc, #48]	; (80026f0 <HandleVEML3328Loop+0x4d0>)
 80026c0:	f00a f8ec 	bl	800c89c <HAL_I2C_Mem_Read_IT>
 80026c4:	4603      	mov	r3, r0
 80026c6:	461a      	mov	r2, r3
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HandleVEML3328Loop+0x4d4>)
 80026ca:	701a      	strb	r2, [r3, #0]
		if( (HAL_ErrorCode != HAL_OK) )
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <HandleVEML3328Loop+0x4d4>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d007      	beq.n	80026e4 <HandleVEML3328Loop+0x4c4>
		{	// it can also be that the return was HAL_BUSY, but just treat it as an ERROR
			VEML3328ErrorDetected(VEML3328,ERROR_VEML3328_08);		// set the error on the sensor data
 80026d4:	2180      	movs	r1, #128	; 0x80
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f866 	bl	80027a8 <VEML3328ErrorDetected>
			VEML3328->I2CReadingState = I2CReadingDone;	// indicate that the reading is done because of some I2CError
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	220a      	movs	r2, #10
 80026e0:	711a      	strb	r2, [r3, #4]
			return;
 80026e2:	e05c      	b.n	800279e <HandleVEML3328Loop+0x57e>
		}


		VEML3328->I2CReadingState = I2CReadingIRData;	// indicate that the IR. register is expected to be read by the I2C engine (waiting for RXCallback)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2207      	movs	r2, #7
 80026e8:	711a      	strb	r2, [r3, #4]
		return;
 80026ea:	e058      	b.n	800279e <HandleVEML3328Loop+0x57e>
 80026ec:	20000804 	.word	0x20000804
 80026f0:	200022a0 	.word	0x200022a0
 80026f4:	20000818 	.word	0x20000818
 80026f8:	2000224c 	.word	0x2000224c
	}
	// -------------------------------

	// ----------- STEP 7 ------------
	if( (VEML3328->I2CReadingState == I2CReadingIRData) )
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	791b      	ldrb	r3, [r3, #4]
 8002700:	2b07      	cmp	r3, #7
 8002702:	d149      	bne.n	8002798 <HandleVEML3328Loop+0x578>
	{	// check if reading IR register is done
		if( (VEML3328->RXCallbackStatus != CALLBACK_RECEIVED) )
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	7d9b      	ldrb	r3, [r3, #22]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d147      	bne.n	800279c <HandleVEML3328Loop+0x57c>
		{	// not yet, last operation is not yet done .. must wait longer
			// !!! some timeout may be useful !!!
			return;
		}
		// else => callback was received so get to the next step and clear the callback flag
		VEML3328->RXCallbackStatus = CALLBACK_NOT_RECEIVED;	// clear the callback flag
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	759a      	strb	r2, [r3, #22]

		// store the IR data in the Sensor variable
		VEML3328->MeasuredData.uiIR   = (uint16_t)m_ucI2CRXDataBuffer[1];	// high byte
 8002712:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <HandleVEML3328Loop+0x584>)
 8002714:	785b      	ldrb	r3, [r3, #1]
 8002716:	b29a      	uxth	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	825a      	strh	r2, [r3, #18]
		VEML3328->MeasuredData.uiIR <<= 8;	//(*256)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8a5b      	ldrh	r3, [r3, #18]
 8002720:	021b      	lsls	r3, r3, #8
 8002722:	b29a      	uxth	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	825a      	strh	r2, [r3, #18]
		VEML3328->MeasuredData.uiIR  += (uint16_t)m_ucI2CRXDataBuffer[0];	// low byte
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	8a5a      	ldrh	r2, [r3, #18]
 800272c:	4b1d      	ldr	r3, [pc, #116]	; (80027a4 <HandleVEML3328Loop+0x584>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	b29b      	uxth	r3, r3
 8002732:	4413      	add	r3, r2
 8002734:	b29a      	uxth	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	825a      	strh	r2, [r3, #18]

		// All reading is done, now save the data and call the callback function
		VEML3328->MeasuredData.uiError = 0;	// no error detected
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	80da      	strh	r2, [r3, #6]
		StoreVEML3328Result(*VEML3328);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4694      	mov	ip, r2
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	4616      	mov	r6, r2
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	4615      	mov	r5, r2
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	4614      	mov	r4, r2
 8002752:	466a      	mov	r2, sp
 8002754:	3310      	adds	r3, #16
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	6859      	ldr	r1, [r3, #4]
 800275a:	c203      	stmia	r2!, {r0, r1}
 800275c:	891b      	ldrh	r3, [r3, #8]
 800275e:	8013      	strh	r3, [r2, #0]
 8002760:	4660      	mov	r0, ip
 8002762:	4631      	mov	r1, r6
 8002764:	462a      	mov	r2, r5
 8002766:	4623      	mov	r3, r4
 8002768:	f000 f85e 	bl	8002828 <StoreVEML3328Result>
		VEML3328->uiTimeout100HZ = 0;		// I2C action completed => I2C engine is not jammed
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	831a      	strh	r2, [r3, #24]

		// CALLBACK
		// uncomment in StoreVEML3328Result() if the callback is used only with valid data (so callback will not be called if error occurred)
		//I2CVEML3328DataAvailableCallback(VEML3328->SensorSide);	// in this case also call if error occurred

		VEML3328->I2CReadingState = I2CReadingDone;	// indicate that the reading has finished for this round
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	220a      	movs	r2, #10
 8002776:	711a      	strb	r2, [r3, #4]
		VEML3328->MeasuredData.NewMeasuredData = NEW_DATA_IS_AVAILABLE;		// mark the data available properties for the RIGHT sensor
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	751a      	strb	r2, [r3, #20]

		return;
 800277e:	e00e      	b.n	800279e <HandleVEML3328Loop+0x57e>
			return;
 8002780:	bf00      	nop
 8002782:	e00c      	b.n	800279e <HandleVEML3328Loop+0x57e>
			return;
 8002784:	bf00      	nop
 8002786:	e00a      	b.n	800279e <HandleVEML3328Loop+0x57e>
			return;
 8002788:	bf00      	nop
 800278a:	e008      	b.n	800279e <HandleVEML3328Loop+0x57e>
			return;
 800278c:	bf00      	nop
 800278e:	e006      	b.n	800279e <HandleVEML3328Loop+0x57e>
			return;
 8002790:	bf00      	nop
 8002792:	e004      	b.n	800279e <HandleVEML3328Loop+0x57e>
			return;
 8002794:	bf00      	nop
 8002796:	e002      	b.n	800279e <HandleVEML3328Loop+0x57e>
	}
	// -------------------------------

	return;
 8002798:	bf00      	nop
 800279a:	e000      	b.n	800279e <HandleVEML3328Loop+0x57e>
			return;
 800279c:	bf00      	nop
}
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027a4:	20000804 	.word	0x20000804

080027a8 <VEML3328ErrorDetected>:
//----------------------------------------------------------------------------------
static void VEML3328ErrorDetected(VEML3328TypeDef *VEML3328, uint16_t uiError)
{	// used to handle error cases during the VEML3328 Reading
 80027a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af04      	add	r7, sp, #16
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	807b      	strh	r3, [r7, #2]
	VEML3328->MeasuredData.uiError |= uiError;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	88da      	ldrh	r2, [r3, #6]
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	b29a      	uxth	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	80da      	strh	r2, [r3, #6]
	VEML3328->MeasuredData.uiConfiguration = 0xFFFF;	// some unreasonable value indicating the value is not real
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027c8:	811a      	strh	r2, [r3, #8]
	VEML3328->MeasuredData.uiClear = 0;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	815a      	strh	r2, [r3, #10]
	VEML3328->MeasuredData.uiRed = 0;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	819a      	strh	r2, [r3, #12]
	VEML3328->MeasuredData.uiGreen = 0;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	81da      	strh	r2, [r3, #14]
	VEML3328->MeasuredData.uiBlue = 0;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	821a      	strh	r2, [r3, #16]
	VEML3328->MeasuredData.uiIR = 0;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	825a      	strh	r2, [r3, #18]
	//VEML3328->MeasuredData.NewMeasuredData = NEW_DATA_IS_AVAILABLE;	// new measurement is completed but with error

	VEML3328->RXCallbackStatus = CALLBACK_NOT_RECEIVED;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	759a      	strb	r2, [r3, #22]
	VEML3328->TXCallbackStatus = CALLBACK_NOT_RECEIVED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	75da      	strb	r2, [r3, #23]

	StoreVEML3328Result(*VEML3328);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4694      	mov	ip, r2
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	4616      	mov	r6, r2
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	4615      	mov	r5, r2
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	4614      	mov	r4, r2
 8002806:	466a      	mov	r2, sp
 8002808:	3310      	adds	r3, #16
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	6859      	ldr	r1, [r3, #4]
 800280e:	c203      	stmia	r2!, {r0, r1}
 8002810:	891b      	ldrh	r3, [r3, #8]
 8002812:	8013      	strh	r3, [r2, #0]
 8002814:	4660      	mov	r0, ip
 8002816:	4631      	mov	r1, r6
 8002818:	462a      	mov	r2, r5
 800281a:	4623      	mov	r3, r4
 800281c:	f000 f804 	bl	8002828 <StoreVEML3328Result>

	return;
 8002820:	bf00      	nop
}
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002828 <StoreVEML3328Result>:
//----------------------------------------------------------------------------------
static void StoreVEML3328Result(VEML3328TypeDef VEML3328)	// used to store the result in the global variable to be available any time for the API Sensor Data Reading
{
 8002828:	b084      	sub	sp, #16
 800282a:	b580      	push	{r7, lr}
 800282c:	af00      	add	r7, sp, #0
 800282e:	f107 0c08 	add.w	ip, r7, #8
 8002832:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	if(VEML3328.SensorSide == RIGHT)
 8002836:	7a3b      	ldrb	r3, [r7, #8]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d11b      	bne.n	8002874 <StoreVEML3328Result+0x4c>
	{	// RIGHT Side
		RightVEML3328Result.uiError = VEML3328.MeasuredData.uiError;
 800283c:	89fa      	ldrh	r2, [r7, #14]
 800283e:	4b1e      	ldr	r3, [pc, #120]	; (80028b8 <StoreVEML3328Result+0x90>)
 8002840:	801a      	strh	r2, [r3, #0]
		RightVEML3328Result.uiConfiguration = VEML3328.MeasuredData.uiConfiguration;
 8002842:	8a3a      	ldrh	r2, [r7, #16]
 8002844:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <StoreVEML3328Result+0x90>)
 8002846:	805a      	strh	r2, [r3, #2]
		RightVEML3328Result.uiClear = VEML3328.MeasuredData.uiClear;
 8002848:	8a7a      	ldrh	r2, [r7, #18]
 800284a:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <StoreVEML3328Result+0x90>)
 800284c:	809a      	strh	r2, [r3, #4]
		RightVEML3328Result.uiRed = VEML3328.MeasuredData.uiRed;
 800284e:	8aba      	ldrh	r2, [r7, #20]
 8002850:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <StoreVEML3328Result+0x90>)
 8002852:	80da      	strh	r2, [r3, #6]
		RightVEML3328Result.uiGreen = VEML3328.MeasuredData.uiGreen;
 8002854:	8afa      	ldrh	r2, [r7, #22]
 8002856:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <StoreVEML3328Result+0x90>)
 8002858:	811a      	strh	r2, [r3, #8]
		RightVEML3328Result.uiBlue = VEML3328.MeasuredData.uiBlue;
 800285a:	8b3a      	ldrh	r2, [r7, #24]
 800285c:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <StoreVEML3328Result+0x90>)
 800285e:	815a      	strh	r2, [r3, #10]
		RightVEML3328Result.uiIR = VEML3328.MeasuredData.uiIR;
 8002860:	8b7a      	ldrh	r2, [r7, #26]
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <StoreVEML3328Result+0x90>)
 8002864:	819a      	strh	r2, [r3, #12]
		RightVEML3328Result.NewMeasuredData = NEW_DATA_IS_AVAILABLE;
 8002866:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <StoreVEML3328Result+0x90>)
 8002868:	2201      	movs	r2, #1
 800286a:	739a      	strb	r2, [r3, #14]

		// callback
		// if the callback should only work in case there is no error then uncomment in "HandleRightVEML3328Loop()"
		I2CVEML3328DataAvailableCallback(RIGHT);	// in this case also call if error occurred
 800286c:	2001      	movs	r0, #1
 800286e:	f7ff fa61 	bl	8001d34 <I2CVEML3328DataAvailableCallback>

		// callback
		// if the callback should only work in case there is no error then uncomment in "HandleLeftVEML3328Loop()"
		I2CVEML3328DataAvailableCallback(LEFT);		// in this case also call if error occurred
	}
	return;
 8002872:	e01b      	b.n	80028ac <StoreVEML3328Result+0x84>
		LeftVEML3328Result.uiError = VEML3328.MeasuredData.uiError;
 8002874:	89fa      	ldrh	r2, [r7, #14]
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <StoreVEML3328Result+0x94>)
 8002878:	801a      	strh	r2, [r3, #0]
		LeftVEML3328Result.uiConfiguration = VEML3328.MeasuredData.uiConfiguration;
 800287a:	8a3a      	ldrh	r2, [r7, #16]
 800287c:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <StoreVEML3328Result+0x94>)
 800287e:	805a      	strh	r2, [r3, #2]
		LeftVEML3328Result.uiClear = VEML3328.MeasuredData.uiClear;
 8002880:	8a7a      	ldrh	r2, [r7, #18]
 8002882:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <StoreVEML3328Result+0x94>)
 8002884:	809a      	strh	r2, [r3, #4]
		LeftVEML3328Result.uiRed = VEML3328.MeasuredData.uiRed;
 8002886:	8aba      	ldrh	r2, [r7, #20]
 8002888:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <StoreVEML3328Result+0x94>)
 800288a:	80da      	strh	r2, [r3, #6]
		LeftVEML3328Result.uiGreen = VEML3328.MeasuredData.uiGreen;
 800288c:	8afa      	ldrh	r2, [r7, #22]
 800288e:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <StoreVEML3328Result+0x94>)
 8002890:	811a      	strh	r2, [r3, #8]
		LeftVEML3328Result.uiBlue = VEML3328.MeasuredData.uiBlue;
 8002892:	8b3a      	ldrh	r2, [r7, #24]
 8002894:	4b09      	ldr	r3, [pc, #36]	; (80028bc <StoreVEML3328Result+0x94>)
 8002896:	815a      	strh	r2, [r3, #10]
		LeftVEML3328Result.uiIR = VEML3328.MeasuredData.uiIR;
 8002898:	8b7a      	ldrh	r2, [r7, #26]
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <StoreVEML3328Result+0x94>)
 800289c:	819a      	strh	r2, [r3, #12]
		LeftVEML3328Result.NewMeasuredData = NEW_DATA_IS_AVAILABLE;
 800289e:	4b07      	ldr	r3, [pc, #28]	; (80028bc <StoreVEML3328Result+0x94>)
 80028a0:	2201      	movs	r2, #1
 80028a2:	739a      	strb	r2, [r3, #14]
		I2CVEML3328DataAvailableCallback(LEFT);		// in this case also call if error occurred
 80028a4:	2002      	movs	r0, #2
 80028a6:	f7ff fa45 	bl	8001d34 <I2CVEML3328DataAvailableCallback>
	return;
 80028aa:	bf00      	nop
}
 80028ac:	46bd      	mov	sp, r7
 80028ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028b2:	b004      	add	sp, #16
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20000838 	.word	0x20000838
 80028bc:	20000864 	.word	0x20000864

080028c0 <VEML3328RightTimeout100HZ>:
//----------------------------------------------------------------------------------
static void VEML3328RightTimeout100HZ(void)		// called from the system timer @ 100HZ rate. it is used to timeout the reading of the RIGHT VEML3328 color sensors
{	// called every 10mS <=> 100HZ
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0

	if( (RightVEML3328.I2CReadingState == I2CReadingDone) || (RightVEML3328.I2CReadingState == NoI2CReadingInProgress) )
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <VEML3328RightTimeout100HZ+0x4c>)
 80028c6:	791b      	ldrb	r3, [r3, #4]
 80028c8:	2b0a      	cmp	r3, #10
 80028ca:	d003      	beq.n	80028d4 <VEML3328RightTimeout100HZ+0x14>
 80028cc:	4b0f      	ldr	r3, [pc, #60]	; (800290c <VEML3328RightTimeout100HZ+0x4c>)
 80028ce:	791b      	ldrb	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d103      	bne.n	80028dc <VEML3328RightTimeout100HZ+0x1c>
	{	// I2C communication is done, everything seems ok, the reading loop did not jam during the reading.
		RightVEML3328.uiTimeout100HZ = 0;
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <VEML3328RightTimeout100HZ+0x4c>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	831a      	strh	r2, [r3, #24]
		return;
 80028da:	e015      	b.n	8002908 <VEML3328RightTimeout100HZ+0x48>
	}
	// I2C reading of the sensor is still in progress, must check if the I2C loop is not hanged due to some I2C error or bug in the code
	RightVEML3328.uiTimeout100HZ ++;
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <VEML3328RightTimeout100HZ+0x4c>)
 80028de:	8b1b      	ldrh	r3, [r3, #24]
 80028e0:	3301      	adds	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	4b09      	ldr	r3, [pc, #36]	; (800290c <VEML3328RightTimeout100HZ+0x4c>)
 80028e6:	831a      	strh	r2, [r3, #24]

	if( (RightVEML3328.uiTimeout100HZ > 100) )	// each unit represents 10ms => 100 units is 1s
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <VEML3328RightTimeout100HZ+0x4c>)
 80028ea:	8b1b      	ldrh	r3, [r3, #24]
 80028ec:	2b64      	cmp	r3, #100	; 0x64
 80028ee:	d90a      	bls.n	8002906 <VEML3328RightTimeout100HZ+0x46>
	{
		VEML3328ErrorDetected(&RightVEML3328,ERROR_VEML3328_09);		// set the error on the sensor data
 80028f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028f4:	4805      	ldr	r0, [pc, #20]	; (800290c <VEML3328RightTimeout100HZ+0x4c>)
 80028f6:	f7ff ff57 	bl	80027a8 <VEML3328ErrorDetected>
		RightVEML3328.I2CReadingState = I2CReadingDone;	// indicate that the reading is done because of some I2CError
 80028fa:	4b04      	ldr	r3, [pc, #16]	; (800290c <VEML3328RightTimeout100HZ+0x4c>)
 80028fc:	220a      	movs	r2, #10
 80028fe:	711a      	strb	r2, [r3, #4]
		RightVEML3328.uiTimeout100HZ = 0;
 8002900:	4b02      	ldr	r3, [pc, #8]	; (800290c <VEML3328RightTimeout100HZ+0x4c>)
 8002902:	2200      	movs	r2, #0
 8002904:	831a      	strh	r2, [r3, #24]
	}

	return;
 8002906:	bf00      	nop
}
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	2000081c 	.word	0x2000081c

08002910 <VEML3328LeftTimeout100HZ>:
//----------------------------------------------------------------------------------
static void VEML3328LeftTimeout100HZ(void)		// called from the system timer @ 100HZ rate. it is used to timeout the reading of the LEFT VEML3328 color sensors
{	// called every 10mS <=> 100HZ
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0

	if((LeftVEML3328.I2CReadingState == I2CReadingDone) || (LeftVEML3328.I2CReadingState == NoI2CReadingInProgress))
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <VEML3328LeftTimeout100HZ+0x4c>)
 8002916:	791b      	ldrb	r3, [r3, #4]
 8002918:	2b0a      	cmp	r3, #10
 800291a:	d003      	beq.n	8002924 <VEML3328LeftTimeout100HZ+0x14>
 800291c:	4b0f      	ldr	r3, [pc, #60]	; (800295c <VEML3328LeftTimeout100HZ+0x4c>)
 800291e:	791b      	ldrb	r3, [r3, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d103      	bne.n	800292c <VEML3328LeftTimeout100HZ+0x1c>
	{	// I2C communication is done, everything seems ok, the reading loop did not jam during the reading.
		LeftVEML3328.uiTimeout100HZ = 0;
 8002924:	4b0d      	ldr	r3, [pc, #52]	; (800295c <VEML3328LeftTimeout100HZ+0x4c>)
 8002926:	2200      	movs	r2, #0
 8002928:	831a      	strh	r2, [r3, #24]
		return;
 800292a:	e015      	b.n	8002958 <VEML3328LeftTimeout100HZ+0x48>
	}
	// I2C reading of the sensor is still in progress, must check if the I2C loop is not hanged due to some I2C error or bug in the code
	LeftVEML3328.uiTimeout100HZ ++;
 800292c:	4b0b      	ldr	r3, [pc, #44]	; (800295c <VEML3328LeftTimeout100HZ+0x4c>)
 800292e:	8b1b      	ldrh	r3, [r3, #24]
 8002930:	3301      	adds	r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	4b09      	ldr	r3, [pc, #36]	; (800295c <VEML3328LeftTimeout100HZ+0x4c>)
 8002936:	831a      	strh	r2, [r3, #24]

	if( (LeftVEML3328.uiTimeout100HZ > 100) )	// each unit represents 10ms => 100 units is 1s
 8002938:	4b08      	ldr	r3, [pc, #32]	; (800295c <VEML3328LeftTimeout100HZ+0x4c>)
 800293a:	8b1b      	ldrh	r3, [r3, #24]
 800293c:	2b64      	cmp	r3, #100	; 0x64
 800293e:	d90a      	bls.n	8002956 <VEML3328LeftTimeout100HZ+0x46>
	{
		VEML3328ErrorDetected(&LeftVEML3328,ERROR_VEML3328_09);		// set the error on the sensor data
 8002940:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002944:	4805      	ldr	r0, [pc, #20]	; (800295c <VEML3328LeftTimeout100HZ+0x4c>)
 8002946:	f7ff ff2f 	bl	80027a8 <VEML3328ErrorDetected>
		LeftVEML3328.I2CReadingState = I2CReadingDone;	// indicate that the reading is done because of some I2CError
 800294a:	4b04      	ldr	r3, [pc, #16]	; (800295c <VEML3328LeftTimeout100HZ+0x4c>)
 800294c:	220a      	movs	r2, #10
 800294e:	711a      	strb	r2, [r3, #4]
		LeftVEML3328.uiTimeout100HZ = 0;
 8002950:	4b02      	ldr	r3, [pc, #8]	; (800295c <VEML3328LeftTimeout100HZ+0x4c>)
 8002952:	2200      	movs	r2, #0
 8002954:	831a      	strh	r2, [r3, #24]
	}

	return;
 8002956:	bf00      	nop
}
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000848 	.word	0x20000848

08002960 <EEPROMInitialization>:
// 24C512 section (@I2C1 channel)
// EEPROM 24C512
//volatile EEPROMDataTypeDef			EEpromData[32];		/* the maximum number of elements a list can hold */
//volatile EEPROMDataListTypeDef		EEpromDataList;		/* the data list that is used to operate the EEPROM in the main loop mode */
static void EEPROMInitialization(void)				// called from the initialization section
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
	EEpromDataList.pEEDTList = EEpromData;
 8002964:	4b03      	ldr	r3, [pc, #12]	; (8002974 <EEPROMInitialization+0x14>)
 8002966:	4a04      	ldr	r2, [pc, #16]	; (8002978 <EEPROMInitialization+0x18>)
 8002968:	605a      	str	r2, [r3, #4]
	return;
 800296a:	bf00      	nop
}
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	20000978 	.word	0x20000978
 8002978:	20000878 	.word	0x20000878

0800297c <EEPROMMainLoop>:
//----------------------------------------------------------------------------------
static void EEPROMMainLoop(void)					// called from the system's main loop to handle list related READ / WRITE operations
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af04      	add	r7, sp, #16
	// !!!! before accessing the 24C512 EEPROM from I2C1 driver make sure that no other device has launched an asynchronous I2C operation and is waiting for the I2C complete interrupt !!!
	// VEML3328 Right 	@ I2C1 driver
	if( (RightVEML3328.I2CReadingState != I2CReadingDone) )					return;		// some VEM3328 I2C1 operation is still in progress => can not use the I2C driver yet
 8002982:	4b4c      	ldr	r3, [pc, #304]	; (8002ab4 <EEPROMMainLoop+0x138>)
 8002984:	791b      	ldrb	r3, [r3, #4]
 8002986:	2b0a      	cmp	r3, #10
 8002988:	f040 808e 	bne.w	8002aa8 <EEPROMMainLoop+0x12c>
	// TSL25911 Right 	@ I2C1 driver
	if( (RightTSL25911.ucOperationStatus != TSL25911_CH_READ_DONE) )		return;		// some TSL25911 I2C1 operation is still in progress => can not use the I2C driver yet (not yet implemented)
 800298c:	4b4a      	ldr	r3, [pc, #296]	; (8002ab8 <EEPROMMainLoop+0x13c>)
 800298e:	785b      	ldrb	r3, [r3, #1]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b07      	cmp	r3, #7
 8002994:	f040 808a 	bne.w	8002aac <EEPROMMainLoop+0x130>
	uint8_t		ucEEpromDataBuffer[4];
	uint8_t		ucErrorCounter;

	// -------------- perform the EEPROM operation  ---------------------
	// decide if need to read or to write
	if( (EEpromDataList.ucReadWrite == EEPROM_WRITE) )
 8002998:	4b48      	ldr	r3, [pc, #288]	; (8002abc <EEPROMMainLoop+0x140>)
 800299a:	789b      	ldrb	r3, [r3, #2]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d13a      	bne.n	8002a18 <EEPROMMainLoop+0x9c>
	{	// write into the EEPROM

		for(i=0, ucErrorCounter = 0; i<EEpromDataList.ucSizeOfTheList; i++)
 80029a2:	2300      	movs	r3, #0
 80029a4:	73fb      	strb	r3, [r7, #15]
 80029a6:	2300      	movs	r3, #0
 80029a8:	73bb      	strb	r3, [r7, #14]
 80029aa:	e02e      	b.n	8002a0a <EEPROMMainLoop+0x8e>
		{
			ui16EEpromAddress 	= EEpromDataList.pEEDTList[i].ui16EEPROMAddress;
 80029ac:	4b43      	ldr	r3, [pc, #268]	; (8002abc <EEPROMMainLoop+0x140>)
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4413      	add	r3, r2
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	81bb      	strh	r3, [r7, #12]
			ui32EEpromData		= EEpromDataList.pEEDTList[i].ui32EEPROMData;
 80029ba:	4b40      	ldr	r3, [pc, #256]	; (8002abc <EEPROMMainLoop+0x140>)
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	4413      	add	r3, r2
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	60bb      	str	r3, [r7, #8]
			EEPROM32To8(ui32EEpromData, ucEEpromDataBuffer);
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	1d3a      	adds	r2, r7, #4
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 f87a 	bl	8002ac8 <EEPROM32To8>
			// HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
			if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_I2C_ADDRESS_ON_I2C1, ui16EEpromAddress, 2, ucEEpromDataBuffer,4, HAL_MAX_DELAY) != HAL_OK)
 80029d4:	89ba      	ldrh	r2, [r7, #12]
 80029d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029da:	9302      	str	r3, [sp, #8]
 80029dc:	2304      	movs	r3, #4
 80029de:	9301      	str	r3, [sp, #4]
 80029e0:	1d3b      	adds	r3, r7, #4
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	2302      	movs	r3, #2
 80029e6:	21a0      	movs	r1, #160	; 0xa0
 80029e8:	4835      	ldr	r0, [pc, #212]	; (8002ac0 <EEPROMMainLoop+0x144>)
 80029ea:	f009 fb85 	bl	800c0f8 <HAL_I2C_Mem_Write>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <EEPROMMainLoop+0x84>
			{
				// no error checking is done yet
				if( (ucErrorCounter < 255) )	ucErrorCounter ++;
 80029f4:	7bbb      	ldrb	r3, [r7, #14]
 80029f6:	2bff      	cmp	r3, #255	; 0xff
 80029f8:	d002      	beq.n	8002a00 <EEPROMMainLoop+0x84>
 80029fa:	7bbb      	ldrb	r3, [r7, #14]
 80029fc:	3301      	adds	r3, #1
 80029fe:	73bb      	strb	r3, [r7, #14]
			}
			EEPROMWriteDelay();	// the 10ms write delay
 8002a00:	f000 f8bc 	bl	8002b7c <EEPROMWriteDelay>
		for(i=0, ucErrorCounter = 0; i<EEpromDataList.ucSizeOfTheList; i++)
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	3301      	adds	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
 8002a0a:	4b2c      	ldr	r3, [pc, #176]	; (8002abc <EEPROMMainLoop+0x140>)
 8002a0c:	78db      	ldrb	r3, [r3, #3]
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	7bfa      	ldrb	r2, [r7, #15]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d3ca      	bcc.n	80029ac <EEPROMMainLoop+0x30>
 8002a16:	e03a      	b.n	8002a8e <EEPROMMainLoop+0x112>
		}
	}
	else
	{	// read from the EEPRPM
		for(i=0, ucErrorCounter = 0; i<EEpromDataList.ucSizeOfTheList; i++)
 8002a18:	2300      	movs	r3, #0
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	73bb      	strb	r3, [r7, #14]
 8002a20:	e02f      	b.n	8002a82 <EEPROMMainLoop+0x106>
		{
			ui16EEpromAddress 	= EEpromDataList.pEEDTList[i].ui16EEPROMAddress;
 8002a22:	4b26      	ldr	r3, [pc, #152]	; (8002abc <EEPROMMainLoop+0x140>)
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	81bb      	strh	r3, [r7, #12]
			// HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
			if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_I2C_ADDRESS_ON_I2C1, ui16EEpromAddress, 2,ucEEpromDataBuffer,4, HAL_MAX_DELAY) != HAL_OK)
 8002a30:	89ba      	ldrh	r2, [r7, #12]
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a36:	9302      	str	r3, [sp, #8]
 8002a38:	2304      	movs	r3, #4
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	1d3b      	adds	r3, r7, #4
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2302      	movs	r3, #2
 8002a42:	21a0      	movs	r1, #160	; 0xa0
 8002a44:	481e      	ldr	r0, [pc, #120]	; (8002ac0 <EEPROMMainLoop+0x144>)
 8002a46:	f009 fc51 	bl	800c2ec <HAL_I2C_Mem_Read>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <EEPROMMainLoop+0xe0>
			{
				// no error checking is done yet
				if( (ucErrorCounter < 255) )	ucErrorCounter ++;
 8002a50:	7bbb      	ldrb	r3, [r7, #14]
 8002a52:	2bff      	cmp	r3, #255	; 0xff
 8002a54:	d002      	beq.n	8002a5c <EEPROMMainLoop+0xe0>
 8002a56:	7bbb      	ldrb	r3, [r7, #14]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	73bb      	strb	r3, [r7, #14]
			}
			EEPROM8To32(ucEEpromDataBuffer, &ui32EEpromData);
 8002a5c:	f107 0208 	add.w	r2, r7, #8
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	4611      	mov	r1, r2
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 f850 	bl	8002b0a <EEPROM8To32>
			EEpromDataList.pEEDTList[i].ui32EEPROMData = ui32EEpromData;
 8002a6a:	4b14      	ldr	r3, [pc, #80]	; (8002abc <EEPROMMainLoop+0x140>)
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	605a      	str	r2, [r3, #4]

			EEPROMWriteDelay();	// write delay ... used just to prevent too fast EEPROM access-time
 8002a78:	f000 f880 	bl	8002b7c <EEPROMWriteDelay>
		for(i=0, ucErrorCounter = 0; i<EEpromDataList.ucSizeOfTheList; i++)
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <EEPROMMainLoop+0x140>)
 8002a84:	78db      	ldrb	r3, [r3, #3]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	7bfa      	ldrb	r2, [r7, #15]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d3c9      	bcc.n	8002a22 <EEPROMMainLoop+0xa6>
		}
	}

	EEpromDataList.ucListIsPopulated 	= LIST_IS_EMPTY;
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <EEPROMMainLoop+0x140>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	705a      	strb	r2, [r3, #1]
	EEpromDataList.ucErrorCounter		= ucErrorCounter;
 8002a94:	4a09      	ldr	r2, [pc, #36]	; (8002abc <EEPROMMainLoop+0x140>)
 8002a96:	7bbb      	ldrb	r3, [r7, #14]
 8002a98:	7013      	strb	r3, [r2, #0]
	// ------------------------------------------------------------------

	// --------- trigger the EEPORM operation done callback -------------
	EEDoneCallbackFunction(EEpromDataList);	// call the proper callback function
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <EEPROMMainLoop+0x148>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a07      	ldr	r2, [pc, #28]	; (8002abc <EEPROMMainLoop+0x140>)
 8002aa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002aa4:	4798      	blx	r3
	//	return;
	//}
	// .... fill up with mode if/else steps if they are needed ...
	// ------------------------------------------------------------------

	return;
 8002aa6:	e002      	b.n	8002aae <EEPROMMainLoop+0x132>
	if( (RightVEML3328.I2CReadingState != I2CReadingDone) )					return;		// some VEM3328 I2C1 operation is still in progress => can not use the I2C driver yet
 8002aa8:	bf00      	nop
 8002aaa:	e000      	b.n	8002aae <EEPROMMainLoop+0x132>
	if( (RightTSL25911.ucOperationStatus != TSL25911_CH_READ_DONE) )		return;		// some TSL25911 I2C1 operation is still in progress => can not use the I2C driver yet (not yet implemented)
 8002aac:	bf00      	nop
}
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	2000081c 	.word	0x2000081c
 8002ab8:	20000984 	.word	0x20000984
 8002abc:	20000978 	.word	0x20000978
 8002ac0:	2000224c 	.word	0x2000224c
 8002ac4:	20000980 	.word	0x20000980

08002ac8 <EEPROM32To8>:
//----------------------------------------------------------------------------------
static void EEPROM32To8(uint32_t ui32DataIn, uint8_t *ucDataOut)			// used to convert 32 bit uint data into 4 bytes of 8 bit uint data
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
	ucDataOut[0]		= (uint8_t)((ui32DataIn >> (0*8)) & 0x000000FF);	// shifted with 0  bits	LSD	= Less Significant Digit
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	701a      	strb	r2, [r3, #0]
	ucDataOut[1]		= (uint8_t)((ui32DataIn >> (1*8)) & 0x000000FF);	// shifted with 8  bits
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	0a1a      	lsrs	r2, r3, #8
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]
	ucDataOut[2]		= (uint8_t)((ui32DataIn >> (2*8)) & 0x000000FF);	// shifted with 16 bits
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	0c1a      	lsrs	r2, r3, #16
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	3302      	adds	r3, #2
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]
	ucDataOut[3]		= (uint8_t)((ui32DataIn >> (3*8)) & 0x000000FF);	// shifted with 24 bits	MSD = MostSignificant Digit
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	0e1a      	lsrs	r2, r3, #24
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	3303      	adds	r3, #3
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	701a      	strb	r2, [r3, #0]

	return;
 8002afe:	bf00      	nop
}
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <EEPROM8To32>:
//----------------------------------------------------------------------------------
static void EEPROM8To32(uint8_t *ucDataIn, volatile uint32_t *ui32DataOut)			// used to convert buffer of 4 bytes of 8 bit uint data into single 32 bit uint data
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	6039      	str	r1, [r7, #0]
	uint32_t ui32EEData;

	// DIGIT3 = MSD
	ui32EEData = (uint32_t)ucDataIn[3];
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3303      	adds	r3, #3
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	60fb      	str	r3, [r7, #12]
	ui32EEData <<= (3*8);	// shift with 24 bits
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	061b      	lsls	r3, r3, #24
 8002b20:	60fb      	str	r3, [r7, #12]
	(*ui32DataOut) = ui32EEData;		// 1/4
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	601a      	str	r2, [r3, #0]
	// DIGIT2
	ui32EEData = (uint32_t)ucDataIn[2];
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3302      	adds	r3, #2
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	60fb      	str	r3, [r7, #12]
	ui32EEData <<= (2*8);	// shift with 16 bits
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	041b      	lsls	r3, r3, #16
 8002b34:	60fb      	str	r3, [r7, #12]
	(*ui32DataOut) |= ui32EEData;	// 2/4
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	601a      	str	r2, [r3, #0]
	// DIGIT1
	ui32EEData = (uint32_t)ucDataIn[1];
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3301      	adds	r3, #1
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	60fb      	str	r3, [r7, #12]
	ui32EEData <<= (1*8);	// shift with 8 bits
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	60fb      	str	r3, [r7, #12]
	(*ui32DataOut) |= ui32EEData;	// 3/4
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	601a      	str	r2, [r3, #0]
	// DIGIT0 = LSD
	ui32EEData = (uint32_t)ucDataIn[0];
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	60fb      	str	r3, [r7, #12]
	ui32EEData <<= (0*8);	// shift with 0 bits
	(*ui32DataOut) |= ui32EEData;	// 4/4
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	601a      	str	r2, [r3, #0]

	return;
 8002b6e:	bf00      	nop
}
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <EEPROMWriteDelay>:
//----------------------------------------------------------------------------------
//#define I2CEEPROM_WRITE_TIME_DELAY_MS		12		/* used to delay after each eeprom write operation */
//volatile uint8_t					m_ucEEpromAccessTimerCounterMS;		// used to be decremented @ 1 ms rate after each EEPROM Write operation
static void EEPROMWriteDelay(void)			// used to wait for the write time after an EEPROM write operation
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
	m_ucEEpromAccessTimerCounterMS = I2CEEPROM_WRITE_TIME_DELAY_MS;
 8002b80:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <EEPROMWriteDelay+0x24>)
 8002b82:	220c      	movs	r2, #12
 8002b84:	701a      	strb	r2, [r3, #0]
	while(m_ucEEpromAccessTimerCounterMS);	//m_ucEEpromAccessTimerCounterMS is decremented in the 1KHZ timer of the EEPROM
 8002b86:	bf00      	nop
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <EEPROMWriteDelay+0x24>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1fa      	bne.n	8002b88 <EEPROMWriteDelay+0xc>
}
 8002b92:	bf00      	nop
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	20000874 	.word	0x20000874

08002ba4 <EEPROMTimer1KHZISR>:
//----------------------------------------------------------------------------------
static void EEPROMTimer1KHZISR()			// EEPROM Write Access Time delay timer
{	// called from the 1KHZ ISR
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
	if(m_ucEEpromAccessTimerCounterMS)	m_ucEEpromAccessTimerCounterMS --;
 8002ba8:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <EEPROMTimer1KHZISR+0x28>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <EEPROMTimer1KHZISR+0x1e>
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <EEPROMTimer1KHZISR+0x28>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <EEPROMTimer1KHZISR+0x28>)
 8002bbe:	701a      	strb	r2, [r3, #0]
	return;
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
}
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	20000874 	.word	0x20000874

08002bd0 <TSL25911Init>:
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
// TSL25911
//----------------------------------------------------------------------------------
static void TSL25911Init(void)							// used @ initialization
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
	// Right side
	RightTSL25911.ucSensorSide 				= RIGHT;
 8002bd4:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <TSL25911Init+0x40>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]
	RightTSL25911.ucI2CAddress				= 0x52;
 8002bda:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <TSL25911Init+0x40>)
 8002bdc:	2252      	movs	r2, #82	; 0x52
 8002bde:	709a      	strb	r2, [r3, #2]
	RightTSL25911.ucOperationStatus			= TSL25911_UNKNOWN_STATE;
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <TSL25911Init+0x40>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	705a      	strb	r2, [r3, #1]
	RightTSL25911.m_ui16OperationTimeoutMS 	= 100; // 20 ms timeout
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <TSL25911Init+0x40>)
 8002be8:	2264      	movs	r2, #100	; 0x64
 8002bea:	811a      	strh	r2, [r3, #8]

	// Left Side
	LeftTSL25911.ucSensorSide 				= LEFT;
 8002bec:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <TSL25911Init+0x44>)
 8002bee:	2202      	movs	r2, #2
 8002bf0:	701a      	strb	r2, [r3, #0]
	LeftTSL25911.ucI2CAddress				= 0x52;
 8002bf2:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <TSL25911Init+0x44>)
 8002bf4:	2252      	movs	r2, #82	; 0x52
 8002bf6:	709a      	strb	r2, [r3, #2]
	LeftTSL25911.ucOperationStatus			= TSL25911_UNKNOWN_STATE;
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <TSL25911Init+0x44>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	705a      	strb	r2, [r3, #1]
	LeftTSL25911.m_ui16OperationTimeoutMS 	= 100; // 20 ms timeout
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <TSL25911Init+0x44>)
 8002c00:	2264      	movs	r2, #100	; 0x64
 8002c02:	811a      	strh	r2, [r3, #8]

	return;
 8002c04:	bf00      	nop
}
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	20000984 	.word	0x20000984
 8002c14:	20000998 	.word	0x20000998

08002c18 <TSL25911MainLoop>:
//----------------------------------------------------------------------------------
static void TSL25911MainLoop(SIDE ucSensorSide)		// used in the main loop
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af04      	add	r7, sp, #16
 8002c1e:	4603      	mov	r3, r0
 8002c20:	71fb      	strb	r3, [r7, #7]
	uint8_t 	ucCommand;			// used for sensor command
	uint8_t	ucRegisterAddress;	// used for sensor internal address

	// ------------------ handle the RIGHT side sensor -----------------------
	if(ucSensorSide == RIGHT)
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	f040 80c0 	bne.w	8002daa <TSL25911MainLoop+0x192>
	{	// RIGHT => I2C1
		// check the operation timeout
		if(RightTSL25911.m_ui16OperationTimeoutMS) return;
 8002c2a:	4ba1      	ldr	r3, [pc, #644]	; (8002eb0 <TSL25911MainLoop+0x298>)
 8002c2c:	891b      	ldrh	r3, [r3, #8]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f040 8190 	bne.w	8002f56 <TSL25911MainLoop+0x33e>

		if( (RightTSL25911.ucOperationStatus == TSL25911_UNKNOWN_STATE) )
 8002c36:	4b9e      	ldr	r3, [pc, #632]	; (8002eb0 <TSL25911MainLoop+0x298>)
 8002c38:	785b      	ldrb	r3, [r3, #1]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d122      	bne.n	8002c86 <TSL25911MainLoop+0x6e>
		{	// after reset => must ENABLE the ALS
			// Enable Register Address = 0x00 + (Normal Command = 0xA0) => Register Address = 0xA0
			// Enable Register Data    = 0000 0011 = 0x03 (AEN + PON)
			//----------------------------------------

			ucCommand = 0x03;			// (AEN + PON)
 8002c40:	2303      	movs	r3, #3
 8002c42:	73bb      	strb	r3, [r7, #14]
			ucRegisterAddress = 0xA0;	// add
 8002c44:	23a0      	movs	r3, #160	; 0xa0
 8002c46:	73fb      	strb	r3, [r7, #15]

			// HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
			//if(HAL_I2C_Mem_Write_IT(&hi2c1, RightTSL25911.ucI2CAddress, ucRegisterAddress, 1, &ucCommand,1) != HAL_OK)
			//if(HAL_I2C_Mem_Write_IT(&hi2c1, 0x52, 0xA0, 1, (uint8_t *)&ucCommand,1) != HAL_OK)
			if(HAL_I2C_Mem_Write(&hi2c1, 0x52, 0xA0, 1,&ucCommand,1, HAL_MAX_DELAY) != HAL_OK)
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c4c:	9302      	str	r3, [sp, #8]
 8002c4e:	2301      	movs	r3, #1
 8002c50:	9301      	str	r3, [sp, #4]
 8002c52:	f107 030e 	add.w	r3, r7, #14
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	2301      	movs	r3, #1
 8002c5a:	22a0      	movs	r2, #160	; 0xa0
 8002c5c:	2152      	movs	r1, #82	; 0x52
 8002c5e:	4895      	ldr	r0, [pc, #596]	; (8002eb4 <TSL25911MainLoop+0x29c>)
 8002c60:	f009 fa4a 	bl	800c0f8 <HAL_I2C_Mem_Write>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d006      	beq.n	8002c78 <TSL25911MainLoop+0x60>
			{
				RightTSL25911.ucOperationStatus 	= TSL25911_ERROR;
 8002c6a:	4b91      	ldr	r3, [pc, #580]	; (8002eb0 <TSL25911MainLoop+0x298>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	705a      	strb	r2, [r3, #1]
				RightTSL25911Result.ucSensorStatus 	= TSL25911_ERROR;
 8002c70:	4b91      	ldr	r3, [pc, #580]	; (8002eb8 <TSL25911MainLoop+0x2a0>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	715a      	strb	r2, [r3, #5]
				//RightTSL25911.ucOperationStatus = TSL25911_TRY_2_ENABLE;
				RightTSL25911.ucOperationStatus = TSL25911_ENABLED;
				RightTSL25911.m_ui16OperationTimeoutMS = 20;	// 20ms timeout
			}

			return;
 8002c76:	e173      	b.n	8002f60 <TSL25911MainLoop+0x348>
				RightTSL25911.ucOperationStatus = TSL25911_ENABLED;
 8002c78:	4b8d      	ldr	r3, [pc, #564]	; (8002eb0 <TSL25911MainLoop+0x298>)
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	705a      	strb	r2, [r3, #1]
				RightTSL25911.m_ui16OperationTimeoutMS = 20;	// 20ms timeout
 8002c7e:	4b8c      	ldr	r3, [pc, #560]	; (8002eb0 <TSL25911MainLoop+0x298>)
 8002c80:	2214      	movs	r2, #20
 8002c82:	811a      	strh	r2, [r3, #8]
			return;
 8002c84:	e16c      	b.n	8002f60 <TSL25911MainLoop+0x348>
		}
		else if( (RightTSL25911.ucOperationStatus == TSL25911_ENABLED) )
 8002c86:	4b8a      	ldr	r3, [pc, #552]	; (8002eb0 <TSL25911MainLoop+0x298>)
 8002c88:	785b      	ldrb	r3, [r3, #1]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d122      	bne.n	8002cd6 <TSL25911MainLoop+0xbe>
		{	// Sensor is enabled => must configure the GAIN -> MEDIUM (10)
			// Control Register Address = 0x01 + (Normal Command = 0xA0) => Register Address = 0xA1
			// Control Register Data    = 0001 0000 = 0x10 (AGAIN = MEDIUM)
			//----------------------------------------

			ucCommand = 0x10;			// (AGAIN = MEDIUM)
 8002c90:	2310      	movs	r3, #16
 8002c92:	73bb      	strb	r3, [r7, #14]
			ucRegisterAddress = 0xA1;	// add
 8002c94:	23a1      	movs	r3, #161	; 0xa1
 8002c96:	73fb      	strb	r3, [r7, #15]

			// HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
			//if(HAL_I2C_Mem_Write_IT(&hi2c1, RightTSL25911.ucI2CAddress, ucRegisterAddress, 1, &ucCommand,1) != HAL_OK)
			//if(HAL_I2C_Mem_Write_IT(&hi2c1, 0x52, 0xA1, 1, (uint8_t *)&ucCommand,1) != HAL_OK)
			if(HAL_I2C_Mem_Write(&hi2c1, 0x52, 0xA1, 1,&ucCommand,1, HAL_MAX_DELAY) != HAL_OK)
 8002c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c9c:	9302      	str	r3, [sp, #8]
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	9301      	str	r3, [sp, #4]
 8002ca2:	f107 030e 	add.w	r3, r7, #14
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	2301      	movs	r3, #1
 8002caa:	22a1      	movs	r2, #161	; 0xa1
 8002cac:	2152      	movs	r1, #82	; 0x52
 8002cae:	4881      	ldr	r0, [pc, #516]	; (8002eb4 <TSL25911MainLoop+0x29c>)
 8002cb0:	f009 fa22 	bl	800c0f8 <HAL_I2C_Mem_Write>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d006      	beq.n	8002cc8 <TSL25911MainLoop+0xb0>
			{
				RightTSL25911.ucOperationStatus 	= TSL25911_ERROR;
 8002cba:	4b7d      	ldr	r3, [pc, #500]	; (8002eb0 <TSL25911MainLoop+0x298>)
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	705a      	strb	r2, [r3, #1]
				RightTSL25911Result.ucSensorStatus 	= TSL25911_ERROR;
 8002cc0:	4b7d      	ldr	r3, [pc, #500]	; (8002eb8 <TSL25911MainLoop+0x2a0>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	715a      	strb	r2, [r3, #5]
				//RightTSL25911.ucOperationStatus = TSL25911_TRY_2_CONFIG;
				RightTSL25911.ucOperationStatus = TSL25911_CONFIGURED;
				RightTSL25911.m_ui16OperationTimeoutMS = 20;	// 20ms timeout
			}

			return;
 8002cc6:	e14b      	b.n	8002f60 <TSL25911MainLoop+0x348>
				RightTSL25911.ucOperationStatus = TSL25911_CONFIGURED;
 8002cc8:	4b79      	ldr	r3, [pc, #484]	; (8002eb0 <TSL25911MainLoop+0x298>)
 8002cca:	2205      	movs	r2, #5
 8002ccc:	705a      	strb	r2, [r3, #1]
				RightTSL25911.m_ui16OperationTimeoutMS = 20;	// 20ms timeout
 8002cce:	4b78      	ldr	r3, [pc, #480]	; (8002eb0 <TSL25911MainLoop+0x298>)
 8002cd0:	2214      	movs	r2, #20
 8002cd2:	811a      	strh	r2, [r3, #8]
			return;
 8002cd4:	e144      	b.n	8002f60 <TSL25911MainLoop+0x348>

		}
		else if( (RightTSL25911.ucOperationStatus == TSL25911_CONFIGURED) )
 8002cd6:	4b76      	ldr	r3, [pc, #472]	; (8002eb0 <TSL25911MainLoop+0x298>)
 8002cd8:	785b      	ldrb	r3, [r3, #1]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b05      	cmp	r3, #5
 8002cde:	d11e      	bne.n	8002d1e <TSL25911MainLoop+0x106>
		{	// Sensor configured => must try to read the CH0 and CH1 data
			// ALS Data Register Address = 0x14 + (Normal Command = 0xA0) => Register Address = 0xB4
			// ALS Data Register Data    = XX,YY -> read 4 data
			//----------------------------------------

			ucCommand = 0x01;			// (AGAIN = MEDIUM)
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73bb      	strb	r3, [r7, #14]
			ucRegisterAddress = 0xB4;	// add
 8002ce4:	23b4      	movs	r3, #180	; 0xb4
 8002ce6:	73fb      	strb	r3, [r7, #15]

			// HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
			//if(HAL_I2C_Mem_Read_IT(&hi2c1, RightTSL25911.ucI2CAddress, ucRegisterAddress, 1, (uint8_t *)RightTSL25911.ucResultBuffer ,4) != HAL_OK)
			if(HAL_I2C_Mem_Read_IT(&hi2c1, 0x52, 0xB4, 1, (uint8_t *)RightTSL25911.ucResultBuffer ,4) != HAL_OK)
 8002ce8:	2304      	movs	r3, #4
 8002cea:	9301      	str	r3, [sp, #4]
 8002cec:	4b73      	ldr	r3, [pc, #460]	; (8002ebc <TSL25911MainLoop+0x2a4>)
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	22b4      	movs	r2, #180	; 0xb4
 8002cf4:	2152      	movs	r1, #82	; 0x52
 8002cf6:	486f      	ldr	r0, [pc, #444]	; (8002eb4 <TSL25911MainLoop+0x29c>)
 8002cf8:	f009 fdd0 	bl	800c89c <HAL_I2C_Mem_Read_IT>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d006      	beq.n	8002d10 <TSL25911MainLoop+0xf8>
			{
				RightTSL25911.ucOperationStatus 	= TSL25911_ERROR;
 8002d02:	4b6b      	ldr	r3, [pc, #428]	; (8002eb0 <TSL25911MainLoop+0x298>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	705a      	strb	r2, [r3, #1]
				RightTSL25911Result.ucSensorStatus 	= TSL25911_ERROR;
 8002d08:	4b6b      	ldr	r3, [pc, #428]	; (8002eb8 <TSL25911MainLoop+0x2a0>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	715a      	strb	r2, [r3, #5]
 8002d0e:	e002      	b.n	8002d16 <TSL25911MainLoop+0xfe>
				sprintf((char *)m_ucDebugBuffer,"(03) RIGHT TSL25911: TSL25911_CONFIGURED Error\r\n");
				DebugSendData(m_ucDebugBuffer,strlen((char *)m_ucDebugBuffer));
				#endif
				//Error_Handler2(ERROR_CODE_I2CDEVICES_DEBUG_042);
			}
			else RightTSL25911.ucOperationStatus = TSL25911_TRY_2_READ;
 8002d10:	4b67      	ldr	r3, [pc, #412]	; (8002eb0 <TSL25911MainLoop+0x298>)
 8002d12:	2206      	movs	r2, #6
 8002d14:	705a      	strb	r2, [r3, #1]
			RightTSL25911.m_ui16OperationTimeoutMS = 5;	// 5ms timeout
 8002d16:	4b66      	ldr	r3, [pc, #408]	; (8002eb0 <TSL25911MainLoop+0x298>)
 8002d18:	2205      	movs	r2, #5
 8002d1a:	811a      	strh	r2, [r3, #8]
			return;
 8002d1c:	e120      	b.n	8002f60 <TSL25911MainLoop+0x348>

		}
		else if( (RightTSL25911.ucOperationStatus == TSL25911_CH_READ_DONE) )
 8002d1e:	4b64      	ldr	r3, [pc, #400]	; (8002eb0 <TSL25911MainLoop+0x298>)
 8002d20:	785b      	ldrb	r3, [r3, #1]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b07      	cmp	r3, #7
 8002d26:	d13c      	bne.n	8002da2 <TSL25911MainLoop+0x18a>
		{	// Data Read is done => calculate the result from the reading buffer
			//----------------------------------------

			// CH0
			RightTSL25911Result.ui16CH0Result	= (uint16_t)RightTSL25911.ucResultBuffer[1];
 8002d28:	4b61      	ldr	r3, [pc, #388]	; (8002eb0 <TSL25911MainLoop+0x298>)
 8002d2a:	791b      	ldrb	r3, [r3, #4]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	4b61      	ldr	r3, [pc, #388]	; (8002eb8 <TSL25911MainLoop+0x2a0>)
 8002d32:	801a      	strh	r2, [r3, #0]
			RightTSL25911Result.ui16CH0Result <<= 8;
 8002d34:	4b60      	ldr	r3, [pc, #384]	; (8002eb8 <TSL25911MainLoop+0x2a0>)
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	4b5e      	ldr	r3, [pc, #376]	; (8002eb8 <TSL25911MainLoop+0x2a0>)
 8002d40:	801a      	strh	r2, [r3, #0]
			RightTSL25911Result.ui16CH0Result  += (uint16_t)RightTSL25911.ucResultBuffer[0];
 8002d42:	4b5b      	ldr	r3, [pc, #364]	; (8002eb0 <TSL25911MainLoop+0x298>)
 8002d44:	78db      	ldrb	r3, [r3, #3]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	4b5b      	ldr	r3, [pc, #364]	; (8002eb8 <TSL25911MainLoop+0x2a0>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	4b58      	ldr	r3, [pc, #352]	; (8002eb8 <TSL25911MainLoop+0x2a0>)
 8002d56:	801a      	strh	r2, [r3, #0]

			// CH1
			RightTSL25911Result.ui16CH1Result	= (uint16_t)RightTSL25911.ucResultBuffer[3];
 8002d58:	4b55      	ldr	r3, [pc, #340]	; (8002eb0 <TSL25911MainLoop+0x298>)
 8002d5a:	799b      	ldrb	r3, [r3, #6]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	4b55      	ldr	r3, [pc, #340]	; (8002eb8 <TSL25911MainLoop+0x2a0>)
 8002d62:	805a      	strh	r2, [r3, #2]
			RightTSL25911Result.ui16CH1Result <<= 8;
 8002d64:	4b54      	ldr	r3, [pc, #336]	; (8002eb8 <TSL25911MainLoop+0x2a0>)
 8002d66:	885b      	ldrh	r3, [r3, #2]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	021b      	lsls	r3, r3, #8
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	4b52      	ldr	r3, [pc, #328]	; (8002eb8 <TSL25911MainLoop+0x2a0>)
 8002d70:	805a      	strh	r2, [r3, #2]
			RightTSL25911Result.ui16CH1Result  += (uint16_t)RightTSL25911.ucResultBuffer[2];
 8002d72:	4b4f      	ldr	r3, [pc, #316]	; (8002eb0 <TSL25911MainLoop+0x298>)
 8002d74:	795b      	ldrb	r3, [r3, #5]
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	4b4f      	ldr	r3, [pc, #316]	; (8002eb8 <TSL25911MainLoop+0x2a0>)
 8002d7c:	885b      	ldrh	r3, [r3, #2]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	4b4c      	ldr	r3, [pc, #304]	; (8002eb8 <TSL25911MainLoop+0x2a0>)
 8002d86:	805a      	strh	r2, [r3, #2]

			RightTSL25911Result.ucNewResultIsAvailable = 1;
 8002d88:	4b4b      	ldr	r3, [pc, #300]	; (8002eb8 <TSL25911MainLoop+0x2a0>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	711a      	strb	r2, [r3, #4]

			RightTSL25911.ucOperationStatus 	= TSL25911_WAIT_NEXT_READ;
 8002d8e:	4b48      	ldr	r3, [pc, #288]	; (8002eb0 <TSL25911MainLoop+0x298>)
 8002d90:	2208      	movs	r2, #8
 8002d92:	705a      	strb	r2, [r3, #1]
			RightTSL25911Result.ucSensorStatus 	= TSL25911_CH_READ_DONE;	// indicating that the result reading has finished as expected
 8002d94:	4b48      	ldr	r3, [pc, #288]	; (8002eb8 <TSL25911MainLoop+0x2a0>)
 8002d96:	2207      	movs	r2, #7
 8002d98:	715a      	strb	r2, [r3, #5]
			RightTSL25911.m_ui16OperationTimeoutMS = 50;	// 50ms timeout (allow some time-slice also for the EEPROM 24C512)
 8002d9a:	4b45      	ldr	r3, [pc, #276]	; (8002eb0 <TSL25911MainLoop+0x298>)
 8002d9c:	2232      	movs	r2, #50	; 0x32
 8002d9e:	811a      	strh	r2, [r3, #8]
		}
		else
		{	// error
			RightTSL25911.ucOperationStatus = TSL25911_UNKNOWN_STATE;
		}
		return;
 8002da0:	e0de      	b.n	8002f60 <TSL25911MainLoop+0x348>
			RightTSL25911.ucOperationStatus = TSL25911_UNKNOWN_STATE;
 8002da2:	4b43      	ldr	r3, [pc, #268]	; (8002eb0 <TSL25911MainLoop+0x298>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	705a      	strb	r2, [r3, #1]
		return;
 8002da8:	e0da      	b.n	8002f60 <TSL25911MainLoop+0x348>
	}
	// -----------------------------------------------------------------------


	// ------------------- handle the LEFT side sensor -----------------------
	if(ucSensorSide == LEFT)
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	f040 80d4 	bne.w	8002f5a <TSL25911MainLoop+0x342>
	{	// LEFT => I2C3
		// check the operation timeout
		if(LeftTSL25911.m_ui16OperationTimeoutMS) return;
 8002db2:	4b43      	ldr	r3, [pc, #268]	; (8002ec0 <TSL25911MainLoop+0x2a8>)
 8002db4:	891b      	ldrh	r3, [r3, #8]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 80d0 	bne.w	8002f5e <TSL25911MainLoop+0x346>

		if( (LeftTSL25911.ucOperationStatus == TSL25911_UNKNOWN_STATE) )
 8002dbe:	4b40      	ldr	r3, [pc, #256]	; (8002ec0 <TSL25911MainLoop+0x2a8>)
 8002dc0:	785b      	ldrb	r3, [r3, #1]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d122      	bne.n	8002e0e <TSL25911MainLoop+0x1f6>
		{	// after reset => must ENABLE the ALS
			// Enable Register Address = 0x00 + (Normal Command = 0xA0) => Register Address = 0xA0
			// Enable Register Data    = 0000 0011 = 0x03 (AEN + PON)
			//----------------------------------------

			ucCommand = 0x03;			// (AEN + PON)
 8002dc8:	2303      	movs	r3, #3
 8002dca:	73bb      	strb	r3, [r7, #14]
			ucRegisterAddress = 0xA0;	// add
 8002dcc:	23a0      	movs	r3, #160	; 0xa0
 8002dce:	73fb      	strb	r3, [r7, #15]

			// HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
			//if(HAL_I2C_Mem_Write_IT(&hi2c3, LeftTSL25911.ucI2CAddress, ucRegisterAddress, 1, &ucCommand,1) != HAL_OK)
			if(HAL_I2C_Mem_Write(&hi2c3, 0x52, 0xA0, 1,&ucCommand,1, HAL_MAX_DELAY) != HAL_OK)
 8002dd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dd4:	9302      	str	r3, [sp, #8]
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	9301      	str	r3, [sp, #4]
 8002dda:	f107 030e 	add.w	r3, r7, #14
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	2301      	movs	r3, #1
 8002de2:	22a0      	movs	r2, #160	; 0xa0
 8002de4:	2152      	movs	r1, #82	; 0x52
 8002de6:	4837      	ldr	r0, [pc, #220]	; (8002ec4 <TSL25911MainLoop+0x2ac>)
 8002de8:	f009 f986 	bl	800c0f8 <HAL_I2C_Mem_Write>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d006      	beq.n	8002e00 <TSL25911MainLoop+0x1e8>
			{
				LeftTSL25911.ucOperationStatus 		= TSL25911_ERROR;
 8002df2:	4b33      	ldr	r3, [pc, #204]	; (8002ec0 <TSL25911MainLoop+0x2a8>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	705a      	strb	r2, [r3, #1]
				LeftTSL25911Result.ucSensorStatus 	= TSL25911_ERROR;
 8002df8:	4b33      	ldr	r3, [pc, #204]	; (8002ec8 <TSL25911MainLoop+0x2b0>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	715a      	strb	r2, [r3, #5]
				//LeftTSL25911.ucOperationStatus = TSL25911_TRY_2_ENABLE;
				LeftTSL25911.ucOperationStatus = TSL25911_ENABLED;
				LeftTSL25911.m_ui16OperationTimeoutMS = 20; // 20 ms timeout
			}

			return;
 8002dfe:	e0af      	b.n	8002f60 <TSL25911MainLoop+0x348>
				LeftTSL25911.ucOperationStatus = TSL25911_ENABLED;
 8002e00:	4b2f      	ldr	r3, [pc, #188]	; (8002ec0 <TSL25911MainLoop+0x2a8>)
 8002e02:	2203      	movs	r2, #3
 8002e04:	705a      	strb	r2, [r3, #1]
				LeftTSL25911.m_ui16OperationTimeoutMS = 20; // 20 ms timeout
 8002e06:	4b2e      	ldr	r3, [pc, #184]	; (8002ec0 <TSL25911MainLoop+0x2a8>)
 8002e08:	2214      	movs	r2, #20
 8002e0a:	811a      	strh	r2, [r3, #8]
			return;
 8002e0c:	e0a8      	b.n	8002f60 <TSL25911MainLoop+0x348>
		}
		else if( (LeftTSL25911.ucOperationStatus == TSL25911_ENABLED) )
 8002e0e:	4b2c      	ldr	r3, [pc, #176]	; (8002ec0 <TSL25911MainLoop+0x2a8>)
 8002e10:	785b      	ldrb	r3, [r3, #1]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d122      	bne.n	8002e5e <TSL25911MainLoop+0x246>
		{	// Sensor is enabled => must configure the GAIN -> MEDIUM (10)
			// Control Register Address = 0x01 + (Normal Command = 0xA0) => Register Address = 0xA1
			// Control Register Data    = 0001 0000 = 0x10 (AGAIN = MEDIUM)
			//----------------------------------------

			ucCommand = 0x10;			// (AGAIN = MEDIUM)
 8002e18:	2310      	movs	r3, #16
 8002e1a:	73bb      	strb	r3, [r7, #14]
			ucRegisterAddress = 0xA1;	// add
 8002e1c:	23a1      	movs	r3, #161	; 0xa1
 8002e1e:	73fb      	strb	r3, [r7, #15]

			// HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
			//if(HAL_I2C_Mem_Write_IT(&hi2c3, LeftTSL25911.ucI2CAddress, ucRegisterAddress, 1, &ucCommand,1) != HAL_OK)
			if(HAL_I2C_Mem_Write(&hi2c3, 0x52, 0xA1, 1,&ucCommand,1, HAL_MAX_DELAY) != HAL_OK)
 8002e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e24:	9302      	str	r3, [sp, #8]
 8002e26:	2301      	movs	r3, #1
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	f107 030e 	add.w	r3, r7, #14
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	2301      	movs	r3, #1
 8002e32:	22a1      	movs	r2, #161	; 0xa1
 8002e34:	2152      	movs	r1, #82	; 0x52
 8002e36:	4823      	ldr	r0, [pc, #140]	; (8002ec4 <TSL25911MainLoop+0x2ac>)
 8002e38:	f009 f95e 	bl	800c0f8 <HAL_I2C_Mem_Write>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d006      	beq.n	8002e50 <TSL25911MainLoop+0x238>
			{
				LeftTSL25911.ucOperationStatus 		= TSL25911_ERROR;
 8002e42:	4b1f      	ldr	r3, [pc, #124]	; (8002ec0 <TSL25911MainLoop+0x2a8>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	705a      	strb	r2, [r3, #1]
				LeftTSL25911Result.ucSensorStatus 	= TSL25911_ERROR;
 8002e48:	4b1f      	ldr	r3, [pc, #124]	; (8002ec8 <TSL25911MainLoop+0x2b0>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	715a      	strb	r2, [r3, #5]
				//LeftTSL25911.ucOperationStatus = TSL25911_TRY_2_CONFIG;
				LeftTSL25911.ucOperationStatus = TSL25911_CONFIGURED;
				LeftTSL25911.m_ui16OperationTimeoutMS = 20; // 20 ms timeout
			}

			return;
 8002e4e:	e087      	b.n	8002f60 <TSL25911MainLoop+0x348>
				LeftTSL25911.ucOperationStatus = TSL25911_CONFIGURED;
 8002e50:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <TSL25911MainLoop+0x2a8>)
 8002e52:	2205      	movs	r2, #5
 8002e54:	705a      	strb	r2, [r3, #1]
				LeftTSL25911.m_ui16OperationTimeoutMS = 20; // 20 ms timeout
 8002e56:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <TSL25911MainLoop+0x2a8>)
 8002e58:	2214      	movs	r2, #20
 8002e5a:	811a      	strh	r2, [r3, #8]
			return;
 8002e5c:	e080      	b.n	8002f60 <TSL25911MainLoop+0x348>

		}
		else if( (LeftTSL25911.ucOperationStatus == TSL25911_CONFIGURED) )
 8002e5e:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <TSL25911MainLoop+0x2a8>)
 8002e60:	785b      	ldrb	r3, [r3, #1]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b05      	cmp	r3, #5
 8002e66:	d133      	bne.n	8002ed0 <TSL25911MainLoop+0x2b8>
		{	// Sensor configured => must try to read the CH0 and CH1 data
			// ALS Data Register Address = 0x14 + (Normal Command = 0xA0) => Register Address = 0xB4
			// ALS Data Register Data    = XX,YY -> read 4 data
			//----------------------------------------

			ucCommand = 0x01;			// (AGAIN = MEDIUM)
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73bb      	strb	r3, [r7, #14]
			ucRegisterAddress = 0xB4;	// add
 8002e6c:	23b4      	movs	r3, #180	; 0xb4
 8002e6e:	73fb      	strb	r3, [r7, #15]

			// HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
			if(HAL_I2C_Mem_Read_IT(&hi2c3, LeftTSL25911.ucI2CAddress, ucRegisterAddress, 1, (uint8_t *)LeftTSL25911.ucResultBuffer ,4) != HAL_OK)
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <TSL25911MainLoop+0x2a8>)
 8002e72:	789b      	ldrb	r3, [r3, #2]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	b299      	uxth	r1, r3
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	9301      	str	r3, [sp, #4]
 8002e80:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <TSL25911MainLoop+0x2b4>)
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	2301      	movs	r3, #1
 8002e86:	480f      	ldr	r0, [pc, #60]	; (8002ec4 <TSL25911MainLoop+0x2ac>)
 8002e88:	f009 fd08 	bl	800c89c <HAL_I2C_Mem_Read_IT>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d006      	beq.n	8002ea0 <TSL25911MainLoop+0x288>
			{
				LeftTSL25911.ucOperationStatus 		= TSL25911_ERROR;
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <TSL25911MainLoop+0x2a8>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	705a      	strb	r2, [r3, #1]
				LeftTSL25911Result.ucSensorStatus 	= TSL25911_ERROR;
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <TSL25911MainLoop+0x2b0>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	715a      	strb	r2, [r3, #5]
 8002e9e:	e002      	b.n	8002ea6 <TSL25911MainLoop+0x28e>
				sprintf((char *)m_ucDebugBuffer,"(03) LEFT TSL25911: TSL25911_CONFIGURED Error\r\n");
				DebugSendData(m_ucDebugBuffer,strlen((char *)m_ucDebugBuffer));
				#endif
				//Error_Handler2(ERROR_CODE_I2CDEVICES_DEBUG_042);
			}
			else LeftTSL25911.ucOperationStatus = TSL25911_TRY_2_READ;
 8002ea0:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <TSL25911MainLoop+0x2a8>)
 8002ea2:	2206      	movs	r2, #6
 8002ea4:	705a      	strb	r2, [r3, #1]
			LeftTSL25911.m_ui16OperationTimeoutMS = 5; // 5 ms timeout
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <TSL25911MainLoop+0x2a8>)
 8002ea8:	2205      	movs	r2, #5
 8002eaa:	811a      	strh	r2, [r3, #8]
			return;
 8002eac:	e058      	b.n	8002f60 <TSL25911MainLoop+0x348>
 8002eae:	bf00      	nop
 8002eb0:	20000984 	.word	0x20000984
 8002eb4:	2000224c 	.word	0x2000224c
 8002eb8:	20000990 	.word	0x20000990
 8002ebc:	20000987 	.word	0x20000987
 8002ec0:	20000998 	.word	0x20000998
 8002ec4:	200022a0 	.word	0x200022a0
 8002ec8:	200009a4 	.word	0x200009a4
 8002ecc:	2000099b 	.word	0x2000099b

		}
		else if( (LeftTSL25911.ucOperationStatus == TSL25911_CH_READ_DONE) )
 8002ed0:	4b25      	ldr	r3, [pc, #148]	; (8002f68 <TSL25911MainLoop+0x350>)
 8002ed2:	785b      	ldrb	r3, [r3, #1]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b07      	cmp	r3, #7
 8002ed8:	d139      	bne.n	8002f4e <TSL25911MainLoop+0x336>
		{	// Data Read is done => calculate the result from the reading buffer
			//----------------------------------------

			// CH0
			LeftTSL25911Result.ui16CH0Result	= (uint16_t)LeftTSL25911.ucResultBuffer[1];
 8002eda:	4b23      	ldr	r3, [pc, #140]	; (8002f68 <TSL25911MainLoop+0x350>)
 8002edc:	791b      	ldrb	r3, [r3, #4]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	4b22      	ldr	r3, [pc, #136]	; (8002f6c <TSL25911MainLoop+0x354>)
 8002ee4:	801a      	strh	r2, [r3, #0]
			LeftTSL25911Result.ui16CH0Result <<= 8;
 8002ee6:	4b21      	ldr	r3, [pc, #132]	; (8002f6c <TSL25911MainLoop+0x354>)
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	021b      	lsls	r3, r3, #8
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <TSL25911MainLoop+0x354>)
 8002ef2:	801a      	strh	r2, [r3, #0]
			LeftTSL25911Result.ui16CH0Result  += (uint16_t)LeftTSL25911.ucResultBuffer[0];
 8002ef4:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <TSL25911MainLoop+0x350>)
 8002ef6:	78db      	ldrb	r3, [r3, #3]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <TSL25911MainLoop+0x354>)
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <TSL25911MainLoop+0x354>)
 8002f08:	801a      	strh	r2, [r3, #0]

			// CH1
			LeftTSL25911Result.ui16CH1Result	= (uint16_t)LeftTSL25911.ucResultBuffer[3];
 8002f0a:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <TSL25911MainLoop+0x350>)
 8002f0c:	799b      	ldrb	r3, [r3, #6]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <TSL25911MainLoop+0x354>)
 8002f14:	805a      	strh	r2, [r3, #2]
			LeftTSL25911Result.ui16CH1Result <<= 8;
 8002f16:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <TSL25911MainLoop+0x354>)
 8002f18:	885b      	ldrh	r3, [r3, #2]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <TSL25911MainLoop+0x354>)
 8002f22:	805a      	strh	r2, [r3, #2]
			LeftTSL25911Result.ui16CH1Result  += (uint16_t)LeftTSL25911.ucResultBuffer[2];
 8002f24:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <TSL25911MainLoop+0x350>)
 8002f26:	795b      	ldrb	r3, [r3, #5]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <TSL25911MainLoop+0x354>)
 8002f2e:	885b      	ldrh	r3, [r3, #2]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	4b0d      	ldr	r3, [pc, #52]	; (8002f6c <TSL25911MainLoop+0x354>)
 8002f38:	805a      	strh	r2, [r3, #2]

			LeftTSL25911Result.ucNewResultIsAvailable = 1;
 8002f3a:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <TSL25911MainLoop+0x354>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	711a      	strb	r2, [r3, #4]

			LeftTSL25911.ucOperationStatus 		= TSL25911_WAIT_NEXT_READ;
 8002f40:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <TSL25911MainLoop+0x350>)
 8002f42:	2208      	movs	r2, #8
 8002f44:	705a      	strb	r2, [r3, #1]
			LeftTSL25911Result.ucSensorStatus 	= TSL25911_CH_READ_DONE;	// indicating that the result reading has finished as expected
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <TSL25911MainLoop+0x354>)
 8002f48:	2207      	movs	r2, #7
 8002f4a:	715a      	strb	r2, [r3, #5]
		}
		else
		{	// error
			LeftTSL25911.ucOperationStatus = TSL25911_UNKNOWN_STATE;
		}
		return;
 8002f4c:	e008      	b.n	8002f60 <TSL25911MainLoop+0x348>
			LeftTSL25911.ucOperationStatus = TSL25911_UNKNOWN_STATE;
 8002f4e:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <TSL25911MainLoop+0x350>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	705a      	strb	r2, [r3, #1]
		return;
 8002f54:	e004      	b.n	8002f60 <TSL25911MainLoop+0x348>
		if(RightTSL25911.m_ui16OperationTimeoutMS) return;
 8002f56:	bf00      	nop
 8002f58:	e002      	b.n	8002f60 <TSL25911MainLoop+0x348>
	}
	// -----------------------------------------------------------------------



	return;
 8002f5a:	bf00      	nop
 8002f5c:	e000      	b.n	8002f60 <TSL25911MainLoop+0x348>
		if(LeftTSL25911.m_ui16OperationTimeoutMS) return;
 8002f5e:	bf00      	nop
}
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000998 	.word	0x20000998
 8002f6c:	200009a4 	.word	0x200009a4

08002f70 <TSL25911Timer1KHZISR>:
//----------------------------------------------------------------------------------
static void TSL25911Timer1KHZISR(void)				// called from the 1KHZ Timer ISR
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
	// RIGHT
	if(RightTSL25911.m_ui16OperationTimeoutMS )		RightTSL25911.m_ui16OperationTimeoutMS --;
 8002f74:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <TSL25911Timer1KHZISR+0x40>)
 8002f76:	891b      	ldrh	r3, [r3, #8]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d006      	beq.n	8002f8c <TSL25911Timer1KHZISR+0x1c>
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <TSL25911Timer1KHZISR+0x40>)
 8002f80:	891b      	ldrh	r3, [r3, #8]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <TSL25911Timer1KHZISR+0x40>)
 8002f8a:	811a      	strh	r2, [r3, #8]

	//LEFT
	if(LeftTSL25911.m_ui16OperationTimeoutMS )		LeftTSL25911.m_ui16OperationTimeoutMS --;
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <TSL25911Timer1KHZISR+0x44>)
 8002f8e:	891b      	ldrh	r3, [r3, #8]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d007      	beq.n	8002fa6 <TSL25911Timer1KHZISR+0x36>
 8002f96:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <TSL25911Timer1KHZISR+0x44>)
 8002f98:	891b      	ldrh	r3, [r3, #8]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <TSL25911Timer1KHZISR+0x44>)
 8002fa2:	811a      	strh	r2, [r3, #8]

	return;
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop
}
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	20000984 	.word	0x20000984
 8002fb4:	20000998 	.word	0x20000998

08002fb8 <I2CErrorChecker>:
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
static void I2CErrorChecker(void)	// used in the loop to check if there is some I2C error and trigger the callback
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
	uint8_t ucError;
	ucError = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	71fb      	strb	r3, [r7, #7]

	// check the error for I2C1
	if( (hi2c1.ErrorCode != 0) || (hi2c1.Instance->SR1 != 0) || (hi2c1.Instance->SR2 != 0) )	ucError |= 0x01;
 8002fc2:	4b27      	ldr	r3, [pc, #156]	; (8003060 <I2CErrorChecker+0xa8>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d109      	bne.n	8002fde <I2CErrorChecker+0x26>
 8002fca:	4b25      	ldr	r3, [pc, #148]	; (8003060 <I2CErrorChecker+0xa8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d104      	bne.n	8002fde <I2CErrorChecker+0x26>
 8002fd4:	4b22      	ldr	r3, [pc, #136]	; (8003060 <I2CErrorChecker+0xa8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <I2CErrorChecker+0x2e>
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	71fb      	strb	r3, [r7, #7]

	// check the error for I2C3
	if( (hi2c3.ErrorCode != 0) || (hi2c3.Instance->SR1 != 0) || (hi2c3.Instance->SR2 != 0) )	ucError |= 0x02;
 8002fe6:	4b1f      	ldr	r3, [pc, #124]	; (8003064 <I2CErrorChecker+0xac>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <I2CErrorChecker+0x4a>
 8002fee:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <I2CErrorChecker+0xac>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d104      	bne.n	8003002 <I2CErrorChecker+0x4a>
 8002ff8:	4b1a      	ldr	r3, [pc, #104]	; (8003064 <I2CErrorChecker+0xac>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <I2CErrorChecker+0x52>
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	f043 0302 	orr.w	r3, r3, #2
 8003008:	71fb      	strb	r3, [r7, #7]

	if(I2CErrorStatus.ucError != ucError)
 800300a:	4b17      	ldr	r3, [pc, #92]	; (8003068 <I2CErrorChecker+0xb0>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	79fa      	ldrb	r2, [r7, #7]
 8003010:	429a      	cmp	r2, r3
 8003012:	d00d      	beq.n	8003030 <I2CErrorChecker+0x78>
	{
		I2CErrorStatus.ucError = ucError;
 8003014:	4a14      	ldr	r2, [pc, #80]	; (8003068 <I2CErrorChecker+0xb0>)
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	7013      	strb	r3, [r2, #0]
		I2CErrorStatus.ucI2CErrorCallbackTimer = 100;	// decremented @ 100HZ => 1Second is 100 decrements
 800301a:	4b13      	ldr	r3, [pc, #76]	; (8003068 <I2CErrorChecker+0xb0>)
 800301c:	2264      	movs	r2, #100	; 0x64
 800301e:	705a      	strb	r2, [r3, #1]
		I2CErrorCallback(ucError);
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe ff57 	bl	8001ed6 <I2CErrorCallback>
		// audio playing error sound = partiture 0
		AudioPlayPartiture(0);
 8003028:	2000      	movs	r0, #0
 800302a:	f7fe fce9 	bl	8001a00 <AudioPlayPartiture>
		return;
 800302e:	e013      	b.n	8003058 <I2CErrorChecker+0xa0>
	}

	if( (I2CErrorStatus.ucError != 0) )
 8003030:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <I2CErrorChecker+0xb0>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00e      	beq.n	8003056 <I2CErrorChecker+0x9e>
	{
		if(I2CErrorStatus.ucI2CErrorCallbackTimer == 0)
 8003038:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <I2CErrorChecker+0xb0>)
 800303a:	785b      	ldrb	r3, [r3, #1]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10a      	bne.n	8003056 <I2CErrorChecker+0x9e>
		{
			I2CErrorStatus.ucI2CErrorCallbackTimer = 100;	// trigger another callback sending
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <I2CErrorChecker+0xb0>)
 8003042:	2264      	movs	r2, #100	; 0x64
 8003044:	705a      	strb	r2, [r3, #1]
			I2CErrorCallback(I2CErrorStatus.ucError);
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <I2CErrorChecker+0xb0>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe ff43 	bl	8001ed6 <I2CErrorCallback>
			// audio playing error sound = partiture 0
			AudioPlayPartiture(0);
 8003050:	2000      	movs	r0, #0
 8003052:	f7fe fcd5 	bl	8001a00 <AudioPlayPartiture>
		}
	}

	return;
 8003056:	bf00      	nop
}
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	2000224c 	.word	0x2000224c
 8003064:	200022a0 	.word	0x200022a0
 8003068:	200009ac 	.word	0x200009ac

0800306c <I2CErrorTimer100HZ>:
//----------------------------------------------------------------------------------
static void I2CErrorTimer100HZ(void)	// called @ 100HZ rate to handle error management	// called from the system timer @ 100HZ rate. it is used to timeout the reading of the LEFT VEML3328 color sensors
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
	if( (I2CErrorStatus.ucError == 0) ) return;
 8003070:	4b0a      	ldr	r3, [pc, #40]	; (800309c <I2CErrorTimer100HZ+0x30>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <I2CErrorTimer100HZ+0x22>
	if( (I2CErrorStatus.ucI2CErrorCallbackTimer > 0) )	I2CErrorStatus.ucI2CErrorCallbackTimer --;
 8003078:	4b08      	ldr	r3, [pc, #32]	; (800309c <I2CErrorTimer100HZ+0x30>)
 800307a:	785b      	ldrb	r3, [r3, #1]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <I2CErrorTimer100HZ+0x26>
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <I2CErrorTimer100HZ+0x30>)
 8003082:	785b      	ldrb	r3, [r3, #1]
 8003084:	3b01      	subs	r3, #1
 8003086:	b2da      	uxtb	r2, r3
 8003088:	4b04      	ldr	r3, [pc, #16]	; (800309c <I2CErrorTimer100HZ+0x30>)
 800308a:	705a      	strb	r2, [r3, #1]
	return;
 800308c:	e001      	b.n	8003092 <I2CErrorTimer100HZ+0x26>
	if( (I2CErrorStatus.ucError == 0) ) return;
 800308e:	bf00      	nop
 8003090:	e000      	b.n	8003094 <I2CErrorTimer100HZ+0x28>
	return;
 8003092:	bf00      	nop
}
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	200009ac 	.word	0x200009ac

080030a0 <InteractionTurnIRPatternGenerationONorOFF>:

	return;
}
//----------------------------------------------------------------------------------
 void InteractionTurnIRPatternGenerationONorOFF(uint8_t ucIRPatternON)		//used to turn the IR pattern generation ON or OFF. if ucIRPatternON == 0 => the IR pattern generation is turned off and all the side IR LEDs are OFF
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]
	if(ucIRPatternON)
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d006      	beq.n	80030be <InteractionTurnIRPatternGenerationONorOFF+0x1e>
	{	// turn ON
		HAL_GPIO_WritePin(IR_PWM_GPIO_Port, IR_PWM_Pin, GPIO_PIN_RESET);	// the IR driver  is ENABLED
 80030b0:	2200      	movs	r2, #0
 80030b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030b6:	4807      	ldr	r0, [pc, #28]	; (80030d4 <InteractionTurnIRPatternGenerationONorOFF+0x34>)
 80030b8:	f008 fea8 	bl	800be0c <HAL_GPIO_WritePin>
	else
	{	// turn OFF
		HAL_GPIO_WritePin(IR_PWM_GPIO_Port, IR_PWM_Pin, GPIO_PIN_SET);		// the IR driver  is DISABLED
	}

	return;
 80030bc:	e006      	b.n	80030cc <InteractionTurnIRPatternGenerationONorOFF+0x2c>
		HAL_GPIO_WritePin(IR_PWM_GPIO_Port, IR_PWM_Pin, GPIO_PIN_SET);		// the IR driver  is DISABLED
 80030be:	2201      	movs	r2, #1
 80030c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030c4:	4803      	ldr	r0, [pc, #12]	; (80030d4 <InteractionTurnIRPatternGenerationONorOFF+0x34>)
 80030c6:	f008 fea1 	bl	800be0c <HAL_GPIO_WritePin>
	return;
 80030ca:	bf00      	nop
}
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40020000 	.word	0x40020000

080030d8 <InteractionInit>:

// SYSTEM
//==================================================================================================================== SYSTEM_START
//----------------------------------------------------------------------------------
void InteractionInit(void)	// used to initialize the Interaction Module. Called from main.c file @ init section
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0

	// EEPROM
	EEPROMInitialization();
 80030dc:	f001 fcb4 	bl	8004a48 <EEPROMInitialization>

	// ID Pattern
	IDPatternInitialization();
 80030e0:	f001 ffe8 	bl	80050b4 <IDPatternInitialization>

	// turn on the side IR LED drivers
	InteractionTurnIRPatternGenerationONorOFF(1);
 80030e4:	2001      	movs	r0, #1
 80030e6:	f7ff ffdb 	bl	80030a0 <InteractionTurnIRPatternGenerationONorOFF>
	// set the number of measurements / acquisition
	MeasurementData.ucAcquisitionCounterMax = INTERACTION_NUMBER_OF_MEASUREMENTS_PER_ACQUISITIONS;
 80030ea:	4b0c      	ldr	r3, [pc, #48]	; (800311c <InteractionInit+0x44>)
 80030ec:	223c      	movs	r2, #60	; 0x3c
 80030ee:	735a      	strb	r2, [r3, #13]

	// spike filter initialization
	SpikeFilterInitialization();			// not used for now
 80030f0:	f000 fe48 	bl	8003d84 <SpikeFilterInitialization>

	// moving average filter
	MovingAverageFilterInitialization();	// not used for now
 80030f4:	f000 fe4d 	bl	8003d92 <MovingAverageFilterInitialization>

	// base line determination
	BaseLineInitialization();
 80030f8:	f000 ff32 	bl	8003f60 <BaseLineInitialization>

	// sensitivity
	SensitivityInitialization();
 80030fc:	f001 f9b8 	bl	8004470 <SensitivityInitialization>


	//HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
	if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8003100:	4807      	ldr	r0, [pc, #28]	; (8003120 <InteractionInit+0x48>)
 8003102:	f00c fa63 	bl	800f5cc <HAL_TIM_Base_Start_IT>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d004      	beq.n	8003116 <InteractionInit+0x3e>
	{
		Error_Handler2(ERROR_CODE_INTERACTION_INIT_001);
 800310c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003110:	f006 fc00 	bl	8009914 <Error_Handler2>





	return;
 8003114:	bf00      	nop
 8003116:	bf00      	nop
}
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	200009b0 	.word	0x200009b0
 8003120:	2000233c 	.word	0x2000233c

08003124 <InteractionMainLoop>:
//----------------------------------------------------------------------------------
void InteractionMainLoop(void)	// loop function of the Interaction Module. Called from the main.c file @ main loop section
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
	// skip real time
	if(m_uiInteractionSkipRealTime)
 8003128:	4b18      	ldr	r3, [pc, #96]	; (800318c <InteractionMainLoop+0x68>)
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d006      	beq.n	800313e <InteractionMainLoop+0x1a>
	{
		m_uiInteractionSkipRealTime --;
 8003130:	4b16      	ldr	r3, [pc, #88]	; (800318c <InteractionMainLoop+0x68>)
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	4b14      	ldr	r3, [pc, #80]	; (800318c <InteractionMainLoop+0x68>)
 800313a:	801a      	strh	r2, [r3, #0]
		return;
 800313c:	e024      	b.n	8003188 <InteractionMainLoop+0x64>
	}
	m_uiInteractionSkipRealTime = INTERACTION_SKIP_REAL_TIME;
 800313e:	4b13      	ldr	r3, [pc, #76]	; (800318c <InteractionMainLoop+0x68>)
 8003140:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003144:	801a      	strh	r2, [r3, #0]
	// --------------- check if acquisition is done --------------------------
	// this function checks if the acquisition is done in the "MeasurementData" variable
	// if the acquisition is done => will save the result in the "MeasurementResult"
	// and restarts another data acquisition
	// if the acquisition is done and new results are available the "MeasurementResult.ucNewDataAvailable" will be set
	UsedInTheMainLoop();	// save data if available and restart acquisition
 8003146:	f000 fcf9 	bl	8003b3c <UsedInTheMainLoop>
	if( (MeasurementResult.ucNewDataAvailable) )	// this is a new RAW data without filtering of any kind. if filtering needs to be applied this here must change the new result availability after filtering and not after raw measurement
 800314a:	4b11      	ldr	r3, [pc, #68]	; (8003190 <InteractionMainLoop+0x6c>)
 800314c:	781b      	ldrb	r3, [r3, #0]
	// ------------------- moving average filter -----------------------------
	// it will average the last n measurements and the result is saved back into the same variables:
	// --- MeasurementResult.ui32SignalFromSelfReflection[]
	// --- MeasurementResult.ui32SignalFromAnotherRobot[]
	// by commenting out this section the code will still be the same but without averaging filter
	if( (MeasurementResult.ucNewDataAvailable) )
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <InteractionMainLoop+0x6c>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <InteractionMainLoop+0x38>
	{
		MovingAverageFilterMain();
 8003158:	f000 fe22 	bl	8003da0 <MovingAverageFilterMain>
	#endif

	// ------------- do something with the measured data ---------------------
	// this can be implemented in another function
	// check if new results are available
	if( (MeasurementResult.ucNewDataAvailable) )	// here the data (if available) is already spike free
 800315c:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <InteractionMainLoop+0x6c>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <InteractionMainLoop+0x5a>
	{
		MeasurementResult.ucNewDataAvailable = 0;
 8003166:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <InteractionMainLoop+0x6c>)
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
		// - check if exist the base line calibration -
		// check if the base line is already measured or it needs to be measured
		// if needed measure the base line for both REFLECTION and FROM OTHER ROBOTS
		// uses the data structures:
		// - BaseLineData
		BaselineCalibrationMain();
 800316c:	f000 ffa4 	bl	80040b8 <BaselineCalibrationMain>
		// calculate final value with the subtracted base line
		// calculate the sensitivity coefficient for each channel and for both the SELF REFLECTION and the SIGNAL FROM OTHER ROBOT
		// uses the data structures:
		// - SensitivityData
		// - InteractionResultData
		if( (BaseLineData.ucBaseLineCalibrationDone) )
 8003170:	4b08      	ldr	r3, [pc, #32]	; (8003194 <InteractionMainLoop+0x70>)
 8003172:	78db      	ldrb	r3, [r3, #3]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <InteractionMainLoop+0x5a>
		{	// calculate new result only if there is a determined baseline
			InteractionResultCalculationMain();
 800317a:	f001 fad9 	bl	8004730 <InteractionResultCalculationMain>
	// -----------------------------------------------------------------------


	// ------------------ handle EEPROM activities ---------------------------
	// called from the main loop to handle EERPOM activities (mainly storing new-baseline values or new-sensitivity values)
	EEPROMMainLoop();
 800317e:	f001 fc71 	bl	8004a64 <EEPROMMainLoop>


	// -------------------- handle the ID Pattern ----------------------------
	// updates the ID buffer if the Address of the robot has changed
	// handles all it is needed @ ID decoding
	IDPatternMainLoop();
 8003182:	f001 ffa5 	bl	80050d0 <IDPatternMainLoop>





	return;
 8003186:	bf00      	nop
}
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	200009ae 	.word	0x200009ae
 8003190:	20000a64 	.word	0x20000a64
 8003194:	200016a8 	.word	0x200016a8

08003198 <InteractionTimer1KHZISR>:
//----------------------------------------------------------------------------------
void InteractionTimer1KHZISR(void)	// 1KHZ timer function called from System ISR from stm32f4xx_it.c file @ SysTick Function (!!! keep as short as possible !!!)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
	// base line calibration timer
	BaseLineTimer1KHZ();
 800319c:	f001 f8fc 	bl	8004398 <BaseLineTimer1KHZ>

	// ID timeout timer
	IDPatternTimer1KHZISR();
 80031a0:	f002 f832 	bl	8005208 <IDPatternTimer1KHZISR>


	return;
 80031a4:	bf00      	nop
}
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <InteractionTimer10KHZISR>:
//----------------------------------------------------------------------------------
void InteractionTimer10KHZISR(void)	// 10KHZ timer function called from Timer2 ISR from stm32f4xx_it.c file (!!! keep as short as possible !!!)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0

	UsedInThe10KHZISR();
 80031ac:	f000 f832 	bl	8003214 <UsedInThe10KHZISR>

	return;
 80031b0:	bf00      	nop
}
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <InteractionADC1DMACallback>:
//----------------------------------------------------------------------------------
void InteractionADC1DMACallback()	// used to be called from the stm32f4xx_it.c once the DMA1 reads all the ADC values related to the 6 photodetector sensors
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
	UsedInTheDMAISR();
 80031b8:	f000 f8e8 	bl	800338c <UsedInTheDMAISR>

	return;
 80031bc:	bf00      	nop
}
 80031be:	bd80      	pop	{r7, pc}

080031c0 <InteractionCH0Callback>:
//----------------------------------------------------------------------------------
void InteractionCH0Callback()	// used to be called from the stm32f4xx_it.c once the signal is strong enough to trigger an interrupt
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
	IDPatternChannelISR(0);
 80031c4:	2000      	movs	r0, #0
 80031c6:	f002 f88f 	bl	80052e8 <IDPatternChannelISR>
	return;
 80031ca:	bf00      	nop
}
 80031cc:	bd80      	pop	{r7, pc}

080031ce <InteractionCH1Callback>:
//----------------------------------------------------------------------------------
void InteractionCH1Callback()	// used to be called from the stm32f4xx_it.c once the signal is strong enough to trigger an interrupt
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	af00      	add	r7, sp, #0
	IDPatternChannelISR(1);
 80031d2:	2001      	movs	r0, #1
 80031d4:	f002 f888 	bl	80052e8 <IDPatternChannelISR>
	return;
 80031d8:	bf00      	nop
}
 80031da:	bd80      	pop	{r7, pc}

080031dc <InteractionCH2Callback>:
//----------------------------------------------------------------------------------
void InteractionCH2Callback()	// used to be called from the stm32f4xx_it.c once the signal is strong enough to trigger an interrupt
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
	IDPatternChannelISR(2);
 80031e0:	2002      	movs	r0, #2
 80031e2:	f002 f881 	bl	80052e8 <IDPatternChannelISR>
	return;
 80031e6:	bf00      	nop
}
 80031e8:	bd80      	pop	{r7, pc}

080031ea <InteractionCH3Callback>:
//----------------------------------------------------------------------------------
void InteractionCH3Callback()	// used to be called from the stm32f4xx_it.c once the signal is strong enough to trigger an interrupt
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	af00      	add	r7, sp, #0
	IDPatternChannelISR(3);
 80031ee:	2003      	movs	r0, #3
 80031f0:	f002 f87a 	bl	80052e8 <IDPatternChannelISR>
	return;
 80031f4:	bf00      	nop
}
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <InteractionCH4Callback>:
//----------------------------------------------------------------------------------
void InteractionCH4Callback()	// used to be called from the stm32f4xx_it.c once the signal is strong enough to trigger an interrupt
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
	IDPatternChannelISR(4);
 80031fc:	2004      	movs	r0, #4
 80031fe:	f002 f873 	bl	80052e8 <IDPatternChannelISR>
	return;
 8003202:	bf00      	nop
}
 8003204:	bd80      	pop	{r7, pc}

08003206 <InteractionCH5Callback>:
//----------------------------------------------------------------------------------
void InteractionCH5Callback()	// used to be called from the stm32f4xx_it.c once the signal is strong enough to trigger an interrupt
{
 8003206:	b580      	push	{r7, lr}
 8003208:	af00      	add	r7, sp, #0
	IDPatternChannelISR(5);
 800320a:	2005      	movs	r0, #5
 800320c:	f002 f86c 	bl	80052e8 <IDPatternChannelISR>
	return;
 8003210:	bf00      	nop
}
 8003212:	bd80      	pop	{r7, pc}

08003214 <UsedInThe10KHZISR>:

// STATIC (INTERN) implementation
//==================================================================================================================== STATIC_START
//----------------------------------------------------------------------------------
static void UsedInThe10KHZISR(void)			// called in the 10KHZ timer2 ISR
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
	// ------- ID sending over the Side IR LEDs ---------
	if( (IDPatternGenerationData.ucCurrentPattern) )
 8003218:	4b19      	ldr	r3, [pc, #100]	; (8003280 <UsedInThe10KHZISR+0x6c>)
 800321a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d009      	beq.n	8003238 <UsedInThe10KHZISR+0x24>
	{
		IDPatternGenerationData.ucCurrentPattern --;
 8003224:	4b16      	ldr	r3, [pc, #88]	; (8003280 <UsedInThe10KHZISR+0x6c>)
 8003226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322a:	b2db      	uxtb	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b2da      	uxtb	r2, r3
 8003230:	4b13      	ldr	r3, [pc, #76]	; (8003280 <UsedInThe10KHZISR+0x6c>)
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		return;
 8003236:	e022      	b.n	800327e <UsedInThe10KHZISR+0x6a>
	}
	IDPatternGenerationData.ucCurrentPattern = IDPatternGenerationData.ucPatternBuffer[IDPatternGenerationData.ucPatternIndex];
 8003238:	4b11      	ldr	r3, [pc, #68]	; (8003280 <UsedInThe10KHZISR+0x6c>)
 800323a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323e:	b2db      	uxtb	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <UsedInThe10KHZISR+0x6c>)
 8003244:	5c9b      	ldrb	r3, [r3, r2]
 8003246:	b2da      	uxtb	r2, r3
 8003248:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <UsedInThe10KHZISR+0x6c>)
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	IDPatternGenerationData.ucPatternIndex ++;
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <UsedInThe10KHZISR+0x6c>)
 8003250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003254:	b2db      	uxtb	r3, r3
 8003256:	3301      	adds	r3, #1
 8003258:	b2da      	uxtb	r2, r3
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <UsedInThe10KHZISR+0x6c>)
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	if( (IDPatternGenerationData.ucPatternIndex > INITIALIZATION_ID_PATTERN_MAX_INDEX) )	IDPatternGenerationData.ucPatternIndex = 0;
 8003260:	4b07      	ldr	r3, [pc, #28]	; (8003280 <UsedInThe10KHZISR+0x6c>)
 8003262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b1b      	cmp	r3, #27
 800326a:	d903      	bls.n	8003274 <UsedInThe10KHZISR+0x60>
 800326c:	4b04      	ldr	r3, [pc, #16]	; (8003280 <UsedInThe10KHZISR+0x6c>)
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	// --------------------------------------------------


	// generate new IR pattern regardless if the acquisition is running or has finished
	GenerateIRPattern();
 8003274:	f000 f806 	bl	8003284 <GenerateIRPattern>


	// acquire another set of data if required
	TriggerDataAcquisition();
 8003278:	f000 f86a 	bl	8003350 <TriggerDataAcquisition>

	return;
 800327c:	bf00      	nop
}
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20001814 	.word	0x20001814

08003284 <GenerateIRPattern>:
//----------------------------------------------------------------------------------
static void GenerateIRPattern(void)		// called in the 10KHZ timer2 ISR to generate new IR pattern
{	// generate new IR pattern on the side-IR LEDs
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0

	// change the pattern identifier to be ready for the TriggerDataAcquisition() function
	if( (MeasurementData.ucIRPatternNumber) )	MeasurementData.ucIRPatternNumber = 0;
 8003288:	4b2d      	ldr	r3, [pc, #180]	; (8003340 <GenerateIRPattern+0xbc>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <GenerateIRPattern+0x16>
 8003292:	4b2b      	ldr	r3, [pc, #172]	; (8003340 <GenerateIRPattern+0xbc>)
 8003294:	2200      	movs	r2, #0
 8003296:	701a      	strb	r2, [r3, #0]
 8003298:	e002      	b.n	80032a0 <GenerateIRPattern+0x1c>
	else 										MeasurementData.ucIRPatternNumber = 1;
 800329a:	4b29      	ldr	r3, [pc, #164]	; (8003340 <GenerateIRPattern+0xbc>)
 800329c:	2201      	movs	r2, #1
 800329e:	701a      	strb	r2, [r3, #0]

	// set the pattern according to the Pattern Number
	if( (MeasurementData.ucIRPatternNumber) )
 80032a0:	4b27      	ldr	r3, [pc, #156]	; (8003340 <GenerateIRPattern+0xbc>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d024      	beq.n	80032f4 <GenerateIRPattern+0x70>
	{	/* if(ucIRPatternNumber == 1)	=> the {1,3,5} IRChannles are ON and the {0,2,4} IRChannels are OFF */
		// set the LED=OFF  channels
		HAL_GPIO_WritePin(IR_EN_0_GPIO_Port, IR_EN_0_Pin, GPIO_PIN_RESET);
 80032aa:	2200      	movs	r2, #0
 80032ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032b0:	4824      	ldr	r0, [pc, #144]	; (8003344 <GenerateIRPattern+0xc0>)
 80032b2:	f008 fdab 	bl	800be0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_EN_2_GPIO_Port, IR_EN_2_Pin, GPIO_PIN_RESET);
 80032b6:	2200      	movs	r2, #0
 80032b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032bc:	4822      	ldr	r0, [pc, #136]	; (8003348 <GenerateIRPattern+0xc4>)
 80032be:	f008 fda5 	bl	800be0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_EN_4_GPIO_Port, IR_EN_4_Pin, GPIO_PIN_RESET);
 80032c2:	2200      	movs	r2, #0
 80032c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032c8:	4820      	ldr	r0, [pc, #128]	; (800334c <GenerateIRPattern+0xc8>)
 80032ca:	f008 fd9f 	bl	800be0c <HAL_GPIO_WritePin>
		// set the LED=ON channel
		HAL_GPIO_WritePin(IR_EN_1_GPIO_Port, IR_EN_1_Pin, GPIO_PIN_SET);
 80032ce:	2201      	movs	r2, #1
 80032d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032d4:	481c      	ldr	r0, [pc, #112]	; (8003348 <GenerateIRPattern+0xc4>)
 80032d6:	f008 fd99 	bl	800be0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_EN_3_GPIO_Port, IR_EN_3_Pin, GPIO_PIN_SET);
 80032da:	2201      	movs	r2, #1
 80032dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032e0:	4819      	ldr	r0, [pc, #100]	; (8003348 <GenerateIRPattern+0xc4>)
 80032e2:	f008 fd93 	bl	800be0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_EN_5_GPIO_Port, IR_EN_5_Pin, GPIO_PIN_SET);
 80032e6:	2201      	movs	r2, #1
 80032e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032ec:	4817      	ldr	r0, [pc, #92]	; (800334c <GenerateIRPattern+0xc8>)
 80032ee:	f008 fd8d 	bl	800be0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_EN_0_GPIO_Port, IR_EN_0_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(IR_EN_2_GPIO_Port, IR_EN_2_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(IR_EN_4_GPIO_Port, IR_EN_4_Pin, GPIO_PIN_SET);
	}

	return;
 80032f2:	e024      	b.n	800333e <GenerateIRPattern+0xba>
		HAL_GPIO_WritePin(IR_EN_1_GPIO_Port, IR_EN_1_Pin, GPIO_PIN_RESET);
 80032f4:	2200      	movs	r2, #0
 80032f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032fa:	4813      	ldr	r0, [pc, #76]	; (8003348 <GenerateIRPattern+0xc4>)
 80032fc:	f008 fd86 	bl	800be0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_EN_3_GPIO_Port, IR_EN_3_Pin, GPIO_PIN_RESET);
 8003300:	2200      	movs	r2, #0
 8003302:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003306:	4810      	ldr	r0, [pc, #64]	; (8003348 <GenerateIRPattern+0xc4>)
 8003308:	f008 fd80 	bl	800be0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_EN_5_GPIO_Port, IR_EN_5_Pin, GPIO_PIN_RESET);
 800330c:	2200      	movs	r2, #0
 800330e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003312:	480e      	ldr	r0, [pc, #56]	; (800334c <GenerateIRPattern+0xc8>)
 8003314:	f008 fd7a 	bl	800be0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_EN_0_GPIO_Port, IR_EN_0_Pin, GPIO_PIN_SET);
 8003318:	2201      	movs	r2, #1
 800331a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800331e:	4809      	ldr	r0, [pc, #36]	; (8003344 <GenerateIRPattern+0xc0>)
 8003320:	f008 fd74 	bl	800be0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_EN_2_GPIO_Port, IR_EN_2_Pin, GPIO_PIN_SET);
 8003324:	2201      	movs	r2, #1
 8003326:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800332a:	4807      	ldr	r0, [pc, #28]	; (8003348 <GenerateIRPattern+0xc4>)
 800332c:	f008 fd6e 	bl	800be0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_EN_4_GPIO_Port, IR_EN_4_Pin, GPIO_PIN_SET);
 8003330:	2201      	movs	r2, #1
 8003332:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003336:	4805      	ldr	r0, [pc, #20]	; (800334c <GenerateIRPattern+0xc8>)
 8003338:	f008 fd68 	bl	800be0c <HAL_GPIO_WritePin>
	return;
 800333c:	bf00      	nop
}
 800333e:	bd80      	pop	{r7, pc}
 8003340:	200009b0 	.word	0x200009b0
 8003344:	40020000 	.word	0x40020000
 8003348:	40020800 	.word	0x40020800
 800334c:	40020400 	.word	0x40020400

08003350 <TriggerDataAcquisition>:
//----------------------------------------------------------------------------------
static void TriggerDataAcquisition(void)	// called in the 10HZ timer2 ISR to trigger another data acquisition
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
	if( (MeasurementData.ucAcquisitionCounter == 0) )	return;		// acquisition round is over => no new measurement to be performed
 8003354:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <TriggerDataAcquisition+0x30>)
 8003356:	7b1b      	ldrb	r3, [r3, #12]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00c      	beq.n	8003378 <TriggerDataAcquisition+0x28>

	// perform another ADC->DMA measurement
	// store data into the m_ui32ADC[] buffer
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH
	if( HAL_ADC_Start_DMA(&hadc1,m_ui32ADC,6) != HAL_OK )
 800335e:	2206      	movs	r2, #6
 8003360:	4908      	ldr	r1, [pc, #32]	; (8003384 <TriggerDataAcquisition+0x34>)
 8003362:	4809      	ldr	r0, [pc, #36]	; (8003388 <TriggerDataAcquisition+0x38>)
 8003364:	f007 fab0 	bl	800a8c8 <HAL_ADC_Start_DMA>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d006      	beq.n	800337c <TriggerDataAcquisition+0x2c>
	{
		Error_Handler2(ERROR_CODE_INTERACTION_DEBUG_001);
 800336e:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8003372:	f006 facf 	bl	8009914 <Error_Handler2>
	}
	return;
 8003376:	e001      	b.n	800337c <TriggerDataAcquisition+0x2c>
	if( (MeasurementData.ucAcquisitionCounter == 0) )	return;		// acquisition round is over => no new measurement to be performed
 8003378:	bf00      	nop
 800337a:	e000      	b.n	800337e <TriggerDataAcquisition+0x2e>
	return;
 800337c:	bf00      	nop
}
 800337e:	bd80      	pop	{r7, pc}
 8003380:	200009b0 	.word	0x200009b0
 8003384:	200017fc 	.word	0x200017fc
 8003388:	200020fc 	.word	0x200020fc

0800338c <UsedInTheDMAISR>:
//----------------------------------------------------------------------------------
static void UsedInTheDMAISR(void)			// called from the ADC->DMA ISR to handle data collection after ADC is done
{	// ADC->DMA measurement is done => collect the data and decrement the acquisition counter
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0

	uint8_t ucIndex;
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH

	if( (MeasurementData.ucAcquisitionCounter % 2) )
 8003392:	4bab      	ldr	r3, [pc, #684]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 8003394:	7b1b      	ldrb	r3, [r3, #12]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 83a8 	beq.w	8003af4 <UsedInTheDMAISR+0x768>
	{	// just the auto-double triggering DMA bulshit !, without this the channels 3,4 and 5 are misbehaving ?????

		if( (MeasurementData.ucIRPatternNumber) )
 80033a4:	4ba6      	ldr	r3, [pc, #664]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 81d4 	beq.w	8003758 <UsedInTheDMAISR+0x3cc>
		{	/* if(ucIRPatternNumber == 1)	=> the {1,3,5} IRChannles are ON and the {0,2,4} IRChannels are OFF */

			// ---------- CH1 ------------- (ON)
			ucIndex = 1;
 80033b0:	2301      	movs	r3, #1
 80033b2:	71fb      	strb	r3, [r7, #7]
			MeasurementData.ucNumberOfLEDOnValues[ucIndex] ++;
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	4aa2      	ldr	r2, [pc, #648]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 80033b8:	441a      	add	r2, r3
 80033ba:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	3201      	adds	r2, #1
 80033c2:	b2d1      	uxtb	r1, r2
 80033c4:	4a9e      	ldr	r2, [pc, #632]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 80033c6:	4413      	add	r3, r2
 80033c8:	460a      	mov	r2, r1
 80033ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			MeasurementData.ui32AccuLEDOn[ucIndex] += m_ui32ADC[ucIndex];
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	4a9b      	ldr	r2, [pc, #620]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 80033d2:	3310      	adds	r3, #16
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	6859      	ldr	r1, [r3, #4]
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	4a99      	ldr	r2, [pc, #612]	; (8003644 <UsedInTheDMAISR+0x2b8>)
 80033de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80033e2:	79fb      	ldrb	r3, [r7, #7]
 80033e4:	440a      	add	r2, r1
 80033e6:	4996      	ldr	r1, [pc, #600]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 80033e8:	3310      	adds	r3, #16
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MaxLEDOn[ucIndex] < m_ui32ADC[ucIndex]) )		MeasurementData.ui32MaxLEDOn[ucIndex] = m_ui32ADC[ucIndex];
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	4a93      	ldr	r2, [pc, #588]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 80033f4:	3304      	adds	r3, #4
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	4991      	ldr	r1, [pc, #580]	; (8003644 <UsedInTheDMAISR+0x2b8>)
 8003400:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003404:	429a      	cmp	r2, r3
 8003406:	d209      	bcs.n	800341c <UsedInTheDMAISR+0x90>
 8003408:	79fa      	ldrb	r2, [r7, #7]
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	498d      	ldr	r1, [pc, #564]	; (8003644 <UsedInTheDMAISR+0x2b8>)
 800340e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003412:	498b      	ldr	r1, [pc, #556]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 8003414:	3304      	adds	r3, #4
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MinLEDOn[ucIndex] > m_ui32ADC[ucIndex]) )		MeasurementData.ui32MinLEDOn[ucIndex] = m_ui32ADC[ucIndex];
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	4a88      	ldr	r2, [pc, #544]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 8003420:	330a      	adds	r3, #10
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	4986      	ldr	r1, [pc, #536]	; (8003644 <UsedInTheDMAISR+0x2b8>)
 800342c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003430:	429a      	cmp	r2, r3
 8003432:	d909      	bls.n	8003448 <UsedInTheDMAISR+0xbc>
 8003434:	79fa      	ldrb	r2, [r7, #7]
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	4982      	ldr	r1, [pc, #520]	; (8003644 <UsedInTheDMAISR+0x2b8>)
 800343a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800343e:	4980      	ldr	r1, [pc, #512]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 8003440:	330a      	adds	r3, #10
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	605a      	str	r2, [r3, #4]
			// ----------------------------

			// ---------- CH3 ------------- (ON)
			ucIndex = 3;
 8003448:	2303      	movs	r3, #3
 800344a:	71fb      	strb	r3, [r7, #7]
			MeasurementData.ucNumberOfLEDOnValues[ucIndex] ++;
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	4a7c      	ldr	r2, [pc, #496]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 8003450:	441a      	add	r2, r3
 8003452:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	3201      	adds	r2, #1
 800345a:	b2d1      	uxtb	r1, r2
 800345c:	4a78      	ldr	r2, [pc, #480]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 800345e:	4413      	add	r3, r2
 8003460:	460a      	mov	r2, r1
 8003462:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			MeasurementData.ui32AccuLEDOn[ucIndex] += m_ui32ADC[ucIndex];
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	4a75      	ldr	r2, [pc, #468]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 800346a:	3310      	adds	r3, #16
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	6859      	ldr	r1, [r3, #4]
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	4a73      	ldr	r2, [pc, #460]	; (8003644 <UsedInTheDMAISR+0x2b8>)
 8003476:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	440a      	add	r2, r1
 800347e:	4970      	ldr	r1, [pc, #448]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 8003480:	3310      	adds	r3, #16
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MaxLEDOn[ucIndex] < m_ui32ADC[ucIndex]) )		MeasurementData.ui32MaxLEDOn[ucIndex] = m_ui32ADC[ucIndex];
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	4a6d      	ldr	r2, [pc, #436]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 800348c:	3304      	adds	r3, #4
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	496b      	ldr	r1, [pc, #428]	; (8003644 <UsedInTheDMAISR+0x2b8>)
 8003498:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800349c:	429a      	cmp	r2, r3
 800349e:	d209      	bcs.n	80034b4 <UsedInTheDMAISR+0x128>
 80034a0:	79fa      	ldrb	r2, [r7, #7]
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	4967      	ldr	r1, [pc, #412]	; (8003644 <UsedInTheDMAISR+0x2b8>)
 80034a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80034aa:	4965      	ldr	r1, [pc, #404]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 80034ac:	3304      	adds	r3, #4
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MinLEDOn[ucIndex] > m_ui32ADC[ucIndex]) )		MeasurementData.ui32MinLEDOn[ucIndex] = m_ui32ADC[ucIndex];
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	4a62      	ldr	r2, [pc, #392]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 80034b8:	330a      	adds	r3, #10
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	4960      	ldr	r1, [pc, #384]	; (8003644 <UsedInTheDMAISR+0x2b8>)
 80034c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d909      	bls.n	80034e0 <UsedInTheDMAISR+0x154>
 80034cc:	79fa      	ldrb	r2, [r7, #7]
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	495c      	ldr	r1, [pc, #368]	; (8003644 <UsedInTheDMAISR+0x2b8>)
 80034d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80034d6:	495a      	ldr	r1, [pc, #360]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 80034d8:	330a      	adds	r3, #10
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	605a      	str	r2, [r3, #4]
			// ----------------------------

			// ---------- CH5 ------------- (ON)
			ucIndex = 5;
 80034e0:	2305      	movs	r3, #5
 80034e2:	71fb      	strb	r3, [r7, #7]
			MeasurementData.ucNumberOfLEDOnValues[ucIndex] ++;
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	4a56      	ldr	r2, [pc, #344]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 80034e8:	441a      	add	r2, r3
 80034ea:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	3201      	adds	r2, #1
 80034f2:	b2d1      	uxtb	r1, r2
 80034f4:	4a52      	ldr	r2, [pc, #328]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 80034f6:	4413      	add	r3, r2
 80034f8:	460a      	mov	r2, r1
 80034fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			MeasurementData.ui32AccuLEDOn[ucIndex] += m_ui32ADC[ucIndex];
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	4a4f      	ldr	r2, [pc, #316]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 8003502:	3310      	adds	r3, #16
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	6859      	ldr	r1, [r3, #4]
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	4a4d      	ldr	r2, [pc, #308]	; (8003644 <UsedInTheDMAISR+0x2b8>)
 800350e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	440a      	add	r2, r1
 8003516:	494a      	ldr	r1, [pc, #296]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 8003518:	3310      	adds	r3, #16
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MaxLEDOn[ucIndex] < m_ui32ADC[ucIndex]) )		MeasurementData.ui32MaxLEDOn[ucIndex] = m_ui32ADC[ucIndex];
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	4a47      	ldr	r2, [pc, #284]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 8003524:	3304      	adds	r3, #4
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	4945      	ldr	r1, [pc, #276]	; (8003644 <UsedInTheDMAISR+0x2b8>)
 8003530:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003534:	429a      	cmp	r2, r3
 8003536:	d209      	bcs.n	800354c <UsedInTheDMAISR+0x1c0>
 8003538:	79fa      	ldrb	r2, [r7, #7]
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	4941      	ldr	r1, [pc, #260]	; (8003644 <UsedInTheDMAISR+0x2b8>)
 800353e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003542:	493f      	ldr	r1, [pc, #252]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 8003544:	3304      	adds	r3, #4
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MinLEDOn[ucIndex] > m_ui32ADC[ucIndex]) )		MeasurementData.ui32MinLEDOn[ucIndex] = m_ui32ADC[ucIndex];
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	4a3c      	ldr	r2, [pc, #240]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 8003550:	330a      	adds	r3, #10
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	493a      	ldr	r1, [pc, #232]	; (8003644 <UsedInTheDMAISR+0x2b8>)
 800355c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003560:	429a      	cmp	r2, r3
 8003562:	d909      	bls.n	8003578 <UsedInTheDMAISR+0x1ec>
 8003564:	79fa      	ldrb	r2, [r7, #7]
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	4936      	ldr	r1, [pc, #216]	; (8003644 <UsedInTheDMAISR+0x2b8>)
 800356a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800356e:	4934      	ldr	r1, [pc, #208]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 8003570:	330a      	adds	r3, #10
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	605a      	str	r2, [r3, #4]
			// ----------------------------



			// ---------- CH0 ------------- (OFF)
			ucIndex = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	71fb      	strb	r3, [r7, #7]
			MeasurementData.ucNumberOfLEDOffValues[ucIndex] ++;
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	4a30      	ldr	r2, [pc, #192]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 8003580:	441a      	add	r2, r3
 8003582:	f892 20ac 	ldrb.w	r2, [r2, #172]	; 0xac
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	3201      	adds	r2, #1
 800358a:	b2d1      	uxtb	r1, r2
 800358c:	4a2c      	ldr	r2, [pc, #176]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 800358e:	4413      	add	r3, r2
 8003590:	460a      	mov	r2, r1
 8003592:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
			MeasurementData.ui32AccuLEDOff[ucIndex] += m_ui32ADC[ucIndex];
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	4a29      	ldr	r2, [pc, #164]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 800359a:	3324      	adds	r3, #36	; 0x24
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	6859      	ldr	r1, [r3, #4]
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	4a27      	ldr	r2, [pc, #156]	; (8003644 <UsedInTheDMAISR+0x2b8>)
 80035a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	440a      	add	r2, r1
 80035ae:	4924      	ldr	r1, [pc, #144]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 80035b0:	3324      	adds	r3, #36	; 0x24
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MaxLEDOff[ucIndex] < m_ui32ADC[ucIndex]) )		MeasurementData.ui32MaxLEDOff[ucIndex] = m_ui32ADC[ucIndex];
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	4a21      	ldr	r2, [pc, #132]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 80035bc:	3318      	adds	r3, #24
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	491f      	ldr	r1, [pc, #124]	; (8003644 <UsedInTheDMAISR+0x2b8>)
 80035c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d209      	bcs.n	80035e4 <UsedInTheDMAISR+0x258>
 80035d0:	79fa      	ldrb	r2, [r7, #7]
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	491b      	ldr	r1, [pc, #108]	; (8003644 <UsedInTheDMAISR+0x2b8>)
 80035d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80035da:	4919      	ldr	r1, [pc, #100]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 80035dc:	3318      	adds	r3, #24
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MinLEDOff[ucIndex] > m_ui32ADC[ucIndex]) )		MeasurementData.ui32MinLEDOff[ucIndex] = m_ui32ADC[ucIndex];
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	4a16      	ldr	r2, [pc, #88]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 80035e8:	331e      	adds	r3, #30
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	4914      	ldr	r1, [pc, #80]	; (8003644 <UsedInTheDMAISR+0x2b8>)
 80035f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d909      	bls.n	8003610 <UsedInTheDMAISR+0x284>
 80035fc:	79fa      	ldrb	r2, [r7, #7]
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	4910      	ldr	r1, [pc, #64]	; (8003644 <UsedInTheDMAISR+0x2b8>)
 8003602:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003606:	490e      	ldr	r1, [pc, #56]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 8003608:	331e      	adds	r3, #30
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	605a      	str	r2, [r3, #4]
			// ----------------------------

			// ---------- CH2 ------------- (OFF)
			ucIndex = 2;
 8003610:	2302      	movs	r3, #2
 8003612:	71fb      	strb	r3, [r7, #7]
			MeasurementData.ucNumberOfLEDOffValues[ucIndex] ++;
 8003614:	79fb      	ldrb	r3, [r7, #7]
 8003616:	4a0a      	ldr	r2, [pc, #40]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 8003618:	441a      	add	r2, r3
 800361a:	f892 20ac 	ldrb.w	r2, [r2, #172]	; 0xac
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	3201      	adds	r2, #1
 8003622:	b2d1      	uxtb	r1, r2
 8003624:	4a06      	ldr	r2, [pc, #24]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 8003626:	4413      	add	r3, r2
 8003628:	460a      	mov	r2, r1
 800362a:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
			MeasurementData.ui32AccuLEDOff[ucIndex] += m_ui32ADC[ucIndex];
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	4a03      	ldr	r2, [pc, #12]	; (8003640 <UsedInTheDMAISR+0x2b4>)
 8003632:	3324      	adds	r3, #36	; 0x24
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	6859      	ldr	r1, [r3, #4]
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	e004      	b.n	8003648 <UsedInTheDMAISR+0x2bc>
 800363e:	bf00      	nop
 8003640:	200009b0 	.word	0x200009b0
 8003644:	200017fc 	.word	0x200017fc
 8003648:	4a41      	ldr	r2, [pc, #260]	; (8003750 <UsedInTheDMAISR+0x3c4>)
 800364a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	440a      	add	r2, r1
 8003652:	4940      	ldr	r1, [pc, #256]	; (8003754 <UsedInTheDMAISR+0x3c8>)
 8003654:	3324      	adds	r3, #36	; 0x24
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MaxLEDOff[ucIndex] < m_ui32ADC[ucIndex]) )		MeasurementData.ui32MaxLEDOff[ucIndex] = m_ui32ADC[ucIndex];
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	4a3d      	ldr	r2, [pc, #244]	; (8003754 <UsedInTheDMAISR+0x3c8>)
 8003660:	3318      	adds	r3, #24
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	79fb      	ldrb	r3, [r7, #7]
 800366a:	4939      	ldr	r1, [pc, #228]	; (8003750 <UsedInTheDMAISR+0x3c4>)
 800366c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003670:	429a      	cmp	r2, r3
 8003672:	d209      	bcs.n	8003688 <UsedInTheDMAISR+0x2fc>
 8003674:	79fa      	ldrb	r2, [r7, #7]
 8003676:	79fb      	ldrb	r3, [r7, #7]
 8003678:	4935      	ldr	r1, [pc, #212]	; (8003750 <UsedInTheDMAISR+0x3c4>)
 800367a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800367e:	4935      	ldr	r1, [pc, #212]	; (8003754 <UsedInTheDMAISR+0x3c8>)
 8003680:	3318      	adds	r3, #24
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MinLEDOff[ucIndex] > m_ui32ADC[ucIndex]) )		MeasurementData.ui32MinLEDOff[ucIndex] = m_ui32ADC[ucIndex];
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	4a32      	ldr	r2, [pc, #200]	; (8003754 <UsedInTheDMAISR+0x3c8>)
 800368c:	331e      	adds	r3, #30
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	492e      	ldr	r1, [pc, #184]	; (8003750 <UsedInTheDMAISR+0x3c4>)
 8003698:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800369c:	429a      	cmp	r2, r3
 800369e:	d909      	bls.n	80036b4 <UsedInTheDMAISR+0x328>
 80036a0:	79fa      	ldrb	r2, [r7, #7]
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	492a      	ldr	r1, [pc, #168]	; (8003750 <UsedInTheDMAISR+0x3c4>)
 80036a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80036aa:	492a      	ldr	r1, [pc, #168]	; (8003754 <UsedInTheDMAISR+0x3c8>)
 80036ac:	331e      	adds	r3, #30
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	605a      	str	r2, [r3, #4]
			// ----------------------------

			// ---------- CH4 ------------- (OFF)
			ucIndex = 4;
 80036b4:	2304      	movs	r3, #4
 80036b6:	71fb      	strb	r3, [r7, #7]
			MeasurementData.ucNumberOfLEDOffValues[ucIndex] ++;
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	4a26      	ldr	r2, [pc, #152]	; (8003754 <UsedInTheDMAISR+0x3c8>)
 80036bc:	441a      	add	r2, r3
 80036be:	f892 20ac 	ldrb.w	r2, [r2, #172]	; 0xac
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	3201      	adds	r2, #1
 80036c6:	b2d1      	uxtb	r1, r2
 80036c8:	4a22      	ldr	r2, [pc, #136]	; (8003754 <UsedInTheDMAISR+0x3c8>)
 80036ca:	4413      	add	r3, r2
 80036cc:	460a      	mov	r2, r1
 80036ce:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
			MeasurementData.ui32AccuLEDOff[ucIndex] += m_ui32ADC[ucIndex];
 80036d2:	79fb      	ldrb	r3, [r7, #7]
 80036d4:	4a1f      	ldr	r2, [pc, #124]	; (8003754 <UsedInTheDMAISR+0x3c8>)
 80036d6:	3324      	adds	r3, #36	; 0x24
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	6859      	ldr	r1, [r3, #4]
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	4a1b      	ldr	r2, [pc, #108]	; (8003750 <UsedInTheDMAISR+0x3c4>)
 80036e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	440a      	add	r2, r1
 80036ea:	491a      	ldr	r1, [pc, #104]	; (8003754 <UsedInTheDMAISR+0x3c8>)
 80036ec:	3324      	adds	r3, #36	; 0x24
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MaxLEDOff[ucIndex] < m_ui32ADC[ucIndex]) )		MeasurementData.ui32MaxLEDOff[ucIndex] = m_ui32ADC[ucIndex];
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	4a17      	ldr	r2, [pc, #92]	; (8003754 <UsedInTheDMAISR+0x3c8>)
 80036f8:	3318      	adds	r3, #24
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	4913      	ldr	r1, [pc, #76]	; (8003750 <UsedInTheDMAISR+0x3c4>)
 8003704:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003708:	429a      	cmp	r2, r3
 800370a:	d209      	bcs.n	8003720 <UsedInTheDMAISR+0x394>
 800370c:	79fa      	ldrb	r2, [r7, #7]
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	490f      	ldr	r1, [pc, #60]	; (8003750 <UsedInTheDMAISR+0x3c4>)
 8003712:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003716:	490f      	ldr	r1, [pc, #60]	; (8003754 <UsedInTheDMAISR+0x3c8>)
 8003718:	3318      	adds	r3, #24
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MinLEDOff[ucIndex] > m_ui32ADC[ucIndex]) )		MeasurementData.ui32MinLEDOff[ucIndex] = m_ui32ADC[ucIndex];
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	4a0c      	ldr	r2, [pc, #48]	; (8003754 <UsedInTheDMAISR+0x3c8>)
 8003724:	331e      	adds	r3, #30
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	4908      	ldr	r1, [pc, #32]	; (8003750 <UsedInTheDMAISR+0x3c4>)
 8003730:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003734:	429a      	cmp	r2, r3
 8003736:	f240 81dd 	bls.w	8003af4 <UsedInTheDMAISR+0x768>
 800373a:	79fa      	ldrb	r2, [r7, #7]
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	4904      	ldr	r1, [pc, #16]	; (8003750 <UsedInTheDMAISR+0x3c4>)
 8003740:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003744:	4903      	ldr	r1, [pc, #12]	; (8003754 <UsedInTheDMAISR+0x3c8>)
 8003746:	331e      	adds	r3, #30
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	e1d1      	b.n	8003af4 <UsedInTheDMAISR+0x768>
 8003750:	200017fc 	.word	0x200017fc
 8003754:	200009b0 	.word	0x200009b0
		}
		else
		{	/* if(ucIRPatternNumber == 0)	=> the {0,2,4} IRChannles are ON and the {1,3,5} IRChannels are OFF */

			// ---------- CH0 ------------- (ON)
			ucIndex = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	71fb      	strb	r3, [r7, #7]
			MeasurementData.ucNumberOfLEDOnValues[ucIndex] ++;
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	4aac      	ldr	r2, [pc, #688]	; (8003a10 <UsedInTheDMAISR+0x684>)
 8003760:	441a      	add	r2, r3
 8003762:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	3201      	adds	r2, #1
 800376a:	b2d1      	uxtb	r1, r2
 800376c:	4aa8      	ldr	r2, [pc, #672]	; (8003a10 <UsedInTheDMAISR+0x684>)
 800376e:	4413      	add	r3, r2
 8003770:	460a      	mov	r2, r1
 8003772:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			MeasurementData.ui32AccuLEDOn[ucIndex] += m_ui32ADC[ucIndex];
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	4aa5      	ldr	r2, [pc, #660]	; (8003a10 <UsedInTheDMAISR+0x684>)
 800377a:	3310      	adds	r3, #16
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	6859      	ldr	r1, [r3, #4]
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	4aa3      	ldr	r2, [pc, #652]	; (8003a14 <UsedInTheDMAISR+0x688>)
 8003786:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800378a:	79fb      	ldrb	r3, [r7, #7]
 800378c:	440a      	add	r2, r1
 800378e:	49a0      	ldr	r1, [pc, #640]	; (8003a10 <UsedInTheDMAISR+0x684>)
 8003790:	3310      	adds	r3, #16
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MaxLEDOn[ucIndex] < m_ui32ADC[ucIndex]) )		MeasurementData.ui32MaxLEDOn[ucIndex] = m_ui32ADC[ucIndex];
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	4a9d      	ldr	r2, [pc, #628]	; (8003a10 <UsedInTheDMAISR+0x684>)
 800379c:	3304      	adds	r3, #4
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	499b      	ldr	r1, [pc, #620]	; (8003a14 <UsedInTheDMAISR+0x688>)
 80037a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d209      	bcs.n	80037c4 <UsedInTheDMAISR+0x438>
 80037b0:	79fa      	ldrb	r2, [r7, #7]
 80037b2:	79fb      	ldrb	r3, [r7, #7]
 80037b4:	4997      	ldr	r1, [pc, #604]	; (8003a14 <UsedInTheDMAISR+0x688>)
 80037b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80037ba:	4995      	ldr	r1, [pc, #596]	; (8003a10 <UsedInTheDMAISR+0x684>)
 80037bc:	3304      	adds	r3, #4
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MinLEDOn[ucIndex] > m_ui32ADC[ucIndex]) )		MeasurementData.ui32MinLEDOn[ucIndex] = m_ui32ADC[ucIndex];
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	4a92      	ldr	r2, [pc, #584]	; (8003a10 <UsedInTheDMAISR+0x684>)
 80037c8:	330a      	adds	r3, #10
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	4990      	ldr	r1, [pc, #576]	; (8003a14 <UsedInTheDMAISR+0x688>)
 80037d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d909      	bls.n	80037f0 <UsedInTheDMAISR+0x464>
 80037dc:	79fa      	ldrb	r2, [r7, #7]
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	498c      	ldr	r1, [pc, #560]	; (8003a14 <UsedInTheDMAISR+0x688>)
 80037e2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80037e6:	498a      	ldr	r1, [pc, #552]	; (8003a10 <UsedInTheDMAISR+0x684>)
 80037e8:	330a      	adds	r3, #10
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	605a      	str	r2, [r3, #4]
			// ----------------------------

			// ---------- CH2 ------------- (ON)
			ucIndex = 2;
 80037f0:	2302      	movs	r3, #2
 80037f2:	71fb      	strb	r3, [r7, #7]
			MeasurementData.ucNumberOfLEDOnValues[ucIndex] ++;
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	4a86      	ldr	r2, [pc, #536]	; (8003a10 <UsedInTheDMAISR+0x684>)
 80037f8:	441a      	add	r2, r3
 80037fa:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	3201      	adds	r2, #1
 8003802:	b2d1      	uxtb	r1, r2
 8003804:	4a82      	ldr	r2, [pc, #520]	; (8003a10 <UsedInTheDMAISR+0x684>)
 8003806:	4413      	add	r3, r2
 8003808:	460a      	mov	r2, r1
 800380a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			MeasurementData.ui32AccuLEDOn[ucIndex] += m_ui32ADC[ucIndex];
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	4a7f      	ldr	r2, [pc, #508]	; (8003a10 <UsedInTheDMAISR+0x684>)
 8003812:	3310      	adds	r3, #16
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	6859      	ldr	r1, [r3, #4]
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	4a7d      	ldr	r2, [pc, #500]	; (8003a14 <UsedInTheDMAISR+0x688>)
 800381e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	440a      	add	r2, r1
 8003826:	497a      	ldr	r1, [pc, #488]	; (8003a10 <UsedInTheDMAISR+0x684>)
 8003828:	3310      	adds	r3, #16
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MaxLEDOn[ucIndex] < m_ui32ADC[ucIndex]) )		MeasurementData.ui32MaxLEDOn[ucIndex] = m_ui32ADC[ucIndex];
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	4a77      	ldr	r2, [pc, #476]	; (8003a10 <UsedInTheDMAISR+0x684>)
 8003834:	3304      	adds	r3, #4
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	4975      	ldr	r1, [pc, #468]	; (8003a14 <UsedInTheDMAISR+0x688>)
 8003840:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003844:	429a      	cmp	r2, r3
 8003846:	d209      	bcs.n	800385c <UsedInTheDMAISR+0x4d0>
 8003848:	79fa      	ldrb	r2, [r7, #7]
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	4971      	ldr	r1, [pc, #452]	; (8003a14 <UsedInTheDMAISR+0x688>)
 800384e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003852:	496f      	ldr	r1, [pc, #444]	; (8003a10 <UsedInTheDMAISR+0x684>)
 8003854:	3304      	adds	r3, #4
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MinLEDOn[ucIndex] > m_ui32ADC[ucIndex]) )		MeasurementData.ui32MinLEDOn[ucIndex] = m_ui32ADC[ucIndex];
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	4a6c      	ldr	r2, [pc, #432]	; (8003a10 <UsedInTheDMAISR+0x684>)
 8003860:	330a      	adds	r3, #10
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	496a      	ldr	r1, [pc, #424]	; (8003a14 <UsedInTheDMAISR+0x688>)
 800386c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003870:	429a      	cmp	r2, r3
 8003872:	d909      	bls.n	8003888 <UsedInTheDMAISR+0x4fc>
 8003874:	79fa      	ldrb	r2, [r7, #7]
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	4966      	ldr	r1, [pc, #408]	; (8003a14 <UsedInTheDMAISR+0x688>)
 800387a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800387e:	4964      	ldr	r1, [pc, #400]	; (8003a10 <UsedInTheDMAISR+0x684>)
 8003880:	330a      	adds	r3, #10
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	605a      	str	r2, [r3, #4]
			// ----------------------------

			// ---------- CH4 ------------- (ON)
			ucIndex = 4;
 8003888:	2304      	movs	r3, #4
 800388a:	71fb      	strb	r3, [r7, #7]
			MeasurementData.ucNumberOfLEDOnValues[ucIndex] ++;
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	4a60      	ldr	r2, [pc, #384]	; (8003a10 <UsedInTheDMAISR+0x684>)
 8003890:	441a      	add	r2, r3
 8003892:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	3201      	adds	r2, #1
 800389a:	b2d1      	uxtb	r1, r2
 800389c:	4a5c      	ldr	r2, [pc, #368]	; (8003a10 <UsedInTheDMAISR+0x684>)
 800389e:	4413      	add	r3, r2
 80038a0:	460a      	mov	r2, r1
 80038a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			MeasurementData.ui32AccuLEDOn[ucIndex] += m_ui32ADC[ucIndex];
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	4a59      	ldr	r2, [pc, #356]	; (8003a10 <UsedInTheDMAISR+0x684>)
 80038aa:	3310      	adds	r3, #16
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	6859      	ldr	r1, [r3, #4]
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	4a57      	ldr	r2, [pc, #348]	; (8003a14 <UsedInTheDMAISR+0x688>)
 80038b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	440a      	add	r2, r1
 80038be:	4954      	ldr	r1, [pc, #336]	; (8003a10 <UsedInTheDMAISR+0x684>)
 80038c0:	3310      	adds	r3, #16
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MaxLEDOn[ucIndex] < m_ui32ADC[ucIndex]) )		MeasurementData.ui32MaxLEDOn[ucIndex] = m_ui32ADC[ucIndex];
 80038c8:	79fb      	ldrb	r3, [r7, #7]
 80038ca:	4a51      	ldr	r2, [pc, #324]	; (8003a10 <UsedInTheDMAISR+0x684>)
 80038cc:	3304      	adds	r3, #4
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	494f      	ldr	r1, [pc, #316]	; (8003a14 <UsedInTheDMAISR+0x688>)
 80038d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d209      	bcs.n	80038f4 <UsedInTheDMAISR+0x568>
 80038e0:	79fa      	ldrb	r2, [r7, #7]
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	494b      	ldr	r1, [pc, #300]	; (8003a14 <UsedInTheDMAISR+0x688>)
 80038e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80038ea:	4949      	ldr	r1, [pc, #292]	; (8003a10 <UsedInTheDMAISR+0x684>)
 80038ec:	3304      	adds	r3, #4
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MinLEDOn[ucIndex] > m_ui32ADC[ucIndex]) )		MeasurementData.ui32MinLEDOn[ucIndex] = m_ui32ADC[ucIndex];
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	4a46      	ldr	r2, [pc, #280]	; (8003a10 <UsedInTheDMAISR+0x684>)
 80038f8:	330a      	adds	r3, #10
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	4944      	ldr	r1, [pc, #272]	; (8003a14 <UsedInTheDMAISR+0x688>)
 8003904:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003908:	429a      	cmp	r2, r3
 800390a:	d909      	bls.n	8003920 <UsedInTheDMAISR+0x594>
 800390c:	79fa      	ldrb	r2, [r7, #7]
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	4940      	ldr	r1, [pc, #256]	; (8003a14 <UsedInTheDMAISR+0x688>)
 8003912:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003916:	493e      	ldr	r1, [pc, #248]	; (8003a10 <UsedInTheDMAISR+0x684>)
 8003918:	330a      	adds	r3, #10
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	605a      	str	r2, [r3, #4]
			// ----------------------------



			// ---------- CH1 ------------- (OFF)
			ucIndex = 1;
 8003920:	2301      	movs	r3, #1
 8003922:	71fb      	strb	r3, [r7, #7]
			MeasurementData.ucNumberOfLEDOffValues[ucIndex] ++;
 8003924:	79fb      	ldrb	r3, [r7, #7]
 8003926:	4a3a      	ldr	r2, [pc, #232]	; (8003a10 <UsedInTheDMAISR+0x684>)
 8003928:	441a      	add	r2, r3
 800392a:	f892 20ac 	ldrb.w	r2, [r2, #172]	; 0xac
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	3201      	adds	r2, #1
 8003932:	b2d1      	uxtb	r1, r2
 8003934:	4a36      	ldr	r2, [pc, #216]	; (8003a10 <UsedInTheDMAISR+0x684>)
 8003936:	4413      	add	r3, r2
 8003938:	460a      	mov	r2, r1
 800393a:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
			MeasurementData.ui32AccuLEDOff[ucIndex] += m_ui32ADC[ucIndex];
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	4a33      	ldr	r2, [pc, #204]	; (8003a10 <UsedInTheDMAISR+0x684>)
 8003942:	3324      	adds	r3, #36	; 0x24
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	6859      	ldr	r1, [r3, #4]
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	4a31      	ldr	r2, [pc, #196]	; (8003a14 <UsedInTheDMAISR+0x688>)
 800394e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	440a      	add	r2, r1
 8003956:	492e      	ldr	r1, [pc, #184]	; (8003a10 <UsedInTheDMAISR+0x684>)
 8003958:	3324      	adds	r3, #36	; 0x24
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MaxLEDOff[ucIndex] < m_ui32ADC[ucIndex]) )		MeasurementData.ui32MaxLEDOff[ucIndex] = m_ui32ADC[ucIndex];
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	4a2b      	ldr	r2, [pc, #172]	; (8003a10 <UsedInTheDMAISR+0x684>)
 8003964:	3318      	adds	r3, #24
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	4929      	ldr	r1, [pc, #164]	; (8003a14 <UsedInTheDMAISR+0x688>)
 8003970:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003974:	429a      	cmp	r2, r3
 8003976:	d209      	bcs.n	800398c <UsedInTheDMAISR+0x600>
 8003978:	79fa      	ldrb	r2, [r7, #7]
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	4925      	ldr	r1, [pc, #148]	; (8003a14 <UsedInTheDMAISR+0x688>)
 800397e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003982:	4923      	ldr	r1, [pc, #140]	; (8003a10 <UsedInTheDMAISR+0x684>)
 8003984:	3318      	adds	r3, #24
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MinLEDOff[ucIndex] > m_ui32ADC[ucIndex]) )		MeasurementData.ui32MinLEDOff[ucIndex] = m_ui32ADC[ucIndex];
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	4a20      	ldr	r2, [pc, #128]	; (8003a10 <UsedInTheDMAISR+0x684>)
 8003990:	331e      	adds	r3, #30
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	491e      	ldr	r1, [pc, #120]	; (8003a14 <UsedInTheDMAISR+0x688>)
 800399c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d909      	bls.n	80039b8 <UsedInTheDMAISR+0x62c>
 80039a4:	79fa      	ldrb	r2, [r7, #7]
 80039a6:	79fb      	ldrb	r3, [r7, #7]
 80039a8:	491a      	ldr	r1, [pc, #104]	; (8003a14 <UsedInTheDMAISR+0x688>)
 80039aa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80039ae:	4918      	ldr	r1, [pc, #96]	; (8003a10 <UsedInTheDMAISR+0x684>)
 80039b0:	331e      	adds	r3, #30
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	605a      	str	r2, [r3, #4]
			// ----------------------------

			// ---------- CH3 ------------- (OFF)
			ucIndex = 3;
 80039b8:	2303      	movs	r3, #3
 80039ba:	71fb      	strb	r3, [r7, #7]
			MeasurementData.ucNumberOfLEDOffValues[ucIndex] ++;
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	4a14      	ldr	r2, [pc, #80]	; (8003a10 <UsedInTheDMAISR+0x684>)
 80039c0:	441a      	add	r2, r3
 80039c2:	f892 20ac 	ldrb.w	r2, [r2, #172]	; 0xac
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	3201      	adds	r2, #1
 80039ca:	b2d1      	uxtb	r1, r2
 80039cc:	4a10      	ldr	r2, [pc, #64]	; (8003a10 <UsedInTheDMAISR+0x684>)
 80039ce:	4413      	add	r3, r2
 80039d0:	460a      	mov	r2, r1
 80039d2:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
			MeasurementData.ui32AccuLEDOff[ucIndex] += m_ui32ADC[ucIndex];
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	4a0d      	ldr	r2, [pc, #52]	; (8003a10 <UsedInTheDMAISR+0x684>)
 80039da:	3324      	adds	r3, #36	; 0x24
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	6859      	ldr	r1, [r3, #4]
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	4a0b      	ldr	r2, [pc, #44]	; (8003a14 <UsedInTheDMAISR+0x688>)
 80039e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	440a      	add	r2, r1
 80039ee:	4908      	ldr	r1, [pc, #32]	; (8003a10 <UsedInTheDMAISR+0x684>)
 80039f0:	3324      	adds	r3, #36	; 0x24
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MaxLEDOff[ucIndex] < m_ui32ADC[ucIndex]) )		MeasurementData.ui32MaxLEDOff[ucIndex] = m_ui32ADC[ucIndex];
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	4a05      	ldr	r2, [pc, #20]	; (8003a10 <UsedInTheDMAISR+0x684>)
 80039fc:	3318      	adds	r3, #24
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	4903      	ldr	r1, [pc, #12]	; (8003a14 <UsedInTheDMAISR+0x688>)
 8003a08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a0c:	e004      	b.n	8003a18 <UsedInTheDMAISR+0x68c>
 8003a0e:	bf00      	nop
 8003a10:	200009b0 	.word	0x200009b0
 8003a14:	200017fc 	.word	0x200017fc
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d209      	bcs.n	8003a30 <UsedInTheDMAISR+0x6a4>
 8003a1c:	79fa      	ldrb	r2, [r7, #7]
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	4943      	ldr	r1, [pc, #268]	; (8003b30 <UsedInTheDMAISR+0x7a4>)
 8003a22:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003a26:	4943      	ldr	r1, [pc, #268]	; (8003b34 <UsedInTheDMAISR+0x7a8>)
 8003a28:	3318      	adds	r3, #24
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MinLEDOff[ucIndex] > m_ui32ADC[ucIndex]) )		MeasurementData.ui32MinLEDOff[ucIndex] = m_ui32ADC[ucIndex];
 8003a30:	79fb      	ldrb	r3, [r7, #7]
 8003a32:	4a40      	ldr	r2, [pc, #256]	; (8003b34 <UsedInTheDMAISR+0x7a8>)
 8003a34:	331e      	adds	r3, #30
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	493c      	ldr	r1, [pc, #240]	; (8003b30 <UsedInTheDMAISR+0x7a4>)
 8003a40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d909      	bls.n	8003a5c <UsedInTheDMAISR+0x6d0>
 8003a48:	79fa      	ldrb	r2, [r7, #7]
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	4938      	ldr	r1, [pc, #224]	; (8003b30 <UsedInTheDMAISR+0x7a4>)
 8003a4e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003a52:	4938      	ldr	r1, [pc, #224]	; (8003b34 <UsedInTheDMAISR+0x7a8>)
 8003a54:	331e      	adds	r3, #30
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	605a      	str	r2, [r3, #4]
			// ----------------------------

			// ---------- CH5 ------------- (OFF)
			ucIndex = 5;
 8003a5c:	2305      	movs	r3, #5
 8003a5e:	71fb      	strb	r3, [r7, #7]
			MeasurementData.ucNumberOfLEDOffValues[ucIndex] ++;
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	4a34      	ldr	r2, [pc, #208]	; (8003b34 <UsedInTheDMAISR+0x7a8>)
 8003a64:	441a      	add	r2, r3
 8003a66:	f892 20ac 	ldrb.w	r2, [r2, #172]	; 0xac
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	3201      	adds	r2, #1
 8003a6e:	b2d1      	uxtb	r1, r2
 8003a70:	4a30      	ldr	r2, [pc, #192]	; (8003b34 <UsedInTheDMAISR+0x7a8>)
 8003a72:	4413      	add	r3, r2
 8003a74:	460a      	mov	r2, r1
 8003a76:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
			MeasurementData.ui32AccuLEDOff[ucIndex] += m_ui32ADC[ucIndex];
 8003a7a:	79fb      	ldrb	r3, [r7, #7]
 8003a7c:	4a2d      	ldr	r2, [pc, #180]	; (8003b34 <UsedInTheDMAISR+0x7a8>)
 8003a7e:	3324      	adds	r3, #36	; 0x24
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	6859      	ldr	r1, [r3, #4]
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	4a29      	ldr	r2, [pc, #164]	; (8003b30 <UsedInTheDMAISR+0x7a4>)
 8003a8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a8e:	79fb      	ldrb	r3, [r7, #7]
 8003a90:	440a      	add	r2, r1
 8003a92:	4928      	ldr	r1, [pc, #160]	; (8003b34 <UsedInTheDMAISR+0x7a8>)
 8003a94:	3324      	adds	r3, #36	; 0x24
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MaxLEDOff[ucIndex] < m_ui32ADC[ucIndex]) )		MeasurementData.ui32MaxLEDOff[ucIndex] = m_ui32ADC[ucIndex];
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	4a25      	ldr	r2, [pc, #148]	; (8003b34 <UsedInTheDMAISR+0x7a8>)
 8003aa0:	3318      	adds	r3, #24
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	4921      	ldr	r1, [pc, #132]	; (8003b30 <UsedInTheDMAISR+0x7a4>)
 8003aac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d209      	bcs.n	8003ac8 <UsedInTheDMAISR+0x73c>
 8003ab4:	79fa      	ldrb	r2, [r7, #7]
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	491d      	ldr	r1, [pc, #116]	; (8003b30 <UsedInTheDMAISR+0x7a4>)
 8003aba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003abe:	491d      	ldr	r1, [pc, #116]	; (8003b34 <UsedInTheDMAISR+0x7a8>)
 8003ac0:	3318      	adds	r3, #24
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	605a      	str	r2, [r3, #4]
			if( (MeasurementData.ui32MinLEDOff[ucIndex] > m_ui32ADC[ucIndex]) )		MeasurementData.ui32MinLEDOff[ucIndex] = m_ui32ADC[ucIndex];
 8003ac8:	79fb      	ldrb	r3, [r7, #7]
 8003aca:	4a1a      	ldr	r2, [pc, #104]	; (8003b34 <UsedInTheDMAISR+0x7a8>)
 8003acc:	331e      	adds	r3, #30
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	4916      	ldr	r1, [pc, #88]	; (8003b30 <UsedInTheDMAISR+0x7a4>)
 8003ad8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d909      	bls.n	8003af4 <UsedInTheDMAISR+0x768>
 8003ae0:	79fa      	ldrb	r2, [r7, #7]
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	4912      	ldr	r1, [pc, #72]	; (8003b30 <UsedInTheDMAISR+0x7a4>)
 8003ae6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003aea:	4912      	ldr	r1, [pc, #72]	; (8003b34 <UsedInTheDMAISR+0x7a8>)
 8003aec:	331e      	adds	r3, #30
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	605a      	str	r2, [r3, #4]
			// ----------------------------
		}
	}

	// get the end moment
	if( (MeasurementData.ucAcquisitionCounter == 1) )
 8003af4:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <UsedInTheDMAISR+0x7a8>)
 8003af6:	7b1b      	ldrb	r3, [r3, #12]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d104      	bne.n	8003b08 <UsedInTheDMAISR+0x77c>
	{
		MeasurementData.ui32AcquisitionEndMomentUS = __HAL_TIM_GET_COUNTER(&htim5);
 8003afe:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <UsedInTheDMAISR+0x7ac>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	4a0b      	ldr	r2, [pc, #44]	; (8003b34 <UsedInTheDMAISR+0x7a8>)
 8003b06:	6093      	str	r3, [r2, #8]
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//  debug on PC13 LOW
	}
	// decrement acquisition counter
	if( (MeasurementData.ucAcquisitionCounter > 0) )	MeasurementData.ucAcquisitionCounter --;
 8003b08:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <UsedInTheDMAISR+0x7a8>)
 8003b0a:	7b1b      	ldrb	r3, [r3, #12]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d007      	beq.n	8003b22 <UsedInTheDMAISR+0x796>
 8003b12:	4b08      	ldr	r3, [pc, #32]	; (8003b34 <UsedInTheDMAISR+0x7a8>)
 8003b14:	7b1b      	ldrb	r3, [r3, #12]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <UsedInTheDMAISR+0x7a8>)
 8003b1e:	731a      	strb	r2, [r3, #12]
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//  debug on PC13 LOW

	return;
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
}
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	200017fc 	.word	0x200017fc
 8003b34:	200009b0 	.word	0x200009b0
 8003b38:	20002414 	.word	0x20002414

08003b3c <UsedInTheMainLoop>:
//----------------------------------------------------------------------------------
static void UsedInTheMainLoop(void)			// called from the main loop to handle the collected data
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
	uint8_t		i;
	int32_t		i32Temp;
	double 		dTempON, dTempOFF;

	// check if the current measurement is done
	if( (MeasurementData.ucAcquisitionCounter == 0) )
 8003b42:	4b8d      	ldr	r3, [pc, #564]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003b44:	7b1b      	ldrb	r3, [r3, #12]
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f040 8111 	bne.w	8003d70 <UsedInTheMainLoop+0x234>
	{	// last acquisition done

		// only update the Result if the old result was read out
		if( (MeasurementResult.ucNewDataAvailable == 0) )
 8003b4e:	4b8b      	ldr	r3, [pc, #556]	; (8003d7c <UsedInTheMainLoop+0x240>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f040 80b5 	bne.w	8003cc4 <UsedInTheMainLoop+0x188>
		{
			// calculate and save the measurement duration result
			if( (MeasurementData.ui32AcquisitionStartMomentUS > MeasurementData.ui32AcquisitionEndMomentUS) )	MeasurementResult.ui32AcquisitionDurationUS = ( (0xFFFFFFFF - MeasurementData.ui32AcquisitionStartMomentUS) + MeasurementData.ui32AcquisitionEndMomentUS );
 8003b5a:	4b87      	ldr	r3, [pc, #540]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	4b86      	ldr	r3, [pc, #536]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d908      	bls.n	8003b78 <UsedInTheMainLoop+0x3c>
 8003b66:	4b84      	ldr	r3, [pc, #528]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	4b83      	ldr	r3, [pc, #524]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	4a82      	ldr	r2, [pc, #520]	; (8003d7c <UsedInTheMainLoop+0x240>)
 8003b74:	6093      	str	r3, [r2, #8]
 8003b76:	e006      	b.n	8003b86 <UsedInTheMainLoop+0x4a>
			else   																								MeasurementResult.ui32AcquisitionDurationUS = ( MeasurementData.ui32AcquisitionEndMomentUS - MeasurementData.ui32AcquisitionStartMomentUS );
 8003b78:	4b7f      	ldr	r3, [pc, #508]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	4b7e      	ldr	r3, [pc, #504]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	4a7e      	ldr	r2, [pc, #504]	; (8003d7c <UsedInTheMainLoop+0x240>)
 8003b84:	6093      	str	r3, [r2, #8]

			// store the acquisition number
			MeasurementResult.ui32AcquisitionRoundCounter = MeasurementData.ui32AcquisitionRoundCounter;
 8003b86:	4b7c      	ldr	r3, [pc, #496]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	4a7c      	ldr	r2, [pc, #496]	; (8003d7c <UsedInTheMainLoop+0x240>)
 8003b8c:	6053      	str	r3, [r2, #4]

			// prepare the results
			for(i=0; i<6; i++)
 8003b8e:	2300      	movs	r3, #0
 8003b90:	77fb      	strb	r3, [r7, #31]
 8003b92:	e090      	b.n	8003cb6 <UsedInTheMainLoop+0x17a>
			{
				// calculate signal from self reflection
				dTempON   = (double) MeasurementData.ui32AccuLEDOn[i];
 8003b94:	7ffb      	ldrb	r3, [r7, #31]
 8003b96:	4a78      	ldr	r2, [pc, #480]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003b98:	3310      	adds	r3, #16
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fc fccf 	bl	8000544 <__aeabi_ui2d>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	e9c7 2304 	strd	r2, r3, [r7, #16]
				dTempON  /= (double) MeasurementData.ucNumberOfLEDOnValues[i];
 8003bae:	7ffb      	ldrb	r3, [r7, #31]
 8003bb0:	4a71      	ldr	r2, [pc, #452]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fc fcc2 	bl	8000544 <__aeabi_ui2d>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003bc8:	f7fc fe60 	bl	800088c <__aeabi_ddiv>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
				dTempOFF  = (double) MeasurementData.ui32AccuLEDOff[i];
 8003bd4:	7ffb      	ldrb	r3, [r7, #31]
 8003bd6:	4a68      	ldr	r2, [pc, #416]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003bd8:	3324      	adds	r3, #36	; 0x24
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fc fcaf 	bl	8000544 <__aeabi_ui2d>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	e9c7 2302 	strd	r2, r3, [r7, #8]
				dTempOFF /= (double) MeasurementData.ucNumberOfLEDOffValues[i];
 8003bee:	7ffb      	ldrb	r3, [r7, #31]
 8003bf0:	4a61      	ldr	r2, [pc, #388]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fc fca2 	bl	8000544 <__aeabi_ui2d>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c08:	f7fc fe40 	bl	800088c <__aeabi_ddiv>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	e9c7 2302 	strd	r2, r3, [r7, #8]
				i32Temp   = (int32_t)(dTempON - dTempOFF);
 8003c14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c1c:	f7fc fb54 	bl	80002c8 <__aeabi_dsub>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4610      	mov	r0, r2
 8003c26:	4619      	mov	r1, r3
 8003c28:	f7fc ffb6 	bl	8000b98 <__aeabi_d2iz>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	607b      	str	r3, [r7, #4]
				if( (i32Temp > 0) )		MeasurementResult.ui32SignalFromSelfReflection[i] = (uint32_t)i32Temp;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	dd07      	ble.n	8003c46 <UsedInTheMainLoop+0x10a>
 8003c36:	7ffb      	ldrb	r3, [r7, #31]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	4950      	ldr	r1, [pc, #320]	; (8003d7c <UsedInTheMainLoop+0x240>)
 8003c3c:	3302      	adds	r3, #2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	605a      	str	r2, [r3, #4]
 8003c44:	e006      	b.n	8003c54 <UsedInTheMainLoop+0x118>
				else 					MeasurementResult.ui32SignalFromSelfReflection[i] = 0;
 8003c46:	7ffb      	ldrb	r3, [r7, #31]
 8003c48:	4a4c      	ldr	r2, [pc, #304]	; (8003d7c <UsedInTheMainLoop+0x240>)
 8003c4a:	3302      	adds	r3, #2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	2200      	movs	r2, #0
 8003c52:	605a      	str	r2, [r3, #4]


				// calculate signal from another robot
				i32Temp = (int32_t) ( (MeasurementData.ui32MaxLEDOn[i] - MeasurementData.ui32MinLEDOn[i]) + (MeasurementData.ui32MaxLEDOff[i] - MeasurementData.ui32MinLEDOff[i]) );
 8003c54:	7ffb      	ldrb	r3, [r7, #31]
 8003c56:	4a48      	ldr	r2, [pc, #288]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003c58:	3304      	adds	r3, #4
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	7ffb      	ldrb	r3, [r7, #31]
 8003c62:	4945      	ldr	r1, [pc, #276]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003c64:	330a      	adds	r3, #10
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	1ad2      	subs	r2, r2, r3
 8003c6e:	7ffb      	ldrb	r3, [r7, #31]
 8003c70:	4941      	ldr	r1, [pc, #260]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003c72:	3318      	adds	r3, #24
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	6859      	ldr	r1, [r3, #4]
 8003c7a:	7ffb      	ldrb	r3, [r7, #31]
 8003c7c:	483e      	ldr	r0, [pc, #248]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003c7e:	331e      	adds	r3, #30
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4403      	add	r3, r0
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	1acb      	subs	r3, r1, r3
 8003c88:	4413      	add	r3, r2
 8003c8a:	607b      	str	r3, [r7, #4]
				if( (i32Temp > 0) )		MeasurementResult.ui32SignalFromAnotherRobot[i] = (uint32_t)i32Temp;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	dd07      	ble.n	8003ca2 <UsedInTheMainLoop+0x166>
 8003c92:	7ffb      	ldrb	r3, [r7, #31]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	4939      	ldr	r1, [pc, #228]	; (8003d7c <UsedInTheMainLoop+0x240>)
 8003c98:	3308      	adds	r3, #8
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	605a      	str	r2, [r3, #4]
 8003ca0:	e006      	b.n	8003cb0 <UsedInTheMainLoop+0x174>
				else  					MeasurementResult.ui32SignalFromAnotherRobot[i] = 0;
 8003ca2:	7ffb      	ldrb	r3, [r7, #31]
 8003ca4:	4a35      	ldr	r2, [pc, #212]	; (8003d7c <UsedInTheMainLoop+0x240>)
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	2200      	movs	r2, #0
 8003cae:	605a      	str	r2, [r3, #4]
			for(i=0; i<6; i++)
 8003cb0:	7ffb      	ldrb	r3, [r7, #31]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	77fb      	strb	r3, [r7, #31]
 8003cb6:	7ffb      	ldrb	r3, [r7, #31]
 8003cb8:	2b05      	cmp	r3, #5
 8003cba:	f67f af6b 	bls.w	8003b94 <UsedInTheMainLoop+0x58>

			}

			// indicate that new result is available. this field must be cleared to 0 in order to update this structure again after another acquisition round
			MeasurementResult.ucNewDataAvailable = 1;
 8003cbe:	4b2f      	ldr	r3, [pc, #188]	; (8003d7c <UsedInTheMainLoop+0x240>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	701a      	strb	r2, [r3, #0]

		}


		// clear the Measurement data structure
		for(i=0; i<6; i++)
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	77fb      	strb	r3, [r7, #31]
 8003cc8:	e03a      	b.n	8003d40 <UsedInTheMainLoop+0x204>
		{
			// ON values
			MeasurementData.ucNumberOfLEDOnValues[i] = 0;
 8003cca:	7ffb      	ldrb	r3, [r7, #31]
 8003ccc:	4a2a      	ldr	r2, [pc, #168]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003cce:	4413      	add	r3, r2
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			MeasurementData.ui32AccuLEDOn[i] = 0;
 8003cd6:	7ffb      	ldrb	r3, [r7, #31]
 8003cd8:	4a27      	ldr	r2, [pc, #156]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003cda:	3310      	adds	r3, #16
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	605a      	str	r2, [r3, #4]
			MeasurementData.ui32MaxLEDOn[i] = 0;
 8003ce4:	7ffb      	ldrb	r3, [r7, #31]
 8003ce6:	4a24      	ldr	r2, [pc, #144]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003ce8:	3304      	adds	r3, #4
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	2200      	movs	r2, #0
 8003cf0:	605a      	str	r2, [r3, #4]
			MeasurementData.ui32MinLEDOn[i] = 4095;
 8003cf2:	7ffb      	ldrb	r3, [r7, #31]
 8003cf4:	4a20      	ldr	r2, [pc, #128]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003cf6:	330a      	adds	r3, #10
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003d00:	605a      	str	r2, [r3, #4]

			// OFF values
			MeasurementData.ucNumberOfLEDOffValues[i] = 0;
 8003d02:	7ffb      	ldrb	r3, [r7, #31]
 8003d04:	4a1c      	ldr	r2, [pc, #112]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003d06:	4413      	add	r3, r2
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
			MeasurementData.ui32AccuLEDOff[i] = 0;
 8003d0e:	7ffb      	ldrb	r3, [r7, #31]
 8003d10:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003d12:	3324      	adds	r3, #36	; 0x24
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	2200      	movs	r2, #0
 8003d1a:	605a      	str	r2, [r3, #4]
			MeasurementData.ui32MaxLEDOff[i] = 0;
 8003d1c:	7ffb      	ldrb	r3, [r7, #31]
 8003d1e:	4a16      	ldr	r2, [pc, #88]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003d20:	3318      	adds	r3, #24
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	2200      	movs	r2, #0
 8003d28:	605a      	str	r2, [r3, #4]
			MeasurementData.ui32MinLEDOff[i] = 4095;
 8003d2a:	7ffb      	ldrb	r3, [r7, #31]
 8003d2c:	4a12      	ldr	r2, [pc, #72]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003d2e:	331e      	adds	r3, #30
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003d38:	605a      	str	r2, [r3, #4]
		for(i=0; i<6; i++)
 8003d3a:	7ffb      	ldrb	r3, [r7, #31]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	7ffb      	ldrb	r3, [r7, #31]
 8003d42:	2b05      	cmp	r3, #5
 8003d44:	d9c1      	bls.n	8003cca <UsedInTheMainLoop+0x18e>
		}

		// restart another measurement sequence
		if( (MeasurementData.ui32AcquisitionRoundCounter < 0xFFFFFFFF) )	MeasurementData.ui32AcquisitionRoundCounter ++;
 8003d46:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d4e:	d004      	beq.n	8003d5a <UsedInTheMainLoop+0x21e>
 8003d50:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	3301      	adds	r3, #1
 8003d56:	4a08      	ldr	r2, [pc, #32]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003d58:	6113      	str	r3, [r2, #16]
		MeasurementData.ui32AcquisitionStartMomentUS = __HAL_TIM_GET_COUNTER(&htim5);
 8003d5a:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <UsedInTheMainLoop+0x244>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	4a05      	ldr	r2, [pc, #20]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003d62:	6053      	str	r3, [r2, #4]
		MeasurementData.ucAcquisitionCounter = MeasurementData.ucAcquisitionCounterMax;
 8003d64:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003d66:	7b5b      	ldrb	r3, [r3, #13]
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <UsedInTheMainLoop+0x23c>)
 8003d6c:	731a      	strb	r2, [r3, #12]
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH
		return;
 8003d6e:	e000      	b.n	8003d72 <UsedInTheMainLoop+0x236>
	}
	// -----------------------------------------------------------------------


	return;
 8003d70:	bf00      	nop
}
 8003d72:	3720      	adds	r7, #32
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	200009b0 	.word	0x200009b0
 8003d7c:	20000a64 	.word	0x20000a64
 8003d80:	20002414 	.word	0x20002414

08003d84 <SpikeFilterInitialization>:
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
static void SpikeFilterInitialization(void)	// called to initialize the "SpikeFilterData" data structure.
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
	// nothing here for now
	return;
 8003d88:	bf00      	nop
}
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <MovingAverageFilterInitialization>:
}
#endif
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
static void MovingAverageFilterInitialization(void)		// called in the initialization section of the code
{
 8003d92:	b480      	push	{r7}
 8003d94:	af00      	add	r7, sp, #0
	// nothing here for now ...
	return;
 8003d96:	bf00      	nop
}
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <MovingAverageFilterMain>:
//----------------------------------------------------------------------------------
#ifdef INTARACTION_USES_MOVING_AVERAGING_FILTER
static void MovingAverageFilterMain(void)					// called in the main loop section to filter out the raw data before base line calibration or further data processing
{	// moving average the raw data and store back the result into the same data structure
 8003da0:	b490      	push	{r4, r7}
 8003da2:	b08e      	sub	sp, #56	; 0x38
 8003da4:	af00      	add	r7, sp, #0

	uint8_t i,j;
	uint32_t	ui32SelfReflection[6], uiFromAnotherRobot[6];

	// adding the new data
	for(i=0; i<6; i++)
 8003da6:	2300      	movs	r3, #0
 8003da8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003dac:	e050      	b.n	8003e50 <MovingAverageFilterMain+0xb0>
	{	// do the same for each channel

		// from self reflection
		MovingAveragedData.ui32SamplesFromSelfReflection[i][MovingAveragedData.ucSampleIndexer[i]] 		= MeasurementResult.ui32SignalFromSelfReflection[i];
 8003dae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003db2:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8003db6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003dba:	4867      	ldr	r0, [pc, #412]	; (8003f58 <MovingAverageFilterMain+0x1b8>)
 8003dbc:	4402      	add	r2, r0
 8003dbe:	f892 2c00 	ldrb.w	r2, [r2, #3072]	; 0xc00
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	4614      	mov	r4, r2
 8003dc6:	4a65      	ldr	r2, [pc, #404]	; (8003f5c <MovingAverageFilterMain+0x1bc>)
 8003dc8:	3302      	adds	r3, #2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	4861      	ldr	r0, [pc, #388]	; (8003f58 <MovingAverageFilterMain+0x1b8>)
 8003dd2:	018b      	lsls	r3, r1, #6
 8003dd4:	4423      	add	r3, r4
 8003dd6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

		// from another robot
		MovingAveragedData.ui32SamplesFromAnotherRobot[i][MovingAveragedData.ucSampleIndexer[i]]		= MeasurementResult.ui32SignalFromAnotherRobot[i];
 8003dda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003dde:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8003de2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003de6:	485c      	ldr	r0, [pc, #368]	; (8003f58 <MovingAverageFilterMain+0x1b8>)
 8003de8:	4402      	add	r2, r0
 8003dea:	f892 2c00 	ldrb.w	r2, [r2, #3072]	; 0xc00
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	4614      	mov	r4, r2
 8003df2:	4a5a      	ldr	r2, [pc, #360]	; (8003f5c <MovingAverageFilterMain+0x1bc>)
 8003df4:	3308      	adds	r3, #8
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	4856      	ldr	r0, [pc, #344]	; (8003f58 <MovingAverageFilterMain+0x1b8>)
 8003dfe:	018b      	lsls	r3, r1, #6
 8003e00:	4423      	add	r3, r4
 8003e02:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003e06:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

		// update the indexer
		MovingAveragedData.ucSampleIndexer[i] ++;
 8003e0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003e0e:	4a52      	ldr	r2, [pc, #328]	; (8003f58 <MovingAverageFilterMain+0x1b8>)
 8003e10:	441a      	add	r2, r3
 8003e12:	f892 2c00 	ldrb.w	r2, [r2, #3072]	; 0xc00
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	3201      	adds	r2, #1
 8003e1a:	b2d1      	uxtb	r1, r2
 8003e1c:	4a4e      	ldr	r2, [pc, #312]	; (8003f58 <MovingAverageFilterMain+0x1b8>)
 8003e1e:	4413      	add	r3, r2
 8003e20:	460a      	mov	r2, r1
 8003e22:	f883 2c00 	strb.w	r2, [r3, #3072]	; 0xc00
		if( (MovingAveragedData.ucSampleIndexer[i] >= INTERACTION_MOVING_AVERAGE_FILTER_MAX_NUMBER_OF_SAMPLES) )	MovingAveragedData.ucSampleIndexer[i] = 0;
 8003e26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003e2a:	4a4b      	ldr	r2, [pc, #300]	; (8003f58 <MovingAverageFilterMain+0x1b8>)
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f893 3c00 	ldrb.w	r3, [r3, #3072]	; 0xc00
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b0f      	cmp	r3, #15
 8003e36:	d906      	bls.n	8003e46 <MovingAverageFilterMain+0xa6>
 8003e38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003e3c:	4a46      	ldr	r2, [pc, #280]	; (8003f58 <MovingAverageFilterMain+0x1b8>)
 8003e3e:	4413      	add	r3, r2
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2c00 	strb.w	r2, [r3, #3072]	; 0xc00
	for(i=0; i<6; i++)
 8003e46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003e50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003e54:	2b05      	cmp	r3, #5
 8003e56:	d9aa      	bls.n	8003dae <MovingAverageFilterMain+0xe>
	}

	// accumulating all the data
	for(i=0; i<6; i++)
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003e5e:	e071      	b.n	8003f44 <MovingAverageFilterMain+0x1a4>
	{	// for all the channels

		// empty the accumulation buffers
		ui32SelfReflection[i] = 0;
 8003e60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	3338      	adds	r3, #56	; 0x38
 8003e68:	443b      	add	r3, r7
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f843 2c1c 	str.w	r2, [r3, #-28]
		uiFromAnotherRobot[i] = 0;
 8003e70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	3338      	adds	r3, #56	; 0x38
 8003e78:	443b      	add	r3, r7
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f843 2c34 	str.w	r2, [r3, #-52]

		for(j=0; j<INTERACTION_MOVING_AVERAGE_FILTER_MAX_NUMBER_OF_SAMPLES; j++)
 8003e80:	2300      	movs	r3, #0
 8003e82:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003e86:	e036      	b.n	8003ef6 <MovingAverageFilterMain+0x156>
		{	// for all the samples
			// from self reflection
			ui32SelfReflection[i]	+= MovingAveragedData.ui32SamplesFromSelfReflection[i][j];
 8003e88:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003e8c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003e90:	4931      	ldr	r1, [pc, #196]	; (8003f58 <MovingAverageFilterMain+0x1b8>)
 8003e92:	0192      	lsls	r2, r2, #6
 8003e94:	4413      	add	r3, r2
 8003e96:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003e9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	3338      	adds	r3, #56	; 0x38
 8003ea2:	443b      	add	r3, r7
 8003ea4:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8003ea8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003eac:	440a      	add	r2, r1
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	3338      	adds	r3, #56	; 0x38
 8003eb2:	443b      	add	r3, r7
 8003eb4:	f843 2c1c 	str.w	r2, [r3, #-28]

			// from other robot
			uiFromAnotherRobot[i]	+= MovingAveragedData.ui32SamplesFromAnotherRobot[i][j];
 8003eb8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003ebc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003ec0:	4925      	ldr	r1, [pc, #148]	; (8003f58 <MovingAverageFilterMain+0x1b8>)
 8003ec2:	0192      	lsls	r2, r2, #6
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003eca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003ece:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	3338      	adds	r3, #56	; 0x38
 8003ed6:	443b      	add	r3, r7
 8003ed8:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8003edc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003ee0:	440a      	add	r2, r1
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	3338      	adds	r3, #56	; 0x38
 8003ee6:	443b      	add	r3, r7
 8003ee8:	f843 2c34 	str.w	r2, [r3, #-52]
		for(j=0; j<INTERACTION_MOVING_AVERAGE_FILTER_MAX_NUMBER_OF_SAMPLES; j++)
 8003eec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003ef6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003efa:	2b0f      	cmp	r3, #15
 8003efc:	d9c4      	bls.n	8003e88 <MovingAverageFilterMain+0xe8>
		}

		// for self reflection
		MeasurementResult.ui32SignalFromSelfReflection[i] 	= (ui32SelfReflection[i] >> INTERACTION_MOVING_AVERAGE_FILTER_MAX_DEPTH_POWER);
 8003efe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	3338      	adds	r3, #56	; 0x38
 8003f06:	443b      	add	r3, r7
 8003f08:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8003f0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f10:	0912      	lsrs	r2, r2, #4
 8003f12:	4912      	ldr	r1, [pc, #72]	; (8003f5c <MovingAverageFilterMain+0x1bc>)
 8003f14:	3302      	adds	r3, #2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	605a      	str	r2, [r3, #4]

		// from another robot
		MeasurementResult.ui32SignalFromAnotherRobot[i]		= (uiFromAnotherRobot[i] >> INTERACTION_MOVING_AVERAGE_FILTER_MAX_DEPTH_POWER);
 8003f1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	3338      	adds	r3, #56	; 0x38
 8003f24:	443b      	add	r3, r7
 8003f26:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8003f2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f2e:	0912      	lsrs	r2, r2, #4
 8003f30:	490a      	ldr	r1, [pc, #40]	; (8003f5c <MovingAverageFilterMain+0x1bc>)
 8003f32:	3308      	adds	r3, #8
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	605a      	str	r2, [r3, #4]
	for(i=0; i<6; i++)
 8003f3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f3e:	3301      	adds	r3, #1
 8003f40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003f44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f48:	2b05      	cmp	r3, #5
 8003f4a:	d989      	bls.n	8003e60 <MovingAverageFilterMain+0xc0>

	}

	return;
 8003f4c:	bf00      	nop
}
 8003f4e:	3738      	adds	r7, #56	; 0x38
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc90      	pop	{r4, r7}
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20000aa0 	.word	0x20000aa0
 8003f5c:	20000a64 	.word	0x20000a64

08003f60 <BaseLineInitialization>:
#endif
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
static void BaseLineInitialization(void)		// used to initialize the base line structure and calibration algorithm
{	// called from the init section
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0

	// ROM settings
	BaseLineData.ucAccumulationDivisionPower			= INTERACTION_BASE_LINE_CALIBRATION_MAX_ACCUMULATION_POWER;	/* the division after adding => to get the average, the number of adding is power of 2 => the division is just a shift */
 8003f64:	4b52      	ldr	r3, [pc, #328]	; (80040b0 <BaseLineInitialization+0x150>)
 8003f66:	2206      	movs	r2, #6
 8003f68:	701a      	strb	r2, [r3, #0]
	BaseLineData.ucAccumulationCounterMax 				= INTERACTION_BASE_LINE_CALIBRATION_MAX_ACCUMULATIONS;		/* determines the number of consecutive measurements for the average base line calculation */
 8003f6a:	4b51      	ldr	r3, [pc, #324]	; (80040b0 <BaseLineInitialization+0x150>)
 8003f6c:	2240      	movs	r2, #64	; 0x40
 8003f6e:	709a      	strb	r2, [r3, #2]
	BaseLineData.ui16TimeToCheckCalibrationMSMax		= INTERACTION_BASE_LINE_CALIBRATION_TRIGGER_TIME_MS;		/* determines after how many milliseconds from restart check if a base line is present and if not trigger a base-line calibration */
 8003f70:	4b4f      	ldr	r3, [pc, #316]	; (80040b0 <BaseLineInitialization+0x150>)
 8003f72:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003f76:	80da      	strh	r2, [r3, #6]
	BaseLineData.ui32SelfMaxNoise						= INTERACTION_MAX_NOISE_SELF_REFLECTION;					/* determines the maximum noise allowed during the base line calibration */
 8003f78:	4b4d      	ldr	r3, [pc, #308]	; (80040b0 <BaseLineInitialization+0x150>)
 8003f7a:	2228      	movs	r2, #40	; 0x28
 8003f7c:	651a      	str	r2, [r3, #80]	; 0x50
	BaseLineData.ui32OtherRobotMaxNoise					= INTERACTION_MAX_NOISE_OTHER_ROBOT;						/*  */
 8003f7e:	4b4c      	ldr	r3, [pc, #304]	; (80040b0 <BaseLineInitialization+0x150>)
 8003f80:	2250      	movs	r2, #80	; 0x50
 8003f82:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	// EEPROM settings
	// check if the data is available in the EEPROM
	EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_CALIBRATION_DONE_ADDRESS;
 8003f86:	4b4b      	ldr	r3, [pc, #300]	; (80040b4 <BaseLineInitialization+0x154>)
 8003f88:	2288      	movs	r2, #136	; 0x88
 8003f8a:	801a      	strh	r2, [r3, #0]
	if( I2CEEPROMReadIS(&EEpromData[0]) == HAL_OK )
 8003f8c:	4849      	ldr	r0, [pc, #292]	; (80040b4 <BaseLineInitialization+0x154>)
 8003f8e:	f7fd fee3 	bl	8001d58 <I2CEEPROMReadIS>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f040 8089 	bne.w	80040ac <BaseLineInitialization+0x14c>
	{	// EEPROM reading is ok
		if( (EEpromData[0].ui32EEPROMData == EEPROM_INTERACTION_BASE_LINE_CALIBRATION_MARKER) )
 8003f9a:	4b46      	ldr	r3, [pc, #280]	; (80040b4 <BaseLineInitialization+0x154>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f245 52aa 	movw	r2, #21930	; 0x55aa
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	f040 8082 	bne.w	80040ac <BaseLineInitialization+0x14c>
		{	// eeprom is formatted

			// read the self reflection base line data
			// CH0
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_SELF_REFLECTION_CH0_ADDRESS;
 8003fa8:	4b42      	ldr	r3, [pc, #264]	; (80040b4 <BaseLineInitialization+0x154>)
 8003faa:	228c      	movs	r2, #140	; 0x8c
 8003fac:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 8003fae:	4841      	ldr	r0, [pc, #260]	; (80040b4 <BaseLineInitialization+0x154>)
 8003fb0:	f7fd fed2 	bl	8001d58 <I2CEEPROMReadIS>
			BaseLineData.ui32CalculatedSelfBaseLineValues[0]	= EEpromData[0].ui32EEPROMData;
 8003fb4:	4b3f      	ldr	r3, [pc, #252]	; (80040b4 <BaseLineInitialization+0x154>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	4a3d      	ldr	r2, [pc, #244]	; (80040b0 <BaseLineInitialization+0x150>)
 8003fba:	6553      	str	r3, [r2, #84]	; 0x54
			// CH1
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_SELF_REFLECTION_CH1_ADDRESS;
 8003fbc:	4b3d      	ldr	r3, [pc, #244]	; (80040b4 <BaseLineInitialization+0x154>)
 8003fbe:	2290      	movs	r2, #144	; 0x90
 8003fc0:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 8003fc2:	483c      	ldr	r0, [pc, #240]	; (80040b4 <BaseLineInitialization+0x154>)
 8003fc4:	f7fd fec8 	bl	8001d58 <I2CEEPROMReadIS>
			BaseLineData.ui32CalculatedSelfBaseLineValues[1]	= EEpromData[0].ui32EEPROMData;
 8003fc8:	4b3a      	ldr	r3, [pc, #232]	; (80040b4 <BaseLineInitialization+0x154>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	4a38      	ldr	r2, [pc, #224]	; (80040b0 <BaseLineInitialization+0x150>)
 8003fce:	6593      	str	r3, [r2, #88]	; 0x58
			// CH2
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_SELF_REFLECTION_CH2_ADDRESS;
 8003fd0:	4b38      	ldr	r3, [pc, #224]	; (80040b4 <BaseLineInitialization+0x154>)
 8003fd2:	2294      	movs	r2, #148	; 0x94
 8003fd4:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 8003fd6:	4837      	ldr	r0, [pc, #220]	; (80040b4 <BaseLineInitialization+0x154>)
 8003fd8:	f7fd febe 	bl	8001d58 <I2CEEPROMReadIS>
			BaseLineData.ui32CalculatedSelfBaseLineValues[2]	= EEpromData[0].ui32EEPROMData;
 8003fdc:	4b35      	ldr	r3, [pc, #212]	; (80040b4 <BaseLineInitialization+0x154>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4a33      	ldr	r2, [pc, #204]	; (80040b0 <BaseLineInitialization+0x150>)
 8003fe2:	65d3      	str	r3, [r2, #92]	; 0x5c
			// CH3
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_SELF_REFLECTION_CH3_ADDRESS;
 8003fe4:	4b33      	ldr	r3, [pc, #204]	; (80040b4 <BaseLineInitialization+0x154>)
 8003fe6:	2298      	movs	r2, #152	; 0x98
 8003fe8:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 8003fea:	4832      	ldr	r0, [pc, #200]	; (80040b4 <BaseLineInitialization+0x154>)
 8003fec:	f7fd feb4 	bl	8001d58 <I2CEEPROMReadIS>
			BaseLineData.ui32CalculatedSelfBaseLineValues[3]	= EEpromData[0].ui32EEPROMData;
 8003ff0:	4b30      	ldr	r3, [pc, #192]	; (80040b4 <BaseLineInitialization+0x154>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4a2e      	ldr	r2, [pc, #184]	; (80040b0 <BaseLineInitialization+0x150>)
 8003ff6:	6613      	str	r3, [r2, #96]	; 0x60
			// CH4
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_SELF_REFLECTION_CH4_ADDRESS;
 8003ff8:	4b2e      	ldr	r3, [pc, #184]	; (80040b4 <BaseLineInitialization+0x154>)
 8003ffa:	229c      	movs	r2, #156	; 0x9c
 8003ffc:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 8003ffe:	482d      	ldr	r0, [pc, #180]	; (80040b4 <BaseLineInitialization+0x154>)
 8004000:	f7fd feaa 	bl	8001d58 <I2CEEPROMReadIS>
			BaseLineData.ui32CalculatedSelfBaseLineValues[4]	= EEpromData[0].ui32EEPROMData;
 8004004:	4b2b      	ldr	r3, [pc, #172]	; (80040b4 <BaseLineInitialization+0x154>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	4a29      	ldr	r2, [pc, #164]	; (80040b0 <BaseLineInitialization+0x150>)
 800400a:	6653      	str	r3, [r2, #100]	; 0x64
			// CH5
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_SELF_REFLECTION_CH5_ADDRESS;
 800400c:	4b29      	ldr	r3, [pc, #164]	; (80040b4 <BaseLineInitialization+0x154>)
 800400e:	22a0      	movs	r2, #160	; 0xa0
 8004010:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 8004012:	4828      	ldr	r0, [pc, #160]	; (80040b4 <BaseLineInitialization+0x154>)
 8004014:	f7fd fea0 	bl	8001d58 <I2CEEPROMReadIS>
			BaseLineData.ui32CalculatedSelfBaseLineValues[5]	= EEpromData[0].ui32EEPROMData;
 8004018:	4b26      	ldr	r3, [pc, #152]	; (80040b4 <BaseLineInitialization+0x154>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4a24      	ldr	r2, [pc, #144]	; (80040b0 <BaseLineInitialization+0x150>)
 800401e:	6693      	str	r3, [r2, #104]	; 0x68

			// read the base line values for the signal from another robot
			// CH0
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_ANOTHER_ROBOT_CH0_ADDRESS;
 8004020:	4b24      	ldr	r3, [pc, #144]	; (80040b4 <BaseLineInitialization+0x154>)
 8004022:	22a4      	movs	r2, #164	; 0xa4
 8004024:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 8004026:	4823      	ldr	r0, [pc, #140]	; (80040b4 <BaseLineInitialization+0x154>)
 8004028:	f7fd fe96 	bl	8001d58 <I2CEEPROMReadIS>
			BaseLineData.ui32CalculatedBaseValuesFromOtherRobot[0]	= EEpromData[0].ui32EEPROMData;
 800402c:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <BaseLineInitialization+0x154>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4a1f      	ldr	r2, [pc, #124]	; (80040b0 <BaseLineInitialization+0x150>)
 8004032:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
			// CH1
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_ANOTHER_ROBOT_CH1_ADDRESS;
 8004036:	4b1f      	ldr	r3, [pc, #124]	; (80040b4 <BaseLineInitialization+0x154>)
 8004038:	22a8      	movs	r2, #168	; 0xa8
 800403a:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 800403c:	481d      	ldr	r0, [pc, #116]	; (80040b4 <BaseLineInitialization+0x154>)
 800403e:	f7fd fe8b 	bl	8001d58 <I2CEEPROMReadIS>
			BaseLineData.ui32CalculatedBaseValuesFromOtherRobot[1]	= EEpromData[0].ui32EEPROMData;
 8004042:	4b1c      	ldr	r3, [pc, #112]	; (80040b4 <BaseLineInitialization+0x154>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	4a1a      	ldr	r2, [pc, #104]	; (80040b0 <BaseLineInitialization+0x150>)
 8004048:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
			// CH2
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_ANOTHER_ROBOT_CH2_ADDRESS;
 800404c:	4b19      	ldr	r3, [pc, #100]	; (80040b4 <BaseLineInitialization+0x154>)
 800404e:	22ac      	movs	r2, #172	; 0xac
 8004050:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 8004052:	4818      	ldr	r0, [pc, #96]	; (80040b4 <BaseLineInitialization+0x154>)
 8004054:	f7fd fe80 	bl	8001d58 <I2CEEPROMReadIS>
			BaseLineData.ui32CalculatedBaseValuesFromOtherRobot[2]	= EEpromData[0].ui32EEPROMData;
 8004058:	4b16      	ldr	r3, [pc, #88]	; (80040b4 <BaseLineInitialization+0x154>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	4a14      	ldr	r2, [pc, #80]	; (80040b0 <BaseLineInitialization+0x150>)
 800405e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
			// CH3
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_ANOTHER_ROBOT_CH3_ADDRESS;
 8004062:	4b14      	ldr	r3, [pc, #80]	; (80040b4 <BaseLineInitialization+0x154>)
 8004064:	22b0      	movs	r2, #176	; 0xb0
 8004066:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 8004068:	4812      	ldr	r0, [pc, #72]	; (80040b4 <BaseLineInitialization+0x154>)
 800406a:	f7fd fe75 	bl	8001d58 <I2CEEPROMReadIS>
			BaseLineData.ui32CalculatedBaseValuesFromOtherRobot[3]	= EEpromData[0].ui32EEPROMData;
 800406e:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <BaseLineInitialization+0x154>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4a0f      	ldr	r2, [pc, #60]	; (80040b0 <BaseLineInitialization+0x150>)
 8004074:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
			// CH4
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_ANOTHER_ROBOT_CH4_ADDRESS;
 8004078:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <BaseLineInitialization+0x154>)
 800407a:	22b4      	movs	r2, #180	; 0xb4
 800407c:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 800407e:	480d      	ldr	r0, [pc, #52]	; (80040b4 <BaseLineInitialization+0x154>)
 8004080:	f7fd fe6a 	bl	8001d58 <I2CEEPROMReadIS>
			BaseLineData.ui32CalculatedBaseValuesFromOtherRobot[4]	= EEpromData[0].ui32EEPROMData;
 8004084:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <BaseLineInitialization+0x154>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	4a09      	ldr	r2, [pc, #36]	; (80040b0 <BaseLineInitialization+0x150>)
 800408a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
			// CH5
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_ANOTHER_ROBOT_CH5_ADDRESS;
 800408e:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <BaseLineInitialization+0x154>)
 8004090:	22b8      	movs	r2, #184	; 0xb8
 8004092:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 8004094:	4807      	ldr	r0, [pc, #28]	; (80040b4 <BaseLineInitialization+0x154>)
 8004096:	f7fd fe5f 	bl	8001d58 <I2CEEPROMReadIS>
			BaseLineData.ui32CalculatedBaseValuesFromOtherRobot[5]	= EEpromData[0].ui32EEPROMData;
 800409a:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <BaseLineInitialization+0x154>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4a04      	ldr	r2, [pc, #16]	; (80040b0 <BaseLineInitialization+0x150>)
 80040a0:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

			BaseLineData.ucBaseLineCalibrationDone = 1;	// indicate that there is no need for base line calibration
 80040a4:	4b02      	ldr	r3, [pc, #8]	; (80040b0 <BaseLineInitialization+0x150>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	70da      	strb	r2, [r3, #3]


	// EEPROM formating
	// no data here for now, only later after the base line calibration is done

	return;
 80040aa:	bf00      	nop
 80040ac:	bf00      	nop
}
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	200016a8 	.word	0x200016a8
 80040b4:	200018d0 	.word	0x200018d0

080040b8 <BaselineCalibrationMain>:
//----------------------------------------------------------------------------------
static void BaselineCalibrationMain(void)			// called from the "UsedInTheMainLoop()" during baseline calibration
{	// all data is stored in the: "BaseLineData" variable
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
	//-----------------------------------------------------
	uint8_t i;	// for indexing
	uint8_t ucNoiseS, ucNoiseO;	// noise condition from another robot and from self

	// check if the base line is already detected and nothing else is to be done
	if((BaseLineData.ucBaseLineCalibrationDone))	return;	// nothing else to do
 80040be:	4b7a      	ldr	r3, [pc, #488]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 80040c0:	78db      	ldrb	r3, [r3, #3]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f040 815a 	bne.w	800437e <BaselineCalibrationMain+0x2c6>
	//--------------------------------------------

	// check if is the right time to do the calibration
	if( (BaseLineData.ui16TimeToCheckCalibrationMS < BaseLineData.ui16TimeToCheckCalibrationMSMax) )	return;	// is not yet the right time after reset
 80040ca:	4b77      	ldr	r3, [pc, #476]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 80040cc:	889b      	ldrh	r3, [r3, #4]
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	4b75      	ldr	r3, [pc, #468]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 80040d2:	88db      	ldrh	r3, [r3, #6]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	429a      	cmp	r2, r3
 80040d8:	f0c0 8153 	bcc.w	8004382 <BaselineCalibrationMain+0x2ca>
	// debug
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH


	// perform the accumulation
	for(i=0; i<6; i++)
 80040dc:	2300      	movs	r3, #0
 80040de:	71fb      	strb	r3, [r7, #7]
 80040e0:	e08e      	b.n	8004200 <BaselineCalibrationMain+0x148>
	{
		// signal from self reflection
		BaseLineData.ui32AccuSignalFromSelfReflection[i]	+= MeasurementResult.ui32SignalFromSelfReflection[i];		// add signal from each channel into accumulator
 80040e2:	79fb      	ldrb	r3, [r7, #7]
 80040e4:	4a71      	ldr	r2, [pc, #452]	; (80042ac <BaselineCalibrationMain+0x1f4>)
 80040e6:	3302      	adds	r3, #2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	6859      	ldr	r1, [r3, #4]
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	4a6d      	ldr	r2, [pc, #436]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 80040f2:	3302      	adds	r3, #2
 80040f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	440a      	add	r2, r1
 80040fc:	496a      	ldr	r1, [pc, #424]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 80040fe:	3302      	adds	r3, #2
 8004100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if( (BaseLineData.ui32AccuSignalFromSelfReflectionMin[i] > MeasurementResult.ui32SignalFromSelfReflection[i]) )		BaseLineData.ui32AccuSignalFromSelfReflectionMin[i] = MeasurementResult.ui32SignalFromSelfReflection[i];	// minimum detection
 8004104:	79fb      	ldrb	r3, [r7, #7]
 8004106:	4a68      	ldr	r2, [pc, #416]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 8004108:	3308      	adds	r3, #8
 800410a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800410e:	79fb      	ldrb	r3, [r7, #7]
 8004110:	4966      	ldr	r1, [pc, #408]	; (80042ac <BaselineCalibrationMain+0x1f4>)
 8004112:	3302      	adds	r3, #2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	440b      	add	r3, r1
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	429a      	cmp	r2, r3
 800411c:	d90b      	bls.n	8004136 <BaselineCalibrationMain+0x7e>
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	79f9      	ldrb	r1, [r7, #7]
 8004122:	4a62      	ldr	r2, [pc, #392]	; (80042ac <BaselineCalibrationMain+0x1f4>)
 8004124:	3302      	adds	r3, #2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	485e      	ldr	r0, [pc, #376]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 800412e:	f101 0308 	add.w	r3, r1, #8
 8004132:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if( (BaseLineData.ui32AccuSignalFromSelfReflectionMax[i] < MeasurementResult.ui32SignalFromSelfReflection[i]) )		BaseLineData.ui32AccuSignalFromSelfReflectionMax[i] = MeasurementResult.ui32SignalFromSelfReflection[i];	// maximum detection
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	4a5b      	ldr	r2, [pc, #364]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 800413a:	330e      	adds	r3, #14
 800413c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	495a      	ldr	r1, [pc, #360]	; (80042ac <BaselineCalibrationMain+0x1f4>)
 8004144:	3302      	adds	r3, #2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	440b      	add	r3, r1
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	429a      	cmp	r2, r3
 800414e:	d20b      	bcs.n	8004168 <BaselineCalibrationMain+0xb0>
 8004150:	79fb      	ldrb	r3, [r7, #7]
 8004152:	79f9      	ldrb	r1, [r7, #7]
 8004154:	4a55      	ldr	r2, [pc, #340]	; (80042ac <BaselineCalibrationMain+0x1f4>)
 8004156:	3302      	adds	r3, #2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	4852      	ldr	r0, [pc, #328]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 8004160:	f101 030e 	add.w	r3, r1, #14
 8004164:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

		// signal from another robot
		BaseLineData.ui32AccuSignalFromOtherRobot[i]		+= MeasurementResult.ui32SignalFromAnotherRobot[i];			// add the signal from another robot into accumulator
 8004168:	79fb      	ldrb	r3, [r7, #7]
 800416a:	4a50      	ldr	r2, [pc, #320]	; (80042ac <BaselineCalibrationMain+0x1f4>)
 800416c:	3308      	adds	r3, #8
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	6859      	ldr	r1, [r3, #4]
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	4a4c      	ldr	r2, [pc, #304]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 8004178:	331a      	adds	r3, #26
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	79fb      	ldrb	r3, [r7, #7]
 8004182:	440a      	add	r2, r1
 8004184:	4948      	ldr	r1, [pc, #288]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 8004186:	331a      	adds	r3, #26
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	440b      	add	r3, r1
 800418c:	605a      	str	r2, [r3, #4]
		if( (BaseLineData.ui32AccuSignalFromOtherRobotMin[i] > MeasurementResult.ui32SignalFromAnotherRobot[i]) )			BaseLineData.ui32AccuSignalFromOtherRobotMin[i] = MeasurementResult.ui32SignalFromAnotherRobot[i];		// minimum detection
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	4a45      	ldr	r2, [pc, #276]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 8004192:	3320      	adds	r3, #32
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	79fb      	ldrb	r3, [r7, #7]
 800419c:	4943      	ldr	r1, [pc, #268]	; (80042ac <BaselineCalibrationMain+0x1f4>)
 800419e:	3308      	adds	r3, #8
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d90c      	bls.n	80041c4 <BaselineCalibrationMain+0x10c>
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	79f9      	ldrb	r1, [r7, #7]
 80041ae:	4a3f      	ldr	r2, [pc, #252]	; (80042ac <BaselineCalibrationMain+0x1f4>)
 80041b0:	3308      	adds	r3, #8
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	483b      	ldr	r0, [pc, #236]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 80041ba:	f101 0320 	add.w	r3, r1, #32
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4403      	add	r3, r0
 80041c2:	605a      	str	r2, [r3, #4]
		if( (BaseLineData.ui32AccuSignalFromOtherRobotMax[i] < MeasurementResult.ui32SignalFromAnotherRobot[i]) )			BaseLineData.ui32AccuSignalFromOtherRobotMax[i] = MeasurementResult.ui32SignalFromAnotherRobot[i];		// maximum detection
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	4a38      	ldr	r2, [pc, #224]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 80041c8:	3326      	adds	r3, #38	; 0x26
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	4936      	ldr	r1, [pc, #216]	; (80042ac <BaselineCalibrationMain+0x1f4>)
 80041d4:	3308      	adds	r3, #8
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d20c      	bcs.n	80041fa <BaselineCalibrationMain+0x142>
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	79f9      	ldrb	r1, [r7, #7]
 80041e4:	4a31      	ldr	r2, [pc, #196]	; (80042ac <BaselineCalibrationMain+0x1f4>)
 80041e6:	3308      	adds	r3, #8
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	482e      	ldr	r0, [pc, #184]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 80041f0:	f101 0326 	add.w	r3, r1, #38	; 0x26
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4403      	add	r3, r0
 80041f8:	605a      	str	r2, [r3, #4]
	for(i=0; i<6; i++)
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	3301      	adds	r3, #1
 80041fe:	71fb      	strb	r3, [r7, #7]
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	2b05      	cmp	r3, #5
 8004204:	f67f af6d 	bls.w	80040e2 <BaselineCalibrationMain+0x2a>
	}

	if( (BaseLineData.ucAccumulationCounter) )		BaseLineData.ucAccumulationCounter --;
 8004208:	4b27      	ldr	r3, [pc, #156]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 800420a:	785b      	ldrb	r3, [r3, #1]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d006      	beq.n	8004220 <BaselineCalibrationMain+0x168>
 8004212:	4b25      	ldr	r3, [pc, #148]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 8004214:	785b      	ldrb	r3, [r3, #1]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b2da      	uxtb	r2, r3
 800421c:	4b22      	ldr	r3, [pc, #136]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 800421e:	705a      	strb	r2, [r3, #1]
	if( (BaseLineData.ucAccumulationCounter == 0) )
 8004220:	4b21      	ldr	r3, [pc, #132]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 8004222:	785b      	ldrb	r3, [r3, #1]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	f040 80ad 	bne.w	8004386 <BaselineCalibrationMain+0x2ce>
	{	// end of the accumulation

		// ---------- check the noise condition -------------
		ucNoiseS = 0;	// noise from self initialized as ok
 800422c:	2300      	movs	r3, #0
 800422e:	71bb      	strb	r3, [r7, #6]
		ucNoiseO = 0;	// noise from other robot initialized as ok
 8004230:	2300      	movs	r3, #0
 8004232:	717b      	strb	r3, [r7, #5]
		for(i=0; i<6; i++)
 8004234:	2300      	movs	r3, #0
 8004236:	71fb      	strb	r3, [r7, #7]
 8004238:	e027      	b.n	800428a <BaselineCalibrationMain+0x1d2>
		{
			// from self reflection
			if( ( (BaseLineData.ui32AccuSignalFromSelfReflectionMax[i] - BaseLineData.ui32AccuSignalFromSelfReflectionMin[i] ) > BaseLineData.ui32SelfMaxNoise ) )	ucNoiseS = 1;	// too large noise detected => no base line calibration this time
 800423a:	79fb      	ldrb	r3, [r7, #7]
 800423c:	4a1a      	ldr	r2, [pc, #104]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 800423e:	330e      	adds	r3, #14
 8004240:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004244:	79fb      	ldrb	r3, [r7, #7]
 8004246:	4918      	ldr	r1, [pc, #96]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 8004248:	3308      	adds	r3, #8
 800424a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800424e:	1ad2      	subs	r2, r2, r3
 8004250:	4b15      	ldr	r3, [pc, #84]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 8004252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004254:	429a      	cmp	r2, r3
 8004256:	d901      	bls.n	800425c <BaselineCalibrationMain+0x1a4>
 8004258:	2301      	movs	r3, #1
 800425a:	71bb      	strb	r3, [r7, #6]

			// from another robot
			if( ( (BaseLineData.ui32AccuSignalFromOtherRobotMax[i] - BaseLineData.ui32AccuSignalFromOtherRobotMin[i] ) > BaseLineData.ui32OtherRobotMaxNoise ) )	ucNoiseO = 1;	// too large noise detected => no base line calibration this time
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	4a12      	ldr	r2, [pc, #72]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 8004260:	3326      	adds	r3, #38	; 0x26
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	490f      	ldr	r1, [pc, #60]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 800426c:	3320      	adds	r3, #32
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	1ad2      	subs	r2, r2, r3
 8004276:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <BaselineCalibrationMain+0x1f0>)
 8004278:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800427c:	429a      	cmp	r2, r3
 800427e:	d901      	bls.n	8004284 <BaselineCalibrationMain+0x1cc>
 8004280:	2301      	movs	r3, #1
 8004282:	717b      	strb	r3, [r7, #5]
		for(i=0; i<6; i++)
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	3301      	adds	r3, #1
 8004288:	71fb      	strb	r3, [r7, #7]
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	2b05      	cmp	r3, #5
 800428e:	d9d4      	bls.n	800423a <BaselineCalibrationMain+0x182>
		}
		if( (ucNoiseS || ucNoiseO) )
 8004290:	79bb      	ldrb	r3, [r7, #6]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d102      	bne.n	800429c <BaselineCalibrationMain+0x1e4>
 8004296:	797b      	ldrb	r3, [r7, #5]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <BaselineCalibrationMain+0x1ea>
		{	// too large noise
			// restart the base line calibration
			BaseLineDataReset();	// clear all the accumulators
 800429c:	f000 f896 	bl	80043cc <BaseLineDataReset>
			return;
 80042a0:	e072      	b.n	8004388 <BaselineCalibrationMain+0x2d0>
		// noise seems to be ok => in the range
		// --------------------------------------------------


		// -------- calculate the base line values ----------
		for(i=0; i<6; i++)
 80042a2:	2300      	movs	r3, #0
 80042a4:	71fb      	strb	r3, [r7, #7]
 80042a6:	e060      	b.n	800436a <BaselineCalibrationMain+0x2b2>
 80042a8:	200016a8 	.word	0x200016a8
 80042ac:	20000a64 	.word	0x20000a64
		{
			// from self reflection
			BaseLineData.ui32AccuSignalFromSelfReflection[i] 		>>= BaseLineData.ucAccumulationDivisionPower;						// divide with the number of accumulations (always power of 2)
 80042b0:	4b37      	ldr	r3, [pc, #220]	; (8004390 <BaselineCalibrationMain+0x2d8>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	b2d9      	uxtb	r1, r3
 80042b6:	79fb      	ldrb	r3, [r7, #7]
 80042b8:	4a35      	ldr	r2, [pc, #212]	; (8004390 <BaselineCalibrationMain+0x2d8>)
 80042ba:	3302      	adds	r3, #2
 80042bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	40ca      	lsrs	r2, r1
 80042c4:	4932      	ldr	r1, [pc, #200]	; (8004390 <BaselineCalibrationMain+0x2d8>)
 80042c6:	3302      	adds	r3, #2
 80042c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			BaseLineData.ui32AccuSignalFromSelfReflection[i] 		+=  (BaseLineData.ui32AccuSignalFromSelfReflection[i] >> 1);		// add 50% to the base line
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	4a30      	ldr	r2, [pc, #192]	; (8004390 <BaselineCalibrationMain+0x2d8>)
 80042d0:	3302      	adds	r3, #2
 80042d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d6:	0859      	lsrs	r1, r3, #1
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	4a2d      	ldr	r2, [pc, #180]	; (8004390 <BaselineCalibrationMain+0x2d8>)
 80042dc:	3302      	adds	r3, #2
 80042de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	440a      	add	r2, r1
 80042e6:	492a      	ldr	r1, [pc, #168]	; (8004390 <BaselineCalibrationMain+0x2d8>)
 80042e8:	3302      	adds	r3, #2
 80042ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			BaseLineData.ui32CalculatedSelfBaseLineValues[i] 		= 	 BaseLineData.ui32AccuSignalFromSelfReflection[i];				// store the result into the dedicated field
 80042ee:	79fa      	ldrb	r2, [r7, #7]
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	4927      	ldr	r1, [pc, #156]	; (8004390 <BaselineCalibrationMain+0x2d8>)
 80042f4:	3202      	adds	r2, #2
 80042f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80042fa:	4925      	ldr	r1, [pc, #148]	; (8004390 <BaselineCalibrationMain+0x2d8>)
 80042fc:	3314      	adds	r3, #20
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	605a      	str	r2, [r3, #4]

			// from another robot
			BaseLineData.ui32AccuSignalFromOtherRobot[i]			>>= BaseLineData.ucAccumulationDivisionPower;						// divide with the number of accumulations (always power of 2)
 8004304:	4b22      	ldr	r3, [pc, #136]	; (8004390 <BaselineCalibrationMain+0x2d8>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	b2d9      	uxtb	r1, r3
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	4a20      	ldr	r2, [pc, #128]	; (8004390 <BaselineCalibrationMain+0x2d8>)
 800430e:	331a      	adds	r3, #26
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	40ca      	lsrs	r2, r1
 800431a:	491d      	ldr	r1, [pc, #116]	; (8004390 <BaselineCalibrationMain+0x2d8>)
 800431c:	331a      	adds	r3, #26
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	605a      	str	r2, [r3, #4]
			BaseLineData.ui32AccuSignalFromOtherRobot[i]			+=  (BaseLineData.ui32AccuSignalFromOtherRobot[i] >> 1);			// add 50% to the base line
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	4a1a      	ldr	r2, [pc, #104]	; (8004390 <BaselineCalibrationMain+0x2d8>)
 8004328:	331a      	adds	r3, #26
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	0859      	lsrs	r1, r3, #1
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	4a16      	ldr	r2, [pc, #88]	; (8004390 <BaselineCalibrationMain+0x2d8>)
 8004336:	331a      	adds	r3, #26
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	440a      	add	r2, r1
 8004342:	4913      	ldr	r1, [pc, #76]	; (8004390 <BaselineCalibrationMain+0x2d8>)
 8004344:	331a      	adds	r3, #26
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	605a      	str	r2, [r3, #4]
			BaseLineData.ui32CalculatedBaseValuesFromOtherRobot[i]	=	BaseLineData.ui32AccuSignalFromOtherRobot[i];					// store the result into the dedicated field
 800434c:	79fb      	ldrb	r3, [r7, #7]
 800434e:	79f9      	ldrb	r1, [r7, #7]
 8004350:	4a0f      	ldr	r2, [pc, #60]	; (8004390 <BaselineCalibrationMain+0x2d8>)
 8004352:	331a      	adds	r3, #26
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	480d      	ldr	r0, [pc, #52]	; (8004390 <BaselineCalibrationMain+0x2d8>)
 800435c:	f101 032e 	add.w	r3, r1, #46	; 0x2e
 8004360:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for(i=0; i<6; i++)
 8004364:	79fb      	ldrb	r3, [r7, #7]
 8004366:	3301      	adds	r3, #1
 8004368:	71fb      	strb	r3, [r7, #7]
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	2b05      	cmp	r3, #5
 800436e:	d99f      	bls.n	80042b0 <BaselineCalibrationMain+0x1f8>
		}
		// store the values into the  EEPROM
		m_ucEEPROMNewBaseLineDataIsAvailable = 1;
 8004370:	4b08      	ldr	r3, [pc, #32]	; (8004394 <BaselineCalibrationMain+0x2dc>)
 8004372:	2201      	movs	r2, #1
 8004374:	701a      	strb	r2, [r3, #0]
		BaseLineData.ucBaseLineCalibrationDone = 1;	// base line was detected
 8004376:	4b06      	ldr	r3, [pc, #24]	; (8004390 <BaselineCalibrationMain+0x2d8>)
 8004378:	2201      	movs	r2, #1
 800437a:	70da      	strb	r2, [r3, #3]
	}

	// debug
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//  debug on PC13 LOW

	return;
 800437c:	e003      	b.n	8004386 <BaselineCalibrationMain+0x2ce>
	if((BaseLineData.ucBaseLineCalibrationDone))	return;	// nothing else to do
 800437e:	bf00      	nop
 8004380:	e002      	b.n	8004388 <BaselineCalibrationMain+0x2d0>
	if( (BaseLineData.ui16TimeToCheckCalibrationMS < BaseLineData.ui16TimeToCheckCalibrationMSMax) )	return;	// is not yet the right time after reset
 8004382:	bf00      	nop
 8004384:	e000      	b.n	8004388 <BaselineCalibrationMain+0x2d0>
	return;
 8004386:	bf00      	nop
}
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	200016a8 	.word	0x200016a8
 8004394:	200018c0 	.word	0x200018c0

08004398 <BaseLineTimer1KHZ>:
//----------------------------------------------------------------------------------
static void BaseLineTimer1KHZ(void)			// called from the 1KHZ timer to handle real time requirements in the base line calibration logic
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
	if( (BaseLineData.ui16TimeToCheckCalibrationMS < BaseLineData.ui16TimeToCheckCalibrationMSMax) )	BaseLineData.ui16TimeToCheckCalibrationMS ++;
 800439c:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <BaseLineTimer1KHZ+0x30>)
 800439e:	889b      	ldrh	r3, [r3, #4]
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <BaseLineTimer1KHZ+0x30>)
 80043a4:	88db      	ldrh	r3, [r3, #6]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d207      	bcs.n	80043bc <BaseLineTimer1KHZ+0x24>
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <BaseLineTimer1KHZ+0x30>)
 80043ae:	889b      	ldrh	r3, [r3, #4]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3301      	adds	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <BaseLineTimer1KHZ+0x30>)
 80043b8:	809a      	strh	r2, [r3, #4]
	return;
 80043ba:	bf00      	nop
 80043bc:	bf00      	nop
}
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	200016a8 	.word	0x200016a8

080043cc <BaseLineDataReset>:
//----------------------------------------------------------------------------------
static void BaseLineDataReset(void)			// called to reset the base line data structure "BaseLineData"
{	// clears all the accumulators and the counter variable
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
	// -----------------------------------------
	uint8_t i;

	for(i=0; i<6; i++)
 80043d2:	2300      	movs	r3, #0
 80043d4:	71fb      	strb	r3, [r7, #7]
 80043d6:	e038      	b.n	800444a <BaseLineDataReset+0x7e>
	{
		// self reflections
		BaseLineData.ui32AccuSignalFromSelfReflection[i] 		= 0;
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	4a24      	ldr	r2, [pc, #144]	; (800446c <BaseLineDataReset+0xa0>)
 80043dc:	3302      	adds	r3, #2
 80043de:	2100      	movs	r1, #0
 80043e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		BaseLineData.ui32AccuSignalFromSelfReflectionMin[i]		= 4095;
 80043e4:	79fb      	ldrb	r3, [r7, #7]
 80043e6:	4a21      	ldr	r2, [pc, #132]	; (800446c <BaseLineDataReset+0xa0>)
 80043e8:	3308      	adds	r3, #8
 80043ea:	f640 71ff 	movw	r1, #4095	; 0xfff
 80043ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		BaseLineData.ui32AccuSignalFromSelfReflectionMax[i]		= 0;
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	4a1d      	ldr	r2, [pc, #116]	; (800446c <BaseLineDataReset+0xa0>)
 80043f6:	330e      	adds	r3, #14
 80043f8:	2100      	movs	r1, #0
 80043fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		BaseLineData.ui32CalculatedSelfBaseLineValues[i]		= 0;
 80043fe:	79fb      	ldrb	r3, [r7, #7]
 8004400:	4a1a      	ldr	r2, [pc, #104]	; (800446c <BaseLineDataReset+0xa0>)
 8004402:	3314      	adds	r3, #20
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	2200      	movs	r2, #0
 800440a:	605a      	str	r2, [r3, #4]

		// from other robots
		BaseLineData.ui32AccuSignalFromOtherRobot[i]			= 0;
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	4a17      	ldr	r2, [pc, #92]	; (800446c <BaseLineDataReset+0xa0>)
 8004410:	331a      	adds	r3, #26
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	2200      	movs	r2, #0
 8004418:	605a      	str	r2, [r3, #4]
		BaseLineData.ui32AccuSignalFromOtherRobotMin[i]			= 4095;
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	4a13      	ldr	r2, [pc, #76]	; (800446c <BaseLineDataReset+0xa0>)
 800441e:	3320      	adds	r3, #32
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004428:	605a      	str	r2, [r3, #4]
		BaseLineData.ui32AccuSignalFromOtherRobotMax[i]			= 0;
 800442a:	79fb      	ldrb	r3, [r7, #7]
 800442c:	4a0f      	ldr	r2, [pc, #60]	; (800446c <BaseLineDataReset+0xa0>)
 800442e:	3326      	adds	r3, #38	; 0x26
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	2200      	movs	r2, #0
 8004436:	605a      	str	r2, [r3, #4]
		BaseLineData.ui32CalculatedBaseValuesFromOtherRobot[i]	= 0;
 8004438:	79fb      	ldrb	r3, [r7, #7]
 800443a:	4a0c      	ldr	r2, [pc, #48]	; (800446c <BaseLineDataReset+0xa0>)
 800443c:	332e      	adds	r3, #46	; 0x2e
 800443e:	2100      	movs	r1, #0
 8004440:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(i=0; i<6; i++)
 8004444:	79fb      	ldrb	r3, [r7, #7]
 8004446:	3301      	adds	r3, #1
 8004448:	71fb      	strb	r3, [r7, #7]
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	2b05      	cmp	r3, #5
 800444e:	d9c3      	bls.n	80043d8 <BaseLineDataReset+0xc>
	}

	BaseLineData.ucAccumulationCounter = BaseLineData.ucAccumulationCounterMax;		// from this value counts down. this is power of 2 def. by: "INTERACTION_BASE_LINE_CALIBRATION_MAX_ACCUMULATIONS"
 8004450:	4b06      	ldr	r3, [pc, #24]	; (800446c <BaseLineDataReset+0xa0>)
 8004452:	789b      	ldrb	r3, [r3, #2]
 8004454:	b2da      	uxtb	r2, r3
 8004456:	4b05      	ldr	r3, [pc, #20]	; (800446c <BaseLineDataReset+0xa0>)
 8004458:	705a      	strb	r2, [r3, #1]
	BaseLineData.ucBaseLineCalibrationDone = 0;		// not yet accumulated
 800445a:	4b04      	ldr	r3, [pc, #16]	; (800446c <BaseLineDataReset+0xa0>)
 800445c:	2200      	movs	r2, #0
 800445e:	70da      	strb	r2, [r3, #3]

	return;
 8004460:	bf00      	nop
}
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	200016a8 	.word	0x200016a8

08004470 <SensitivityInitialization>:
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
static void SensitivityInitialization(void)	// retrieve the sensitivity information from the EEPROM or from ROM
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
	// 0) set the ROM values (some default values)
	// self reflection
	SensitivityData.ucSensitivityForSelfReflection[0] = 50;
 8004474:	4b5b      	ldr	r3, [pc, #364]	; (80045e4 <SensitivityInitialization+0x174>)
 8004476:	2232      	movs	r2, #50	; 0x32
 8004478:	701a      	strb	r2, [r3, #0]
	SensitivityData.ucSensitivityForSelfReflection[1] = 50;
 800447a:	4b5a      	ldr	r3, [pc, #360]	; (80045e4 <SensitivityInitialization+0x174>)
 800447c:	2232      	movs	r2, #50	; 0x32
 800447e:	705a      	strb	r2, [r3, #1]
	SensitivityData.ucSensitivityForSelfReflection[2] = 50;
 8004480:	4b58      	ldr	r3, [pc, #352]	; (80045e4 <SensitivityInitialization+0x174>)
 8004482:	2232      	movs	r2, #50	; 0x32
 8004484:	709a      	strb	r2, [r3, #2]
	SensitivityData.ucSensitivityForSelfReflection[3] = 50;
 8004486:	4b57      	ldr	r3, [pc, #348]	; (80045e4 <SensitivityInitialization+0x174>)
 8004488:	2232      	movs	r2, #50	; 0x32
 800448a:	70da      	strb	r2, [r3, #3]
	SensitivityData.ucSensitivityForSelfReflection[4] = 50;
 800448c:	4b55      	ldr	r3, [pc, #340]	; (80045e4 <SensitivityInitialization+0x174>)
 800448e:	2232      	movs	r2, #50	; 0x32
 8004490:	711a      	strb	r2, [r3, #4]
	SensitivityData.ucSensitivityForSelfReflection[5] = 50;
 8004492:	4b54      	ldr	r3, [pc, #336]	; (80045e4 <SensitivityInitialization+0x174>)
 8004494:	2232      	movs	r2, #50	; 0x32
 8004496:	715a      	strb	r2, [r3, #5]
	// from other robot
	SensitivityData.ucSensitivityForOtherRobot[0] = 50;
 8004498:	4b52      	ldr	r3, [pc, #328]	; (80045e4 <SensitivityInitialization+0x174>)
 800449a:	2232      	movs	r2, #50	; 0x32
 800449c:	719a      	strb	r2, [r3, #6]
	SensitivityData.ucSensitivityForOtherRobot[1] = 50;
 800449e:	4b51      	ldr	r3, [pc, #324]	; (80045e4 <SensitivityInitialization+0x174>)
 80044a0:	2232      	movs	r2, #50	; 0x32
 80044a2:	71da      	strb	r2, [r3, #7]
	SensitivityData.ucSensitivityForOtherRobot[2] = 50;
 80044a4:	4b4f      	ldr	r3, [pc, #316]	; (80045e4 <SensitivityInitialization+0x174>)
 80044a6:	2232      	movs	r2, #50	; 0x32
 80044a8:	721a      	strb	r2, [r3, #8]
	SensitivityData.ucSensitivityForOtherRobot[3] = 50;
 80044aa:	4b4e      	ldr	r3, [pc, #312]	; (80045e4 <SensitivityInitialization+0x174>)
 80044ac:	2232      	movs	r2, #50	; 0x32
 80044ae:	725a      	strb	r2, [r3, #9]
	SensitivityData.ucSensitivityForOtherRobot[4] = 50;
 80044b0:	4b4c      	ldr	r3, [pc, #304]	; (80045e4 <SensitivityInitialization+0x174>)
 80044b2:	2232      	movs	r2, #50	; 0x32
 80044b4:	729a      	strb	r2, [r3, #10]
	SensitivityData.ucSensitivityForOtherRobot[5] = 50;
 80044b6:	4b4b      	ldr	r3, [pc, #300]	; (80045e4 <SensitivityInitialization+0x174>)
 80044b8:	2232      	movs	r2, #50	; 0x32
 80044ba:	72da      	strb	r2, [r3, #11]


	// 1) if present in EEPROM => retrieve from EEPROM and replace the earlier set ROM values
	// check if the data is available in the EEPROM
	EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_DATA_OK_ADDRESS;
 80044bc:	4b4a      	ldr	r3, [pc, #296]	; (80045e8 <SensitivityInitialization+0x178>)
 80044be:	22cc      	movs	r2, #204	; 0xcc
 80044c0:	801a      	strh	r2, [r3, #0]
	if( I2CEEPROMReadIS(&EEpromData[0]) == HAL_OK )
 80044c2:	4849      	ldr	r0, [pc, #292]	; (80045e8 <SensitivityInitialization+0x178>)
 80044c4:	f7fd fc48 	bl	8001d58 <I2CEEPROMReadIS>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f040 808e 	bne.w	80045ec <SensitivityInitialization+0x17c>
	{	// EEPROM reading is ok
		if( (EEpromData[0].ui32EEPROMData == EEPROM_INTERACTION_SENSITIVITY_DATA_OK_MARKER) )
 80044d0:	4b45      	ldr	r3, [pc, #276]	; (80045e8 <SensitivityInitialization+0x178>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2baa      	cmp	r3, #170	; 0xaa
 80044d6:	f040 8089 	bne.w	80045ec <SensitivityInitialization+0x17c>
		{	// eeprom is formatted

			// read the self reflection sensitivity values
			// CH0
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_SELF_REFLECTION_CH0_ADDRESS;
 80044da:	4b43      	ldr	r3, [pc, #268]	; (80045e8 <SensitivityInitialization+0x178>)
 80044dc:	22d0      	movs	r2, #208	; 0xd0
 80044de:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 80044e0:	4841      	ldr	r0, [pc, #260]	; (80045e8 <SensitivityInitialization+0x178>)
 80044e2:	f7fd fc39 	bl	8001d58 <I2CEEPROMReadIS>
			SensitivityData.ucSensitivityForSelfReflection[0]	= EEpromData[0].ui32EEPROMData;
 80044e6:	4b40      	ldr	r3, [pc, #256]	; (80045e8 <SensitivityInitialization+0x178>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	4b3d      	ldr	r3, [pc, #244]	; (80045e4 <SensitivityInitialization+0x174>)
 80044ee:	701a      	strb	r2, [r3, #0]
			// CH1
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_SELF_REFLECTION_CH1_ADDRESS;
 80044f0:	4b3d      	ldr	r3, [pc, #244]	; (80045e8 <SensitivityInitialization+0x178>)
 80044f2:	22d4      	movs	r2, #212	; 0xd4
 80044f4:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 80044f6:	483c      	ldr	r0, [pc, #240]	; (80045e8 <SensitivityInitialization+0x178>)
 80044f8:	f7fd fc2e 	bl	8001d58 <I2CEEPROMReadIS>
			SensitivityData.ucSensitivityForSelfReflection[1]	= EEpromData[0].ui32EEPROMData;
 80044fc:	4b3a      	ldr	r3, [pc, #232]	; (80045e8 <SensitivityInitialization+0x178>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	b2da      	uxtb	r2, r3
 8004502:	4b38      	ldr	r3, [pc, #224]	; (80045e4 <SensitivityInitialization+0x174>)
 8004504:	705a      	strb	r2, [r3, #1]
			// CH2
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_SELF_REFLECTION_CH2_ADDRESS;
 8004506:	4b38      	ldr	r3, [pc, #224]	; (80045e8 <SensitivityInitialization+0x178>)
 8004508:	22d8      	movs	r2, #216	; 0xd8
 800450a:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 800450c:	4836      	ldr	r0, [pc, #216]	; (80045e8 <SensitivityInitialization+0x178>)
 800450e:	f7fd fc23 	bl	8001d58 <I2CEEPROMReadIS>
			SensitivityData.ucSensitivityForSelfReflection[2]	= EEpromData[0].ui32EEPROMData;
 8004512:	4b35      	ldr	r3, [pc, #212]	; (80045e8 <SensitivityInitialization+0x178>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	b2da      	uxtb	r2, r3
 8004518:	4b32      	ldr	r3, [pc, #200]	; (80045e4 <SensitivityInitialization+0x174>)
 800451a:	709a      	strb	r2, [r3, #2]
			// CH3
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_SELF_REFLECTION_CH3_ADDRESS;
 800451c:	4b32      	ldr	r3, [pc, #200]	; (80045e8 <SensitivityInitialization+0x178>)
 800451e:	22dc      	movs	r2, #220	; 0xdc
 8004520:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 8004522:	4831      	ldr	r0, [pc, #196]	; (80045e8 <SensitivityInitialization+0x178>)
 8004524:	f7fd fc18 	bl	8001d58 <I2CEEPROMReadIS>
			SensitivityData.ucSensitivityForSelfReflection[3]	= EEpromData[0].ui32EEPROMData;
 8004528:	4b2f      	ldr	r3, [pc, #188]	; (80045e8 <SensitivityInitialization+0x178>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	b2da      	uxtb	r2, r3
 800452e:	4b2d      	ldr	r3, [pc, #180]	; (80045e4 <SensitivityInitialization+0x174>)
 8004530:	70da      	strb	r2, [r3, #3]
			// CH4
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_SELF_REFLECTION_CH4_ADDRESS;
 8004532:	4b2d      	ldr	r3, [pc, #180]	; (80045e8 <SensitivityInitialization+0x178>)
 8004534:	22e0      	movs	r2, #224	; 0xe0
 8004536:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 8004538:	482b      	ldr	r0, [pc, #172]	; (80045e8 <SensitivityInitialization+0x178>)
 800453a:	f7fd fc0d 	bl	8001d58 <I2CEEPROMReadIS>
			SensitivityData.ucSensitivityForSelfReflection[4]	= EEpromData[0].ui32EEPROMData;
 800453e:	4b2a      	ldr	r3, [pc, #168]	; (80045e8 <SensitivityInitialization+0x178>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	b2da      	uxtb	r2, r3
 8004544:	4b27      	ldr	r3, [pc, #156]	; (80045e4 <SensitivityInitialization+0x174>)
 8004546:	711a      	strb	r2, [r3, #4]
			// CH5
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_SELF_REFLECTION_CH5_ADDRESS;
 8004548:	4b27      	ldr	r3, [pc, #156]	; (80045e8 <SensitivityInitialization+0x178>)
 800454a:	22e4      	movs	r2, #228	; 0xe4
 800454c:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 800454e:	4826      	ldr	r0, [pc, #152]	; (80045e8 <SensitivityInitialization+0x178>)
 8004550:	f7fd fc02 	bl	8001d58 <I2CEEPROMReadIS>
			SensitivityData.ucSensitivityForSelfReflection[5]	= EEpromData[0].ui32EEPROMData;
 8004554:	4b24      	ldr	r3, [pc, #144]	; (80045e8 <SensitivityInitialization+0x178>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4b22      	ldr	r3, [pc, #136]	; (80045e4 <SensitivityInitialization+0x174>)
 800455c:	715a      	strb	r2, [r3, #5]

			// read the sensitivity settings for the signal from another robot
			// CH0
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_ANOTHER_ROBOT_CH0_ADDRESS;
 800455e:	4b22      	ldr	r3, [pc, #136]	; (80045e8 <SensitivityInitialization+0x178>)
 8004560:	22e8      	movs	r2, #232	; 0xe8
 8004562:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 8004564:	4820      	ldr	r0, [pc, #128]	; (80045e8 <SensitivityInitialization+0x178>)
 8004566:	f7fd fbf7 	bl	8001d58 <I2CEEPROMReadIS>
			SensitivityData.ucSensitivityForOtherRobot[0]	= EEpromData[0].ui32EEPROMData;
 800456a:	4b1f      	ldr	r3, [pc, #124]	; (80045e8 <SensitivityInitialization+0x178>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	b2da      	uxtb	r2, r3
 8004570:	4b1c      	ldr	r3, [pc, #112]	; (80045e4 <SensitivityInitialization+0x174>)
 8004572:	719a      	strb	r2, [r3, #6]
			// CH1
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_ANOTHER_ROBOT_CH1_ADDRESS;
 8004574:	4b1c      	ldr	r3, [pc, #112]	; (80045e8 <SensitivityInitialization+0x178>)
 8004576:	22ec      	movs	r2, #236	; 0xec
 8004578:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 800457a:	481b      	ldr	r0, [pc, #108]	; (80045e8 <SensitivityInitialization+0x178>)
 800457c:	f7fd fbec 	bl	8001d58 <I2CEEPROMReadIS>
			SensitivityData.ucSensitivityForOtherRobot[1]	= EEpromData[0].ui32EEPROMData;
 8004580:	4b19      	ldr	r3, [pc, #100]	; (80045e8 <SensitivityInitialization+0x178>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	b2da      	uxtb	r2, r3
 8004586:	4b17      	ldr	r3, [pc, #92]	; (80045e4 <SensitivityInitialization+0x174>)
 8004588:	71da      	strb	r2, [r3, #7]
			// CH2
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_ANOTHER_ROBOT_CH2_ADDRESS;
 800458a:	4b17      	ldr	r3, [pc, #92]	; (80045e8 <SensitivityInitialization+0x178>)
 800458c:	22f0      	movs	r2, #240	; 0xf0
 800458e:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 8004590:	4815      	ldr	r0, [pc, #84]	; (80045e8 <SensitivityInitialization+0x178>)
 8004592:	f7fd fbe1 	bl	8001d58 <I2CEEPROMReadIS>
			SensitivityData.ucSensitivityForOtherRobot[2]	= EEpromData[0].ui32EEPROMData;
 8004596:	4b14      	ldr	r3, [pc, #80]	; (80045e8 <SensitivityInitialization+0x178>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	b2da      	uxtb	r2, r3
 800459c:	4b11      	ldr	r3, [pc, #68]	; (80045e4 <SensitivityInitialization+0x174>)
 800459e:	721a      	strb	r2, [r3, #8]
			// CH3
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_ANOTHER_ROBOT_CH3_ADDRESS;
 80045a0:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <SensitivityInitialization+0x178>)
 80045a2:	22f4      	movs	r2, #244	; 0xf4
 80045a4:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 80045a6:	4810      	ldr	r0, [pc, #64]	; (80045e8 <SensitivityInitialization+0x178>)
 80045a8:	f7fd fbd6 	bl	8001d58 <I2CEEPROMReadIS>
			SensitivityData.ucSensitivityForOtherRobot[3]	= EEpromData[0].ui32EEPROMData;
 80045ac:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <SensitivityInitialization+0x178>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <SensitivityInitialization+0x174>)
 80045b4:	725a      	strb	r2, [r3, #9]
			// CH4
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_ANOTHER_ROBOT_CH4_ADDRESS;
 80045b6:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <SensitivityInitialization+0x178>)
 80045b8:	22f8      	movs	r2, #248	; 0xf8
 80045ba:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 80045bc:	480a      	ldr	r0, [pc, #40]	; (80045e8 <SensitivityInitialization+0x178>)
 80045be:	f7fd fbcb 	bl	8001d58 <I2CEEPROMReadIS>
			SensitivityData.ucSensitivityForOtherRobot[4]	= EEpromData[0].ui32EEPROMData;
 80045c2:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <SensitivityInitialization+0x178>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <SensitivityInitialization+0x174>)
 80045ca:	729a      	strb	r2, [r3, #10]
			// CH5
			EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_ANOTHER_ROBOT_CH5_ADDRESS;
 80045cc:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <SensitivityInitialization+0x178>)
 80045ce:	22fc      	movs	r2, #252	; 0xfc
 80045d0:	801a      	strh	r2, [r3, #0]
			I2CEEPROMReadIS(&EEpromData[0]);
 80045d2:	4805      	ldr	r0, [pc, #20]	; (80045e8 <SensitivityInitialization+0x178>)
 80045d4:	f7fd fbc0 	bl	8001d58 <I2CEEPROMReadIS>
			SensitivityData.ucSensitivityForOtherRobot[5]	= EEpromData[0].ui32EEPROMData;
 80045d8:	4b03      	ldr	r3, [pc, #12]	; (80045e8 <SensitivityInitialization+0x178>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	4b01      	ldr	r3, [pc, #4]	; (80045e4 <SensitivityInitialization+0x174>)
 80045e0:	72da      	strb	r2, [r3, #11]
			//#ifdef INTERACTION_DEBUG_MODE
			sprintf((char * )m_ucDebugBuffer,"EE_SensitivityInitialization()_R_A_retrieved\r\n");
			DebugSendData(m_ucDebugBuffer,strlen((char *)m_ucDebugBuffer));
			//return;
			#endif
			return;	// all done EERPOM values were retrieved.
 80045e2:	e09d      	b.n	8004720 <SensitivityInitialization+0x2b0>
 80045e4:	20001778 	.word	0x20001778
 80045e8:	200018d0 	.word	0x200018d0

	// 2) if not present in EEPROM => store the ROM values in the EEPROM
	// 2.a) store the values in the EEPROM
	// write the self reflection sensitivity data
	// CH0
	EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_SELF_REFLECTION_CH0_ADDRESS;
 80045ec:	4b4d      	ldr	r3, [pc, #308]	; (8004724 <SensitivityInitialization+0x2b4>)
 80045ee:	22d0      	movs	r2, #208	; 0xd0
 80045f0:	801a      	strh	r2, [r3, #0]
	EEpromData[0].ui32EEPROMData		= SensitivityData.ucSensitivityForSelfReflection[0];
 80045f2:	4b4d      	ldr	r3, [pc, #308]	; (8004728 <SensitivityInitialization+0x2b8>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	4b4a      	ldr	r3, [pc, #296]	; (8004724 <SensitivityInitialization+0x2b4>)
 80045fc:	605a      	str	r2, [r3, #4]
	I2CEEPROMWriteIS(&EEpromData[0]);
 80045fe:	4849      	ldr	r0, [pc, #292]	; (8004724 <SensitivityInitialization+0x2b4>)
 8004600:	f7fd fbd6 	bl	8001db0 <I2CEEPROMWriteIS>
	// CH1
	EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_SELF_REFLECTION_CH1_ADDRESS;
 8004604:	4b47      	ldr	r3, [pc, #284]	; (8004724 <SensitivityInitialization+0x2b4>)
 8004606:	22d4      	movs	r2, #212	; 0xd4
 8004608:	801a      	strh	r2, [r3, #0]
	EEpromData[0].ui32EEPROMData		= SensitivityData.ucSensitivityForSelfReflection[1];
 800460a:	4b47      	ldr	r3, [pc, #284]	; (8004728 <SensitivityInitialization+0x2b8>)
 800460c:	785b      	ldrb	r3, [r3, #1]
 800460e:	b2db      	uxtb	r3, r3
 8004610:	461a      	mov	r2, r3
 8004612:	4b44      	ldr	r3, [pc, #272]	; (8004724 <SensitivityInitialization+0x2b4>)
 8004614:	605a      	str	r2, [r3, #4]
	I2CEEPROMWriteIS(&EEpromData[0]);
 8004616:	4843      	ldr	r0, [pc, #268]	; (8004724 <SensitivityInitialization+0x2b4>)
 8004618:	f7fd fbca 	bl	8001db0 <I2CEEPROMWriteIS>
	// CH2
	EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_SELF_REFLECTION_CH2_ADDRESS;
 800461c:	4b41      	ldr	r3, [pc, #260]	; (8004724 <SensitivityInitialization+0x2b4>)
 800461e:	22d8      	movs	r2, #216	; 0xd8
 8004620:	801a      	strh	r2, [r3, #0]
	EEpromData[0].ui32EEPROMData		= SensitivityData.ucSensitivityForSelfReflection[2];
 8004622:	4b41      	ldr	r3, [pc, #260]	; (8004728 <SensitivityInitialization+0x2b8>)
 8004624:	789b      	ldrb	r3, [r3, #2]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	461a      	mov	r2, r3
 800462a:	4b3e      	ldr	r3, [pc, #248]	; (8004724 <SensitivityInitialization+0x2b4>)
 800462c:	605a      	str	r2, [r3, #4]
	I2CEEPROMWriteIS(&EEpromData[0]);
 800462e:	483d      	ldr	r0, [pc, #244]	; (8004724 <SensitivityInitialization+0x2b4>)
 8004630:	f7fd fbbe 	bl	8001db0 <I2CEEPROMWriteIS>
	// CH3
	EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_SELF_REFLECTION_CH3_ADDRESS;
 8004634:	4b3b      	ldr	r3, [pc, #236]	; (8004724 <SensitivityInitialization+0x2b4>)
 8004636:	22dc      	movs	r2, #220	; 0xdc
 8004638:	801a      	strh	r2, [r3, #0]
	EEpromData[0].ui32EEPROMData		= SensitivityData.ucSensitivityForSelfReflection[3];
 800463a:	4b3b      	ldr	r3, [pc, #236]	; (8004728 <SensitivityInitialization+0x2b8>)
 800463c:	78db      	ldrb	r3, [r3, #3]
 800463e:	b2db      	uxtb	r3, r3
 8004640:	461a      	mov	r2, r3
 8004642:	4b38      	ldr	r3, [pc, #224]	; (8004724 <SensitivityInitialization+0x2b4>)
 8004644:	605a      	str	r2, [r3, #4]
	I2CEEPROMWriteIS(&EEpromData[0]);
 8004646:	4837      	ldr	r0, [pc, #220]	; (8004724 <SensitivityInitialization+0x2b4>)
 8004648:	f7fd fbb2 	bl	8001db0 <I2CEEPROMWriteIS>
	// CH4
	EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_SELF_REFLECTION_CH4_ADDRESS;
 800464c:	4b35      	ldr	r3, [pc, #212]	; (8004724 <SensitivityInitialization+0x2b4>)
 800464e:	22e0      	movs	r2, #224	; 0xe0
 8004650:	801a      	strh	r2, [r3, #0]
	EEpromData[0].ui32EEPROMData		= SensitivityData.ucSensitivityForSelfReflection[4];
 8004652:	4b35      	ldr	r3, [pc, #212]	; (8004728 <SensitivityInitialization+0x2b8>)
 8004654:	791b      	ldrb	r3, [r3, #4]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	461a      	mov	r2, r3
 800465a:	4b32      	ldr	r3, [pc, #200]	; (8004724 <SensitivityInitialization+0x2b4>)
 800465c:	605a      	str	r2, [r3, #4]
	I2CEEPROMWriteIS(&EEpromData[0]);
 800465e:	4831      	ldr	r0, [pc, #196]	; (8004724 <SensitivityInitialization+0x2b4>)
 8004660:	f7fd fba6 	bl	8001db0 <I2CEEPROMWriteIS>
	// CH5
	EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_SELF_REFLECTION_CH5_ADDRESS;
 8004664:	4b2f      	ldr	r3, [pc, #188]	; (8004724 <SensitivityInitialization+0x2b4>)
 8004666:	22e4      	movs	r2, #228	; 0xe4
 8004668:	801a      	strh	r2, [r3, #0]
	EEpromData[0].ui32EEPROMData		= SensitivityData.ucSensitivityForSelfReflection[5];
 800466a:	4b2f      	ldr	r3, [pc, #188]	; (8004728 <SensitivityInitialization+0x2b8>)
 800466c:	795b      	ldrb	r3, [r3, #5]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	461a      	mov	r2, r3
 8004672:	4b2c      	ldr	r3, [pc, #176]	; (8004724 <SensitivityInitialization+0x2b4>)
 8004674:	605a      	str	r2, [r3, #4]
	I2CEEPROMWriteIS(&EEpromData[0]);
 8004676:	482b      	ldr	r0, [pc, #172]	; (8004724 <SensitivityInitialization+0x2b4>)
 8004678:	f7fd fb9a 	bl	8001db0 <I2CEEPROMWriteIS>

	// write the sensitivity data for the signal from another robot
	// CH0
	EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_ANOTHER_ROBOT_CH0_ADDRESS;
 800467c:	4b29      	ldr	r3, [pc, #164]	; (8004724 <SensitivityInitialization+0x2b4>)
 800467e:	22e8      	movs	r2, #232	; 0xe8
 8004680:	801a      	strh	r2, [r3, #0]
	EEpromData[0].ui32EEPROMData		= SensitivityData.ucSensitivityForOtherRobot[0];
 8004682:	4b29      	ldr	r3, [pc, #164]	; (8004728 <SensitivityInitialization+0x2b8>)
 8004684:	799b      	ldrb	r3, [r3, #6]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	461a      	mov	r2, r3
 800468a:	4b26      	ldr	r3, [pc, #152]	; (8004724 <SensitivityInitialization+0x2b4>)
 800468c:	605a      	str	r2, [r3, #4]
	I2CEEPROMWriteIS(&EEpromData[0]);
 800468e:	4825      	ldr	r0, [pc, #148]	; (8004724 <SensitivityInitialization+0x2b4>)
 8004690:	f7fd fb8e 	bl	8001db0 <I2CEEPROMWriteIS>
	// CH1
	EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_ANOTHER_ROBOT_CH1_ADDRESS;
 8004694:	4b23      	ldr	r3, [pc, #140]	; (8004724 <SensitivityInitialization+0x2b4>)
 8004696:	22ec      	movs	r2, #236	; 0xec
 8004698:	801a      	strh	r2, [r3, #0]
	EEpromData[0].ui32EEPROMData		= SensitivityData.ucSensitivityForOtherRobot[1];
 800469a:	4b23      	ldr	r3, [pc, #140]	; (8004728 <SensitivityInitialization+0x2b8>)
 800469c:	79db      	ldrb	r3, [r3, #7]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	4b20      	ldr	r3, [pc, #128]	; (8004724 <SensitivityInitialization+0x2b4>)
 80046a4:	605a      	str	r2, [r3, #4]
	I2CEEPROMWriteIS(&EEpromData[0]);
 80046a6:	481f      	ldr	r0, [pc, #124]	; (8004724 <SensitivityInitialization+0x2b4>)
 80046a8:	f7fd fb82 	bl	8001db0 <I2CEEPROMWriteIS>
	// CH2
	EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_ANOTHER_ROBOT_CH2_ADDRESS;
 80046ac:	4b1d      	ldr	r3, [pc, #116]	; (8004724 <SensitivityInitialization+0x2b4>)
 80046ae:	22f0      	movs	r2, #240	; 0xf0
 80046b0:	801a      	strh	r2, [r3, #0]
	EEpromData[0].ui32EEPROMData		= SensitivityData.ucSensitivityForOtherRobot[2];
 80046b2:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <SensitivityInitialization+0x2b8>)
 80046b4:	7a1b      	ldrb	r3, [r3, #8]
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	4b1a      	ldr	r3, [pc, #104]	; (8004724 <SensitivityInitialization+0x2b4>)
 80046bc:	605a      	str	r2, [r3, #4]
	I2CEEPROMWriteIS(&EEpromData[0]);
 80046be:	4819      	ldr	r0, [pc, #100]	; (8004724 <SensitivityInitialization+0x2b4>)
 80046c0:	f7fd fb76 	bl	8001db0 <I2CEEPROMWriteIS>
	// CH3
	EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_ANOTHER_ROBOT_CH3_ADDRESS;
 80046c4:	4b17      	ldr	r3, [pc, #92]	; (8004724 <SensitivityInitialization+0x2b4>)
 80046c6:	22f4      	movs	r2, #244	; 0xf4
 80046c8:	801a      	strh	r2, [r3, #0]
	EEpromData[0].ui32EEPROMData		= SensitivityData.ucSensitivityForOtherRobot[3];
 80046ca:	4b17      	ldr	r3, [pc, #92]	; (8004728 <SensitivityInitialization+0x2b8>)
 80046cc:	7a5b      	ldrb	r3, [r3, #9]
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	461a      	mov	r2, r3
 80046d2:	4b14      	ldr	r3, [pc, #80]	; (8004724 <SensitivityInitialization+0x2b4>)
 80046d4:	605a      	str	r2, [r3, #4]
	I2CEEPROMWriteIS(&EEpromData[0]);
 80046d6:	4813      	ldr	r0, [pc, #76]	; (8004724 <SensitivityInitialization+0x2b4>)
 80046d8:	f7fd fb6a 	bl	8001db0 <I2CEEPROMWriteIS>
	// CH4
	EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_ANOTHER_ROBOT_CH4_ADDRESS;
 80046dc:	4b11      	ldr	r3, [pc, #68]	; (8004724 <SensitivityInitialization+0x2b4>)
 80046de:	22f8      	movs	r2, #248	; 0xf8
 80046e0:	801a      	strh	r2, [r3, #0]
	EEpromData[0].ui32EEPROMData		= SensitivityData.ucSensitivityForOtherRobot[4];
 80046e2:	4b11      	ldr	r3, [pc, #68]	; (8004728 <SensitivityInitialization+0x2b8>)
 80046e4:	7a9b      	ldrb	r3, [r3, #10]
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	4b0e      	ldr	r3, [pc, #56]	; (8004724 <SensitivityInitialization+0x2b4>)
 80046ec:	605a      	str	r2, [r3, #4]
	I2CEEPROMWriteIS(&EEpromData[0]);
 80046ee:	480d      	ldr	r0, [pc, #52]	; (8004724 <SensitivityInitialization+0x2b4>)
 80046f0:	f7fd fb5e 	bl	8001db0 <I2CEEPROMWriteIS>
	// CH5
	EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_ANOTHER_ROBOT_CH5_ADDRESS;
 80046f4:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <SensitivityInitialization+0x2b4>)
 80046f6:	22fc      	movs	r2, #252	; 0xfc
 80046f8:	801a      	strh	r2, [r3, #0]
	EEpromData[0].ui32EEPROMData		= SensitivityData.ucSensitivityForOtherRobot[5];
 80046fa:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <SensitivityInitialization+0x2b8>)
 80046fc:	7adb      	ldrb	r3, [r3, #11]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	461a      	mov	r2, r3
 8004702:	4b08      	ldr	r3, [pc, #32]	; (8004724 <SensitivityInitialization+0x2b4>)
 8004704:	605a      	str	r2, [r3, #4]
	I2CEEPROMWriteIS(&EEpromData[0]);
 8004706:	4807      	ldr	r0, [pc, #28]	; (8004724 <SensitivityInitialization+0x2b4>)
 8004708:	f7fd fb52 	bl	8001db0 <I2CEEPROMWriteIS>

	// write the marker
	EEpromData[0].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_DATA_OK_ADDRESS;
 800470c:	4b05      	ldr	r3, [pc, #20]	; (8004724 <SensitivityInitialization+0x2b4>)
 800470e:	22cc      	movs	r2, #204	; 0xcc
 8004710:	801a      	strh	r2, [r3, #0]
	EEpromData[0].ui32EEPROMData		= EEPROM_INTERACTION_SENSITIVITY_DATA_OK_MARKER;
 8004712:	4b04      	ldr	r3, [pc, #16]	; (8004724 <SensitivityInitialization+0x2b4>)
 8004714:	22aa      	movs	r2, #170	; 0xaa
 8004716:	605a      	str	r2, [r3, #4]
	I2CEEPROMWriteIS(&EEpromData[0]);
 8004718:	4802      	ldr	r0, [pc, #8]	; (8004724 <SensitivityInitialization+0x2b4>)
 800471a:	f7fd fb49 	bl	8001db0 <I2CEEPROMWriteIS>


	return;
 800471e:	bf00      	nop
}
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	200018d0 	.word	0x200018d0
 8004728:	20001778 	.word	0x20001778
 800472c:	00000000 	.word	0x00000000

08004730 <InteractionResultCalculationMain>:
//----------------------------------------------------------------------------------
static void InteractionResultCalculationMain(void)		// used to calculate the final result of the interaction
{
 8004730:	b590      	push	{r4, r7, lr}
 8004732:	b0a3      	sub	sp, #140	; 0x8c
 8004734:	af1e      	add	r7, sp, #120	; 0x78

	// debug
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH

	// set the statistics from the raw measurements
	InteractionResultData.ui32AcquisitionDurationUS 		= MeasurementResult.ui32AcquisitionDurationUS;
 8004736:	4b80      	ldr	r3, [pc, #512]	; (8004938 <InteractionResultCalculationMain+0x208>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	4a80      	ldr	r2, [pc, #512]	; (800493c <InteractionResultCalculationMain+0x20c>)
 800473c:	6013      	str	r3, [r2, #0]
	InteractionResultData.ui32AcquisitionRoundCounter		= MeasurementResult.ui32AcquisitionRoundCounter;
 800473e:	4b7e      	ldr	r3, [pc, #504]	; (8004938 <InteractionResultCalculationMain+0x208>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	4a7e      	ldr	r2, [pc, #504]	; (800493c <InteractionResultCalculationMain+0x20c>)
 8004744:	6053      	str	r3, [r2, #4]

	// ----------- determine the corrected data ---------------
	for(i=0; i<6; i++)
 8004746:	2300      	movs	r3, #0
 8004748:	73fb      	strb	r3, [r7, #15]
 800474a:	e079      	b.n	8004840 <InteractionResultCalculationMain+0x110>
	{
		// --------- for self reflection -----------
		if( (MeasurementResult.ui32SignalFromSelfReflection[i] > BaseLineData.ui32CalculatedSelfBaseLineValues[i]) )
 800474c:	7bfb      	ldrb	r3, [r7, #15]
 800474e:	4a7a      	ldr	r2, [pc, #488]	; (8004938 <InteractionResultCalculationMain+0x208>)
 8004750:	3302      	adds	r3, #2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	7bfb      	ldrb	r3, [r7, #15]
 800475a:	4979      	ldr	r1, [pc, #484]	; (8004940 <InteractionResultCalculationMain+0x210>)
 800475c:	3314      	adds	r3, #20
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	429a      	cmp	r2, r3
 8004766:	d913      	bls.n	8004790 <InteractionResultCalculationMain+0x60>
		{	// signal is above the baseline => subtract the baseline
			InteractionResultData.ui32CorrectedDataFromSelfReflection[i] = (MeasurementResult.ui32SignalFromSelfReflection[i] - BaseLineData.ui32CalculatedSelfBaseLineValues[i]) ;
 8004768:	7bfb      	ldrb	r3, [r7, #15]
 800476a:	4a73      	ldr	r2, [pc, #460]	; (8004938 <InteractionResultCalculationMain+0x208>)
 800476c:	3302      	adds	r3, #2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	6859      	ldr	r1, [r3, #4]
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	4a72      	ldr	r2, [pc, #456]	; (8004940 <InteractionResultCalculationMain+0x210>)
 8004778:	3314      	adds	r3, #20
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	7bfb      	ldrb	r3, [r7, #15]
 8004782:	1a8a      	subs	r2, r1, r2
 8004784:	496d      	ldr	r1, [pc, #436]	; (800493c <InteractionResultCalculationMain+0x20c>)
 8004786:	3302      	adds	r3, #2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	440b      	add	r3, r1
 800478c:	605a      	str	r2, [r3, #4]
 800478e:	e006      	b.n	800479e <InteractionResultCalculationMain+0x6e>
		}
		else
		{	// below the baseline => considered 0
			InteractionResultData.ui32CorrectedDataFromSelfReflection[i] = 0;
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	4a6a      	ldr	r2, [pc, #424]	; (800493c <InteractionResultCalculationMain+0x20c>)
 8004794:	3302      	adds	r3, #2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	2200      	movs	r2, #0
 800479c:	605a      	str	r2, [r3, #4]
		}
		// -----------------------------------------

		// --------- from other robot --------------
		if( (MeasurementResult.ui32SignalFromAnotherRobot[i] > BaseLineData.ui32CalculatedBaseValuesFromOtherRobot[i]) )
 800479e:	7bfb      	ldrb	r3, [r7, #15]
 80047a0:	4a65      	ldr	r2, [pc, #404]	; (8004938 <InteractionResultCalculationMain+0x208>)
 80047a2:	3308      	adds	r3, #8
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	4964      	ldr	r1, [pc, #400]	; (8004940 <InteractionResultCalculationMain+0x210>)
 80047ae:	332e      	adds	r3, #46	; 0x2e
 80047b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d939      	bls.n	800482c <InteractionResultCalculationMain+0xfc>
		{	// above the baseline =>further correction
			if( (MeasurementResult.ui32SignalFromAnotherRobot[i] < (3*BaseLineData.ui32CalculatedBaseValuesFromOtherRobot[i])) )
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	4a5f      	ldr	r2, [pc, #380]	; (8004938 <InteractionResultCalculationMain+0x208>)
 80047bc:	3308      	adds	r3, #8
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	6859      	ldr	r1, [r3, #4]
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	4a5e      	ldr	r2, [pc, #376]	; (8004940 <InteractionResultCalculationMain+0x210>)
 80047c8:	332e      	adds	r3, #46	; 0x2e
 80047ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80047ce:	4613      	mov	r3, r2
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	4413      	add	r3, r2
 80047d4:	4299      	cmp	r1, r3
 80047d6:	d207      	bcs.n	80047e8 <InteractionResultCalculationMain+0xb8>
			{	// another robot is not even detected => interaction considered to be 0
				InteractionResultData.ui32CorrectedDataFromOtherRobot[i] = 0;
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
 80047da:	4a58      	ldr	r2, [pc, #352]	; (800493c <InteractionResultCalculationMain+0x20c>)
 80047dc:	3308      	adds	r3, #8
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	2200      	movs	r2, #0
 80047e4:	605a      	str	r2, [r3, #4]
 80047e6:	e028      	b.n	800483a <InteractionResultCalculationMain+0x10a>
			}
			else
			{
				if( (MeasurementResult.ui32SignalFromAnotherRobot[i] < INTERACTION_DETECTED_OTHER_ROBOT_THRESHOLD_VALUE) )
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	4a53      	ldr	r2, [pc, #332]	; (8004938 <InteractionResultCalculationMain+0x208>)
 80047ec:	3308      	adds	r3, #8
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80047f8:	d207      	bcs.n	800480a <InteractionResultCalculationMain+0xda>
				{	// other robot is detected but it is far away => consider interaction to be 1
					InteractionResultData.ui32CorrectedDataFromOtherRobot[i] = 5;	// weak interaction
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	4a4f      	ldr	r2, [pc, #316]	; (800493c <InteractionResultCalculationMain+0x20c>)
 80047fe:	3308      	adds	r3, #8
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	2205      	movs	r2, #5
 8004806:	605a      	str	r2, [r3, #4]
 8004808:	e017      	b.n	800483a <InteractionResultCalculationMain+0x10a>
				}
				else
				{	// other robot is detected and the signal is quite powerful
					InteractionResultData.ui32CorrectedDataFromOtherRobot[i] = 5+((MeasurementResult.ui32SignalFromAnotherRobot[i] - INTERACTION_DETECTED_OTHER_ROBOT_THRESHOLD_VALUE)>>3);	// divided by 8
 800480a:	7bfb      	ldrb	r3, [r7, #15]
 800480c:	4a4a      	ldr	r2, [pc, #296]	; (8004938 <InteractionResultCalculationMain+0x208>)
 800480e:	3308      	adds	r3, #8
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800481a:	08da      	lsrs	r2, r3, #3
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	3205      	adds	r2, #5
 8004820:	4946      	ldr	r1, [pc, #280]	; (800493c <InteractionResultCalculationMain+0x20c>)
 8004822:	3308      	adds	r3, #8
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	605a      	str	r2, [r3, #4]
 800482a:	e006      	b.n	800483a <InteractionResultCalculationMain+0x10a>
				}
			}
		}
		else
		{	// below baseline => consider 0
			InteractionResultData.ui32CorrectedDataFromOtherRobot[i] = 0;
 800482c:	7bfb      	ldrb	r3, [r7, #15]
 800482e:	4a43      	ldr	r2, [pc, #268]	; (800493c <InteractionResultCalculationMain+0x20c>)
 8004830:	3308      	adds	r3, #8
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	2200      	movs	r2, #0
 8004838:	605a      	str	r2, [r3, #4]
	for(i=0; i<6; i++)
 800483a:	7bfb      	ldrb	r3, [r7, #15]
 800483c:	3301      	adds	r3, #1
 800483e:	73fb      	strb	r3, [r7, #15]
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	2b05      	cmp	r3, #5
 8004844:	d982      	bls.n	800474c <InteractionResultCalculationMain+0x1c>
	}
	// --------------------------------------------------------


	// ------------ add the sensitivity factor ----------------
	for(i=0; i<6; i++)
 8004846:	2300      	movs	r3, #0
 8004848:	73fb      	strb	r3, [r7, #15]
 800484a:	e0d2      	b.n	80049f2 <InteractionResultCalculationMain+0x2c2>
	{
		// --------- for self reflection -----------
		dTemp  = (double)InteractionResultData.ui32CorrectedDataFromSelfReflection[i];
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	4a3b      	ldr	r2, [pc, #236]	; (800493c <InteractionResultCalculationMain+0x20c>)
 8004850:	3302      	adds	r3, #2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	4618      	mov	r0, r3
 800485a:	f7fb fe73 	bl	8000544 <__aeabi_ui2d>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	e9c7 2300 	strd	r2, r3, [r7]
		dTemp *= (double)SensitivityData.ucSensitivityForSelfReflection[i];
 8004866:	7bfb      	ldrb	r3, [r7, #15]
 8004868:	4a36      	ldr	r2, [pc, #216]	; (8004944 <InteractionResultCalculationMain+0x214>)
 800486a:	5cd3      	ldrb	r3, [r2, r3]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	4618      	mov	r0, r3
 8004870:	f7fb fe68 	bl	8000544 <__aeabi_ui2d>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	e9d7 0100 	ldrd	r0, r1, [r7]
 800487c:	f7fb fedc 	bl	8000638 <__aeabi_dmul>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	e9c7 2300 	strd	r2, r3, [r7]
		dTemp /= 50;	// 50 is the default sensitivity considered as factor of 1
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	4b2e      	ldr	r3, [pc, #184]	; (8004948 <InteractionResultCalculationMain+0x218>)
 800488e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004892:	f7fb fffb 	bl	800088c <__aeabi_ddiv>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	e9c7 2300 	strd	r2, r3, [r7]
		InteractionResultData.ui32FinalDataFromSelfReflection[i] = (uint32_t)dTemp;
 800489e:	7bfc      	ldrb	r4, [r7, #15]
 80048a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048a4:	f7fc f9a0 	bl	8000be8 <__aeabi_d2uiz>
 80048a8:	4602      	mov	r2, r0
 80048aa:	4924      	ldr	r1, [pc, #144]	; (800493c <InteractionResultCalculationMain+0x20c>)
 80048ac:	f104 030e 	add.w	r3, r4, #14
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	605a      	str	r2, [r3, #4]
		if(dTemp > 255) dTemp = 255;
 80048b6:	a31e      	add	r3, pc, #120	; (adr r3, 8004930 <InteractionResultCalculationMain+0x200>)
 80048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048c0:	f7fc f94a 	bl	8000b58 <__aeabi_dcmpgt>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d004      	beq.n	80048d4 <InteractionResultCalculationMain+0x1a4>
 80048ca:	a319      	add	r3, pc, #100	; (adr r3, 8004930 <InteractionResultCalculationMain+0x200>)
 80048cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d0:	e9c7 2300 	strd	r2, r3, [r7]
		InteractionResultData.ucFinalDataFromSelfReflection[i] = (uint8_t)dTemp;
 80048d4:	7bfc      	ldrb	r4, [r7, #15]
 80048d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048da:	f7fc f985 	bl	8000be8 <__aeabi_d2uiz>
 80048de:	4603      	mov	r3, r0
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	4b16      	ldr	r3, [pc, #88]	; (800493c <InteractionResultCalculationMain+0x20c>)
 80048e4:	4423      	add	r3, r4
 80048e6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		// -----------------------------------------


		// --------- from other robot --------------
		if( (InteractionResultData.ui32CorrectedDataFromOtherRobot[i] < 2) )
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	4a13      	ldr	r2, [pc, #76]	; (800493c <InteractionResultCalculationMain+0x20c>)
 80048ee:	3308      	adds	r3, #8
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d828      	bhi.n	800494c <InteractionResultCalculationMain+0x21c>
		{	// the special cases
			InteractionResultData.ui32FinalDataFromOtherRobot[i] = InteractionResultData.ui32CorrectedDataFromOtherRobot[i];
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
 80048fc:	7bf9      	ldrb	r1, [r7, #15]
 80048fe:	4a0f      	ldr	r2, [pc, #60]	; (800493c <InteractionResultCalculationMain+0x20c>)
 8004900:	3308      	adds	r3, #8
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	480c      	ldr	r0, [pc, #48]	; (800493c <InteractionResultCalculationMain+0x20c>)
 800490a:	f101 0314 	add.w	r3, r1, #20
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4403      	add	r3, r0
 8004912:	605a      	str	r2, [r3, #4]
			InteractionResultData.ucFinalDataFromOtherRobot[i]   = (uint8_t)InteractionResultData.ui32CorrectedDataFromOtherRobot[i];
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	4a09      	ldr	r2, [pc, #36]	; (800493c <InteractionResultCalculationMain+0x20c>)
 8004918:	3308      	adds	r3, #8
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	b2d1      	uxtb	r1, r2
 8004924:	4a05      	ldr	r2, [pc, #20]	; (800493c <InteractionResultCalculationMain+0x20c>)
 8004926:	4413      	add	r3, r2
 8004928:	460a      	mov	r2, r1
 800492a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 800492e:	e05d      	b.n	80049ec <InteractionResultCalculationMain+0x2bc>
 8004930:	00000000 	.word	0x00000000
 8004934:	406fe000 	.word	0x406fe000
 8004938:	20000a64 	.word	0x20000a64
 800493c:	20001784 	.word	0x20001784
 8004940:	200016a8 	.word	0x200016a8
 8004944:	20001778 	.word	0x20001778
 8004948:	40490000 	.word	0x40490000
		}
		else
		{	// strong signal situation
			dTemp  = (double)InteractionResultData.ui32CorrectedDataFromOtherRobot[i];
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	4a3a      	ldr	r2, [pc, #232]	; (8004a38 <InteractionResultCalculationMain+0x308>)
 8004950:	3308      	adds	r3, #8
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	4618      	mov	r0, r3
 800495a:	f7fb fdf3 	bl	8000544 <__aeabi_ui2d>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	e9c7 2300 	strd	r2, r3, [r7]
			dTemp *= (double)SensitivityData.ucSensitivityForOtherRobot[i];
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	4a34      	ldr	r2, [pc, #208]	; (8004a3c <InteractionResultCalculationMain+0x30c>)
 800496a:	4413      	add	r3, r2
 800496c:	799b      	ldrb	r3, [r3, #6]
 800496e:	b2db      	uxtb	r3, r3
 8004970:	4618      	mov	r0, r3
 8004972:	f7fb fde7 	bl	8000544 <__aeabi_ui2d>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800497e:	f7fb fe5b 	bl	8000638 <__aeabi_dmul>
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	e9c7 2300 	strd	r2, r3, [r7]
			dTemp /= 50;	// default division
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	4b2c      	ldr	r3, [pc, #176]	; (8004a40 <InteractionResultCalculationMain+0x310>)
 8004990:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004994:	f7fb ff7a 	bl	800088c <__aeabi_ddiv>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	e9c7 2300 	strd	r2, r3, [r7]
			InteractionResultData.ui32FinalDataFromOtherRobot[i] = (uint32_t)dTemp;
 80049a0:	7bfc      	ldrb	r4, [r7, #15]
 80049a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049a6:	f7fc f91f 	bl	8000be8 <__aeabi_d2uiz>
 80049aa:	4602      	mov	r2, r0
 80049ac:	4922      	ldr	r1, [pc, #136]	; (8004a38 <InteractionResultCalculationMain+0x308>)
 80049ae:	f104 0314 	add.w	r3, r4, #20
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	440b      	add	r3, r1
 80049b6:	605a      	str	r2, [r3, #4]
			if(dTemp > 255) dTemp = 255;
 80049b8:	a31d      	add	r3, pc, #116	; (adr r3, 8004a30 <InteractionResultCalculationMain+0x300>)
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049c2:	f7fc f8c9 	bl	8000b58 <__aeabi_dcmpgt>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d004      	beq.n	80049d6 <InteractionResultCalculationMain+0x2a6>
 80049cc:	a318      	add	r3, pc, #96	; (adr r3, 8004a30 <InteractionResultCalculationMain+0x300>)
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	e9c7 2300 	strd	r2, r3, [r7]
			InteractionResultData.ucFinalDataFromOtherRobot[i] = (uint8_t)dTemp;
 80049d6:	7bfc      	ldrb	r4, [r7, #15]
 80049d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049dc:	f7fc f904 	bl	8000be8 <__aeabi_d2uiz>
 80049e0:	4603      	mov	r3, r0
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	4b14      	ldr	r3, [pc, #80]	; (8004a38 <InteractionResultCalculationMain+0x308>)
 80049e6:	4423      	add	r3, r4
 80049e8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	for(i=0; i<6; i++)
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	3301      	adds	r3, #1
 80049f0:	73fb      	strb	r3, [r7, #15]
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	2b05      	cmp	r3, #5
 80049f6:	f67f af29 	bls.w	800484c <InteractionResultCalculationMain+0x11c>
	}
	// --------------------------------------------------------


	// indicate that new result is available
	InteractionResultData.ucNewInteractionResultAvailable 	= 1;
 80049fa:	4b0f      	ldr	r3, [pc, #60]	; (8004a38 <InteractionResultCalculationMain+0x308>)
 80049fc:	2201      	movs	r2, #1
 80049fe:	721a      	strb	r2, [r3, #8]
	// call the callback function
	InteractionNewResultAvailableCallback(InteractionResultData, IDPatternResultData);
 8004a00:	4c0d      	ldr	r4, [pc, #52]	; (8004a38 <InteractionResultCalculationMain+0x308>)
 8004a02:	4a10      	ldr	r2, [pc, #64]	; (8004a44 <InteractionResultCalculationMain+0x314>)
 8004a04:	ab1a      	add	r3, sp, #104	; 0x68
 8004a06:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004a0c:	4668      	mov	r0, sp
 8004a0e:	f104 0310 	add.w	r3, r4, #16
 8004a12:	2268      	movs	r2, #104	; 0x68
 8004a14:	4619      	mov	r1, r3
 8004a16:	f00e fb8e 	bl	8013136 <memcpy>
 8004a1a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004a1e:	f7fc fb15 	bl	800104c <InteractionNewResultAvailableCallback>

	// debug
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//  debug on PC13 LOW

	return;
 8004a22:	bf00      	nop
}
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd90      	pop	{r4, r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	f3af 8000 	nop.w
 8004a30:	00000000 	.word	0x00000000
 8004a34:	406fe000 	.word	0x406fe000
 8004a38:	20001784 	.word	0x20001784
 8004a3c:	20001778 	.word	0x20001778
 8004a40:	40490000 	.word	0x40490000
 8004a44:	200018b4 	.word	0x200018b4

08004a48 <EEPROMInitialization>:
//----------------------------------------------------------------------------------
// EEPROM
//static volatile EEPROMDataTypeDef			EEpromData[32];		/* data structure to hold EEPROM address and data pairs */
//static volatile EEPROMDataListTypeDef		EEpromDataList;		/* the data list that is used to operate the EEPROM in the main loop mode */
static void EEPROMInitialization(void)					// performs basic initialization settings with the EEPROM
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
	EEpromDataList.pEEDTList = EEpromData;	// link the data filed to the list structure for main loop EEPROM activities.
 8004a4c:	4b03      	ldr	r3, [pc, #12]	; (8004a5c <EEPROMInitialization+0x14>)
 8004a4e:	4a04      	ldr	r2, [pc, #16]	; (8004a60 <EEPROMInitialization+0x18>)
 8004a50:	605a      	str	r2, [r3, #4]
					// for the initialization section only the EEpromData[] buffer is used
	return;
 8004a52:	bf00      	nop
}
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	200019d0 	.word	0x200019d0
 8004a60:	200018d0 	.word	0x200018d0

08004a64 <EEPROMMainLoop>:
//----------------------------------------------------------------------------------
static void EEPROMMainLoop(void)						// called from the main loop to handle EERPOM activities (mainly storing new-baseline values or new-sensitivity values)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
	uint8_t ucLength, ucChannel;
	//-----------------------------

	if( (I2CEEPROMChekListStatusML() != LIST_IS_EMPTY) )	return;		// the list is not empty, must wait to empty up before launching a new read or write operation
 8004a6a:	f7fd f9cd 	bl	8001e08 <I2CEEPROMChekListStatusML>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f040 8305 	bne.w	8005080 <EEPROMMainLoop+0x61c>
	// list is empty => can launch another operation

	// --------- check if a new baseline calibration is available -------------
	if(m_ucEEPROMNewBaseLineDataIsAvailable)
 8004a76:	4ba2      	ldr	r3, [pc, #648]	; (8004d00 <EEPROMMainLoop+0x29c>)
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 8147 	beq.w	8004d10 <EEPROMMainLoop+0x2ac>
	{
		m_ucEEPROMNewBaseLineDataIsAvailable = 0;	// data stored into the new list and prepared to be written into the EEPROM
 8004a82:	4b9f      	ldr	r3, [pc, #636]	; (8004d00 <EEPROMMainLoop+0x29c>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]
		// ------ build up the list to be sent to the EERPOM --------
		ucLength = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	71fb      	strb	r3, [r7, #7]
		// self reflection sensitivity
		// CH0
		ucChannel = 0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	71bb      	strb	r3, [r7, #6]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_SELF_REFLECTION_CH0_ADDRESS;
 8004a90:	4b9c      	ldr	r3, [pc, #624]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	79fb      	ldrb	r3, [r7, #7]
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	4413      	add	r3, r2
 8004a9a:	228c      	movs	r2, #140	; 0x8c
 8004a9c:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= BaseLineData.ui32CalculatedSelfBaseLineValues[ucChannel];
 8004a9e:	79bb      	ldrb	r3, [r7, #6]
 8004aa0:	4a98      	ldr	r2, [pc, #608]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004aa2:	6851      	ldr	r1, [r2, #4]
 8004aa4:	79fa      	ldrb	r2, [r7, #7]
 8004aa6:	00d2      	lsls	r2, r2, #3
 8004aa8:	440a      	add	r2, r1
 8004aaa:	4997      	ldr	r1, [pc, #604]	; (8004d08 <EEPROMMainLoop+0x2a4>)
 8004aac:	3314      	adds	r3, #20
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	6053      	str	r3, [r2, #4]
		ucLength ++;
 8004ab6:	79fb      	ldrb	r3, [r7, #7]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	71fb      	strb	r3, [r7, #7]
		// CH1
		ucChannel = 1;
 8004abc:	2301      	movs	r3, #1
 8004abe:	71bb      	strb	r3, [r7, #6]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_SELF_REFLECTION_CH1_ADDRESS;
 8004ac0:	4b90      	ldr	r3, [pc, #576]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	4413      	add	r3, r2
 8004aca:	2290      	movs	r2, #144	; 0x90
 8004acc:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= BaseLineData.ui32CalculatedSelfBaseLineValues[ucChannel];
 8004ace:	79bb      	ldrb	r3, [r7, #6]
 8004ad0:	4a8c      	ldr	r2, [pc, #560]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004ad2:	6851      	ldr	r1, [r2, #4]
 8004ad4:	79fa      	ldrb	r2, [r7, #7]
 8004ad6:	00d2      	lsls	r2, r2, #3
 8004ad8:	440a      	add	r2, r1
 8004ada:	498b      	ldr	r1, [pc, #556]	; (8004d08 <EEPROMMainLoop+0x2a4>)
 8004adc:	3314      	adds	r3, #20
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	6053      	str	r3, [r2, #4]
		ucLength ++;
 8004ae6:	79fb      	ldrb	r3, [r7, #7]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	71fb      	strb	r3, [r7, #7]
		// CH2
		ucChannel = 2;
 8004aec:	2302      	movs	r3, #2
 8004aee:	71bb      	strb	r3, [r7, #6]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_SELF_REFLECTION_CH2_ADDRESS;
 8004af0:	4b84      	ldr	r3, [pc, #528]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	79fb      	ldrb	r3, [r7, #7]
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	4413      	add	r3, r2
 8004afa:	2294      	movs	r2, #148	; 0x94
 8004afc:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= BaseLineData.ui32CalculatedSelfBaseLineValues[ucChannel];
 8004afe:	79bb      	ldrb	r3, [r7, #6]
 8004b00:	4a80      	ldr	r2, [pc, #512]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004b02:	6851      	ldr	r1, [r2, #4]
 8004b04:	79fa      	ldrb	r2, [r7, #7]
 8004b06:	00d2      	lsls	r2, r2, #3
 8004b08:	440a      	add	r2, r1
 8004b0a:	497f      	ldr	r1, [pc, #508]	; (8004d08 <EEPROMMainLoop+0x2a4>)
 8004b0c:	3314      	adds	r3, #20
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	6053      	str	r3, [r2, #4]
		ucLength ++;
 8004b16:	79fb      	ldrb	r3, [r7, #7]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	71fb      	strb	r3, [r7, #7]
		// CH3
		ucChannel = 3;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	71bb      	strb	r3, [r7, #6]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_SELF_REFLECTION_CH3_ADDRESS;
 8004b20:	4b78      	ldr	r3, [pc, #480]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	79fb      	ldrb	r3, [r7, #7]
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	4413      	add	r3, r2
 8004b2a:	2298      	movs	r2, #152	; 0x98
 8004b2c:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= BaseLineData.ui32CalculatedSelfBaseLineValues[ucChannel];
 8004b2e:	79bb      	ldrb	r3, [r7, #6]
 8004b30:	4a74      	ldr	r2, [pc, #464]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004b32:	6851      	ldr	r1, [r2, #4]
 8004b34:	79fa      	ldrb	r2, [r7, #7]
 8004b36:	00d2      	lsls	r2, r2, #3
 8004b38:	440a      	add	r2, r1
 8004b3a:	4973      	ldr	r1, [pc, #460]	; (8004d08 <EEPROMMainLoop+0x2a4>)
 8004b3c:	3314      	adds	r3, #20
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	6053      	str	r3, [r2, #4]
		ucLength ++;
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	71fb      	strb	r3, [r7, #7]
		// CH4
		ucChannel = 4;
 8004b4c:	2304      	movs	r3, #4
 8004b4e:	71bb      	strb	r3, [r7, #6]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_SELF_REFLECTION_CH4_ADDRESS;
 8004b50:	4b6c      	ldr	r3, [pc, #432]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	4413      	add	r3, r2
 8004b5a:	229c      	movs	r2, #156	; 0x9c
 8004b5c:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= BaseLineData.ui32CalculatedSelfBaseLineValues[ucChannel];
 8004b5e:	79bb      	ldrb	r3, [r7, #6]
 8004b60:	4a68      	ldr	r2, [pc, #416]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004b62:	6851      	ldr	r1, [r2, #4]
 8004b64:	79fa      	ldrb	r2, [r7, #7]
 8004b66:	00d2      	lsls	r2, r2, #3
 8004b68:	440a      	add	r2, r1
 8004b6a:	4967      	ldr	r1, [pc, #412]	; (8004d08 <EEPROMMainLoop+0x2a4>)
 8004b6c:	3314      	adds	r3, #20
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	440b      	add	r3, r1
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	6053      	str	r3, [r2, #4]
		ucLength ++;
 8004b76:	79fb      	ldrb	r3, [r7, #7]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	71fb      	strb	r3, [r7, #7]
		// CH5
		ucChannel = 5;
 8004b7c:	2305      	movs	r3, #5
 8004b7e:	71bb      	strb	r3, [r7, #6]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_SELF_REFLECTION_CH5_ADDRESS;
 8004b80:	4b60      	ldr	r3, [pc, #384]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	4413      	add	r3, r2
 8004b8a:	22a0      	movs	r2, #160	; 0xa0
 8004b8c:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= BaseLineData.ui32CalculatedSelfBaseLineValues[ucChannel];
 8004b8e:	79bb      	ldrb	r3, [r7, #6]
 8004b90:	4a5c      	ldr	r2, [pc, #368]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004b92:	6851      	ldr	r1, [r2, #4]
 8004b94:	79fa      	ldrb	r2, [r7, #7]
 8004b96:	00d2      	lsls	r2, r2, #3
 8004b98:	440a      	add	r2, r1
 8004b9a:	495b      	ldr	r1, [pc, #364]	; (8004d08 <EEPROMMainLoop+0x2a4>)
 8004b9c:	3314      	adds	r3, #20
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	6053      	str	r3, [r2, #4]
		ucLength ++;
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	71fb      	strb	r3, [r7, #7]

		// signal from another robot
		// CH0
		ucChannel = 0;
 8004bac:	2300      	movs	r3, #0
 8004bae:	71bb      	strb	r3, [r7, #6]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_ANOTHER_ROBOT_CH0_ADDRESS;
 8004bb0:	4b54      	ldr	r3, [pc, #336]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	79fb      	ldrb	r3, [r7, #7]
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	4413      	add	r3, r2
 8004bba:	22a4      	movs	r2, #164	; 0xa4
 8004bbc:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= BaseLineData.ui32CalculatedBaseValuesFromOtherRobot[ucChannel];
 8004bbe:	79ba      	ldrb	r2, [r7, #6]
 8004bc0:	4b50      	ldr	r3, [pc, #320]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004bc2:	6859      	ldr	r1, [r3, #4]
 8004bc4:	79fb      	ldrb	r3, [r7, #7]
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	440b      	add	r3, r1
 8004bca:	494f      	ldr	r1, [pc, #316]	; (8004d08 <EEPROMMainLoop+0x2a4>)
 8004bcc:	322e      	adds	r2, #46	; 0x2e
 8004bce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004bd2:	605a      	str	r2, [r3, #4]
		ucLength ++;
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	71fb      	strb	r3, [r7, #7]
		// CH1
		ucChannel = 1;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	71bb      	strb	r3, [r7, #6]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_ANOTHER_ROBOT_CH1_ADDRESS;
 8004bde:	4b49      	ldr	r3, [pc, #292]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	79fb      	ldrb	r3, [r7, #7]
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	4413      	add	r3, r2
 8004be8:	22a8      	movs	r2, #168	; 0xa8
 8004bea:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= BaseLineData.ui32CalculatedBaseValuesFromOtherRobot[ucChannel];
 8004bec:	79ba      	ldrb	r2, [r7, #6]
 8004bee:	4b45      	ldr	r3, [pc, #276]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004bf0:	6859      	ldr	r1, [r3, #4]
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	440b      	add	r3, r1
 8004bf8:	4943      	ldr	r1, [pc, #268]	; (8004d08 <EEPROMMainLoop+0x2a4>)
 8004bfa:	322e      	adds	r2, #46	; 0x2e
 8004bfc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004c00:	605a      	str	r2, [r3, #4]
		ucLength ++;
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	3301      	adds	r3, #1
 8004c06:	71fb      	strb	r3, [r7, #7]
		// CH2
		ucChannel = 2;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	71bb      	strb	r3, [r7, #6]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_ANOTHER_ROBOT_CH2_ADDRESS;
 8004c0c:	4b3d      	ldr	r3, [pc, #244]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	4413      	add	r3, r2
 8004c16:	22ac      	movs	r2, #172	; 0xac
 8004c18:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= BaseLineData.ui32CalculatedBaseValuesFromOtherRobot[ucChannel];
 8004c1a:	79ba      	ldrb	r2, [r7, #6]
 8004c1c:	4b39      	ldr	r3, [pc, #228]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004c1e:	6859      	ldr	r1, [r3, #4]
 8004c20:	79fb      	ldrb	r3, [r7, #7]
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	440b      	add	r3, r1
 8004c26:	4938      	ldr	r1, [pc, #224]	; (8004d08 <EEPROMMainLoop+0x2a4>)
 8004c28:	322e      	adds	r2, #46	; 0x2e
 8004c2a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004c2e:	605a      	str	r2, [r3, #4]
		ucLength ++;
 8004c30:	79fb      	ldrb	r3, [r7, #7]
 8004c32:	3301      	adds	r3, #1
 8004c34:	71fb      	strb	r3, [r7, #7]
		// CH3
		ucChannel = 3;
 8004c36:	2303      	movs	r3, #3
 8004c38:	71bb      	strb	r3, [r7, #6]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_ANOTHER_ROBOT_CH3_ADDRESS;
 8004c3a:	4b32      	ldr	r3, [pc, #200]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	4413      	add	r3, r2
 8004c44:	22b0      	movs	r2, #176	; 0xb0
 8004c46:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= BaseLineData.ui32CalculatedBaseValuesFromOtherRobot[ucChannel];
 8004c48:	79ba      	ldrb	r2, [r7, #6]
 8004c4a:	4b2e      	ldr	r3, [pc, #184]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004c4c:	6859      	ldr	r1, [r3, #4]
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	440b      	add	r3, r1
 8004c54:	492c      	ldr	r1, [pc, #176]	; (8004d08 <EEPROMMainLoop+0x2a4>)
 8004c56:	322e      	adds	r2, #46	; 0x2e
 8004c58:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004c5c:	605a      	str	r2, [r3, #4]
		ucLength ++;
 8004c5e:	79fb      	ldrb	r3, [r7, #7]
 8004c60:	3301      	adds	r3, #1
 8004c62:	71fb      	strb	r3, [r7, #7]
		// CH4
		ucChannel = 4;
 8004c64:	2304      	movs	r3, #4
 8004c66:	71bb      	strb	r3, [r7, #6]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_ANOTHER_ROBOT_CH4_ADDRESS;
 8004c68:	4b26      	ldr	r3, [pc, #152]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4413      	add	r3, r2
 8004c72:	22b4      	movs	r2, #180	; 0xb4
 8004c74:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= BaseLineData.ui32CalculatedBaseValuesFromOtherRobot[ucChannel];
 8004c76:	79ba      	ldrb	r2, [r7, #6]
 8004c78:	4b22      	ldr	r3, [pc, #136]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004c7a:	6859      	ldr	r1, [r3, #4]
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	440b      	add	r3, r1
 8004c82:	4921      	ldr	r1, [pc, #132]	; (8004d08 <EEPROMMainLoop+0x2a4>)
 8004c84:	322e      	adds	r2, #46	; 0x2e
 8004c86:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004c8a:	605a      	str	r2, [r3, #4]
		ucLength ++;
 8004c8c:	79fb      	ldrb	r3, [r7, #7]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	71fb      	strb	r3, [r7, #7]
		// CH5
		ucChannel = 5;
 8004c92:	2305      	movs	r3, #5
 8004c94:	71bb      	strb	r3, [r7, #6]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_ANOTHER_ROBOT_CH5_ADDRESS;
 8004c96:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	4413      	add	r3, r2
 8004ca0:	22b8      	movs	r2, #184	; 0xb8
 8004ca2:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= BaseLineData.ui32CalculatedBaseValuesFromOtherRobot[ucChannel];
 8004ca4:	79ba      	ldrb	r2, [r7, #6]
 8004ca6:	4b17      	ldr	r3, [pc, #92]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004ca8:	6859      	ldr	r1, [r3, #4]
 8004caa:	79fb      	ldrb	r3, [r7, #7]
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	440b      	add	r3, r1
 8004cb0:	4915      	ldr	r1, [pc, #84]	; (8004d08 <EEPROMMainLoop+0x2a4>)
 8004cb2:	322e      	adds	r2, #46	; 0x2e
 8004cb4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004cb8:	605a      	str	r2, [r3, #4]
		ucLength ++;
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	71fb      	strb	r3, [r7, #7]

		// add also the base line marker
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_BASE_LINE_CALIBRATION_DONE_ADDRESS;
 8004cc0:	4b10      	ldr	r3, [pc, #64]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	4413      	add	r3, r2
 8004cca:	2288      	movs	r2, #136	; 0x88
 8004ccc:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= EEPROM_INTERACTION_BASE_LINE_CALIBRATION_MARKER;
 8004cce:	4b0d      	ldr	r3, [pc, #52]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	79fb      	ldrb	r3, [r7, #7]
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f245 52aa 	movw	r2, #21930	; 0x55aa
 8004cdc:	605a      	str	r2, [r3, #4]
		ucLength ++;
 8004cde:	79fb      	ldrb	r3, [r7, #7]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	71fb      	strb	r3, [r7, #7]

		// prepare the list control parameters and call the API for EEPROM write
		//EEpromDataList.ucCallbackToCall 	= INTERACTION_SECTION;
		EEpromDataList.ucReadWrite			= EEPROM_WRITE;
 8004ce4:	4b07      	ldr	r3, [pc, #28]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	709a      	strb	r2, [r3, #2]
		EEpromDataList.ucSizeOfTheList		= ucLength;
 8004cea:	4a06      	ldr	r2, [pc, #24]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004cec:	79fb      	ldrb	r3, [r7, #7]
 8004cee:	70d3      	strb	r3, [r2, #3]
		if(I2CEEPROMReadWriteListML(EEpromDataList, &EEPROMDoneCallback) != HAL_OK)
 8004cf0:	4b04      	ldr	r3, [pc, #16]	; (8004d04 <EEPROMMainLoop+0x2a0>)
 8004cf2:	4a06      	ldr	r2, [pc, #24]	; (8004d0c <EEPROMMainLoop+0x2a8>)
 8004cf4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004cf8:	f7fd f892 	bl	8001e20 <I2CEEPROMReadWriteListML>
			sprintf((char * )m_ucDebugBuffer,"EE_EEPROMMainLoop()__1\r\n");
			DebugSendData(m_ucDebugBuffer,strlen((char *)m_ucDebugBuffer));
			#endif
		}
		// ----------------------------------------------------------
		return;
 8004cfc:	e1c3      	b.n	8005086 <EEPROMMainLoop+0x622>
 8004cfe:	bf00      	nop
 8004d00:	200018c0 	.word	0x200018c0
 8004d04:	200019d0 	.word	0x200019d0
 8004d08:	200016a8 	.word	0x200016a8
 8004d0c:	0800509d 	.word	0x0800509d
	}
	// ------------------------------------------------------------------------

	// --------------- check for new sensitivity data -------------------------
	// check if new sensitivity setting are available and waiting to be written into the EEPROM
	ucLength=0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	71fb      	strb	r3, [r7, #7]
	// self reflection sensitivity
	// CH0
	ucChannel = 0;
 8004d14:	2300      	movs	r3, #0
 8004d16:	71bb      	strb	r3, [r7, #6]
	if( (m_ucEEPROMNewSensitivityAvailable[0][ucChannel]) )
 8004d18:	79bb      	ldrb	r3, [r7, #6]
 8004d1a:	4aa3      	ldr	r2, [pc, #652]	; (8004fa8 <EEPROMMainLoop+0x544>)
 8004d1c:	5cd3      	ldrb	r3, [r2, r3]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d018      	beq.n	8004d56 <EEPROMMainLoop+0x2f2>
	{
		m_ucEEPROMNewSensitivityAvailable[0][ucChannel]				= 0;	// clear this flag
 8004d24:	79bb      	ldrb	r3, [r7, #6]
 8004d26:	4aa0      	ldr	r2, [pc, #640]	; (8004fa8 <EEPROMMainLoop+0x544>)
 8004d28:	2100      	movs	r1, #0
 8004d2a:	54d1      	strb	r1, [r2, r3]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_SELF_REFLECTION_CH0_ADDRESS;
 8004d2c:	4b9f      	ldr	r3, [pc, #636]	; (8004fac <EEPROMMainLoop+0x548>)
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	79fb      	ldrb	r3, [r7, #7]
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	4413      	add	r3, r2
 8004d36:	22d0      	movs	r2, #208	; 0xd0
 8004d38:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= SensitivityData.ucSensitivityForSelfReflection[ucChannel];
 8004d3a:	79bb      	ldrb	r3, [r7, #6]
 8004d3c:	4a9c      	ldr	r2, [pc, #624]	; (8004fb0 <EEPROMMainLoop+0x54c>)
 8004d3e:	5cd3      	ldrb	r3, [r2, r3]
 8004d40:	b2d9      	uxtb	r1, r3
 8004d42:	4b9a      	ldr	r3, [pc, #616]	; (8004fac <EEPROMMainLoop+0x548>)
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	4413      	add	r3, r2
 8004d4c:	460a      	mov	r2, r1
 8004d4e:	605a      	str	r2, [r3, #4]
		ucLength ++;
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	3301      	adds	r3, #1
 8004d54:	71fb      	strb	r3, [r7, #7]
	}
	// CH1
	ucChannel = 1;
 8004d56:	2301      	movs	r3, #1
 8004d58:	71bb      	strb	r3, [r7, #6]
	if( (m_ucEEPROMNewSensitivityAvailable[0][ucChannel]) )
 8004d5a:	79bb      	ldrb	r3, [r7, #6]
 8004d5c:	4a92      	ldr	r2, [pc, #584]	; (8004fa8 <EEPROMMainLoop+0x544>)
 8004d5e:	5cd3      	ldrb	r3, [r2, r3]
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d018      	beq.n	8004d98 <EEPROMMainLoop+0x334>
	{
		m_ucEEPROMNewSensitivityAvailable[0][ucChannel]				= 0;	// clear this flag
 8004d66:	79bb      	ldrb	r3, [r7, #6]
 8004d68:	4a8f      	ldr	r2, [pc, #572]	; (8004fa8 <EEPROMMainLoop+0x544>)
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	54d1      	strb	r1, [r2, r3]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_SELF_REFLECTION_CH1_ADDRESS;
 8004d6e:	4b8f      	ldr	r3, [pc, #572]	; (8004fac <EEPROMMainLoop+0x548>)
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	79fb      	ldrb	r3, [r7, #7]
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	4413      	add	r3, r2
 8004d78:	22d4      	movs	r2, #212	; 0xd4
 8004d7a:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= SensitivityData.ucSensitivityForSelfReflection[ucChannel];
 8004d7c:	79bb      	ldrb	r3, [r7, #6]
 8004d7e:	4a8c      	ldr	r2, [pc, #560]	; (8004fb0 <EEPROMMainLoop+0x54c>)
 8004d80:	5cd3      	ldrb	r3, [r2, r3]
 8004d82:	b2d9      	uxtb	r1, r3
 8004d84:	4b89      	ldr	r3, [pc, #548]	; (8004fac <EEPROMMainLoop+0x548>)
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4413      	add	r3, r2
 8004d8e:	460a      	mov	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
		ucLength ++;
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	3301      	adds	r3, #1
 8004d96:	71fb      	strb	r3, [r7, #7]
	}
	// CH2
	ucChannel = 2;
 8004d98:	2302      	movs	r3, #2
 8004d9a:	71bb      	strb	r3, [r7, #6]
	if( (m_ucEEPROMNewSensitivityAvailable[0][ucChannel]) )
 8004d9c:	79bb      	ldrb	r3, [r7, #6]
 8004d9e:	4a82      	ldr	r2, [pc, #520]	; (8004fa8 <EEPROMMainLoop+0x544>)
 8004da0:	5cd3      	ldrb	r3, [r2, r3]
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d018      	beq.n	8004dda <EEPROMMainLoop+0x376>
	{
		m_ucEEPROMNewSensitivityAvailable[0][ucChannel]				= 0;	// clear this flag
 8004da8:	79bb      	ldrb	r3, [r7, #6]
 8004daa:	4a7f      	ldr	r2, [pc, #508]	; (8004fa8 <EEPROMMainLoop+0x544>)
 8004dac:	2100      	movs	r1, #0
 8004dae:	54d1      	strb	r1, [r2, r3]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_SELF_REFLECTION_CH2_ADDRESS;
 8004db0:	4b7e      	ldr	r3, [pc, #504]	; (8004fac <EEPROMMainLoop+0x548>)
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	79fb      	ldrb	r3, [r7, #7]
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	4413      	add	r3, r2
 8004dba:	22d8      	movs	r2, #216	; 0xd8
 8004dbc:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= SensitivityData.ucSensitivityForSelfReflection[ucChannel];
 8004dbe:	79bb      	ldrb	r3, [r7, #6]
 8004dc0:	4a7b      	ldr	r2, [pc, #492]	; (8004fb0 <EEPROMMainLoop+0x54c>)
 8004dc2:	5cd3      	ldrb	r3, [r2, r3]
 8004dc4:	b2d9      	uxtb	r1, r3
 8004dc6:	4b79      	ldr	r3, [pc, #484]	; (8004fac <EEPROMMainLoop+0x548>)
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	4413      	add	r3, r2
 8004dd0:	460a      	mov	r2, r1
 8004dd2:	605a      	str	r2, [r3, #4]
		ucLength ++;
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	71fb      	strb	r3, [r7, #7]
	}
	// CH3
	ucChannel = 3;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	71bb      	strb	r3, [r7, #6]
	if( (m_ucEEPROMNewSensitivityAvailable[0][ucChannel]) )
 8004dde:	79bb      	ldrb	r3, [r7, #6]
 8004de0:	4a71      	ldr	r2, [pc, #452]	; (8004fa8 <EEPROMMainLoop+0x544>)
 8004de2:	5cd3      	ldrb	r3, [r2, r3]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d018      	beq.n	8004e1c <EEPROMMainLoop+0x3b8>
	{
		m_ucEEPROMNewSensitivityAvailable[0][ucChannel]				= 0;	// clear this flag
 8004dea:	79bb      	ldrb	r3, [r7, #6]
 8004dec:	4a6e      	ldr	r2, [pc, #440]	; (8004fa8 <EEPROMMainLoop+0x544>)
 8004dee:	2100      	movs	r1, #0
 8004df0:	54d1      	strb	r1, [r2, r3]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_SELF_REFLECTION_CH3_ADDRESS;
 8004df2:	4b6e      	ldr	r3, [pc, #440]	; (8004fac <EEPROMMainLoop+0x548>)
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	79fb      	ldrb	r3, [r7, #7]
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	4413      	add	r3, r2
 8004dfc:	22dc      	movs	r2, #220	; 0xdc
 8004dfe:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= SensitivityData.ucSensitivityForSelfReflection[ucChannel];
 8004e00:	79bb      	ldrb	r3, [r7, #6]
 8004e02:	4a6b      	ldr	r2, [pc, #428]	; (8004fb0 <EEPROMMainLoop+0x54c>)
 8004e04:	5cd3      	ldrb	r3, [r2, r3]
 8004e06:	b2d9      	uxtb	r1, r3
 8004e08:	4b68      	ldr	r3, [pc, #416]	; (8004fac <EEPROMMainLoop+0x548>)
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	79fb      	ldrb	r3, [r7, #7]
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	4413      	add	r3, r2
 8004e12:	460a      	mov	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]
		ucLength ++;
 8004e16:	79fb      	ldrb	r3, [r7, #7]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	71fb      	strb	r3, [r7, #7]
	}
	// CH4
	ucChannel = 4;
 8004e1c:	2304      	movs	r3, #4
 8004e1e:	71bb      	strb	r3, [r7, #6]
	if( (m_ucEEPROMNewSensitivityAvailable[0][ucChannel]) )
 8004e20:	79bb      	ldrb	r3, [r7, #6]
 8004e22:	4a61      	ldr	r2, [pc, #388]	; (8004fa8 <EEPROMMainLoop+0x544>)
 8004e24:	5cd3      	ldrb	r3, [r2, r3]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d018      	beq.n	8004e5e <EEPROMMainLoop+0x3fa>
	{
		m_ucEEPROMNewSensitivityAvailable[0][ucChannel]				= 0;	// clear this flag
 8004e2c:	79bb      	ldrb	r3, [r7, #6]
 8004e2e:	4a5e      	ldr	r2, [pc, #376]	; (8004fa8 <EEPROMMainLoop+0x544>)
 8004e30:	2100      	movs	r1, #0
 8004e32:	54d1      	strb	r1, [r2, r3]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_SELF_REFLECTION_CH4_ADDRESS;
 8004e34:	4b5d      	ldr	r3, [pc, #372]	; (8004fac <EEPROMMainLoop+0x548>)
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	22e0      	movs	r2, #224	; 0xe0
 8004e40:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= SensitivityData.ucSensitivityForSelfReflection[ucChannel];
 8004e42:	79bb      	ldrb	r3, [r7, #6]
 8004e44:	4a5a      	ldr	r2, [pc, #360]	; (8004fb0 <EEPROMMainLoop+0x54c>)
 8004e46:	5cd3      	ldrb	r3, [r2, r3]
 8004e48:	b2d9      	uxtb	r1, r3
 8004e4a:	4b58      	ldr	r3, [pc, #352]	; (8004fac <EEPROMMainLoop+0x548>)
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	4413      	add	r3, r2
 8004e54:	460a      	mov	r2, r1
 8004e56:	605a      	str	r2, [r3, #4]
		ucLength ++;
 8004e58:	79fb      	ldrb	r3, [r7, #7]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	71fb      	strb	r3, [r7, #7]
	}
	// CH5
	ucChannel = 5;
 8004e5e:	2305      	movs	r3, #5
 8004e60:	71bb      	strb	r3, [r7, #6]
	if( (m_ucEEPROMNewSensitivityAvailable[0][ucChannel]) )
 8004e62:	79bb      	ldrb	r3, [r7, #6]
 8004e64:	4a50      	ldr	r2, [pc, #320]	; (8004fa8 <EEPROMMainLoop+0x544>)
 8004e66:	5cd3      	ldrb	r3, [r2, r3]
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d018      	beq.n	8004ea0 <EEPROMMainLoop+0x43c>
	{
		m_ucEEPROMNewSensitivityAvailable[0][ucChannel]				= 0;	// clear this flag
 8004e6e:	79bb      	ldrb	r3, [r7, #6]
 8004e70:	4a4d      	ldr	r2, [pc, #308]	; (8004fa8 <EEPROMMainLoop+0x544>)
 8004e72:	2100      	movs	r1, #0
 8004e74:	54d1      	strb	r1, [r2, r3]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_SELF_REFLECTION_CH5_ADDRESS;
 8004e76:	4b4d      	ldr	r3, [pc, #308]	; (8004fac <EEPROMMainLoop+0x548>)
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	79fb      	ldrb	r3, [r7, #7]
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	4413      	add	r3, r2
 8004e80:	22e4      	movs	r2, #228	; 0xe4
 8004e82:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= SensitivityData.ucSensitivityForSelfReflection[ucChannel];
 8004e84:	79bb      	ldrb	r3, [r7, #6]
 8004e86:	4a4a      	ldr	r2, [pc, #296]	; (8004fb0 <EEPROMMainLoop+0x54c>)
 8004e88:	5cd3      	ldrb	r3, [r2, r3]
 8004e8a:	b2d9      	uxtb	r1, r3
 8004e8c:	4b47      	ldr	r3, [pc, #284]	; (8004fac <EEPROMMainLoop+0x548>)
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	79fb      	ldrb	r3, [r7, #7]
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	4413      	add	r3, r2
 8004e96:	460a      	mov	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
		ucLength ++;
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	71fb      	strb	r3, [r7, #7]
	}

	// signal from another robot
	// CH0
	ucChannel = 0;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	71bb      	strb	r3, [r7, #6]
	if( (m_ucEEPROMNewSensitivityAvailable[1][ucChannel]) )
 8004ea4:	79bb      	ldrb	r3, [r7, #6]
 8004ea6:	4a40      	ldr	r2, [pc, #256]	; (8004fa8 <EEPROMMainLoop+0x544>)
 8004ea8:	4413      	add	r3, r2
 8004eaa:	799b      	ldrb	r3, [r3, #6]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01a      	beq.n	8004ee8 <EEPROMMainLoop+0x484>
	{
		m_ucEEPROMNewSensitivityAvailable[1][ucChannel]				= 0;	// clear this flag
 8004eb2:	79bb      	ldrb	r3, [r7, #6]
 8004eb4:	4a3c      	ldr	r2, [pc, #240]	; (8004fa8 <EEPROMMainLoop+0x544>)
 8004eb6:	4413      	add	r3, r2
 8004eb8:	2200      	movs	r2, #0
 8004eba:	719a      	strb	r2, [r3, #6]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_ANOTHER_ROBOT_CH0_ADDRESS;
 8004ebc:	4b3b      	ldr	r3, [pc, #236]	; (8004fac <EEPROMMainLoop+0x548>)
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	79fb      	ldrb	r3, [r7, #7]
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	22e8      	movs	r2, #232	; 0xe8
 8004ec8:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= SensitivityData.ucSensitivityForOtherRobot[ucChannel];
 8004eca:	79bb      	ldrb	r3, [r7, #6]
 8004ecc:	4a38      	ldr	r2, [pc, #224]	; (8004fb0 <EEPROMMainLoop+0x54c>)
 8004ece:	4413      	add	r3, r2
 8004ed0:	799b      	ldrb	r3, [r3, #6]
 8004ed2:	b2d9      	uxtb	r1, r3
 8004ed4:	4b35      	ldr	r3, [pc, #212]	; (8004fac <EEPROMMainLoop+0x548>)
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	79fb      	ldrb	r3, [r7, #7]
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	4413      	add	r3, r2
 8004ede:	460a      	mov	r2, r1
 8004ee0:	605a      	str	r2, [r3, #4]
		ucLength ++;
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	71fb      	strb	r3, [r7, #7]
	}
	// CH1
	ucChannel = 1;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	71bb      	strb	r3, [r7, #6]
	if( (m_ucEEPROMNewSensitivityAvailable[1][ucChannel]) )
 8004eec:	79bb      	ldrb	r3, [r7, #6]
 8004eee:	4a2e      	ldr	r2, [pc, #184]	; (8004fa8 <EEPROMMainLoop+0x544>)
 8004ef0:	4413      	add	r3, r2
 8004ef2:	799b      	ldrb	r3, [r3, #6]
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d01a      	beq.n	8004f30 <EEPROMMainLoop+0x4cc>
	{
		m_ucEEPROMNewSensitivityAvailable[1][ucChannel]				= 0;	// clear this flag
 8004efa:	79bb      	ldrb	r3, [r7, #6]
 8004efc:	4a2a      	ldr	r2, [pc, #168]	; (8004fa8 <EEPROMMainLoop+0x544>)
 8004efe:	4413      	add	r3, r2
 8004f00:	2200      	movs	r2, #0
 8004f02:	719a      	strb	r2, [r3, #6]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_ANOTHER_ROBOT_CH1_ADDRESS;
 8004f04:	4b29      	ldr	r3, [pc, #164]	; (8004fac <EEPROMMainLoop+0x548>)
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	79fb      	ldrb	r3, [r7, #7]
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	22ec      	movs	r2, #236	; 0xec
 8004f10:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= SensitivityData.ucSensitivityForOtherRobot[ucChannel];
 8004f12:	79bb      	ldrb	r3, [r7, #6]
 8004f14:	4a26      	ldr	r2, [pc, #152]	; (8004fb0 <EEPROMMainLoop+0x54c>)
 8004f16:	4413      	add	r3, r2
 8004f18:	799b      	ldrb	r3, [r3, #6]
 8004f1a:	b2d9      	uxtb	r1, r3
 8004f1c:	4b23      	ldr	r3, [pc, #140]	; (8004fac <EEPROMMainLoop+0x548>)
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	79fb      	ldrb	r3, [r7, #7]
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	4413      	add	r3, r2
 8004f26:	460a      	mov	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
		ucLength ++;
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	71fb      	strb	r3, [r7, #7]
	}
	// CH2
	ucChannel = 2;
 8004f30:	2302      	movs	r3, #2
 8004f32:	71bb      	strb	r3, [r7, #6]
	if( (m_ucEEPROMNewSensitivityAvailable[1][ucChannel]) )
 8004f34:	79bb      	ldrb	r3, [r7, #6]
 8004f36:	4a1c      	ldr	r2, [pc, #112]	; (8004fa8 <EEPROMMainLoop+0x544>)
 8004f38:	4413      	add	r3, r2
 8004f3a:	799b      	ldrb	r3, [r3, #6]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d01a      	beq.n	8004f78 <EEPROMMainLoop+0x514>
	{
		m_ucEEPROMNewSensitivityAvailable[1][ucChannel]				= 0;	// clear this flag
 8004f42:	79bb      	ldrb	r3, [r7, #6]
 8004f44:	4a18      	ldr	r2, [pc, #96]	; (8004fa8 <EEPROMMainLoop+0x544>)
 8004f46:	4413      	add	r3, r2
 8004f48:	2200      	movs	r2, #0
 8004f4a:	719a      	strb	r2, [r3, #6]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_ANOTHER_ROBOT_CH2_ADDRESS;
 8004f4c:	4b17      	ldr	r3, [pc, #92]	; (8004fac <EEPROMMainLoop+0x548>)
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	79fb      	ldrb	r3, [r7, #7]
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	4413      	add	r3, r2
 8004f56:	22f0      	movs	r2, #240	; 0xf0
 8004f58:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= SensitivityData.ucSensitivityForOtherRobot[ucChannel];
 8004f5a:	79bb      	ldrb	r3, [r7, #6]
 8004f5c:	4a14      	ldr	r2, [pc, #80]	; (8004fb0 <EEPROMMainLoop+0x54c>)
 8004f5e:	4413      	add	r3, r2
 8004f60:	799b      	ldrb	r3, [r3, #6]
 8004f62:	b2d9      	uxtb	r1, r3
 8004f64:	4b11      	ldr	r3, [pc, #68]	; (8004fac <EEPROMMainLoop+0x548>)
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	79fb      	ldrb	r3, [r7, #7]
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	4413      	add	r3, r2
 8004f6e:	460a      	mov	r2, r1
 8004f70:	605a      	str	r2, [r3, #4]
		ucLength ++;
 8004f72:	79fb      	ldrb	r3, [r7, #7]
 8004f74:	3301      	adds	r3, #1
 8004f76:	71fb      	strb	r3, [r7, #7]
	}
	// CH3
	ucChannel = 3;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	71bb      	strb	r3, [r7, #6]
	if( (m_ucEEPROMNewSensitivityAvailable[1][ucChannel]) )
 8004f7c:	79bb      	ldrb	r3, [r7, #6]
 8004f7e:	4a0a      	ldr	r2, [pc, #40]	; (8004fa8 <EEPROMMainLoop+0x544>)
 8004f80:	4413      	add	r3, r2
 8004f82:	799b      	ldrb	r3, [r3, #6]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d022      	beq.n	8004fd0 <EEPROMMainLoop+0x56c>
	{
		m_ucEEPROMNewSensitivityAvailable[1][ucChannel]				= 0;	// clear this flag
 8004f8a:	79bb      	ldrb	r3, [r7, #6]
 8004f8c:	4a06      	ldr	r2, [pc, #24]	; (8004fa8 <EEPROMMainLoop+0x544>)
 8004f8e:	4413      	add	r3, r2
 8004f90:	2200      	movs	r2, #0
 8004f92:	719a      	strb	r2, [r3, #6]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_ANOTHER_ROBOT_CH3_ADDRESS;
 8004f94:	4b05      	ldr	r3, [pc, #20]	; (8004fac <EEPROMMainLoop+0x548>)
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	79fb      	ldrb	r3, [r7, #7]
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	4413      	add	r3, r2
 8004f9e:	22f4      	movs	r2, #244	; 0xf4
 8004fa0:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= SensitivityData.ucSensitivityForOtherRobot[ucChannel];
 8004fa2:	79bb      	ldrb	r3, [r7, #6]
 8004fa4:	e006      	b.n	8004fb4 <EEPROMMainLoop+0x550>
 8004fa6:	bf00      	nop
 8004fa8:	200018c4 	.word	0x200018c4
 8004fac:	200019d0 	.word	0x200019d0
 8004fb0:	20001778 	.word	0x20001778
 8004fb4:	4a35      	ldr	r2, [pc, #212]	; (800508c <EEPROMMainLoop+0x628>)
 8004fb6:	4413      	add	r3, r2
 8004fb8:	799b      	ldrb	r3, [r3, #6]
 8004fba:	b2d9      	uxtb	r1, r3
 8004fbc:	4b34      	ldr	r3, [pc, #208]	; (8005090 <EEPROMMainLoop+0x62c>)
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	4413      	add	r3, r2
 8004fc6:	460a      	mov	r2, r1
 8004fc8:	605a      	str	r2, [r3, #4]
		ucLength ++;
 8004fca:	79fb      	ldrb	r3, [r7, #7]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	71fb      	strb	r3, [r7, #7]
	}
	// CH4
	ucChannel = 4;
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	71bb      	strb	r3, [r7, #6]
	if( (m_ucEEPROMNewSensitivityAvailable[1][ucChannel]) )
 8004fd4:	79bb      	ldrb	r3, [r7, #6]
 8004fd6:	4a2f      	ldr	r2, [pc, #188]	; (8005094 <EEPROMMainLoop+0x630>)
 8004fd8:	4413      	add	r3, r2
 8004fda:	799b      	ldrb	r3, [r3, #6]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d01a      	beq.n	8005018 <EEPROMMainLoop+0x5b4>
	{
		m_ucEEPROMNewSensitivityAvailable[1][ucChannel]				= 0;	// clear this flag
 8004fe2:	79bb      	ldrb	r3, [r7, #6]
 8004fe4:	4a2b      	ldr	r2, [pc, #172]	; (8005094 <EEPROMMainLoop+0x630>)
 8004fe6:	4413      	add	r3, r2
 8004fe8:	2200      	movs	r2, #0
 8004fea:	719a      	strb	r2, [r3, #6]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_ANOTHER_ROBOT_CH4_ADDRESS;
 8004fec:	4b28      	ldr	r3, [pc, #160]	; (8005090 <EEPROMMainLoop+0x62c>)
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	22f8      	movs	r2, #248	; 0xf8
 8004ff8:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= SensitivityData.ucSensitivityForOtherRobot[ucChannel];
 8004ffa:	79bb      	ldrb	r3, [r7, #6]
 8004ffc:	4a23      	ldr	r2, [pc, #140]	; (800508c <EEPROMMainLoop+0x628>)
 8004ffe:	4413      	add	r3, r2
 8005000:	799b      	ldrb	r3, [r3, #6]
 8005002:	b2d9      	uxtb	r1, r3
 8005004:	4b22      	ldr	r3, [pc, #136]	; (8005090 <EEPROMMainLoop+0x62c>)
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	79fb      	ldrb	r3, [r7, #7]
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	4413      	add	r3, r2
 800500e:	460a      	mov	r2, r1
 8005010:	605a      	str	r2, [r3, #4]
		ucLength ++;
 8005012:	79fb      	ldrb	r3, [r7, #7]
 8005014:	3301      	adds	r3, #1
 8005016:	71fb      	strb	r3, [r7, #7]
	}
	// CH5
	ucChannel = 5;
 8005018:	2305      	movs	r3, #5
 800501a:	71bb      	strb	r3, [r7, #6]
	if( (m_ucEEPROMNewSensitivityAvailable[1][ucChannel]) )
 800501c:	79bb      	ldrb	r3, [r7, #6]
 800501e:	4a1d      	ldr	r2, [pc, #116]	; (8005094 <EEPROMMainLoop+0x630>)
 8005020:	4413      	add	r3, r2
 8005022:	799b      	ldrb	r3, [r3, #6]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d01a      	beq.n	8005060 <EEPROMMainLoop+0x5fc>
	{
		m_ucEEPROMNewSensitivityAvailable[1][ucChannel]				= 0;	// clear this flag
 800502a:	79bb      	ldrb	r3, [r7, #6]
 800502c:	4a19      	ldr	r2, [pc, #100]	; (8005094 <EEPROMMainLoop+0x630>)
 800502e:	4413      	add	r3, r2
 8005030:	2200      	movs	r2, #0
 8005032:	719a      	strb	r2, [r3, #6]
		EEpromDataList.pEEDTList[ucLength].ui16EEPROMAddress		= EEPROM_INTERACTION_SENSITIVITY_ANOTHER_ROBOT_CH5_ADDRESS;
 8005034:	4b16      	ldr	r3, [pc, #88]	; (8005090 <EEPROMMainLoop+0x62c>)
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	79fb      	ldrb	r3, [r7, #7]
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	4413      	add	r3, r2
 800503e:	22fc      	movs	r2, #252	; 0xfc
 8005040:	801a      	strh	r2, [r3, #0]
		EEpromDataList.pEEDTList[ucLength].ui32EEPROMData			= SensitivityData.ucSensitivityForOtherRobot[ucChannel];
 8005042:	79bb      	ldrb	r3, [r7, #6]
 8005044:	4a11      	ldr	r2, [pc, #68]	; (800508c <EEPROMMainLoop+0x628>)
 8005046:	4413      	add	r3, r2
 8005048:	799b      	ldrb	r3, [r3, #6]
 800504a:	b2d9      	uxtb	r1, r3
 800504c:	4b10      	ldr	r3, [pc, #64]	; (8005090 <EEPROMMainLoop+0x62c>)
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	4413      	add	r3, r2
 8005056:	460a      	mov	r2, r1
 8005058:	605a      	str	r2, [r3, #4]
		ucLength ++;
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	3301      	adds	r3, #1
 800505e:	71fb      	strb	r3, [r7, #7]
	}

	// sensitivity marker write

	if(ucLength)
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00e      	beq.n	8005084 <EEPROMMainLoop+0x620>
	{	// some change was detected => the list is not empty
		//EEpromDataList.ucCallbackToCall 	= INTERACTION_SECTION;
		EEpromDataList.ucReadWrite			= EEPROM_WRITE;
 8005066:	4b0a      	ldr	r3, [pc, #40]	; (8005090 <EEPROMMainLoop+0x62c>)
 8005068:	2201      	movs	r2, #1
 800506a:	709a      	strb	r2, [r3, #2]
		EEpromDataList.ucSizeOfTheList		= ucLength;
 800506c:	4a08      	ldr	r2, [pc, #32]	; (8005090 <EEPROMMainLoop+0x62c>)
 800506e:	79fb      	ldrb	r3, [r7, #7]
 8005070:	70d3      	strb	r3, [r2, #3]
		if(I2CEEPROMReadWriteListML(EEpromDataList, &EEPROMDoneCallback) != HAL_OK)
 8005072:	4b07      	ldr	r3, [pc, #28]	; (8005090 <EEPROMMainLoop+0x62c>)
 8005074:	4a08      	ldr	r2, [pc, #32]	; (8005098 <EEPROMMainLoop+0x634>)
 8005076:	e893 0003 	ldmia.w	r3, {r0, r1}
 800507a:	f7fc fed1 	bl	8001e20 <I2CEEPROMReadWriteListML>
			#endif
		}
	}
	// ------------------------------------------------------------------------

	return;
 800507e:	e001      	b.n	8005084 <EEPROMMainLoop+0x620>
	if( (I2CEEPROMChekListStatusML() != LIST_IS_EMPTY) )	return;		// the list is not empty, must wait to empty up before launching a new read or write operation
 8005080:	bf00      	nop
 8005082:	e000      	b.n	8005086 <EEPROMMainLoop+0x622>
	return;
 8005084:	bf00      	nop
}
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20001778 	.word	0x20001778
 8005090:	200019d0 	.word	0x200019d0
 8005094:	200018c4 	.word	0x200018c4
 8005098:	0800509d 	.word	0x0800509d

0800509c <EEPROMDoneCallback>:
//----------------------------------------------------------------------------------
static void EEPROMDoneCallback(EEPROMDataListTypeDef EEResultList)		// callback function to be called @ EEPORM operation completed
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	463b      	mov	r3, r7
 80050a4:	e883 0003 	stmia.w	r3, {r0, r1}
		DebugSendData(m_ucDebugBuffer,strlen((char *)m_ucDebugBuffer));
		return;
		#endif
	}

	return;
 80050a8:	bf00      	nop
}
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <IDPatternInitialization>:
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
// ID Pattern
//----------------------------------------------------------------------------------
static void IDPatternInitialization(void)				// called in the initialization section
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
	IDPatternGenerationData.ucRobotAddress = 0;
 80050b8:	4b04      	ldr	r3, [pc, #16]	; (80050cc <IDPatternInitialization+0x18>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	return;
 80050c0:	bf00      	nop
}
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	20001814 	.word	0x20001814

080050d0 <IDPatternMainLoop>:
//----------------------------------------------------------------------------------
static void IDPatternMainLoop(void)						// called in the main loop
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
	uint8_t i;

	// -------check if the address of the robot has changed -------
	if( (IDPatternGenerationData.ucRobotAddress != m_ucRobotAddress) )
 80050d6:	4b22      	ldr	r3, [pc, #136]	; (8005160 <IDPatternMainLoop+0x90>)
 80050d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	4b21      	ldr	r3, [pc, #132]	; (8005164 <IDPatternMainLoop+0x94>)
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d006      	beq.n	80050f4 <IDPatternMainLoop+0x24>
	{
		IDPatternGenerationData.ucRobotAddress = m_ucRobotAddress;
 80050e6:	4b1f      	ldr	r3, [pc, #124]	; (8005164 <IDPatternMainLoop+0x94>)
 80050e8:	781a      	ldrb	r2, [r3, #0]
 80050ea:	4b1d      	ldr	r3, [pc, #116]	; (8005160 <IDPatternMainLoop+0x90>)
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		IDPatternAddressUpdate();
 80050f0:	f000 f83e 	bl	8005170 <IDPatternAddressUpdate>
	}
	// ------------------------------------------------------------

	// ---------------- check channels status ---------------------
	for(i=0;i<6;i++)
 80050f4:	2300      	movs	r3, #0
 80050f6:	71fb      	strb	r3, [r7, #7]
 80050f8:	e02a      	b.n	8005150 <IDPatternMainLoop+0x80>
	{
		if( (IDPatternDetectionData[i].ucDecodingState == INTERACTION_ID_RX_FINALE_STAGE_VALUE) )
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	4a1a      	ldr	r2, [pc, #104]	; (8005168 <IDPatternMainLoop+0x98>)
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	4413      	add	r3, r2
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b64      	cmp	r3, #100	; 0x64
 8005108:	d113      	bne.n	8005132 <IDPatternMainLoop+0x62>
		{	// some data was received in the i channel
			IDPatternResultData.ucDetectedRobotID[i] 	= IDPatternDetectionData[i].ucReceivedData;
 800510a:	79fa      	ldrb	r2, [r7, #7]
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	4916      	ldr	r1, [pc, #88]	; (8005168 <IDPatternMainLoop+0x98>)
 8005110:	0112      	lsls	r2, r2, #4
 8005112:	440a      	add	r2, r1
 8005114:	320a      	adds	r2, #10
 8005116:	7812      	ldrb	r2, [r2, #0]
 8005118:	b2d1      	uxtb	r1, r2
 800511a:	4a14      	ldr	r2, [pc, #80]	; (800516c <IDPatternMainLoop+0x9c>)
 800511c:	4413      	add	r3, r2
 800511e:	460a      	mov	r2, r1
 8005120:	719a      	strb	r2, [r3, #6]
			IDPatternResultData.ucNewResultAvailable[i]	= 1;	// new result is available (only useful if implement som callback function for a channel state)
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	4a11      	ldr	r2, [pc, #68]	; (800516c <IDPatternMainLoop+0x9c>)
 8005126:	2101      	movs	r1, #1
 8005128:	54d1      	strb	r1, [r2, r3]
			// reset channel
			IDPatternResetChannel(i);
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	4618      	mov	r0, r3
 800512e:	f000 fa6f 	bl	8005610 <IDPatternResetChannel>
		}
		if( (IDPatternDetectionData[i].ucDecodingState == INTARACTION_ID_RX_STAGE_ERROR) )
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	4a0c      	ldr	r2, [pc, #48]	; (8005168 <IDPatternMainLoop+0x98>)
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	4413      	add	r3, r2
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2bc8      	cmp	r3, #200	; 0xc8
 8005140:	d103      	bne.n	800514a <IDPatternMainLoop+0x7a>
		{	// some error detected on the channel
			// reset channel
			IDPatternResetChannel(i);
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fa63 	bl	8005610 <IDPatternResetChannel>
	for(i=0;i<6;i++)
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	3301      	adds	r3, #1
 800514e:	71fb      	strb	r3, [r7, #7]
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	2b05      	cmp	r3, #5
 8005154:	d9d1      	bls.n	80050fa <IDPatternMainLoop+0x2a>

	// ------------------------------------------------------------
	// ------------------------------------------------------------
	// ------------------------------------------------------------

	return;
 8005156:	bf00      	nop
}
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20001814 	.word	0x20001814
 8005164:	200001f6 	.word	0x200001f6
 8005168:	20001854 	.word	0x20001854
 800516c:	200018b4 	.word	0x200018b4

08005170 <IDPatternAddressUpdate>:
//----------------------------------------------------------------------------------
static void IDPatternAddressUpdate(void)				// called to update the Pattern Generation Buffer "ucPatternBuffer" whenever the Robot's address has changed
{	// this function updates the IR Pattern Buffer "ucPatternBuffer" based on the address of the robot
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
	// -- ucRobotAddress[26], ucRobotAddress[27]	= 		// ==2 if the (ucRobotAddress & (1<<0) == LOW), ==1 if the (ucRobotAddress & (1<<0) == HIGH)
	//---------------------------------------

	uint8_t i,j;

	for(i=4,j=5; i<15; i+=2,j--)
 8005176:	2304      	movs	r3, #4
 8005178:	71fb      	strb	r3, [r7, #7]
 800517a:	2305      	movs	r3, #5
 800517c:	71bb      	strb	r3, [r7, #6]
 800517e:	e038      	b.n	80051f2 <IDPatternAddressUpdate+0x82>
	{	// 4,6,8,10,12,14 -> +12 -> 16,18,20,22,24,26

		if( (IDPatternGenerationData.ucRobotAddress & (0x01U<<j)) )
 8005180:	4b20      	ldr	r3, [pc, #128]	; (8005204 <IDPatternAddressUpdate+0x94>)
 8005182:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005186:	b2db      	uxtb	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	79bb      	ldrb	r3, [r7, #6]
 800518c:	fa22 f303 	lsr.w	r3, r2, r3
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d013      	beq.n	80051c0 <IDPatternAddressUpdate+0x50>
		{
			IDPatternGenerationData.ucPatternBuffer[i+0] 	= 2;
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	4a1a      	ldr	r2, [pc, #104]	; (8005204 <IDPatternAddressUpdate+0x94>)
 800519c:	2102      	movs	r1, #2
 800519e:	54d1      	strb	r1, [r2, r3]
			IDPatternGenerationData.ucPatternBuffer[i+1] 	= 2;
 80051a0:	79fb      	ldrb	r3, [r7, #7]
 80051a2:	3301      	adds	r3, #1
 80051a4:	4a17      	ldr	r2, [pc, #92]	; (8005204 <IDPatternAddressUpdate+0x94>)
 80051a6:	2102      	movs	r1, #2
 80051a8:	54d1      	strb	r1, [r2, r3]
			// +12
			IDPatternGenerationData.ucPatternBuffer[i+12] 	= 1;
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	330c      	adds	r3, #12
 80051ae:	4a15      	ldr	r2, [pc, #84]	; (8005204 <IDPatternAddressUpdate+0x94>)
 80051b0:	2101      	movs	r1, #1
 80051b2:	54d1      	strb	r1, [r2, r3]
			IDPatternGenerationData.ucPatternBuffer[i+12+1] = 1;
 80051b4:	79fb      	ldrb	r3, [r7, #7]
 80051b6:	330d      	adds	r3, #13
 80051b8:	4a12      	ldr	r2, [pc, #72]	; (8005204 <IDPatternAddressUpdate+0x94>)
 80051ba:	2101      	movs	r1, #1
 80051bc:	54d1      	strb	r1, [r2, r3]
 80051be:	e012      	b.n	80051e6 <IDPatternAddressUpdate+0x76>
		}
		else
		{
			IDPatternGenerationData.ucPatternBuffer[i+0] 	= 1;
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	4a10      	ldr	r2, [pc, #64]	; (8005204 <IDPatternAddressUpdate+0x94>)
 80051c4:	2101      	movs	r1, #1
 80051c6:	54d1      	strb	r1, [r2, r3]
			IDPatternGenerationData.ucPatternBuffer[i+1] 	= 1;
 80051c8:	79fb      	ldrb	r3, [r7, #7]
 80051ca:	3301      	adds	r3, #1
 80051cc:	4a0d      	ldr	r2, [pc, #52]	; (8005204 <IDPatternAddressUpdate+0x94>)
 80051ce:	2101      	movs	r1, #1
 80051d0:	54d1      	strb	r1, [r2, r3]
			// +12
			IDPatternGenerationData.ucPatternBuffer[i+12] 	= 2;
 80051d2:	79fb      	ldrb	r3, [r7, #7]
 80051d4:	330c      	adds	r3, #12
 80051d6:	4a0b      	ldr	r2, [pc, #44]	; (8005204 <IDPatternAddressUpdate+0x94>)
 80051d8:	2102      	movs	r1, #2
 80051da:	54d1      	strb	r1, [r2, r3]
			IDPatternGenerationData.ucPatternBuffer[i+12+1] = 2;
 80051dc:	79fb      	ldrb	r3, [r7, #7]
 80051de:	330d      	adds	r3, #13
 80051e0:	4a08      	ldr	r2, [pc, #32]	; (8005204 <IDPatternAddressUpdate+0x94>)
 80051e2:	2102      	movs	r1, #2
 80051e4:	54d1      	strb	r1, [r2, r3]
	for(i=4,j=5; i<15; i+=2,j--)
 80051e6:	79fb      	ldrb	r3, [r7, #7]
 80051e8:	3302      	adds	r3, #2
 80051ea:	71fb      	strb	r3, [r7, #7]
 80051ec:	79bb      	ldrb	r3, [r7, #6]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	71bb      	strb	r3, [r7, #6]
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	2b0e      	cmp	r3, #14
 80051f6:	d9c3      	bls.n	8005180 <IDPatternAddressUpdate+0x10>
		while( DebugSendData(m_ucDebugBuffer,strlen((char *)m_ucDebugBuffer)) != DEBUG_TX_OK);
	}
	#endif


	return;
 80051f8:	bf00      	nop
}
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	20001814 	.word	0x20001814

08005208 <IDPatternTimer1KHZISR>:
//----------------------------------------------------------------------------------
static void IDPatternTimer1KHZISR(void)					// called from the 1KHZ timer ISR
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
	uint8_t ucChannel;


	// ----------------- check all channels -----------------
	for(ucChannel=0; ucChannel<6; ucChannel++)
 800520e:	2300      	movs	r3, #0
 8005210:	71fb      	strb	r3, [r7, #7]
 8005212:	e05e      	b.n	80052d2 <IDPatternTimer1KHZISR+0xca>
	{
		if( (IDPatternDetectionData[ucChannel].ucTimeoutCounterMS) )
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	4a33      	ldr	r2, [pc, #204]	; (80052e4 <IDPatternTimer1KHZISR+0xdc>)
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	4413      	add	r3, r2
 800521c:	330d      	adds	r3, #13
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d01d      	beq.n	8005262 <IDPatternTimer1KHZISR+0x5a>
		{
			IDPatternDetectionData[ucChannel].ucTimeoutCounterMS --;
 8005226:	79fb      	ldrb	r3, [r7, #7]
 8005228:	492e      	ldr	r1, [pc, #184]	; (80052e4 <IDPatternTimer1KHZISR+0xdc>)
 800522a:	011a      	lsls	r2, r3, #4
 800522c:	440a      	add	r2, r1
 800522e:	320d      	adds	r2, #13
 8005230:	7812      	ldrb	r2, [r2, #0]
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	3a01      	subs	r2, #1
 8005236:	b2d1      	uxtb	r1, r2
 8005238:	4a2a      	ldr	r2, [pc, #168]	; (80052e4 <IDPatternTimer1KHZISR+0xdc>)
 800523a:	011b      	lsls	r3, r3, #4
 800523c:	4413      	add	r3, r2
 800523e:	330d      	adds	r3, #13
 8005240:	460a      	mov	r2, r1
 8005242:	701a      	strb	r2, [r3, #0]
			if( (IDPatternDetectionData[ucChannel].ucTimeoutCounterMS == 0) )
 8005244:	79fb      	ldrb	r3, [r7, #7]
 8005246:	4a27      	ldr	r2, [pc, #156]	; (80052e4 <IDPatternTimer1KHZISR+0xdc>)
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	4413      	add	r3, r2
 800524c:	330d      	adds	r3, #13
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d105      	bne.n	8005262 <IDPatternTimer1KHZISR+0x5a>
			{	// timeout
				IDPatternDetectionData[ucChannel].ucDecodingState = INTARACTION_ID_RX_STAGE_ERROR;
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	4a22      	ldr	r2, [pc, #136]	; (80052e4 <IDPatternTimer1KHZISR+0xdc>)
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	4413      	add	r3, r2
 800525e:	22c8      	movs	r2, #200	; 0xc8
 8005260:	701a      	strb	r2, [r3, #0]
			}
		}
		if( (IDPatternDetectionData[ucChannel].ui16ExpirationCounterMS) )
 8005262:	79fb      	ldrb	r3, [r7, #7]
 8005264:	4a1f      	ldr	r2, [pc, #124]	; (80052e4 <IDPatternTimer1KHZISR+0xdc>)
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	4413      	add	r3, r2
 800526a:	330e      	adds	r3, #14
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	b29b      	uxth	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d02b      	beq.n	80052cc <IDPatternTimer1KHZISR+0xc4>
		{
			IDPatternDetectionData[ucChannel].ui16ExpirationCounterMS --;
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	491b      	ldr	r1, [pc, #108]	; (80052e4 <IDPatternTimer1KHZISR+0xdc>)
 8005278:	011a      	lsls	r2, r3, #4
 800527a:	440a      	add	r2, r1
 800527c:	320e      	adds	r2, #14
 800527e:	8812      	ldrh	r2, [r2, #0]
 8005280:	b292      	uxth	r2, r2
 8005282:	3a01      	subs	r2, #1
 8005284:	b291      	uxth	r1, r2
 8005286:	4a17      	ldr	r2, [pc, #92]	; (80052e4 <IDPatternTimer1KHZISR+0xdc>)
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	4413      	add	r3, r2
 800528c:	330e      	adds	r3, #14
 800528e:	460a      	mov	r2, r1
 8005290:	801a      	strh	r2, [r3, #0]
			if( (IDPatternDetectionData[ucChannel].ui16ExpirationCounterMS == 0) )
 8005292:	79fb      	ldrb	r3, [r7, #7]
 8005294:	4a13      	ldr	r2, [pc, #76]	; (80052e4 <IDPatternTimer1KHZISR+0xdc>)
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	4413      	add	r3, r2
 800529a:	330e      	adds	r3, #14
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d113      	bne.n	80052cc <IDPatternTimer1KHZISR+0xc4>
			{	// expired
				IDPatternDetectionData[ucChannel].ucReceivedData = 0;			// robot with ID0 dose not exist
 80052a4:	79fb      	ldrb	r3, [r7, #7]
 80052a6:	4a0f      	ldr	r2, [pc, #60]	; (80052e4 <IDPatternTimer1KHZISR+0xdc>)
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	4413      	add	r3, r2
 80052ac:	330a      	adds	r3, #10
 80052ae:	2200      	movs	r2, #0
 80052b0:	701a      	strb	r2, [r3, #0]
				IDPatternDetectionData[ucChannel].ucReceivedInvertedData = 0;
 80052b2:	79fb      	ldrb	r3, [r7, #7]
 80052b4:	4a0b      	ldr	r2, [pc, #44]	; (80052e4 <IDPatternTimer1KHZISR+0xdc>)
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	4413      	add	r3, r2
 80052ba:	330b      	adds	r3, #11
 80052bc:	2200      	movs	r2, #0
 80052be:	701a      	strb	r2, [r3, #0]
				IDPatternDetectionData[ucChannel].ucDecodingState = INTERACTION_ID_RX_FINALE_STAGE_VALUE;	// is the same as a new result is representing that the robot is no longer present
 80052c0:	79fb      	ldrb	r3, [r7, #7]
 80052c2:	4a08      	ldr	r2, [pc, #32]	; (80052e4 <IDPatternTimer1KHZISR+0xdc>)
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	4413      	add	r3, r2
 80052c8:	2264      	movs	r2, #100	; 0x64
 80052ca:	701a      	strb	r2, [r3, #0]
	for(ucChannel=0; ucChannel<6; ucChannel++)
 80052cc:	79fb      	ldrb	r3, [r7, #7]
 80052ce:	3301      	adds	r3, #1
 80052d0:	71fb      	strb	r3, [r7, #7]
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	2b05      	cmp	r3, #5
 80052d6:	d99d      	bls.n	8005214 <IDPatternTimer1KHZISR+0xc>
	}
	// ----------------------------------------------------



	return;
 80052d8:	bf00      	nop
}
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	20001854 	.word	0x20001854

080052e8 <IDPatternChannelISR>:
//----------------------------------------------------------------------------------
static void IDPatternChannelISR(uint8_t ucChannel)		// used to be called from the channel line change interrupt
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	71fb      	strb	r3, [r7, #7]
	uint32_t	ui32TimeNow = __HAL_TIM_GET_COUNTER(&htim5);
 80052f2:	4b8d      	ldr	r3, [pc, #564]	; (8005528 <IDPatternChannelISR+0x240>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	60fb      	str	r3, [r7, #12]
	uint32_t	ui32Temp;
	//uint8_t		ucChannel	= 0;	// for this ISR
	uint8_t		ucRxSymbol;

	// ------ check if reception must proceed or it is in a final state -------
	if( (IDPatternDetectionData[ucChannel].ucDecodingState  == INTERACTION_ID_RX_FINALE_STAGE_VALUE) )
 80052fa:	79fb      	ldrb	r3, [r7, #7]
 80052fc:	4a8b      	ldr	r2, [pc, #556]	; (800552c <IDPatternChannelISR+0x244>)
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	4413      	add	r3, r2
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b64      	cmp	r3, #100	; 0x64
 8005308:	d107      	bne.n	800531a <IDPatternChannelISR+0x32>
	{
		IDPatternDetectionData[ucChannel].ui32LastInterruptTimeUS = ui32TimeNow;
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	4a87      	ldr	r2, [pc, #540]	; (800552c <IDPatternChannelISR+0x244>)
 800530e:	011b      	lsls	r3, r3, #4
 8005310:	4413      	add	r3, r2
 8005312:	3304      	adds	r3, #4
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	601a      	str	r2, [r3, #0]
		return;		// data was received but needs to be processed in the main loop
 8005318:	e172      	b.n	8005600 <IDPatternChannelISR+0x318>
	}
	if( (IDPatternDetectionData[ucChannel].ucDecodingState  == INTARACTION_ID_RX_STAGE_ERROR) )
 800531a:	79fb      	ldrb	r3, [r7, #7]
 800531c:	4a83      	ldr	r2, [pc, #524]	; (800552c <IDPatternChannelISR+0x244>)
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	4413      	add	r3, r2
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2bc8      	cmp	r3, #200	; 0xc8
 8005328:	d107      	bne.n	800533a <IDPatternChannelISR+0x52>
	{
		IDPatternDetectionData[ucChannel].ui32LastInterruptTimeUS = ui32TimeNow;
 800532a:	79fb      	ldrb	r3, [r7, #7]
 800532c:	4a7f      	ldr	r2, [pc, #508]	; (800552c <IDPatternChannelISR+0x244>)
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	4413      	add	r3, r2
 8005332:	3304      	adds	r3, #4
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	601a      	str	r2, [r3, #0]
		return;		// some error occurred. the channel variable structure must be cleared before another reception can begin
 8005338:	e162      	b.n	8005600 <IDPatternChannelISR+0x318>
	}
	// ------------------------------------------------------------------------

	// --------------------- detect the symbol type ---------------------------
	if( (ui32TimeNow > IDPatternDetectionData[ucChannel].ui32LastInterruptTimeUS) )		ui32Temp = (ui32TimeNow - IDPatternDetectionData[ucChannel].ui32LastInterruptTimeUS);
 800533a:	79fb      	ldrb	r3, [r7, #7]
 800533c:	4a7b      	ldr	r2, [pc, #492]	; (800552c <IDPatternChannelISR+0x244>)
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	4413      	add	r3, r2
 8005342:	3304      	adds	r3, #4
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	429a      	cmp	r2, r3
 800534a:	d909      	bls.n	8005360 <IDPatternChannelISR+0x78>
 800534c:	79fb      	ldrb	r3, [r7, #7]
 800534e:	4a77      	ldr	r2, [pc, #476]	; (800552c <IDPatternChannelISR+0x244>)
 8005350:	011b      	lsls	r3, r3, #4
 8005352:	4413      	add	r3, r2
 8005354:	3304      	adds	r3, #4
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	e009      	b.n	8005374 <IDPatternChannelISR+0x8c>
	else 																				ui32Temp = ( (0xFFFFFFFF - IDPatternDetectionData[ucChannel].ui32LastInterruptTimeUS) + ui32TimeNow );
 8005360:	79fb      	ldrb	r3, [r7, #7]
 8005362:	4a72      	ldr	r2, [pc, #456]	; (800552c <IDPatternChannelISR+0x244>)
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	4413      	add	r3, r2
 8005368:	3304      	adds	r3, #4
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	617b      	str	r3, [r7, #20]
	IDPatternDetectionData[ucChannel].ui32LastInterruptTimeUS = ui32TimeNow;
 8005374:	79fb      	ldrb	r3, [r7, #7]
 8005376:	4a6d      	ldr	r2, [pc, #436]	; (800552c <IDPatternChannelISR+0x244>)
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	4413      	add	r3, r2
 800537c:	3304      	adds	r3, #4
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	601a      	str	r2, [r3, #0]
	if( (ui32Temp > (100 - INTERACTION_ID_RX_TIME_TOLERANCE_US)) && (ui32Temp < (100 + INTERACTION_ID_RX_TIME_TOLERANCE_US)) )
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2b46      	cmp	r3, #70	; 0x46
 8005386:	d905      	bls.n	8005394 <IDPatternChannelISR+0xac>
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	2b81      	cmp	r3, #129	; 0x81
 800538c:	d802      	bhi.n	8005394 <IDPatternChannelISR+0xac>
	{	// 0 type (header) = 100uS
		ucRxSymbol = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	74fb      	strb	r3, [r7, #19]
 8005392:	e015      	b.n	80053c0 <IDPatternChannelISR+0xd8>
	}
	else if( (ui32Temp > (200 - INTERACTION_ID_RX_TIME_TOLERANCE_US)) && (ui32Temp < (200 + INTERACTION_ID_RX_TIME_TOLERANCE_US)) )
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	2baa      	cmp	r3, #170	; 0xaa
 8005398:	d905      	bls.n	80053a6 <IDPatternChannelISR+0xbe>
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2be5      	cmp	r3, #229	; 0xe5
 800539e:	d802      	bhi.n	80053a6 <IDPatternChannelISR+0xbe>
	{	// 1 type = logical LOW = 200uS
		ucRxSymbol = 1;
 80053a0:	2301      	movs	r3, #1
 80053a2:	74fb      	strb	r3, [r7, #19]
 80053a4:	e00c      	b.n	80053c0 <IDPatternChannelISR+0xd8>
	}
	else if( (ui32Temp > (300 - INTERACTION_ID_RX_TIME_TOLERANCE_US)) && (ui32Temp < (300 + INTERACTION_ID_RX_TIME_TOLERANCE_US)) )
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80053ac:	d906      	bls.n	80053bc <IDPatternChannelISR+0xd4>
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80053b4:	d202      	bcs.n	80053bc <IDPatternChannelISR+0xd4>
	{	// 2 type = logical HIGH = 300uS
		ucRxSymbol = 2;
 80053b6:	2302      	movs	r3, #2
 80053b8:	74fb      	strb	r3, [r7, #19]
 80053ba:	e001      	b.n	80053c0 <IDPatternChannelISR+0xd8>
	}
	else ucRxSymbol = 3;		// error
 80053bc:	2303      	movs	r3, #3
 80053be:	74fb      	strb	r3, [r7, #19]
	// ------------------------------------------------------------------------

	// ------------------ set the timeout watch-dog ---------------------------
	if( (IDPatternDetectionData[ucChannel].ucDecodingState > 0) )
 80053c0:	79fb      	ldrb	r3, [r7, #7]
 80053c2:	4a5a      	ldr	r2, [pc, #360]	; (800552c <IDPatternChannelISR+0x244>)
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	4413      	add	r3, r2
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d006      	beq.n	80053de <IDPatternChannelISR+0xf6>
	{	// some reception is in progress
		IDPatternDetectionData[ucChannel].ucTimeoutCounterMS = INTERACTION_ID_RX_TIMEOUT_MS;	// reset the timeout
 80053d0:	79fb      	ldrb	r3, [r7, #7]
 80053d2:	4a56      	ldr	r2, [pc, #344]	; (800552c <IDPatternChannelISR+0x244>)
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	4413      	add	r3, r2
 80053d8:	330d      	adds	r3, #13
 80053da:	220a      	movs	r2, #10
 80053dc:	701a      	strb	r2, [r3, #0]
	}
	// ------------------------------------------------------------------------

	// -------------- check for symbol error relevance ------------------------
	if( (ucRxSymbol > 2) )
 80053de:	7cfb      	ldrb	r3, [r7, #19]
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d90f      	bls.n	8005404 <IDPatternChannelISR+0x11c>
	{	// symbol error occurred
		if( (IDPatternDetectionData[ucChannel].ucDecodingState > 0) )
 80053e4:	79fb      	ldrb	r3, [r7, #7]
 80053e6:	4a51      	ldr	r2, [pc, #324]	; (800552c <IDPatternChannelISR+0x244>)
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	4413      	add	r3, r2
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 8102 	beq.w	80055fa <IDPatternChannelISR+0x312>
		{	// the symbol error occurred while the communication was in progress => communication error
			IDPatternDetectionData[ucChannel].ucDecodingState = INTARACTION_ID_RX_STAGE_ERROR;
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	4a4c      	ldr	r2, [pc, #304]	; (800552c <IDPatternChannelISR+0x244>)
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	4413      	add	r3, r2
 80053fe:	22c8      	movs	r2, #200	; 0xc8
 8005400:	701a      	strb	r2, [r3, #0]
		}
		return;
 8005402:	e0fa      	b.n	80055fa <IDPatternChannelISR+0x312>
	}
	// ------------------------------------------------------------------------

	// ----------------- check for the header section -------------------------
	if( (IDPatternDetectionData[ucChannel].ucDecodingState < 4) )
 8005404:	79fb      	ldrb	r3, [r7, #7]
 8005406:	4a49      	ldr	r2, [pc, #292]	; (800552c <IDPatternChannelISR+0x244>)
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	4413      	add	r3, r2
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b03      	cmp	r3, #3
 8005412:	d825      	bhi.n	8005460 <IDPatternChannelISR+0x178>
	{	// 0->1, 1->2, 2->3, 3->4 are the header section representing 4 consecutive 100uS symbols
		if( (ucRxSymbol == 0 ) )
 8005414:	7cfb      	ldrb	r3, [r7, #19]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d11b      	bne.n	8005452 <IDPatternChannelISR+0x16a>
		{	// correct symbol was received
			IDPatternDetectionData[ucChannel].ucDecodingState ++;
 800541a:	79fb      	ldrb	r3, [r7, #7]
 800541c:	4943      	ldr	r1, [pc, #268]	; (800552c <IDPatternChannelISR+0x244>)
 800541e:	011a      	lsls	r2, r3, #4
 8005420:	440a      	add	r2, r1
 8005422:	7812      	ldrb	r2, [r2, #0]
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	3201      	adds	r2, #1
 8005428:	b2d1      	uxtb	r1, r2
 800542a:	4a40      	ldr	r2, [pc, #256]	; (800552c <IDPatternChannelISR+0x244>)
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	4413      	add	r3, r2
 8005430:	460a      	mov	r2, r1
 8005432:	701a      	strb	r2, [r3, #0]
			IDPatternDetectionData[ucChannel].ucReferenceSymbolExist = 0;	// just make sure that once the data reception starts it will start with the start symbol
 8005434:	79fb      	ldrb	r3, [r7, #7]
 8005436:	4a3d      	ldr	r2, [pc, #244]	; (800552c <IDPatternChannelISR+0x244>)
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	4413      	add	r3, r2
 800543c:	3309      	adds	r3, #9
 800543e:	2200      	movs	r2, #0
 8005440:	701a      	strb	r2, [r3, #0]
			IDPatternDetectionData[ucChannel].ucReceptionBufferIndex = 0;	// just make sure that the buffer will be populated starting from index 0
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	4a39      	ldr	r2, [pc, #228]	; (800552c <IDPatternChannelISR+0x244>)
 8005446:	011b      	lsls	r3, r3, #4
 8005448:	4413      	add	r3, r2
 800544a:	330c      	adds	r3, #12
 800544c:	2200      	movs	r2, #0
 800544e:	701a      	strb	r2, [r3, #0]
		}
		else
		{	// incorrect symbol was received
			IDPatternDetectionData[ucChannel].ucDecodingState = 0;		// do not consider an error just searching for the start of the frame
		}
		return;
 8005450:	e0d6      	b.n	8005600 <IDPatternChannelISR+0x318>
			IDPatternDetectionData[ucChannel].ucDecodingState = 0;		// do not consider an error just searching for the start of the frame
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	4a35      	ldr	r2, [pc, #212]	; (800552c <IDPatternChannelISR+0x244>)
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	4413      	add	r3, r2
 800545a:	2200      	movs	r2, #0
 800545c:	701a      	strb	r2, [r3, #0]
		return;
 800545e:	e0cf      	b.n	8005600 <IDPatternChannelISR+0x318>
	}
	// ------------------------------------------------------------------------

	// ------------------- detect symbol type error ---------------------------
	// at this point only ucRxSymbol=1 and ucRxSymbol=2 are allowed
	if( (ucRxSymbol != 1) && (ucRxSymbol != 2) )
 8005460:	7cfb      	ldrb	r3, [r7, #19]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d009      	beq.n	800547a <IDPatternChannelISR+0x192>
 8005466:	7cfb      	ldrb	r3, [r7, #19]
 8005468:	2b02      	cmp	r3, #2
 800546a:	d006      	beq.n	800547a <IDPatternChannelISR+0x192>
	{	// symbol error
		IDPatternDetectionData[ucChannel].ucDecodingState = INTARACTION_ID_RX_STAGE_ERROR;
 800546c:	79fb      	ldrb	r3, [r7, #7]
 800546e:	4a2f      	ldr	r2, [pc, #188]	; (800552c <IDPatternChannelISR+0x244>)
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	4413      	add	r3, r2
 8005474:	22c8      	movs	r2, #200	; 0xc8
 8005476:	701a      	strb	r2, [r3, #0]
		return;
 8005478:	e0c2      	b.n	8005600 <IDPatternChannelISR+0x318>
	}
	// ------------------------------------------------------------------------

	// ------------------- this is the data section ---------------------------
	if( (IDPatternDetectionData[ucChannel].ucReferenceSymbolExist == 0) )
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	4a2b      	ldr	r2, [pc, #172]	; (800552c <IDPatternChannelISR+0x244>)
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	4413      	add	r3, r2
 8005482:	3309      	adds	r3, #9
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10e      	bne.n	80054aa <IDPatternChannelISR+0x1c2>
	{	// this is the first from the pair. so just store it
		IDPatternDetectionData[ucChannel].ucReferenceSymbol = ucRxSymbol;
 800548c:	79fb      	ldrb	r3, [r7, #7]
 800548e:	4a27      	ldr	r2, [pc, #156]	; (800552c <IDPatternChannelISR+0x244>)
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	4413      	add	r3, r2
 8005494:	3308      	adds	r3, #8
 8005496:	7cfa      	ldrb	r2, [r7, #19]
 8005498:	701a      	strb	r2, [r3, #0]
		IDPatternDetectionData[ucChannel].ucReferenceSymbolExist = 1;
 800549a:	79fb      	ldrb	r3, [r7, #7]
 800549c:	4a23      	ldr	r2, [pc, #140]	; (800552c <IDPatternChannelISR+0x244>)
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	4413      	add	r3, r2
 80054a2:	3309      	adds	r3, #9
 80054a4:	2201      	movs	r2, #1
 80054a6:	701a      	strb	r2, [r3, #0]
		else
		{	// the next symbol dose not matches the reference symbol => error
			IDPatternDetectionData[ucChannel].ucDecodingState = INTARACTION_ID_RX_STAGE_ERROR;
		}
	}
	return;
 80054a8:	e0a9      	b.n	80055fe <IDPatternChannelISR+0x316>
		IDPatternDetectionData[ucChannel].ucReferenceSymbolExist = 0;		// make sure that the next symbol is again the reference symbol
 80054aa:	79fb      	ldrb	r3, [r7, #7]
 80054ac:	4a1f      	ldr	r2, [pc, #124]	; (800552c <IDPatternChannelISR+0x244>)
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	4413      	add	r3, r2
 80054b2:	3309      	adds	r3, #9
 80054b4:	2200      	movs	r2, #0
 80054b6:	701a      	strb	r2, [r3, #0]
		if( (ucRxSymbol == IDPatternDetectionData[ucChannel].ucReferenceSymbol) )
 80054b8:	79fb      	ldrb	r3, [r7, #7]
 80054ba:	4a1c      	ldr	r2, [pc, #112]	; (800552c <IDPatternChannelISR+0x244>)
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	4413      	add	r3, r2
 80054c0:	3308      	adds	r3, #8
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	7cfa      	ldrb	r2, [r7, #19]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	f040 808f 	bne.w	80055ec <IDPatternChannelISR+0x304>
			if( (ucRxSymbol == 2) )
 80054ce:	7cfb      	ldrb	r3, [r7, #19]
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d14c      	bne.n	800556e <IDPatternChannelISR+0x286>
				if( (IDPatternDetectionData[ucChannel].ucReceptionBufferIndex < 6) )
 80054d4:	79fb      	ldrb	r3, [r7, #7]
 80054d6:	4a15      	ldr	r2, [pc, #84]	; (800552c <IDPatternChannelISR+0x244>)
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	4413      	add	r3, r2
 80054dc:	330c      	adds	r3, #12
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b05      	cmp	r3, #5
 80054e4:	d824      	bhi.n	8005530 <IDPatternChannelISR+0x248>
					IDPatternDetectionData[ucChannel].ucReceivedData 			|= (1 << (5-IDPatternDetectionData[ucChannel].ucReceptionBufferIndex) );
 80054e6:	79fb      	ldrb	r3, [r7, #7]
 80054e8:	4a10      	ldr	r2, [pc, #64]	; (800552c <IDPatternChannelISR+0x244>)
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	4413      	add	r3, r2
 80054ee:	330c      	adds	r3, #12
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	f1c3 0305 	rsb	r3, r3, #5
 80054f8:	2201      	movs	r2, #1
 80054fa:	fa02 f103 	lsl.w	r1, r2, r3
 80054fe:	79fb      	ldrb	r3, [r7, #7]
 8005500:	4a0a      	ldr	r2, [pc, #40]	; (800552c <IDPatternChannelISR+0x244>)
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	4413      	add	r3, r2
 8005506:	330a      	adds	r3, #10
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	b2db      	uxtb	r3, r3
 800550c:	b25a      	sxtb	r2, r3
 800550e:	b24b      	sxtb	r3, r1
 8005510:	4313      	orrs	r3, r2
 8005512:	b25a      	sxtb	r2, r3
 8005514:	79fb      	ldrb	r3, [r7, #7]
 8005516:	b2d1      	uxtb	r1, r2
 8005518:	4a04      	ldr	r2, [pc, #16]	; (800552c <IDPatternChannelISR+0x244>)
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	4413      	add	r3, r2
 800551e:	330a      	adds	r3, #10
 8005520:	460a      	mov	r2, r1
 8005522:	701a      	strb	r2, [r3, #0]
 8005524:	e023      	b.n	800556e <IDPatternChannelISR+0x286>
 8005526:	bf00      	nop
 8005528:	20002414 	.word	0x20002414
 800552c:	20001854 	.word	0x20001854
					IDPatternDetectionData[ucChannel].ucReceivedInvertedData 	|= (1 << (11-IDPatternDetectionData[ucChannel].ucReceptionBufferIndex) );
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	4a36      	ldr	r2, [pc, #216]	; (800560c <IDPatternChannelISR+0x324>)
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	4413      	add	r3, r2
 8005538:	330c      	adds	r3, #12
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	b2db      	uxtb	r3, r3
 800553e:	f1c3 030b 	rsb	r3, r3, #11
 8005542:	2201      	movs	r2, #1
 8005544:	fa02 f103 	lsl.w	r1, r2, r3
 8005548:	79fb      	ldrb	r3, [r7, #7]
 800554a:	4a30      	ldr	r2, [pc, #192]	; (800560c <IDPatternChannelISR+0x324>)
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	4413      	add	r3, r2
 8005550:	330b      	adds	r3, #11
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	b25a      	sxtb	r2, r3
 8005558:	b24b      	sxtb	r3, r1
 800555a:	4313      	orrs	r3, r2
 800555c:	b25a      	sxtb	r2, r3
 800555e:	79fb      	ldrb	r3, [r7, #7]
 8005560:	b2d1      	uxtb	r1, r2
 8005562:	4a2a      	ldr	r2, [pc, #168]	; (800560c <IDPatternChannelISR+0x324>)
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	4413      	add	r3, r2
 8005568:	330b      	adds	r3, #11
 800556a:	460a      	mov	r2, r1
 800556c:	701a      	strb	r2, [r3, #0]
			IDPatternDetectionData[ucChannel].ucReceptionBufferIndex ++;
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	4926      	ldr	r1, [pc, #152]	; (800560c <IDPatternChannelISR+0x324>)
 8005572:	011a      	lsls	r2, r3, #4
 8005574:	440a      	add	r2, r1
 8005576:	320c      	adds	r2, #12
 8005578:	7812      	ldrb	r2, [r2, #0]
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	3201      	adds	r2, #1
 800557e:	b2d1      	uxtb	r1, r2
 8005580:	4a22      	ldr	r2, [pc, #136]	; (800560c <IDPatternChannelISR+0x324>)
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	4413      	add	r3, r2
 8005586:	330c      	adds	r3, #12
 8005588:	460a      	mov	r2, r1
 800558a:	701a      	strb	r2, [r3, #0]
			if( (IDPatternDetectionData[ucChannel].ucReceptionBufferIndex  >= 12) )
 800558c:	79fb      	ldrb	r3, [r7, #7]
 800558e:	4a1f      	ldr	r2, [pc, #124]	; (800560c <IDPatternChannelISR+0x324>)
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	4413      	add	r3, r2
 8005594:	330c      	adds	r3, #12
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b0b      	cmp	r3, #11
 800559c:	d92f      	bls.n	80055fe <IDPatternChannelISR+0x316>
				if( ((IDPatternDetectionData[ucChannel].ucReceivedData + IDPatternDetectionData[ucChannel].ucReceivedInvertedData) == 63) )
 800559e:	79fb      	ldrb	r3, [r7, #7]
 80055a0:	4a1a      	ldr	r2, [pc, #104]	; (800560c <IDPatternChannelISR+0x324>)
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	4413      	add	r3, r2
 80055a6:	330a      	adds	r3, #10
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	4619      	mov	r1, r3
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	4a16      	ldr	r2, [pc, #88]	; (800560c <IDPatternChannelISR+0x324>)
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	4413      	add	r3, r2
 80055b6:	330b      	adds	r3, #11
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	440b      	add	r3, r1
 80055be:	2b3f      	cmp	r3, #63	; 0x3f
 80055c0:	d10d      	bne.n	80055de <IDPatternChannelISR+0x2f6>
					IDPatternDetectionData[ucChannel].ucDecodingState = INTERACTION_ID_RX_FINALE_STAGE_VALUE;	// just process the data from the buffer in the main
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	4a11      	ldr	r2, [pc, #68]	; (800560c <IDPatternChannelISR+0x324>)
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	4413      	add	r3, r2
 80055ca:	2264      	movs	r2, #100	; 0x64
 80055cc:	701a      	strb	r2, [r3, #0]
					IDPatternDetectionData[ucChannel].ui16ExpirationCounterMS = INTERACTION_ID_RX_EXPIRATION_TIMEOUT_MS;
 80055ce:	79fb      	ldrb	r3, [r7, #7]
 80055d0:	4a0e      	ldr	r2, [pc, #56]	; (800560c <IDPatternChannelISR+0x324>)
 80055d2:	011b      	lsls	r3, r3, #4
 80055d4:	4413      	add	r3, r2
 80055d6:	330e      	adds	r3, #14
 80055d8:	22c8      	movs	r2, #200	; 0xc8
 80055da:	801a      	strh	r2, [r3, #0]
				return;
 80055dc:	e010      	b.n	8005600 <IDPatternChannelISR+0x318>
					IDPatternDetectionData[ucChannel].ucDecodingState = INTARACTION_ID_RX_STAGE_ERROR;
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	4a0a      	ldr	r2, [pc, #40]	; (800560c <IDPatternChannelISR+0x324>)
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	4413      	add	r3, r2
 80055e6:	22c8      	movs	r2, #200	; 0xc8
 80055e8:	701a      	strb	r2, [r3, #0]
				return;
 80055ea:	e009      	b.n	8005600 <IDPatternChannelISR+0x318>
			IDPatternDetectionData[ucChannel].ucDecodingState = INTARACTION_ID_RX_STAGE_ERROR;
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	4a07      	ldr	r2, [pc, #28]	; (800560c <IDPatternChannelISR+0x324>)
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	4413      	add	r3, r2
 80055f4:	22c8      	movs	r2, #200	; 0xc8
 80055f6:	701a      	strb	r2, [r3, #0]
	return;
 80055f8:	e001      	b.n	80055fe <IDPatternChannelISR+0x316>
		return;
 80055fa:	bf00      	nop
 80055fc:	e000      	b.n	8005600 <IDPatternChannelISR+0x318>
	return;
 80055fe:	bf00      	nop
	// ------------------------------------------------------------------------
	return;
}
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	20001854 	.word	0x20001854

08005610 <IDPatternResetChannel>:
//----------------------------------------------------------------------------------
static void IDPatternResetChannel(uint8_t ucChannel)			// clear the relevant parameters from a channel and prepare the channel for the next reception
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	71fb      	strb	r3, [r7, #7]
	IDPatternDetectionData[ucChannel].ucDecodingState = 0;
 800561a:	79fb      	ldrb	r3, [r7, #7]
 800561c:	4a16      	ldr	r2, [pc, #88]	; (8005678 <IDPatternResetChannel+0x68>)
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	4413      	add	r3, r2
 8005622:	2200      	movs	r2, #0
 8005624:	701a      	strb	r2, [r3, #0]
	IDPatternDetectionData[ucChannel].ucReferenceSymbolExist = 0;
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	4a13      	ldr	r2, [pc, #76]	; (8005678 <IDPatternResetChannel+0x68>)
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	4413      	add	r3, r2
 800562e:	3309      	adds	r3, #9
 8005630:	2200      	movs	r2, #0
 8005632:	701a      	strb	r2, [r3, #0]
	IDPatternDetectionData[ucChannel].ucReceptionBufferIndex = 0;
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	4a10      	ldr	r2, [pc, #64]	; (8005678 <IDPatternResetChannel+0x68>)
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	4413      	add	r3, r2
 800563c:	330c      	adds	r3, #12
 800563e:	2200      	movs	r2, #0
 8005640:	701a      	strb	r2, [r3, #0]
	IDPatternDetectionData[ucChannel].ucTimeoutCounterMS = 0;
 8005642:	79fb      	ldrb	r3, [r7, #7]
 8005644:	4a0c      	ldr	r2, [pc, #48]	; (8005678 <IDPatternResetChannel+0x68>)
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	4413      	add	r3, r2
 800564a:	330d      	adds	r3, #13
 800564c:	2200      	movs	r2, #0
 800564e:	701a      	strb	r2, [r3, #0]
	IDPatternDetectionData[ucChannel].ucReceivedData = 0;
 8005650:	79fb      	ldrb	r3, [r7, #7]
 8005652:	4a09      	ldr	r2, [pc, #36]	; (8005678 <IDPatternResetChannel+0x68>)
 8005654:	011b      	lsls	r3, r3, #4
 8005656:	4413      	add	r3, r2
 8005658:	330a      	adds	r3, #10
 800565a:	2200      	movs	r2, #0
 800565c:	701a      	strb	r2, [r3, #0]
	IDPatternDetectionData[ucChannel].ucReceivedInvertedData = 0;
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	4a05      	ldr	r2, [pc, #20]	; (8005678 <IDPatternResetChannel+0x68>)
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	4413      	add	r3, r2
 8005666:	330b      	adds	r3, #11
 8005668:	2200      	movs	r2, #0
 800566a:	701a      	strb	r2, [r3, #0]

	return;
 800566c:	bf00      	nop
}
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	20001854 	.word	0x20001854

0800567c <IrTsopMessageReceivedCallback>:


// API
//==================================================================================================================== API_START
__attribute__ ((weak)) void IrTsopMessageReceivedCallback(void)			// callback type function to be implemented in the Application section
{	// called if a new message was received over the IT TSOP channel
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
	// --------------------------------------------------------------------




	return;
 8005680:	bf00      	nop
}
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <IrTsopInit>:


// SYSTEM
//==================================================================================================================== SYSTEM_START
void IrTsopInit(void)	// used to initialize the IrTsop Module. Called from main.c file @ init section
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
	// turn off the IR LED
	IrLEDOff();	// disable the IR LED
 8005690:	f000 fa8c 	bl	8005bac <IrLEDOff>

	// start the 56KHZ timer
	// HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
	if(HAL_TIM_OC_Start(&htim8,TIM_CHANNEL_3) != HAL_OK)	// start the 56KHZ signal on PC8 (TIM8_CH3)
 8005694:	2108      	movs	r1, #8
 8005696:	480e      	ldr	r0, [pc, #56]	; (80056d0 <IrTsopInit+0x44>)
 8005698:	f00a f862 	bl	800f760 <HAL_TIM_OC_Start>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d004      	beq.n	80056ac <IrTsopInit+0x20>
	{
		Error_Handler2(ERROR_CODE_IRTSOP_INIT_001);
 80056a2:	f240 2059 	movw	r0, #601	; 0x259
 80056a6:	f004 f935 	bl	8009914 <Error_Handler2>
		return;
 80056aa:	e00f      	b.n	80056cc <IrTsopInit+0x40>
	}
	// start the general purpose timer = timer5.  prescaler=(89+1), 32 bit timer. Timer5 is on APB1 => Input Clock = 45X2 = 90MHZ, => increment speed = 1MHZ = 1uS/step
	if(HAL_TIM_Base_Start(&htim5) != HAL_OK)
 80056ac:	4809      	ldr	r0, [pc, #36]	; (80056d4 <IrTsopInit+0x48>)
 80056ae:	f009 ff25 	bl	800f4fc <HAL_TIM_Base_Start>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d004      	beq.n	80056c2 <IrTsopInit+0x36>
	{
		Error_Handler2(ERROR_CODE_IRTSOP_INIT_002);
 80056b8:	f240 205a 	movw	r0, #602	; 0x25a
 80056bc:	f004 f92a 	bl	8009914 <Error_Handler2>
		return;
 80056c0:	e004      	b.n	80056cc <IrTsopInit+0x40>
	}


	// ----------- IR RX section -------------
	IrRxInit();
 80056c2:	f000 f8dd 	bl	8005880 <IrRxInit>
	// ---------------------------------------

	// ----------- IR TX section -------------
	IRTxResetTransmission();	// dummy, just kept for the logical perspective
 80056c6:	f000 fa91 	bl	8005bec <IRTxResetTransmission>
	// ---------------------------------------



	return;
 80056ca:	bf00      	nop
}
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	2000245c 	.word	0x2000245c
 80056d4:	20002414 	.word	0x20002414

080056d8 <IrTsopMainLoop>:
//----------------------------------------------------------------------------------
void IrTsopMainLoop(void)	// loop function of the IrTsop Module. Called from the main.c file @ main loop section
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0

	// skip real time
	if(m_uiIrTsopSkipRealTime)
 80056dc:	4b09      	ldr	r3, [pc, #36]	; (8005704 <IrTsopMainLoop+0x2c>)
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d006      	beq.n	80056f2 <IrTsopMainLoop+0x1a>
	{
		m_uiIrTsopSkipRealTime --;
 80056e4:	4b07      	ldr	r3, [pc, #28]	; (8005704 <IrTsopMainLoop+0x2c>)
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	4b05      	ldr	r3, [pc, #20]	; (8005704 <IrTsopMainLoop+0x2c>)
 80056ee:	801a      	strh	r2, [r3, #0]
		return;
 80056f0:	e006      	b.n	8005700 <IrTsopMainLoop+0x28>
	}
	m_uiIrTsopSkipRealTime = IRTSOP_SKIP_REAL_TIME;
 80056f2:	4b04      	ldr	r3, [pc, #16]	; (8005704 <IrTsopMainLoop+0x2c>)
 80056f4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80056f8:	801a      	strh	r2, [r3, #0]
	//--------------------------------------------------------



	// ----------- IR RX section -------------
	IrRxMainLoop();
 80056fa:	f000 f993 	bl	8005a24 <IrRxMainLoop>





	return;
 80056fe:	bf00      	nop
}
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	200019d8 	.word	0x200019d8

08005708 <IrTsopTimer1KHZISR>:
//----------------------------------------------------------------------------------
void IrTsopTimer1KHZISR(void)	// 1KHZ (1mS) timer function called from System ISR from stm32f4xx_it.c file @ SysTick Function (!!! keep as short as possible !!!)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0


	return;
 800570c:	bf00      	nop
}
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
	...

08005718 <IrTsopTimer10KHZISR>:
//----------------------------------------------------------------------------------
void IrTsopTimer10KHZISR(void)	// 10KHZ (100uS) timer function called from Tim2 ISR (!!! keep as short as possible !!!)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
	// check if an IR transmission is in progress or not
	if( (!IRTXMessage.ucTransmissionInProgress) )  return;		// no transmission is in progress
 800571c:	4b11      	ldr	r3, [pc, #68]	; (8005764 <IrTsopTimer10KHZISR+0x4c>)
 800571e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005722:	2b00      	cmp	r3, #0
 8005724:	d01c      	beq.n	8005760 <IrTsopTimer10KHZISR+0x48>

	if( (IRTXMessage.ucIRON10KHZCounter) )
 8005726:	4b0f      	ldr	r3, [pc, #60]	; (8005764 <IrTsopTimer10KHZISR+0x4c>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d008      	beq.n	8005740 <IrTsopTimer10KHZISR+0x28>
	{	// 56KHZ IR is ON
		IrLEDOn();
 800572e:	f000 fa4d 	bl	8005bcc <IrLEDOn>
		IRTXMessage.ucIRON10KHZCounter --;
 8005732:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <IrTsopTimer10KHZISR+0x4c>)
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	3b01      	subs	r3, #1
 8005738:	b2da      	uxtb	r2, r3
 800573a:	4b0a      	ldr	r3, [pc, #40]	; (8005764 <IrTsopTimer10KHZISR+0x4c>)
 800573c:	701a      	strb	r2, [r3, #0]
		return;
 800573e:	e010      	b.n	8005762 <IrTsopTimer10KHZISR+0x4a>
	}

	if( (IRTXMessage.ucIROFF10KHZCounter) )
 8005740:	4b08      	ldr	r3, [pc, #32]	; (8005764 <IrTsopTimer10KHZISR+0x4c>)
 8005742:	785b      	ldrb	r3, [r3, #1]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d008      	beq.n	800575a <IrTsopTimer10KHZISR+0x42>
	{	// IR is OFF
		IrLEDOff();
 8005748:	f000 fa30 	bl	8005bac <IrLEDOff>
		IRTXMessage.ucIROFF10KHZCounter --;
 800574c:	4b05      	ldr	r3, [pc, #20]	; (8005764 <IrTsopTimer10KHZISR+0x4c>)
 800574e:	785b      	ldrb	r3, [r3, #1]
 8005750:	3b01      	subs	r3, #1
 8005752:	b2da      	uxtb	r2, r3
 8005754:	4b03      	ldr	r3, [pc, #12]	; (8005764 <IrTsopTimer10KHZISR+0x4c>)
 8005756:	705a      	strb	r2, [r3, #1]
		return;
 8005758:	e003      	b.n	8005762 <IrTsopTimer10KHZISR+0x4a>
	}

	// last symbol was transmitted => get the next symbol
	IrTxGetNextSymbor();
 800575a:	f000 fa73 	bl	8005c44 <IrTxGetNextSymbor>

	return;
 800575e:	e000      	b.n	8005762 <IrTsopTimer10KHZISR+0x4a>
	if( (!IRTXMessage.ucTransmissionInProgress) )  return;		// no transmission is in progress
 8005760:	bf00      	nop
}
 8005762:	bd80      	pop	{r7, pc}
 8005764:	20001a58 	.word	0x20001a58

08005768 <IrTsopCallback>:
//----------------------------------------------------------------------------------
void IrTsopCallback()	// used to be called from the stm32f4xx_it.c @ every rising or falling edge of the TSOP4856
{	// __HAL_TIM_GET_COUNTER(htim5);		// general purpose timer without interrupt and with 1uS/Increment
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0


	// -------------- Measure the length of the IR pulse  ---------------
	if(HAL_GPIO_ReadPin(TSOP_GPIO_Port, TSOP_Pin) == GPIO_PIN_RESET)
 800576c:	2108      	movs	r1, #8
 800576e:	4840      	ldr	r0, [pc, #256]	; (8005870 <IrTsopCallback+0x108>)
 8005770:	f006 fb34 	bl	800bddc <HAL_GPIO_ReadPin>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d108      	bne.n	800578c <IrTsopCallback+0x24>
	{	// TSOP4856 falling edge was detected => is the START of the IR Pulse
		IRRxPulse.ui32RXPulseStart = __HAL_TIM_GET_COUNTER(&htim5);	// content of the Timer5
 800577a:	4b3e      	ldr	r3, [pc, #248]	; (8005874 <IrTsopCallback+0x10c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	4a3d      	ldr	r2, [pc, #244]	; (8005878 <IrTsopCallback+0x110>)
 8005782:	6053      	str	r3, [r2, #4]
		IRRxPulse.ucRXPulseStatus = 1;		// pulse start detected
 8005784:	4b3c      	ldr	r3, [pc, #240]	; (8005878 <IrTsopCallback+0x110>)
 8005786:	2201      	movs	r2, #1
 8005788:	701a      	strb	r2, [r3, #0]
		return;
 800578a:	e070      	b.n	800586e <IrTsopCallback+0x106>
	}
	else
	{	// TSOP4856 rising edge was detected => is the END of the IR Pulse
		if(IRRxPulse.ucRXPulseStatus != 1)	return;		// no valid pulse measurement was in progress
 800578c:	4b3a      	ldr	r3, [pc, #232]	; (8005878 <IrTsopCallback+0x110>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d16b      	bne.n	800586c <IrTsopCallback+0x104>

		// pulse measurement was in progress
		IRRxPulse.ucRXPulseStatus = 0;	// no pulse measurement is in progress from now on. Pulse start must be detected
 8005794:	4b38      	ldr	r3, [pc, #224]	; (8005878 <IrTsopCallback+0x110>)
 8005796:	2200      	movs	r2, #0
 8005798:	701a      	strb	r2, [r3, #0]
		IRRxPulse.ui32RXPulseEnd = __HAL_TIM_GET_COUNTER(&htim5);	// content of the Timer5
 800579a:	4b36      	ldr	r3, [pc, #216]	; (8005874 <IrTsopCallback+0x10c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	4a35      	ldr	r2, [pc, #212]	; (8005878 <IrTsopCallback+0x110>)
 80057a2:	6093      	str	r3, [r2, #8]
		if(IRRxPulse.ui32RXPulseEnd > IRRxPulse.ui32RXPulseStart)	IRRxPulse.ui32RXPulseDuration = (IRRxPulse.ui32RXPulseEnd - IRRxPulse.ui32RXPulseStart);					// no overflow
 80057a4:	4b34      	ldr	r3, [pc, #208]	; (8005878 <IrTsopCallback+0x110>)
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	4b33      	ldr	r3, [pc, #204]	; (8005878 <IrTsopCallback+0x110>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d907      	bls.n	80057c0 <IrTsopCallback+0x58>
 80057b0:	4b31      	ldr	r3, [pc, #196]	; (8005878 <IrTsopCallback+0x110>)
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	4b30      	ldr	r3, [pc, #192]	; (8005878 <IrTsopCallback+0x110>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	4a2f      	ldr	r2, [pc, #188]	; (8005878 <IrTsopCallback+0x110>)
 80057bc:	60d3      	str	r3, [r2, #12]
 80057be:	e007      	b.n	80057d0 <IrTsopCallback+0x68>
		else														IRRxPulse.ui32RXPulseDuration = (IRRxPulse.ui32RXPulseEnd + (0xFFFFFFFF - IRRxPulse.ui32RXPulseStart));		// with overflow
 80057c0:	4b2d      	ldr	r3, [pc, #180]	; (8005878 <IrTsopCallback+0x110>)
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	4b2c      	ldr	r3, [pc, #176]	; (8005878 <IrTsopCallback+0x110>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	4a2a      	ldr	r2, [pc, #168]	; (8005878 <IrTsopCallback+0x110>)
 80057ce:	60d3      	str	r3, [r2, #12]
		IRRxPulse.RXNewPulseAvailable = 1;		// indicate the new pulse was detected
 80057d0:	4b29      	ldr	r3, [pc, #164]	; (8005878 <IrTsopCallback+0x110>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	745a      	strb	r2, [r3, #17]
	}
	// ------------------------------------------------------------------


	// ------------------- Check the pulse type  ------------------------
	IRRxPulse.RXPulseType = RXPulseError;	// by default
 80057d6:	4b28      	ldr	r3, [pc, #160]	; (8005878 <IrTsopCallback+0x110>)
 80057d8:	2200      	movs	r2, #0
 80057da:	741a      	strb	r2, [r3, #16]
	// detect the 300uS pulse => [150uS .... 500uS]
	if( (IRRxPulse.ui32RXPulseDuration > 150) && (IRRxPulse.ui32RXPulseDuration < 500) )					IRRxPulse.RXPulseType = RXPulse300uS;		// valid logical 0 was detected
 80057dc:	4b26      	ldr	r3, [pc, #152]	; (8005878 <IrTsopCallback+0x110>)
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	2b96      	cmp	r3, #150	; 0x96
 80057e2:	d908      	bls.n	80057f6 <IrTsopCallback+0x8e>
 80057e4:	4b24      	ldr	r3, [pc, #144]	; (8005878 <IrTsopCallback+0x110>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80057ec:	d203      	bcs.n	80057f6 <IrTsopCallback+0x8e>
 80057ee:	4b22      	ldr	r3, [pc, #136]	; (8005878 <IrTsopCallback+0x110>)
 80057f0:	2201      	movs	r2, #1
 80057f2:	741a      	strb	r2, [r3, #16]
 80057f4:	e037      	b.n	8005866 <IrTsopCallback+0xfe>
	else
	{	// try for 700uS pulse => [550uS ... 900uS]
		if( (IRRxPulse.ui32RXPulseDuration > 550) && (IRRxPulse.ui32RXPulseDuration < 900) )				IRRxPulse.RXPulseType = RXPulse700uS;		// valid logical 1 was detected
 80057f6:	4b20      	ldr	r3, [pc, #128]	; (8005878 <IrTsopCallback+0x110>)
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f240 2226 	movw	r2, #550	; 0x226
 80057fe:	4293      	cmp	r3, r2
 8005800:	d908      	bls.n	8005814 <IrTsopCallback+0xac>
 8005802:	4b1d      	ldr	r3, [pc, #116]	; (8005878 <IrTsopCallback+0x110>)
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800580a:	d203      	bcs.n	8005814 <IrTsopCallback+0xac>
 800580c:	4b1a      	ldr	r3, [pc, #104]	; (8005878 <IrTsopCallback+0x110>)
 800580e:	2202      	movs	r2, #2
 8005810:	741a      	strb	r2, [r3, #16]
 8005812:	e028      	b.n	8005866 <IrTsopCallback+0xfe>
		else
		{	// try for 3mS pulse => [2800uS .... 3500uS]
			if( (IRRxPulse.ui32RXPulseDuration > 2800) && (IRRxPulse.ui32RXPulseDuration < 3500) )			IRRxPulse.RXPulseType = RXPulse3mS;			// valid PC->Robot IRstart frame was detected
 8005814:	4b18      	ldr	r3, [pc, #96]	; (8005878 <IrTsopCallback+0x110>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 800581c:	d909      	bls.n	8005832 <IrTsopCallback+0xca>
 800581e:	4b16      	ldr	r3, [pc, #88]	; (8005878 <IrTsopCallback+0x110>)
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f640 52ab 	movw	r2, #3499	; 0xdab
 8005826:	4293      	cmp	r3, r2
 8005828:	d803      	bhi.n	8005832 <IrTsopCallback+0xca>
 800582a:	4b13      	ldr	r3, [pc, #76]	; (8005878 <IrTsopCallback+0x110>)
 800582c:	2203      	movs	r2, #3
 800582e:	741a      	strb	r2, [r3, #16]
 8005830:	e019      	b.n	8005866 <IrTsopCallback+0xfe>
			else
			{	// try for 7ms pulse => [6500uS ... 7500uS]
				if( (IRRxPulse.ui32RXPulseDuration > 6500) && (IRRxPulse.ui32RXPulseDuration < 7500) )		IRRxPulse.RXPulseType = RXPulse7mS;			// valid Robot->PC IRstart frame was detected
 8005832:	4b11      	ldr	r3, [pc, #68]	; (8005878 <IrTsopCallback+0x110>)
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f641 1264 	movw	r2, #6500	; 0x1964
 800583a:	4293      	cmp	r3, r2
 800583c:	d909      	bls.n	8005852 <IrTsopCallback+0xea>
 800583e:	4b0e      	ldr	r3, [pc, #56]	; (8005878 <IrTsopCallback+0x110>)
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8005846:	4293      	cmp	r3, r2
 8005848:	d803      	bhi.n	8005852 <IrTsopCallback+0xea>
 800584a:	4b0b      	ldr	r3, [pc, #44]	; (8005878 <IrTsopCallback+0x110>)
 800584c:	2204      	movs	r2, #4
 800584e:	741a      	strb	r2, [r3, #16]
 8005850:	e009      	b.n	8005866 <IrTsopCallback+0xfe>
				else
				{	// not a valid pulse
					IRRxPulse.RXNewPulseAvailable = 0;		// indicate that NO valid new pulse was detected
 8005852:	4b09      	ldr	r3, [pc, #36]	; (8005878 <IrTsopCallback+0x110>)
 8005854:	2200      	movs	r2, #0
 8005856:	745a      	strb	r2, [r3, #17]
					if( (IRRxMessage.uiRXStatus != 0) )
 8005858:	4b08      	ldr	r3, [pc, #32]	; (800587c <IrTsopCallback+0x114>)
 800585a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <IrTsopCallback+0xfe>
					{	// call the reset of the pulse collector structure
						IrRxResetRxStructure();
 8005860:	f000 f840 	bl	80058e4 <IrRxResetRxStructure>
						return;
 8005864:	e003      	b.n	800586e <IrTsopCallback+0x106>
	}
	// ------------------------------------------------------------------


	// ---------- call the pulse concatenating function -----------------
	IrRxCollectPulses();
 8005866:	f000 f861 	bl	800592c <IrRxCollectPulses>


	// ------------------------------------------------------------------
	// ------------------------------------------------------------------

	return;
 800586a:	e000      	b.n	800586e <IrTsopCallback+0x106>
		if(IRRxPulse.ucRXPulseStatus != 1)	return;		// no valid pulse measurement was in progress
 800586c:	bf00      	nop
}
 800586e:	bd80      	pop	{r7, pc}
 8005870:	40021000 	.word	0x40021000
 8005874:	20002414 	.word	0x20002414
 8005878:	200019dc 	.word	0x200019dc
 800587c:	200019f0 	.word	0x200019f0

08005880 <IrRxInit>:
// STATIC (INTERN) implementation
//==================================================================================================================== STATIC_START
//----------------------------------------------------------------------------------
// IR RX section
static void IrRxInit(void)						// called @ initialization
{	// uses:
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
	// -- IRRxPulse 	// keeps track of the RX pulses
	// --IRRxMessage	// collects IR pulses during IR message reception
	// --------------------------

	IrRxResetRxStructure();
 8005884:	f000 f82e 	bl	80058e4 <IrRxResetRxStructure>
	IrRxClearReceivedMessage();
 8005888:	f000 f802 	bl	8005890 <IrRxClearReceivedMessage>

	return;
 800588c:	bf00      	nop
}
 800588e:	bd80      	pop	{r7, pc}

08005890 <IrRxClearReceivedMessage>:
//----------------------------------------------------------------------------------
static void IrRxClearReceivedMessage(void)		// used to clear the content of the last received and decoded message from the IRRxMessage structure
{	// uses:
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
	// -- IRRxPulse 	// keeps track of the RX pulses
	// --IRRxMessage	// collects IR pulses during IR message reception
	// --------------------------
	uint8_t i;

	for(i=0;i<40;i++) 	IRRxMessage.DecodedMessage.ucDecodedMessage[i] = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	71fb      	strb	r3, [r7, #7]
 800589a:	e008      	b.n	80058ae <IrRxClearReceivedMessage+0x1e>
 800589c:	79fb      	ldrb	r3, [r7, #7]
 800589e:	4a10      	ldr	r2, [pc, #64]	; (80058e0 <IrRxClearReceivedMessage+0x50>)
 80058a0:	4413      	add	r3, r2
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058a8:	79fb      	ldrb	r3, [r7, #7]
 80058aa:	3301      	adds	r3, #1
 80058ac:	71fb      	strb	r3, [r7, #7]
 80058ae:	79fb      	ldrb	r3, [r7, #7]
 80058b0:	2b27      	cmp	r3, #39	; 0x27
 80058b2:	d9f3      	bls.n	800589c <IrRxClearReceivedMessage+0xc>
	IRRxMessage.DecodedMessage.ucMessageSourceType				= MessageTypeUnknown;
 80058b4:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <IrRxClearReceivedMessage+0x50>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	IRRxMessage.DecodedMessage.ucDecodedMessageBroadcast 		= 0;
 80058bc:	4b08      	ldr	r3, [pc, #32]	; (80058e0 <IrRxClearReceivedMessage+0x50>)
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	IRRxMessage.DecodedMessage.ucNewDecodedMessageAvailable 	= 0;
 80058c4:	4b06      	ldr	r3, [pc, #24]	; (80058e0 <IrRxClearReceivedMessage+0x50>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	IRRxMessage.DecodedMessage.ucDecodedMessageLength			= 0;
 80058cc:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <IrRxClearReceivedMessage+0x50>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	return;
 80058d4:	bf00      	nop
}
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	200019f0 	.word	0x200019f0

080058e4 <IrRxResetRxStructure>:
//----------------------------------------------------------------------------------
static void IrRxResetRxStructure(void)			// used to reset the IRRxMessage structure
{	// uses:
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
		sprintf((char *)m_ucDebugBuffer,"IrRxDecode: uiRXStatus Error: Val.=%d\r\n", IRRxMessage.uiRXStatus);
		DebugSendData(m_ucDebugBuffer,strlen((char *)m_ucDebugBuffer));
	}
	#endif

	for(i=0;i<45;i++) IRRxMessage.ucRXBuffer[i] 	= 0;
 80058ea:	2300      	movs	r3, #0
 80058ec:	71fb      	strb	r3, [r7, #7]
 80058ee:	e006      	b.n	80058fe <IrRxResetRxStructure+0x1a>
 80058f0:	79fb      	ldrb	r3, [r7, #7]
 80058f2:	4a0d      	ldr	r2, [pc, #52]	; (8005928 <IrRxResetRxStructure+0x44>)
 80058f4:	2100      	movs	r1, #0
 80058f6:	54d1      	strb	r1, [r2, r3]
 80058f8:	79fb      	ldrb	r3, [r7, #7]
 80058fa:	3301      	adds	r3, #1
 80058fc:	71fb      	strb	r3, [r7, #7]
 80058fe:	79fb      	ldrb	r3, [r7, #7]
 8005900:	2b2c      	cmp	r3, #44	; 0x2c
 8005902:	d9f5      	bls.n	80058f0 <IrRxResetRxStructure+0xc>

	IRRxMessage.ucRXByteIndex 	= 0;
 8005904:	4b08      	ldr	r3, [pc, #32]	; (8005928 <IrRxResetRxStructure+0x44>)
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	IRRxMessage.ucRXBitIndex	= 0;
 800590c:	4b06      	ldr	r3, [pc, #24]	; (8005928 <IrRxResetRxStructure+0x44>)
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	IRRxMessage.uiRXStatus 		= 0;
 8005914:	4b04      	ldr	r3, [pc, #16]	; (8005928 <IrRxResetRxStructure+0x44>)
 8005916:	2200      	movs	r2, #0
 8005918:	85da      	strh	r2, [r3, #46]	; 0x2e


	return;
 800591a:	bf00      	nop
}
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	200019f0 	.word	0x200019f0

0800592c <IrRxCollectPulses>:
//----------------------------------------------------------------------------------
static void IrRxCollectPulses(void)			// used to collect IR pulses into the IRRxMessage structure, called from the TSOP pin change ISR
{	// uses:
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
	// called each time a new IR pulse was received
	// called from the TSOP ISR => KEEP AS SHORT AS POSSIBLE
	//---------------------------

	// ---- check if there is no message already in the buffer ------
	if( (IRRxMessage.uiRXStatus == 500) )
 8005930:	4b39      	ldr	r3, [pc, #228]	; (8005a18 <IrRxCollectPulses+0xec>)
 8005932:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005934:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005938:	d103      	bne.n	8005942 <IrRxCollectPulses+0x16>
	{	// is a message already received and must be decoded
		IRRxPulse.RXNewPulseAvailable = 0;	// dummy
 800593a:	4b38      	ldr	r3, [pc, #224]	; (8005a1c <IrRxCollectPulses+0xf0>)
 800593c:	2200      	movs	r2, #0
 800593e:	745a      	strb	r2, [r3, #17]
		return;
 8005940:	e069      	b.n	8005a16 <IrRxCollectPulses+0xea>
	}
	// --------------------------------------------------------------

	// ---------- Waiting for the start of the reception ------------
	if( (IRRxMessage.uiRXStatus == 0) )
 8005942:	4b35      	ldr	r3, [pc, #212]	; (8005a18 <IrRxCollectPulses+0xec>)
 8005944:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10f      	bne.n	800596a <IrRxCollectPulses+0x3e>
	{	// no Reception is in progress => waiting for the start field PC->ROBOT
		if( (IRRxPulse.RXPulseType == RXPulse3mS) )
 800594a:	4b34      	ldr	r3, [pc, #208]	; (8005a1c <IrRxCollectPulses+0xf0>)
 800594c:	7c1b      	ldrb	r3, [r3, #16]
 800594e:	2b03      	cmp	r3, #3
 8005950:	d107      	bne.n	8005962 <IrRxCollectPulses+0x36>
		{	// a PC->ROBOT type of message was received => start of the reception
			IRRxMessage.uiRXStatus = 1;
 8005952:	4b31      	ldr	r3, [pc, #196]	; (8005a18 <IrRxCollectPulses+0xec>)
 8005954:	2201      	movs	r2, #1
 8005956:	85da      	strh	r2, [r3, #46]	; 0x2e
			// MessagePC2ROBOT  - type of message
			IRRxMessage.ui32LastIRPulseTime = __HAL_TIM_GET_COUNTER(&htim5);
 8005958:	4b31      	ldr	r3, [pc, #196]	; (8005a20 <IrRxCollectPulses+0xf4>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	4a2e      	ldr	r2, [pc, #184]	; (8005a18 <IrRxCollectPulses+0xec>)
 8005960:	6353      	str	r3, [r2, #52]	; 0x34
		//{	// a ROBOT->PC type of message was received => start of the reception
		//	IRRxMessage.uiRXStatus = 1;
		//	IRRxMessage.ui32LastIRPulseTime = __HAL_TIM_GET_COUNTER(&htim5);
		//}

		IRRxPulse.RXNewPulseAvailable = 0;	// dummy
 8005962:	4b2e      	ldr	r3, [pc, #184]	; (8005a1c <IrRxCollectPulses+0xf0>)
 8005964:	2200      	movs	r2, #0
 8005966:	745a      	strb	r2, [r3, #17]
		return;
 8005968:	e055      	b.n	8005a16 <IrRxCollectPulses+0xea>
	}
	// --------------------------------------------------------------

	IRRxPulse.RXNewPulseAvailable = 0;	// dummy
 800596a:	4b2c      	ldr	r3, [pc, #176]	; (8005a1c <IrRxCollectPulses+0xf0>)
 800596c:	2200      	movs	r2, #0
 800596e:	745a      	strb	r2, [r3, #17]

	// ------ Collecting the IR pulses as data bits of info. --------
	// check for the expected type of IR pulses
	if( (IRRxPulse.RXPulseType != RXPulse300uS) && (IRRxPulse.RXPulseType != RXPulse700uS) )
 8005970:	4b2a      	ldr	r3, [pc, #168]	; (8005a1c <IrRxCollectPulses+0xf0>)
 8005972:	7c1b      	ldrb	r3, [r3, #16]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d006      	beq.n	8005986 <IrRxCollectPulses+0x5a>
 8005978:	4b28      	ldr	r3, [pc, #160]	; (8005a1c <IrRxCollectPulses+0xf0>)
 800597a:	7c1b      	ldrb	r3, [r3, #16]
 800597c:	2b02      	cmp	r3, #2
 800597e:	d002      	beq.n	8005986 <IrRxCollectPulses+0x5a>
	{	// some wrong type of pulse
		IrRxResetRxStructure();
 8005980:	f7ff ffb0 	bl	80058e4 <IrRxResetRxStructure>
		return;
 8005984:	e047      	b.n	8005a16 <IrRxCollectPulses+0xea>
	}

	// get the time of the current pulse
	IRRxMessage.ui32LastIRPulseTime = __HAL_TIM_GET_COUNTER(&htim5);
 8005986:	4b26      	ldr	r3, [pc, #152]	; (8005a20 <IrRxCollectPulses+0xf4>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	4a22      	ldr	r2, [pc, #136]	; (8005a18 <IrRxCollectPulses+0xec>)
 800598e:	6353      	str	r3, [r2, #52]	; 0x34

	// populate the buffer if the received data is logical HIGH
	if( (IRRxPulse.RXPulseType == RXPulse700uS) )	IRRxMessage.ucRXBuffer[IRRxMessage.ucRXByteIndex] |= (1<<(IRRxMessage.ucRXBitIndex));
 8005990:	4b22      	ldr	r3, [pc, #136]	; (8005a1c <IrRxCollectPulses+0xf0>)
 8005992:	7c1b      	ldrb	r3, [r3, #16]
 8005994:	2b02      	cmp	r3, #2
 8005996:	d116      	bne.n	80059c6 <IrRxCollectPulses+0x9a>
 8005998:	4b1f      	ldr	r3, [pc, #124]	; (8005a18 <IrRxCollectPulses+0xec>)
 800599a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800599e:	461a      	mov	r2, r3
 80059a0:	4b1d      	ldr	r3, [pc, #116]	; (8005a18 <IrRxCollectPulses+0xec>)
 80059a2:	5c9b      	ldrb	r3, [r3, r2]
 80059a4:	b25a      	sxtb	r2, r3
 80059a6:	4b1c      	ldr	r3, [pc, #112]	; (8005a18 <IrRxCollectPulses+0xec>)
 80059a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80059ac:	4619      	mov	r1, r3
 80059ae:	2301      	movs	r3, #1
 80059b0:	408b      	lsls	r3, r1
 80059b2:	b25b      	sxtb	r3, r3
 80059b4:	4313      	orrs	r3, r2
 80059b6:	b259      	sxtb	r1, r3
 80059b8:	4b17      	ldr	r3, [pc, #92]	; (8005a18 <IrRxCollectPulses+0xec>)
 80059ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059be:	461a      	mov	r2, r3
 80059c0:	b2c9      	uxtb	r1, r1
 80059c2:	4b15      	ldr	r3, [pc, #84]	; (8005a18 <IrRxCollectPulses+0xec>)
 80059c4:	5499      	strb	r1, [r3, r2]

	// calculate the next indexes for the reception buffer
	IRRxMessage.uiRXStatus ++;
 80059c6:	4b14      	ldr	r3, [pc, #80]	; (8005a18 <IrRxCollectPulses+0xec>)
 80059c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059ca:	3301      	adds	r3, #1
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	4b12      	ldr	r3, [pc, #72]	; (8005a18 <IrRxCollectPulses+0xec>)
 80059d0:	85da      	strh	r2, [r3, #46]	; 0x2e
	IRRxMessage.ucRXBitIndex ++;
 80059d2:	4b11      	ldr	r3, [pc, #68]	; (8005a18 <IrRxCollectPulses+0xec>)
 80059d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80059d8:	3301      	adds	r3, #1
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	4b0e      	ldr	r3, [pc, #56]	; (8005a18 <IrRxCollectPulses+0xec>)
 80059de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	if( (IRRxMessage.ucRXBitIndex > 7) )
 80059e2:	4b0d      	ldr	r3, [pc, #52]	; (8005a18 <IrRxCollectPulses+0xec>)
 80059e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80059e8:	2b07      	cmp	r3, #7
 80059ea:	d913      	bls.n	8005a14 <IrRxCollectPulses+0xe8>
	{
		IRRxMessage.ucRXBitIndex = 0;
 80059ec:	4b0a      	ldr	r3, [pc, #40]	; (8005a18 <IrRxCollectPulses+0xec>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		IRRxMessage.ucRXByteIndex ++;
 80059f4:	4b08      	ldr	r3, [pc, #32]	; (8005a18 <IrRxCollectPulses+0xec>)
 80059f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059fa:	3301      	adds	r3, #1
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <IrRxCollectPulses+0xec>)
 8005a00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		if( (IRRxMessage.ucRXByteIndex > 34) )
 8005a04:	4b04      	ldr	r3, [pc, #16]	; (8005a18 <IrRxCollectPulses+0xec>)
 8005a06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a0a:	2b22      	cmp	r3, #34	; 0x22
 8005a0c:	d902      	bls.n	8005a14 <IrRxCollectPulses+0xe8>
		{	// too long message
			IrRxResetRxStructure();
 8005a0e:	f7ff ff69 	bl	80058e4 <IrRxResetRxStructure>
			return;
 8005a12:	e000      	b.n	8005a16 <IrRxCollectPulses+0xea>
		}
	}
	// --------------------------------------------------------------


	return;
 8005a14:	bf00      	nop
}
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	200019f0 	.word	0x200019f0
 8005a1c:	200019dc 	.word	0x200019dc
 8005a20:	20002414 	.word	0x20002414

08005a24 <IrRxMainLoop>:
//----------------------------------------------------------------------------------
static void IrRxMainLoop(void)				// called from the main loop to handle task related activities
{	// uses:
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
	// --IRRxMessage	// collects IR pulses during IR message reception
	// --------------------------
	uint32_t uiElapsedTime;

	// ----------- check for timeout -----------
	if( (IRRxMessage.uiRXStatus != 0) )
 8005a2a:	4b16      	ldr	r3, [pc, #88]	; (8005a84 <IrRxMainLoop+0x60>)
 8005a2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d024      	beq.n	8005a7c <IrRxMainLoop+0x58>
	{	// a reception is in progress
		IRRxMessage.ui32TimeTemp = __HAL_TIM_GET_COUNTER(&htim5);	// time in us
 8005a32:	4b15      	ldr	r3, [pc, #84]	; (8005a88 <IrRxMainLoop+0x64>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	4a12      	ldr	r2, [pc, #72]	; (8005a84 <IrRxMainLoop+0x60>)
 8005a3a:	6393      	str	r3, [r2, #56]	; 0x38

		if( (IRRxMessage.ui32TimeTemp > IRRxMessage.ui32LastIRPulseTime) )		uiElapsedTime = (IRRxMessage.ui32TimeTemp - IRRxMessage.ui32LastIRPulseTime);
 8005a3c:	4b11      	ldr	r3, [pc, #68]	; (8005a84 <IrRxMainLoop+0x60>)
 8005a3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a40:	4b10      	ldr	r3, [pc, #64]	; (8005a84 <IrRxMainLoop+0x60>)
 8005a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d906      	bls.n	8005a56 <IrRxMainLoop+0x32>
 8005a48:	4b0e      	ldr	r3, [pc, #56]	; (8005a84 <IrRxMainLoop+0x60>)
 8005a4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a4c:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <IrRxMainLoop+0x60>)
 8005a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	607b      	str	r3, [r7, #4]
 8005a54:	e006      	b.n	8005a64 <IrRxMainLoop+0x40>
		else 																	uiElapsedTime = ((0xFFFFFFFF - IRRxMessage.ui32LastIRPulseTime) + IRRxMessage.ui32TimeTemp);	// if timer overflow occurred
 8005a56:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <IrRxMainLoop+0x60>)
 8005a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a5a:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <IrRxMainLoop+0x60>)
 8005a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	3b01      	subs	r3, #1
 8005a62:	607b      	str	r3, [r7, #4]

		if( (uiElapsedTime > 20000) )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f644 6220 	movw	r2, #20000	; 0x4e20
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d906      	bls.n	8005a7c <IrRxMainLoop+0x58>
		{	// more than 20ms between 2 consecutive IR pulses => timeout and time to decode the received buffer
			// set the Status to 500 indicating that no further data can be put inside the reception buffer
			IRRxMessage.uiRXStatus = 500;
 8005a6e:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <IrRxMainLoop+0x60>)
 8005a70:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005a74:	85da      	strh	r2, [r3, #46]	; 0x2e
			IrRxDecodeReceivedMessage();
 8005a76:	f000 f809 	bl	8005a8c <IrRxDecodeReceivedMessage>
		}
	}
	// -----------------------------------------

	return;
 8005a7a:	bf00      	nop
 8005a7c:	bf00      	nop
}
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	200019f0 	.word	0x200019f0
 8005a88:	20002414 	.word	0x20002414

08005a8c <IrRxDecodeReceivedMessage>:
//----------------------------------------------------------------------------------
static void IrRxDecodeReceivedMessage(void)	// called after an IR message was received
{	// uses:
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
	uint8_t i;	// temp var for indexing

	// ---- check for the minimum valid length of the  received buffer ----
	// if 1 Data byte => CNT = 2
	// => ucRXByteIndex is minimum 33
	if( (IRRxMessage.uiRXStatus < 33) )
 8005a92:	4b44      	ldr	r3, [pc, #272]	; (8005ba4 <IrRxDecodeReceivedMessage+0x118>)
 8005a94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a96:	2b20      	cmp	r3, #32
 8005a98:	d802      	bhi.n	8005aa0 <IrRxDecodeReceivedMessage+0x14>
	{	// buffer is too short !
		#ifdef IRTSOP_DEBUG_IRRX
			sprintf((char *)m_ucDebugBuffer,"IrRxDecode: buffer is too short: Length=%d\r\n", IRRxMessage.uiRXStatus);
			DebugSendData(m_ucDebugBuffer,strlen((char *)m_ucDebugBuffer));
		#endif
		IrRxResetRxStructure();
 8005a9a:	f7ff ff23 	bl	80058e4 <IrRxResetRxStructure>
		return;
 8005a9e:	e07d      	b.n	8005b9c <IrRxDecodeReceivedMessage+0x110>
	}
	// --------------------------------------------------------------------

	// --------- check for the expected value of the Bit Index ------------
	if( (IRRxMessage.ucRXBitIndex != 0) )
 8005aa0:	4b40      	ldr	r3, [pc, #256]	; (8005ba4 <IrRxDecodeReceivedMessage+0x118>)
 8005aa2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <IrRxDecodeReceivedMessage+0x24>
	{	// wrong bit index => the message dose not contain complete no. of bytes
		#ifdef IRTSOP_DEBUG_IRRX
			sprintf((char *)m_ucDebugBuffer,"IrRxDecode: Wrong value of the Bit Index: Value=%d\r\n", IRRxMessage.ucRXBitIndex);
			DebugSendData(m_ucDebugBuffer,strlen((char *)m_ucDebugBuffer));
		#endif
		IrRxResetRxStructure();
 8005aaa:	f7ff ff1b 	bl	80058e4 <IrRxResetRxStructure>
		return;
 8005aae:	e075      	b.n	8005b9c <IrRxDecodeReceivedMessage+0x110>
	}
	// --------------------------------------------------------------------

	// --------------- retrieve the Address field -------------------------
	// check for matching address
	if( (IRRxMessage.ucRXBuffer[0] != 255) && (IRRxMessage.ucRXBuffer[0] != m_ucRobotAddress) )
 8005ab0:	4b3c      	ldr	r3, [pc, #240]	; (8005ba4 <IrRxDecodeReceivedMessage+0x118>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2bff      	cmp	r3, #255	; 0xff
 8005ab6:	d008      	beq.n	8005aca <IrRxDecodeReceivedMessage+0x3e>
 8005ab8:	4b3a      	ldr	r3, [pc, #232]	; (8005ba4 <IrRxDecodeReceivedMessage+0x118>)
 8005aba:	781a      	ldrb	r2, [r3, #0]
 8005abc:	4b3a      	ldr	r3, [pc, #232]	; (8005ba8 <IrRxDecodeReceivedMessage+0x11c>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d002      	beq.n	8005aca <IrRxDecodeReceivedMessage+0x3e>
	{	// the message is not for this robot
		#ifdef IRTSOP_DEBUG_IRRX
			sprintf((char *)m_ucDebugBuffer,"IrRxDecode: Wrong address: Add1=%d, Add2=%d\r\n", m_ucRobotAddress,IRRxMessage.ucRXBuffer[0]);
			DebugSendData(m_ucDebugBuffer,strlen((char *)m_ucDebugBuffer));
		#endif
		IrRxResetRxStructure();
 8005ac4:	f7ff ff0e 	bl	80058e4 <IrRxResetRxStructure>
		return;
 8005ac8:	e068      	b.n	8005b9c <IrRxDecodeReceivedMessage+0x110>

	// ------------ retrieve and check the CNT field ----------------------
	// for a message with 1 data field => CNT=2 and ByteIndex=4
	// ==> CNT==(ByteIndex-2)
	uint8_t ucCnt;
	ucCnt = IRRxMessage.ucRXBuffer[1];
 8005aca:	4b36      	ldr	r3, [pc, #216]	; (8005ba4 <IrRxDecodeReceivedMessage+0x118>)
 8005acc:	785b      	ldrb	r3, [r3, #1]
 8005ace:	717b      	strb	r3, [r7, #5]
	if( (ucCnt != (IRRxMessage.ucRXByteIndex - 2)) )
 8005ad0:	797a      	ldrb	r2, [r7, #5]
 8005ad2:	4b34      	ldr	r3, [pc, #208]	; (8005ba4 <IrRxDecodeReceivedMessage+0x118>)
 8005ad4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ad8:	3b02      	subs	r3, #2
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d002      	beq.n	8005ae4 <IrRxDecodeReceivedMessage+0x58>
	{	// CNT error
		#ifdef IRTSOP_DEBUG_IRRX
			sprintf((char *)m_ucDebugBuffer,"IrRxDecode: CNT field Error: CNT1=%d, CNT2=%d\r\n", ucCnt, (IRRxMessage.ucRXByteIndex - 2));
			DebugSendData(m_ucDebugBuffer,strlen((char *)m_ucDebugBuffer));
		#endif
		IrRxResetRxStructure();
 8005ade:	f7ff ff01 	bl	80058e4 <IrRxResetRxStructure>
		return;
 8005ae2:	e05b      	b.n	8005b9c <IrRxDecodeReceivedMessage+0x110>
	}
	// --------------------------------------------------------------------

	// --------------- check the CRC of the message -----------------------
	uint8_t ucCRC = 0;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<(IRRxMessage.ucRXByteIndex - 1);i++)	ucCRC += IRRxMessage.ucRXBuffer[i];
 8005ae8:	2300      	movs	r3, #0
 8005aea:	71fb      	strb	r3, [r7, #7]
 8005aec:	e008      	b.n	8005b00 <IrRxDecodeReceivedMessage+0x74>
 8005aee:	79fb      	ldrb	r3, [r7, #7]
 8005af0:	4a2c      	ldr	r2, [pc, #176]	; (8005ba4 <IrRxDecodeReceivedMessage+0x118>)
 8005af2:	5cd2      	ldrb	r2, [r2, r3]
 8005af4:	79bb      	ldrb	r3, [r7, #6]
 8005af6:	4413      	add	r3, r2
 8005af8:	71bb      	strb	r3, [r7, #6]
 8005afa:	79fb      	ldrb	r3, [r7, #7]
 8005afc:	3301      	adds	r3, #1
 8005afe:	71fb      	strb	r3, [r7, #7]
 8005b00:	79fa      	ldrb	r2, [r7, #7]
 8005b02:	4b28      	ldr	r3, [pc, #160]	; (8005ba4 <IrRxDecodeReceivedMessage+0x118>)
 8005b04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	dbef      	blt.n	8005aee <IrRxDecodeReceivedMessage+0x62>
	if( (ucCRC != IRRxMessage.ucRXBuffer[(IRRxMessage.ucRXByteIndex - 1)]) )
 8005b0e:	4b25      	ldr	r3, [pc, #148]	; (8005ba4 <IrRxDecodeReceivedMessage+0x118>)
 8005b10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b14:	3b01      	subs	r3, #1
 8005b16:	4a23      	ldr	r2, [pc, #140]	; (8005ba4 <IrRxDecodeReceivedMessage+0x118>)
 8005b18:	5cd3      	ldrb	r3, [r2, r3]
 8005b1a:	79ba      	ldrb	r2, [r7, #6]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d002      	beq.n	8005b26 <IrRxDecodeReceivedMessage+0x9a>
	{	// CRC dose not match
		#ifdef IRTSOP_DEBUG_IRRX
			sprintf((char *)m_ucDebugBuffer,"IrRxDecode: Wrong CRC value: CRC1=%d, CRC2=%d\r\n", IRRxMessage.ucRXBuffer[(IRRxMessage.ucRXByteIndex - 1)], ucCRC);
			DebugSendData(m_ucDebugBuffer,strlen((char *)m_ucDebugBuffer));
		#endif
		IrRxResetRxStructure();
 8005b20:	f7ff fee0 	bl	80058e4 <IrRxResetRxStructure>
		return;
 8005b24:	e03a      	b.n	8005b9c <IrRxDecodeReceivedMessage+0x110>
	// --------------------------------------------------------------------


	// --------- prepare the "RXDecodedMessageData" structure -------------
	// copy the received message
	for(i=0;i<(ucCnt-1);i++)	IRRxMessage.DecodedMessage.ucDecodedMessage[i] = IRRxMessage.ucRXBuffer[(i + 2)];
 8005b26:	2300      	movs	r3, #0
 8005b28:	71fb      	strb	r3, [r7, #7]
 8005b2a:	e00c      	b.n	8005b46 <IrRxDecodeReceivedMessage+0xba>
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	1c9a      	adds	r2, r3, #2
 8005b30:	79fb      	ldrb	r3, [r7, #7]
 8005b32:	491c      	ldr	r1, [pc, #112]	; (8005ba4 <IrRxDecodeReceivedMessage+0x118>)
 8005b34:	5c89      	ldrb	r1, [r1, r2]
 8005b36:	4a1b      	ldr	r2, [pc, #108]	; (8005ba4 <IrRxDecodeReceivedMessage+0x118>)
 8005b38:	4413      	add	r3, r2
 8005b3a:	460a      	mov	r2, r1
 8005b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b40:	79fb      	ldrb	r3, [r7, #7]
 8005b42:	3301      	adds	r3, #1
 8005b44:	71fb      	strb	r3, [r7, #7]
 8005b46:	79fa      	ldrb	r2, [r7, #7]
 8005b48:	797b      	ldrb	r3, [r7, #5]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	dbed      	blt.n	8005b2c <IrRxDecodeReceivedMessage+0xa0>
	IRRxMessage.DecodedMessage.ucDecodedMessage[i] = 0;	// string terminator mode
 8005b50:	79fb      	ldrb	r3, [r7, #7]
 8005b52:	4a14      	ldr	r2, [pc, #80]	; (8005ba4 <IrRxDecodeReceivedMessage+0x118>)
 8005b54:	4413      	add	r3, r2
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	// set the number of received bytes inside the buffer
	IRRxMessage.DecodedMessage.ucDecodedMessageLength = (ucCnt - 1);
 8005b5c:	797b      	ldrb	r3, [r7, #5]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <IrRxDecodeReceivedMessage+0x118>)
 8005b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	// type of the message
	IRRxMessage.DecodedMessage.ucMessageSourceType = MessagePC2ROBOT;	// the only type currently supported
 8005b68:	4b0e      	ldr	r3, [pc, #56]	; (8005ba4 <IrRxDecodeReceivedMessage+0x118>)
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	// check for broadcast
	if( (IRRxMessage.ucRXBuffer[0] == 255) )	IRRxMessage.DecodedMessage.ucDecodedMessageBroadcast = 1;	// was a broadcast message
 8005b70:	4b0c      	ldr	r3, [pc, #48]	; (8005ba4 <IrRxDecodeReceivedMessage+0x118>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2bff      	cmp	r3, #255	; 0xff
 8005b76:	d103      	bne.n	8005b80 <IrRxDecodeReceivedMessage+0xf4>
 8005b78:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <IrRxDecodeReceivedMessage+0x118>)
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	// new message is available
	if( (IRRxMessage.DecodedMessage.ucNewDecodedMessageAvailable == 0) )
 8005b80:	4b08      	ldr	r3, [pc, #32]	; (8005ba4 <IrRxDecodeReceivedMessage+0x118>)
 8005b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d105      	bne.n	8005b96 <IrRxDecodeReceivedMessage+0x10a>
	{	// must set the new message flag and also trigger the callback function
		IRRxMessage.DecodedMessage.ucNewDecodedMessageAvailable = 1;	// new message was received
 8005b8a:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <IrRxDecodeReceivedMessage+0x118>)
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		IrTsopMessageReceivedCallback();
 8005b92:	f7ff fd73 	bl	800567c <IrTsopMessageReceivedCallback>
	}
	// reset the IR structure to enable new incoming message
	IrRxResetRxStructure();
 8005b96:	f7ff fea5 	bl	80058e4 <IrRxResetRxStructure>
	// --------------------------------------------------------------------
	// --------------------------------------------------------------------


	return;
 8005b9a:	bf00      	nop
}
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	200019f0 	.word	0x200019f0
 8005ba8:	200001f6 	.word	0x200001f6

08005bac <IrLEDOff>:
// IR TX Section
//----------------------------------------------------------------------------------
// #define IR_TSOP_Pin GPIO_PIN_8
// #define IR_TSOP_GPIO_Port GPIOC
static void IrLEDOff(void)	// used to turn the LED OFF
{	// LED is on PC8
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
	HAL_GPIO_Init(IR_TSOP_GPIO_Port, &GPIO_InitStruct);
	*/

	// PC8 set to input
	IR_TSOP_GPIO_Port->MODER &= ~(0x03 << 16);	// MODER [17][16] = [0,0] -> cleared
 8005bb0:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <IrLEDOff+0x1c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a04      	ldr	r2, [pc, #16]	; (8005bc8 <IrLEDOff+0x1c>)
 8005bb6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005bba:	6013      	str	r3, [r2, #0]

	return;
 8005bbc:	bf00      	nop
}
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40020800 	.word	0x40020800

08005bcc <IrLEDOn>:
//----------------------------------------------------------------------------------
static void IrLEDOn(void)	// used to emit the 56KHZ signal on the LED
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
	HAL_GPIO_Init(IR_TSOP_GPIO_Port, &GPIO_InitStruct);
	*/

	// PC8 set to alternative function mode
	IR_TSOP_GPIO_Port->MODER |= (0x02 << 16);	// MODER [17][16] = [1,0]
 8005bd0:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <IrLEDOn+0x1c>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a04      	ldr	r2, [pc, #16]	; (8005be8 <IrLEDOn+0x1c>)
 8005bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bda:	6013      	str	r3, [r2, #0]

	return;
 8005bdc:	bf00      	nop
}
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	40020800 	.word	0x40020800

08005bec <IRTxResetTransmission>:
//----------------------------------------------------------------------------------
static void IRTxResetTransmission(void)	// used to clear the transmission related structure (IRTXMessage)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
	uint8_t i;

	IRTXMessage.ucTransmissionInProgress = 0;
 8005bf2:	4b13      	ldr	r3, [pc, #76]	; (8005c40 <IRTxResetTransmission+0x54>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	for(i=0; i<40; i++)	IRTXMessage.ucTXBuffer[i] = 0;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	71fb      	strb	r3, [r7, #7]
 8005bfe:	e007      	b.n	8005c10 <IRTxResetTransmission+0x24>
 8005c00:	79fb      	ldrb	r3, [r7, #7]
 8005c02:	4a0f      	ldr	r2, [pc, #60]	; (8005c40 <IRTxResetTransmission+0x54>)
 8005c04:	4413      	add	r3, r2
 8005c06:	2200      	movs	r2, #0
 8005c08:	719a      	strb	r2, [r3, #6]
 8005c0a:	79fb      	ldrb	r3, [r7, #7]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	71fb      	strb	r3, [r7, #7]
 8005c10:	79fb      	ldrb	r3, [r7, #7]
 8005c12:	2b27      	cmp	r3, #39	; 0x27
 8005c14:	d9f4      	bls.n	8005c00 <IRTxResetTransmission+0x14>
	IRTXMessage.ucBitIndex = 0;
 8005c16:	4b0a      	ldr	r3, [pc, #40]	; (8005c40 <IRTxResetTransmission+0x54>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	715a      	strb	r2, [r3, #5]
	IRTXMessage.ucByteIndex = 0;
 8005c1c:	4b08      	ldr	r3, [pc, #32]	; (8005c40 <IRTxResetTransmission+0x54>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	711a      	strb	r2, [r3, #4]
	IRTXMessage.uiSymbolsLetfToSend = 0;
 8005c22:	4b07      	ldr	r3, [pc, #28]	; (8005c40 <IRTxResetTransmission+0x54>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	805a      	strh	r2, [r3, #2]
	IRTXMessage.ucIROFF10KHZCounter = 0;
 8005c28:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <IRTxResetTransmission+0x54>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	705a      	strb	r2, [r3, #1]
	IRTXMessage.ucIRON10KHZCounter  = 0;
 8005c2e:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <IRTxResetTransmission+0x54>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	701a      	strb	r2, [r3, #0]
	return;
 8005c34:	bf00      	nop
}
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	20001a58 	.word	0x20001a58

08005c44 <IrTxGetNextSymbor>:
//----------------------------------------------------------------------------------
static void IrTxGetNextSymbor(void)		// used during transmission and called from the 10KHZ ISR to prepare the ucIRON10KHZCounter and ucIROFF10KHZCounter counters for the next IR symbol to be transmitted
{	// called from the 10KHZ ISR => keep as short as possible
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0
	//-------------------------------

	// check for the end of transmission
	if(IRTXMessage.uiSymbolsLetfToSend == 0)
 8005c48:	4b20      	ldr	r3, [pc, #128]	; (8005ccc <IrTxGetNextSymbor+0x88>)
 8005c4a:	885b      	ldrh	r3, [r3, #2]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d106      	bne.n	8005c5e <IrTxGetNextSymbor+0x1a>
	{
		IRTXMessage.ucTransmissionInProgress = 0;	// no transmission is in progress
 8005c50:	4b1e      	ldr	r3, [pc, #120]	; (8005ccc <IrTxGetNextSymbor+0x88>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		IrLEDOff();	// dummy, but just to be on the safe side ...
 8005c58:	f7ff ffa8 	bl	8005bac <IrLEDOff>
		return;
 8005c5c:	e035      	b.n	8005cca <IrTxGetNextSymbor+0x86>
	}

	// transmission has not yet ended => prepare the next symbol
	//IrLEDOn();
	IRTXMessage.uiSymbolsLetfToSend --;
 8005c5e:	4b1b      	ldr	r3, [pc, #108]	; (8005ccc <IrTxGetNextSymbor+0x88>)
 8005c60:	885b      	ldrh	r3, [r3, #2]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	4b19      	ldr	r3, [pc, #100]	; (8005ccc <IrTxGetNextSymbor+0x88>)
 8005c68:	805a      	strh	r2, [r3, #2]

	// check for logical 1 (high)
	if( (IRTXMessage.ucTXBuffer[IRTXMessage.ucByteIndex] & (1<<IRTXMessage.ucBitIndex)) )
 8005c6a:	4b18      	ldr	r3, [pc, #96]	; (8005ccc <IrTxGetNextSymbor+0x88>)
 8005c6c:	791b      	ldrb	r3, [r3, #4]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	4b16      	ldr	r3, [pc, #88]	; (8005ccc <IrTxGetNextSymbor+0x88>)
 8005c72:	4413      	add	r3, r2
 8005c74:	799b      	ldrb	r3, [r3, #6]
 8005c76:	461a      	mov	r2, r3
 8005c78:	4b14      	ldr	r3, [pc, #80]	; (8005ccc <IrTxGetNextSymbor+0x88>)
 8005c7a:	795b      	ldrb	r3, [r3, #5]
 8005c7c:	fa42 f303 	asr.w	r3, r2, r3
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d006      	beq.n	8005c96 <IrTxGetNextSymbor+0x52>
	{	// send HIGH
		IRTXMessage.ucIRON10KHZCounter 	= 7;
 8005c88:	4b10      	ldr	r3, [pc, #64]	; (8005ccc <IrTxGetNextSymbor+0x88>)
 8005c8a:	2207      	movs	r2, #7
 8005c8c:	701a      	strb	r2, [r3, #0]
		IRTXMessage.ucIROFF10KHZCounter = 3;
 8005c8e:	4b0f      	ldr	r3, [pc, #60]	; (8005ccc <IrTxGetNextSymbor+0x88>)
 8005c90:	2203      	movs	r2, #3
 8005c92:	705a      	strb	r2, [r3, #1]
 8005c94:	e005      	b.n	8005ca2 <IrTxGetNextSymbor+0x5e>
	}
	else
	{	// send LOW
		IRTXMessage.ucIRON10KHZCounter  = 3;
 8005c96:	4b0d      	ldr	r3, [pc, #52]	; (8005ccc <IrTxGetNextSymbor+0x88>)
 8005c98:	2203      	movs	r2, #3
 8005c9a:	701a      	strb	r2, [r3, #0]
		IRTXMessage.ucIROFF10KHZCounter = 7;
 8005c9c:	4b0b      	ldr	r3, [pc, #44]	; (8005ccc <IrTxGetNextSymbor+0x88>)
 8005c9e:	2207      	movs	r2, #7
 8005ca0:	705a      	strb	r2, [r3, #1]
	}

	IRTXMessage.ucBitIndex ++;
 8005ca2:	4b0a      	ldr	r3, [pc, #40]	; (8005ccc <IrTxGetNextSymbor+0x88>)
 8005ca4:	795b      	ldrb	r3, [r3, #5]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	4b08      	ldr	r3, [pc, #32]	; (8005ccc <IrTxGetNextSymbor+0x88>)
 8005cac:	715a      	strb	r2, [r3, #5]
	if( (IRTXMessage.ucBitIndex > 7) )
 8005cae:	4b07      	ldr	r3, [pc, #28]	; (8005ccc <IrTxGetNextSymbor+0x88>)
 8005cb0:	795b      	ldrb	r3, [r3, #5]
 8005cb2:	2b07      	cmp	r3, #7
 8005cb4:	d908      	bls.n	8005cc8 <IrTxGetNextSymbor+0x84>
	{
		IRTXMessage.ucBitIndex = 0;
 8005cb6:	4b05      	ldr	r3, [pc, #20]	; (8005ccc <IrTxGetNextSymbor+0x88>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	715a      	strb	r2, [r3, #5]
		IRTXMessage.ucByteIndex ++;		// must be careful not to exceed the value of 39 (ucTXBuffer[40]), normally must not get over 34
 8005cbc:	4b03      	ldr	r3, [pc, #12]	; (8005ccc <IrTxGetNextSymbor+0x88>)
 8005cbe:	791b      	ldrb	r3, [r3, #4]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	4b01      	ldr	r3, [pc, #4]	; (8005ccc <IrTxGetNextSymbor+0x88>)
 8005cc6:	711a      	strb	r2, [r3, #4]
	}

	return;
 8005cc8:	bf00      	nop
}
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	20001a58 	.word	0x20001a58

08005cd0 <QREResultCallback>:
//==================================================================================================================== API_START

// callback API
//----------------------------------------------------------------------------------
__attribute__ ((weak))	void QREResultCallback(QREResultDataType QREData)
{
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	b490      	push	{r4, r7}
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	f107 0408 	add.w	r4, r7, #8
 8005cda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
																														QREData.ui32SelfIntensity[5],
																														QREData.ui32SelfIntensity[6],
																														QREData.ui32SelfIntensity[7]);
	DebugSendData(m_ucDebugBuffer,strlen((char *)m_ucDebugBuffer));
	#endif
}
 8005cde:	bf00      	nop
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc90      	pop	{r4, r7}
 8005ce4:	b004      	add	sp, #16
 8005ce6:	4770      	bx	lr

08005ce8 <QREEndOffsetCalibration>:

	return;
}
//----------------------------------------------------------------------------------
void QREEndOffsetCalibration(void)				// used to terminate the offset calibration (this function will automatically update the "ui32BarDetectionOffset[]" field in the "QREResultDataType" structure;
{	// this terminates the offset calibration and populate the "ui32BarDetectionOffset" filed in the global "QREResultDataType" type variable
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
	//------------------------------

	uint8_t i;

	// set the "ui32BarDetectionOffset" filed
	for(i=0; i<8; i++)
 8005cee:	2300      	movs	r3, #0
 8005cf0:	71fb      	strb	r3, [r7, #7]
 8005cf2:	e02e      	b.n	8005d52 <QREEndOffsetCalibration+0x6a>
	{
		if( (QREOffsetDetection.ucMaximumDetectedIntensity[i] > (QREOffsetDetection.ucMaximumDetectedIntensity[i] >> 3) ) ) QREResult.ui32BarDetectionOffset[i] = QREOffsetDetection.ucMaximumDetectedIntensity[i] - (QREOffsetDetection.ucMaximumDetectedIntensity[i] >> 3);		// the value + 12.5%
 8005cf4:	79fb      	ldrb	r3, [r7, #7]
 8005cf6:	4a20      	ldr	r2, [pc, #128]	; (8005d78 <QREEndOffsetCalibration+0x90>)
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	491d      	ldr	r1, [pc, #116]	; (8005d78 <QREEndOffsetCalibration+0x90>)
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	440b      	add	r3, r1
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	08db      	lsrs	r3, r3, #3
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d912      	bls.n	8005d34 <QREEndOffsetCalibration+0x4c>
 8005d0e:	79fb      	ldrb	r3, [r7, #7]
 8005d10:	4a19      	ldr	r2, [pc, #100]	; (8005d78 <QREEndOffsetCalibration+0x90>)
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	6859      	ldr	r1, [r3, #4]
 8005d18:	79fb      	ldrb	r3, [r7, #7]
 8005d1a:	4a17      	ldr	r2, [pc, #92]	; (8005d78 <QREEndOffsetCalibration+0x90>)
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	08da      	lsrs	r2, r3, #3
 8005d24:	79fb      	ldrb	r3, [r7, #7]
 8005d26:	1a8a      	subs	r2, r1, r2
 8005d28:	4914      	ldr	r1, [pc, #80]	; (8005d7c <QREEndOffsetCalibration+0x94>)
 8005d2a:	3318      	adds	r3, #24
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	440b      	add	r3, r1
 8005d30:	605a      	str	r2, [r3, #4]
 8005d32:	e00b      	b.n	8005d4c <QREEndOffsetCalibration+0x64>
		else 																												QREResult.ui32BarDetectionOffset[i] = QREOffsetDetection.ucMaximumDetectedIntensity[i];
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	79f9      	ldrb	r1, [r7, #7]
 8005d38:	4a0f      	ldr	r2, [pc, #60]	; (8005d78 <QREEndOffsetCalibration+0x90>)
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	480e      	ldr	r0, [pc, #56]	; (8005d7c <QREEndOffsetCalibration+0x94>)
 8005d42:	f101 0318 	add.w	r3, r1, #24
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4403      	add	r3, r0
 8005d4a:	605a      	str	r2, [r3, #4]
	for(i=0; i<8; i++)
 8005d4c:	79fb      	ldrb	r3, [r7, #7]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	71fb      	strb	r3, [r7, #7]
 8005d52:	79fb      	ldrb	r3, [r7, #7]
 8005d54:	2b07      	cmp	r3, #7
 8005d56:	d9cd      	bls.n	8005cf4 <QREEndOffsetCalibration+0xc>
	}

	// Calibration is not done yet
	QREOffsetDetection.ucOffsetDetectionDone = 1;
 8005d58:	4b07      	ldr	r3, [pc, #28]	; (8005d78 <QREEndOffsetCalibration+0x90>)
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	705a      	strb	r2, [r3, #1]

	// calibration in progress
	QREOffsetDetection.ucOffsetDetectionInProgress = 0;
 8005d5e:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <QREEndOffsetCalibration+0x90>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	701a      	strb	r2, [r3, #0]

	// timeout
	QREOffsetDetection.ucOfsetDetectionTimeoutMS = 0;
 8005d64:	4b04      	ldr	r3, [pc, #16]	; (8005d78 <QREEndOffsetCalibration+0x90>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	805a      	strh	r2, [r3, #2]

	return;
 8005d6a:	bf00      	nop
}
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	20001b80 	.word	0x20001b80
 8005d7c:	20001adc 	.word	0x20001adc

08005d80 <QREInit>:


// SYSTEM
//==================================================================================================================== SYSTEM_START
void QREInit(void)	// used to initialize the QRE Module. Called from main.c file @ init section
{
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0

	QREMeasurementData.ucSkipLEDSwitchingCounterLimit 	= (uint8_t) QRE_SKIP_COUNTER_DEFAULT;
 8005d84:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <QREInit+0x1c>)
 8005d86:	2204      	movs	r2, #4
 8005d88:	705a      	strb	r2, [r3, #1]
	QREMeasurementData.ucADCMeasurementCounterLimit 	= QRE_MEASUREMENTS_LIMIT;
 8005d8a:	4b04      	ldr	r3, [pc, #16]	; (8005d9c <QREInit+0x1c>)
 8005d8c:	2208      	movs	r2, #8
 8005d8e:	70da      	strb	r2, [r3, #3]

	return;
 8005d90:	bf00      	nop
}
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	20001a8c 	.word	0x20001a8c

08005da0 <QREMainLoop>:
//----------------------------------------------------------------------------------
void QREMainLoop(void)	// loop function of the QRE Module. Called from the main.c file @ main loop section
{
 8005da0:	b590      	push	{r4, r7, lr}
 8005da2:	b0a7      	sub	sp, #156	; 0x9c
 8005da4:	af26      	add	r7, sp, #152	; 0x98
	//uint16_t uiTemp[8];

	// skip real time
	if(m_uiQRESkipRealTime)
 8005da6:	4b15      	ldr	r3, [pc, #84]	; (8005dfc <QREMainLoop+0x5c>)
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d006      	beq.n	8005dbc <QREMainLoop+0x1c>
	{
		m_uiQRESkipRealTime --;
 8005dae:	4b13      	ldr	r3, [pc, #76]	; (8005dfc <QREMainLoop+0x5c>)
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	4b11      	ldr	r3, [pc, #68]	; (8005dfc <QREMainLoop+0x5c>)
 8005db8:	801a      	strh	r2, [r3, #0]
		return;
 8005dba:	e01c      	b.n	8005df6 <QREMainLoop+0x56>
	}
	m_uiQRESkipRealTime = QRE_SKIP_REAL_TIME;
 8005dbc:	4b0f      	ldr	r3, [pc, #60]	; (8005dfc <QREMainLoop+0x5c>)
 8005dbe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005dc2:	801a      	strh	r2, [r3, #0]
	//--------------------------------------------------------

	// ----------- processes the received data ------------------
	CalledFromMainLoop();		// gets the measured data
 8005dc4:	f000 f8fa 	bl	8005fbc <CalledFromMainLoop>
	// ----------------------------------------------------------

	// --------------- handles stripe detection -----------------
	OffsetCalibrationMainLoop();	// adds the offset component and the dark stripe detection
 8005dc8:	f000 f98c 	bl	80060e4 <OffsetCalibrationMainLoop>
	DebugShowMainLoop();
	#endif
	// ----------------------------------------------------------

	// -------- call the callback if data is available ----------
	if( (QREResult.ucNewResultIsAvailable  == 1) )
 8005dcc:	4b0c      	ldr	r3, [pc, #48]	; (8005e00 <QREMainLoop+0x60>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d10e      	bne.n	8005df4 <QREMainLoop+0x54>
	{
		QREResultCallback(QREResult);
 8005dd6:	4c0a      	ldr	r4, [pc, #40]	; (8005e00 <QREMainLoop+0x60>)
 8005dd8:	4668      	mov	r0, sp
 8005dda:	f104 0310 	add.w	r3, r4, #16
 8005dde:	2294      	movs	r2, #148	; 0x94
 8005de0:	4619      	mov	r1, r3
 8005de2:	f00d f9a8 	bl	8013136 <memcpy>
 8005de6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005dea:	f7ff ff71 	bl	8005cd0 <QREResultCallback>
		QREResult.ucNewResultIsAvailable  = 0;
 8005dee:	4b04      	ldr	r3, [pc, #16]	; (8005e00 <QREMainLoop+0x60>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	701a      	strb	r2, [r3, #0]
	}
	// ----------------------------------------------------------

	return;
 8005df4:	bf00      	nop
}
 8005df6:	3704      	adds	r7, #4
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd90      	pop	{r4, r7, pc}
 8005dfc:	20001a88 	.word	0x20001a88
 8005e00:	20001adc 	.word	0x20001adc

08005e04 <QRETimer1KHZISR>:
//----------------------------------------------------------------------------------
void QRETimer1KHZISR(void)	// 1KHZ timer function called from System ISR from stm32f4xx_it.c file @ SysTick Function (!!! keep as short as possible !!!)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0

	CalledFromTimer1KHZISR();
 8005e08:	f000 f80a 	bl	8005e20 <CalledFromTimer1KHZISR>

	OffsetCalibrationTimer1KHZISR();
 8005e0c:	f000 f9e2 	bl	80061d4 <OffsetCalibrationTimer1KHZISR>

	return;
 8005e10:	bf00      	nop
}
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <QREADC2DMACallback>:
//----------------------------------------------------------------------------------
void QREADC2DMACallback(void)	// used to be called from the stm32f4xx_it.c once the DMA reads all the ADC values related to the 8 QRE sensors
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0

	CalledFromADCDMAISR();
 8005e18:	f000 f878 	bl	8005f0c <CalledFromADCDMAISR>

	return;
 8005e1c:	bf00      	nop
}
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <CalledFromTimer1KHZISR>:

// STATIC (INTERN) implementation
//==================================================================================================================== STATIC_START

static void CalledFromTimer1KHZISR(void)			// for LED ON/OFF switching and	ADC measurement triggering
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	af00      	add	r7, sp, #0
	// -------------- the measurement is done -----------------
	if( (QREMeasurementData.ucMeasurementDone == 1) )
 8005e24:	4b35      	ldr	r3, [pc, #212]	; (8005efc <CalledFromTimer1KHZISR+0xdc>)
 8005e26:	791b      	ldrb	r3, [r3, #4]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d064      	beq.n	8005ef8 <CalledFromTimer1KHZISR+0xd8>
		return;
	}
	// --------------------------------------------------------

	// -------------- the measurement is done -----------------
	if( (QREMeasurementData.ucMeasurementDone == 2) )
 8005e2e:	4b33      	ldr	r3, [pc, #204]	; (8005efc <CalledFromTimer1KHZISR+0xdc>)
 8005e30:	791b      	ldrb	r3, [r3, #4]
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d116      	bne.n	8005e66 <CalledFromTimer1KHZISR+0x46>
	{	// now we start another measurement sequence

		// turn LED OFF and take another measurement
		QREMeasurementData.ucIRLEDOnOffStatus = IR_LED_ON;
 8005e38:	4b30      	ldr	r3, [pc, #192]	; (8005efc <CalledFromTimer1KHZISR+0xdc>)
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	715a      	strb	r2, [r3, #5]
		HAL_GPIO_WritePin(Q0_GPIO_Port, Q0_Pin, GPIO_PIN_SET);	//  IR LED is turned ON
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e44:	482e      	ldr	r0, [pc, #184]	; (8005f00 <CalledFromTimer1KHZISR+0xe0>)
 8005e46:	f005 ffe1 	bl	800be0c <HAL_GPIO_WritePin>

		// re-arm the counters
		QREMeasurementData.ucSkipLEDSwitchingCounter 	= QREMeasurementData.ucSkipLEDSwitchingCounterLimit;
 8005e4a:	4b2c      	ldr	r3, [pc, #176]	; (8005efc <CalledFromTimer1KHZISR+0xdc>)
 8005e4c:	785b      	ldrb	r3, [r3, #1]
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	4b2a      	ldr	r3, [pc, #168]	; (8005efc <CalledFromTimer1KHZISR+0xdc>)
 8005e52:	701a      	strb	r2, [r3, #0]
		QREMeasurementData.ucADCMeasurementCounter		= QREMeasurementData.ucADCMeasurementCounterLimit;
 8005e54:	4b29      	ldr	r3, [pc, #164]	; (8005efc <CalledFromTimer1KHZISR+0xdc>)
 8005e56:	78db      	ldrb	r3, [r3, #3]
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	4b28      	ldr	r3, [pc, #160]	; (8005efc <CalledFromTimer1KHZISR+0xdc>)
 8005e5c:	709a      	strb	r2, [r3, #2]

		// wait for the end of the measurement
		QREMeasurementData.ucMeasurementDone = 0;
 8005e5e:	4b27      	ldr	r3, [pc, #156]	; (8005efc <CalledFromTimer1KHZISR+0xdc>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	711a      	strb	r2, [r3, #4]
		return;
 8005e64:	e049      	b.n	8005efa <CalledFromTimer1KHZISR+0xda>
	}
	// --------------------------------------------------------

	// --------- skip the time between IR changes -------------
	if( (QREMeasurementData.ucSkipLEDSwitchingCounter) )
 8005e66:	4b25      	ldr	r3, [pc, #148]	; (8005efc <CalledFromTimer1KHZISR+0xdc>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d007      	beq.n	8005e80 <CalledFromTimer1KHZISR+0x60>
	{	// skip time
		QREMeasurementData.ucSkipLEDSwitchingCounter --;
 8005e70:	4b22      	ldr	r3, [pc, #136]	; (8005efc <CalledFromTimer1KHZISR+0xdc>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	3b01      	subs	r3, #1
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	4b20      	ldr	r3, [pc, #128]	; (8005efc <CalledFromTimer1KHZISR+0xdc>)
 8005e7c:	701a      	strb	r2, [r3, #0]
		return;
 8005e7e:	e03c      	b.n	8005efa <CalledFromTimer1KHZISR+0xda>
	}
	// --------------------------------------------------------

	// --------- perform the measurement series ---------------
	if( (QREMeasurementData.ucADCMeasurementCounter) )
 8005e80:	4b1e      	ldr	r3, [pc, #120]	; (8005efc <CalledFromTimer1KHZISR+0xdc>)
 8005e82:	789b      	ldrb	r3, [r3, #2]
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d019      	beq.n	8005ebe <CalledFromTimer1KHZISR+0x9e>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e90:	481b      	ldr	r0, [pc, #108]	; (8005f00 <CalledFromTimer1KHZISR+0xe0>)
 8005e92:	f005 ffbb 	bl	800be0c <HAL_GPIO_WritePin>

		// ADC trigger
		if( HAL_ADC_Start_DMA(&hadc2,m_ui32ADCData,8) != HAL_OK )
 8005e96:	2208      	movs	r2, #8
 8005e98:	491a      	ldr	r1, [pc, #104]	; (8005f04 <CalledFromTimer1KHZISR+0xe4>)
 8005e9a:	481b      	ldr	r0, [pc, #108]	; (8005f08 <CalledFromTimer1KHZISR+0xe8>)
 8005e9c:	f004 fd14 	bl	800a8c8 <HAL_ADC_Start_DMA>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <CalledFromTimer1KHZISR+0x8e>
		{
			#ifdef QRE_DEBUG_MODE
			sprintf((char * )m_ucDebugBuffer,"QRE Error 01\r\n");
			DebugSendData(m_ucDebugBuffer,strlen((char *)m_ucDebugBuffer));
			#endif
			Error_Handler2(ERROR_CODE_QRE_DEBUG_001);
 8005ea6:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 8005eaa:	f003 fd33 	bl	8009914 <Error_Handler2>
		}

		QREMeasurementData.ucADCMeasurementCounter --;
 8005eae:	4b13      	ldr	r3, [pc, #76]	; (8005efc <CalledFromTimer1KHZISR+0xdc>)
 8005eb0:	789b      	ldrb	r3, [r3, #2]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	4b10      	ldr	r3, [pc, #64]	; (8005efc <CalledFromTimer1KHZISR+0xdc>)
 8005eba:	709a      	strb	r2, [r3, #2]

		return;
 8005ebc:	e01d      	b.n	8005efa <CalledFromTimer1KHZISR+0xda>
	}
	// --------------------------------------------------------

	// ------- switch the IR pattern and check for the end of the measurements ---------
	if( (QREMeasurementData.ucIRLEDOnOffStatus == IR_LED_ON) )
 8005ebe:	4b0f      	ldr	r3, [pc, #60]	; (8005efc <CalledFromTimer1KHZISR+0xdc>)
 8005ec0:	795b      	ldrb	r3, [r3, #5]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d113      	bne.n	8005ef0 <CalledFromTimer1KHZISR+0xd0>
	{	// change the IR pattern
		// turn LED OFF and take another measurement
		QREMeasurementData.ucIRLEDOnOffStatus = IR_LED_OFF;
 8005ec8:	4b0c      	ldr	r3, [pc, #48]	; (8005efc <CalledFromTimer1KHZISR+0xdc>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	715a      	strb	r2, [r3, #5]
		HAL_GPIO_WritePin(Q0_GPIO_Port, Q0_Pin, GPIO_PIN_RESET);  //	IR LED is turned OFF
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ed4:	480a      	ldr	r0, [pc, #40]	; (8005f00 <CalledFromTimer1KHZISR+0xe0>)
 8005ed6:	f005 ff99 	bl	800be0c <HAL_GPIO_WritePin>

		// re-arm the counters
		QREMeasurementData.ucSkipLEDSwitchingCounter 	= QREMeasurementData.ucSkipLEDSwitchingCounterLimit;
 8005eda:	4b08      	ldr	r3, [pc, #32]	; (8005efc <CalledFromTimer1KHZISR+0xdc>)
 8005edc:	785b      	ldrb	r3, [r3, #1]
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	4b06      	ldr	r3, [pc, #24]	; (8005efc <CalledFromTimer1KHZISR+0xdc>)
 8005ee2:	701a      	strb	r2, [r3, #0]
		QREMeasurementData.ucADCMeasurementCounter		= QREMeasurementData.ucADCMeasurementCounterLimit;
 8005ee4:	4b05      	ldr	r3, [pc, #20]	; (8005efc <CalledFromTimer1KHZISR+0xdc>)
 8005ee6:	78db      	ldrb	r3, [r3, #3]
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	4b04      	ldr	r3, [pc, #16]	; (8005efc <CalledFromTimer1KHZISR+0xdc>)
 8005eec:	709a      	strb	r2, [r3, #2]

		return;
 8005eee:	e004      	b.n	8005efa <CalledFromTimer1KHZISR+0xda>
	}
	// set the end of the measurement
	QREMeasurementData.ucMeasurementDone = 1;
 8005ef0:	4b02      	ldr	r3, [pc, #8]	; (8005efc <CalledFromTimer1KHZISR+0xdc>)
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	711a      	strb	r2, [r3, #4]
	// ---------------------------------------------------------------------------------

	return;
 8005ef6:	e000      	b.n	8005efa <CalledFromTimer1KHZISR+0xda>
		return;
 8005ef8:	bf00      	nop
}
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	20001a8c 	.word	0x20001a8c
 8005f00:	40020800 	.word	0x40020800
 8005f04:	20001ba4 	.word	0x20001ba4
 8005f08:	20002144 	.word	0x20002144

08005f0c <CalledFromADCDMAISR>:
//----------------------------------------------------------------------------------
static void CalledFromADCDMAISR(void)				// handles data storage once the ADC conversion has finished
{	// ADC done => the result is in the: m_ui32ADCData variable
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
	// the data will be saved into the: QREAcquisitionData structure
	//------------------------------------------

	uint8_t i;

	for(i=0; i<8; i++)
 8005f12:	2300      	movs	r3, #0
 8005f14:	71fb      	strb	r3, [r7, #7]
 8005f16:	e03e      	b.n	8005f96 <CalledFromADCDMAISR+0x8a>
	{
		// collect the measured data for all the channels
		if( (QREMeasurementData.ucIRLEDOnOffStatus == IR_LED_ON) )
 8005f18:	4b25      	ldr	r3, [pc, #148]	; (8005fb0 <CalledFromADCDMAISR+0xa4>)
 8005f1a:	795b      	ldrb	r3, [r3, #5]
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d11a      	bne.n	8005f58 <CalledFromADCDMAISR+0x4c>
		{	// the IR  LED was ON
			QREMeasurementData.ui32AccumulatedLEDONValues[i]	+= (4095 - m_ui32ADCData[i]);
 8005f22:	79fb      	ldrb	r3, [r7, #7]
 8005f24:	4a22      	ldr	r2, [pc, #136]	; (8005fb0 <CalledFromADCDMAISR+0xa4>)
 8005f26:	3302      	adds	r3, #2
 8005f28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005f2c:	79fb      	ldrb	r3, [r7, #7]
 8005f2e:	4921      	ldr	r1, [pc, #132]	; (8005fb4 <CalledFromADCDMAISR+0xa8>)
 8005f30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005f34:	1ad2      	subs	r2, r2, r3
 8005f36:	79fb      	ldrb	r3, [r7, #7]
 8005f38:	f602 72ff 	addw	r2, r2, #4095	; 0xfff
 8005f3c:	491c      	ldr	r1, [pc, #112]	; (8005fb0 <CalledFromADCDMAISR+0xa4>)
 8005f3e:	3302      	adds	r3, #2
 8005f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			QREMeasurementData.ucAccumulationCounterForON ++;
 8005f44:	4b1a      	ldr	r3, [pc, #104]	; (8005fb0 <CalledFromADCDMAISR+0xa4>)
 8005f46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	4b17      	ldr	r3, [pc, #92]	; (8005fb0 <CalledFromADCDMAISR+0xa4>)
 8005f52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005f56:	e01b      	b.n	8005f90 <CalledFromADCDMAISR+0x84>
		}
		else
		{	// the IR  LED was OFF
			QREMeasurementData.ui32AccumulatedLEDOFFValues[i]	+= (4095 - m_ui32ADCData[i]);
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	4a15      	ldr	r2, [pc, #84]	; (8005fb0 <CalledFromADCDMAISR+0xa4>)
 8005f5c:	330a      	adds	r3, #10
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	4913      	ldr	r1, [pc, #76]	; (8005fb4 <CalledFromADCDMAISR+0xa8>)
 8005f68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005f6c:	1ad2      	subs	r2, r2, r3
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	f602 72ff 	addw	r2, r2, #4095	; 0xfff
 8005f74:	490e      	ldr	r1, [pc, #56]	; (8005fb0 <CalledFromADCDMAISR+0xa4>)
 8005f76:	330a      	adds	r3, #10
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	440b      	add	r3, r1
 8005f7c:	605a      	str	r2, [r3, #4]
			QREMeasurementData.ucAccumulationCounterForOFF ++;
 8005f7e:	4b0c      	ldr	r3, [pc, #48]	; (8005fb0 <CalledFromADCDMAISR+0xa4>)
 8005f80:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	3301      	adds	r3, #1
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <CalledFromADCDMAISR+0xa4>)
 8005f8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	for(i=0; i<8; i++)
 8005f90:	79fb      	ldrb	r3, [r7, #7]
 8005f92:	3301      	adds	r3, #1
 8005f94:	71fb      	strb	r3, [r7, #7]
 8005f96:	79fb      	ldrb	r3, [r7, #7]
 8005f98:	2b07      	cmp	r3, #7
 8005f9a:	d9bd      	bls.n	8005f18 <CalledFromADCDMAISR+0xc>
		}
	}

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//  debug on PC13 LOW
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fa2:	4805      	ldr	r0, [pc, #20]	; (8005fb8 <CalledFromADCDMAISR+0xac>)
 8005fa4:	f005 ff32 	bl	800be0c <HAL_GPIO_WritePin>

	return;
 8005fa8:	bf00      	nop
}
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	20001a8c 	.word	0x20001a8c
 8005fb4:	20001ba4 	.word	0x20001ba4
 8005fb8:	40020800 	.word	0x40020800

08005fbc <CalledFromMainLoop>:
//----------------------------------------------------------------------------------
static void CalledFromMainLoop(void)				// handles main loop activities related to the QRE operation
{	// QREResult
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
	// QREMeasurementData
	//---------------------------------

	uint8_t 	i;

	if( (QREMeasurementData.ucMeasurementDone == 1) )
 8005fc2:	4b46      	ldr	r3, [pc, #280]	; (80060dc <CalledFromMainLoop+0x120>)
 8005fc4:	791b      	ldrb	r3, [r3, #4]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	f040 8081 	bne.w	80060d0 <CalledFromMainLoop+0x114>
	{	// measurement is done => process the data and reset the "QREMeasurementData" structure

		// ----------- store the result in the result data structure --------------
		if( (QREResult.ucNewResultIsAvailable == 0) )
 8005fce:	4b44      	ldr	r3, [pc, #272]	; (80060e0 <CalledFromMainLoop+0x124>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d159      	bne.n	800608c <CalledFromMainLoop+0xd0>
		{
			QREResult.ucNewResultIsAvailable = 1;
 8005fd8:	4b41      	ldr	r3, [pc, #260]	; (80060e0 <CalledFromMainLoop+0x124>)
 8005fda:	2201      	movs	r2, #1
 8005fdc:	701a      	strb	r2, [r3, #0]

			for(i=0; i<8; i++)
 8005fde:	2300      	movs	r3, #0
 8005fe0:	71fb      	strb	r3, [r7, #7]
 8005fe2:	e050      	b.n	8006086 <CalledFromMainLoop+0xca>
			{
				// calculate the correlation
				if( (QREMeasurementData.ui32AccumulatedLEDONValues[i] > QREMeasurementData.ui32AccumulatedLEDOFFValues[i]) )	QREResult.ui32CorrelationMagnitude[i] = (QREMeasurementData.ui32AccumulatedLEDONValues[i] - QREMeasurementData.ui32AccumulatedLEDOFFValues[i]);
 8005fe4:	79fb      	ldrb	r3, [r7, #7]
 8005fe6:	4a3d      	ldr	r2, [pc, #244]	; (80060dc <CalledFromMainLoop+0x120>)
 8005fe8:	3302      	adds	r3, #2
 8005fea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005fee:	79fb      	ldrb	r3, [r7, #7]
 8005ff0:	493a      	ldr	r1, [pc, #232]	; (80060dc <CalledFromMainLoop+0x120>)
 8005ff2:	330a      	adds	r3, #10
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	440b      	add	r3, r1
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d912      	bls.n	8006024 <CalledFromMainLoop+0x68>
 8005ffe:	79fb      	ldrb	r3, [r7, #7]
 8006000:	4a36      	ldr	r2, [pc, #216]	; (80060dc <CalledFromMainLoop+0x120>)
 8006002:	3302      	adds	r3, #2
 8006004:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006008:	79fb      	ldrb	r3, [r7, #7]
 800600a:	4a34      	ldr	r2, [pc, #208]	; (80060dc <CalledFromMainLoop+0x120>)
 800600c:	330a      	adds	r3, #10
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	79fb      	ldrb	r3, [r7, #7]
 8006016:	1a8a      	subs	r2, r1, r2
 8006018:	4931      	ldr	r1, [pc, #196]	; (80060e0 <CalledFromMainLoop+0x124>)
 800601a:	3308      	adds	r3, #8
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	440b      	add	r3, r1
 8006020:	605a      	str	r2, [r3, #4]
 8006022:	e006      	b.n	8006032 <CalledFromMainLoop+0x76>
				else  																											QREResult.ui32CorrelationMagnitude[i] = 0;
 8006024:	79fb      	ldrb	r3, [r7, #7]
 8006026:	4a2e      	ldr	r2, [pc, #184]	; (80060e0 <CalledFromMainLoop+0x124>)
 8006028:	3308      	adds	r3, #8
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	2200      	movs	r2, #0
 8006030:	605a      	str	r2, [r3, #4]

				// self reflection
				if( (QREResult.ui32CorrelationMagnitude[i] > QRE_SELF_REFLECTION_THRESHOLD) )		QREResult.ui32SelfIntensity[i] = QREMeasurementData.ui32AccumulatedLEDONValues[i];
 8006032:	79fb      	ldrb	r3, [r7, #7]
 8006034:	4a2a      	ldr	r2, [pc, #168]	; (80060e0 <CalledFromMainLoop+0x124>)
 8006036:	3308      	adds	r3, #8
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	2b32      	cmp	r3, #50	; 0x32
 8006040:	d90a      	bls.n	8006058 <CalledFromMainLoop+0x9c>
 8006042:	79fa      	ldrb	r2, [r7, #7]
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	4925      	ldr	r1, [pc, #148]	; (80060dc <CalledFromMainLoop+0x120>)
 8006048:	3202      	adds	r2, #2
 800604a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800604e:	4924      	ldr	r1, [pc, #144]	; (80060e0 <CalledFromMainLoop+0x124>)
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	440b      	add	r3, r1
 8006054:	605a      	str	r2, [r3, #4]
 8006056:	e006      	b.n	8006066 <CalledFromMainLoop+0xaa>
				else 																				QREResult.ui32SelfIntensity[i] = 0xFFFFFFFF;
 8006058:	79fb      	ldrb	r3, [r7, #7]
 800605a:	4a21      	ldr	r2, [pc, #132]	; (80060e0 <CalledFromMainLoop+0x124>)
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006064:	605a      	str	r2, [r3, #4]

				// ambient light
				QREResult.ui32AmbientSignal[i] = QREMeasurementData.ui32AccumulatedLEDOFFValues[i];	// consider only the signal from the external sources
 8006066:	79fb      	ldrb	r3, [r7, #7]
 8006068:	79f9      	ldrb	r1, [r7, #7]
 800606a:	4a1c      	ldr	r2, [pc, #112]	; (80060dc <CalledFromMainLoop+0x120>)
 800606c:	330a      	adds	r3, #10
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	481a      	ldr	r0, [pc, #104]	; (80060e0 <CalledFromMainLoop+0x124>)
 8006076:	f101 0310 	add.w	r3, r1, #16
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4403      	add	r3, r0
 800607e:	605a      	str	r2, [r3, #4]
			for(i=0; i<8; i++)
 8006080:	79fb      	ldrb	r3, [r7, #7]
 8006082:	3301      	adds	r3, #1
 8006084:	71fb      	strb	r3, [r7, #7]
 8006086:	79fb      	ldrb	r3, [r7, #7]
 8006088:	2b07      	cmp	r3, #7
 800608a:	d9ab      	bls.n	8005fe4 <CalledFromMainLoop+0x28>
			}
		}
		// ------------------------------------------------------------------------

		// ------------ Clear the Measurement data structure ----------------------
		QREMeasurementData.ucAccumulationCounterForON = 0;		// not used for now
 800608c:	4b13      	ldr	r3, [pc, #76]	; (80060dc <CalledFromMainLoop+0x120>)
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		QREMeasurementData.ucAccumulationCounterForOFF = 0;		// not used for now
 8006094:	4b11      	ldr	r3, [pc, #68]	; (80060dc <CalledFromMainLoop+0x120>)
 8006096:	2200      	movs	r2, #0
 8006098:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		for(i=0; i<8; i++)
 800609c:	2300      	movs	r3, #0
 800609e:	71fb      	strb	r3, [r7, #7]
 80060a0:	e00f      	b.n	80060c2 <CalledFromMainLoop+0x106>
		{
			QREMeasurementData.ui32AccumulatedLEDOFFValues[i] 	= 0;
 80060a2:	79fb      	ldrb	r3, [r7, #7]
 80060a4:	4a0d      	ldr	r2, [pc, #52]	; (80060dc <CalledFromMainLoop+0x120>)
 80060a6:	330a      	adds	r3, #10
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	2200      	movs	r2, #0
 80060ae:	605a      	str	r2, [r3, #4]
			QREMeasurementData.ui32AccumulatedLEDONValues[i]	= 0;
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	4a0a      	ldr	r2, [pc, #40]	; (80060dc <CalledFromMainLoop+0x120>)
 80060b4:	3302      	adds	r3, #2
 80060b6:	2100      	movs	r1, #0
 80060b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(i=0; i<8; i++)
 80060bc:	79fb      	ldrb	r3, [r7, #7]
 80060be:	3301      	adds	r3, #1
 80060c0:	71fb      	strb	r3, [r7, #7]
 80060c2:	79fb      	ldrb	r3, [r7, #7]
 80060c4:	2b07      	cmp	r3, #7
 80060c6:	d9ec      	bls.n	80060a2 <CalledFromMainLoop+0xe6>
		}
		QREMeasurementData.ucMeasurementDone = 2;	// start another measurement
 80060c8:	4b04      	ldr	r3, [pc, #16]	; (80060dc <CalledFromMainLoop+0x120>)
 80060ca:	2202      	movs	r2, #2
 80060cc:	711a      	strb	r2, [r3, #4]



	// ----------------------------------------------------------

	return;
 80060ce:	bf00      	nop
 80060d0:	bf00      	nop
}
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	20001a8c 	.word	0x20001a8c
 80060e0:	20001adc 	.word	0x20001adc

080060e4 <OffsetCalibrationMainLoop>:
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------

// bar detection
static void OffsetCalibrationMainLoop(void)		// used during the offset calibration
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
	uint8_t i;

	// ------------- check if there is  new data available ------------------
	if( (QREResult.ucNewResultIsAvailable == 0) )	return;	// no new data
 80060ea:	4b38      	ldr	r3, [pc, #224]	; (80061cc <OffsetCalibrationMainLoop+0xe8>)
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d062      	beq.n	80061ba <OffsetCalibrationMainLoop+0xd6>
	// ----------------------------------------------------------------------

	// ------------------ used during offset calibration --------------------
	if( (QREOffsetDetection.ucOffsetDetectionInProgress == 1) )
 80060f4:	4b36      	ldr	r3, [pc, #216]	; (80061d0 <OffsetCalibrationMainLoop+0xec>)
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d127      	bne.n	800614e <OffsetCalibrationMainLoop+0x6a>
	{	// get the maximum
		for(i=0; i<8; i++)
 80060fe:	2300      	movs	r3, #0
 8006100:	71fb      	strb	r3, [r7, #7]
 8006102:	e020      	b.n	8006146 <OffsetCalibrationMainLoop+0x62>
		{
			if(QREResult.ui32SelfIntensity[i] < 0xFFFFFFFF)
 8006104:	79fb      	ldrb	r3, [r7, #7]
 8006106:	4a31      	ldr	r2, [pc, #196]	; (80061cc <OffsetCalibrationMainLoop+0xe8>)
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006112:	d015      	beq.n	8006140 <OffsetCalibrationMainLoop+0x5c>
			{
				if( (QREOffsetDetection.ucMaximumDetectedIntensity[i] < QREResult.ui32SelfIntensity[i]) ) 	QREOffsetDetection.ucMaximumDetectedIntensity[i] = QREResult.ui32SelfIntensity[i];
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	4a2e      	ldr	r2, [pc, #184]	; (80061d0 <OffsetCalibrationMainLoop+0xec>)
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	79fb      	ldrb	r3, [r7, #7]
 8006120:	492a      	ldr	r1, [pc, #168]	; (80061cc <OffsetCalibrationMainLoop+0xe8>)
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	440b      	add	r3, r1
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	429a      	cmp	r2, r3
 800612a:	d209      	bcs.n	8006140 <OffsetCalibrationMainLoop+0x5c>
 800612c:	79fb      	ldrb	r3, [r7, #7]
 800612e:	79f9      	ldrb	r1, [r7, #7]
 8006130:	4a26      	ldr	r2, [pc, #152]	; (80061cc <OffsetCalibrationMainLoop+0xe8>)
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	4825      	ldr	r0, [pc, #148]	; (80061d0 <OffsetCalibrationMainLoop+0xec>)
 800613a:	008b      	lsls	r3, r1, #2
 800613c:	4403      	add	r3, r0
 800613e:	605a      	str	r2, [r3, #4]
		for(i=0; i<8; i++)
 8006140:	79fb      	ldrb	r3, [r7, #7]
 8006142:	3301      	adds	r3, #1
 8006144:	71fb      	strb	r3, [r7, #7]
 8006146:	79fb      	ldrb	r3, [r7, #7]
 8006148:	2b07      	cmp	r3, #7
 800614a:	d9db      	bls.n	8006104 <OffsetCalibrationMainLoop+0x20>
			}

		}
		return;
 800614c:	e038      	b.n	80061c0 <OffsetCalibrationMainLoop+0xdc>
	}
	// ----------------------------------------------------------------------

	// ----------------- used after offset calibration ----------------------
	if( (QREOffsetDetection.ucOffsetDetectionDone == 1) )
 800614e:	4b20      	ldr	r3, [pc, #128]	; (80061d0 <OffsetCalibrationMainLoop+0xec>)
 8006150:	785b      	ldrb	r3, [r3, #1]
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b01      	cmp	r3, #1
 8006156:	d132      	bne.n	80061be <OffsetCalibrationMainLoop+0xda>
	{// offset calibration already is done and the offset thresholds are stored in the "QREResult.ui32BarDetectionOffset[]" field
		for(i=0; i<8; i++)
 8006158:	2300      	movs	r3, #0
 800615a:	71fb      	strb	r3, [r7, #7]
 800615c:	e029      	b.n	80061b2 <OffsetCalibrationMainLoop+0xce>
		{
			if( (QREResult.ui32SelfIntensity[i] < QREResult.ui32BarDetectionOffset[i]) )	QREResult.ui32BarDetection[i] = (QREResult.ui32BarDetectionOffset[i] - QREResult.ui32SelfIntensity[i]);
 800615e:	79fb      	ldrb	r3, [r7, #7]
 8006160:	4a1a      	ldr	r2, [pc, #104]	; (80061cc <OffsetCalibrationMainLoop+0xe8>)
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	79fb      	ldrb	r3, [r7, #7]
 800616a:	4918      	ldr	r1, [pc, #96]	; (80061cc <OffsetCalibrationMainLoop+0xe8>)
 800616c:	3318      	adds	r3, #24
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	440b      	add	r3, r1
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	429a      	cmp	r2, r3
 8006176:	d212      	bcs.n	800619e <OffsetCalibrationMainLoop+0xba>
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	4a14      	ldr	r2, [pc, #80]	; (80061cc <OffsetCalibrationMainLoop+0xe8>)
 800617c:	3318      	adds	r3, #24
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	6859      	ldr	r1, [r3, #4]
 8006184:	79fb      	ldrb	r3, [r7, #7]
 8006186:	4a11      	ldr	r2, [pc, #68]	; (80061cc <OffsetCalibrationMainLoop+0xe8>)
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	79fb      	ldrb	r3, [r7, #7]
 8006190:	1a8a      	subs	r2, r1, r2
 8006192:	490e      	ldr	r1, [pc, #56]	; (80061cc <OffsetCalibrationMainLoop+0xe8>)
 8006194:	3320      	adds	r3, #32
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	440b      	add	r3, r1
 800619a:	605a      	str	r2, [r3, #4]
 800619c:	e006      	b.n	80061ac <OffsetCalibrationMainLoop+0xc8>
			else 																			QREResult.ui32BarDetection[i] = 0;
 800619e:	79fb      	ldrb	r3, [r7, #7]
 80061a0:	4a0a      	ldr	r2, [pc, #40]	; (80061cc <OffsetCalibrationMainLoop+0xe8>)
 80061a2:	3320      	adds	r3, #32
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	2200      	movs	r2, #0
 80061aa:	605a      	str	r2, [r3, #4]
		for(i=0; i<8; i++)
 80061ac:	79fb      	ldrb	r3, [r7, #7]
 80061ae:	3301      	adds	r3, #1
 80061b0:	71fb      	strb	r3, [r7, #7]
 80061b2:	79fb      	ldrb	r3, [r7, #7]
 80061b4:	2b07      	cmp	r3, #7
 80061b6:	d9d2      	bls.n	800615e <OffsetCalibrationMainLoop+0x7a>
		}
		return;
 80061b8:	e002      	b.n	80061c0 <OffsetCalibrationMainLoop+0xdc>
	if( (QREResult.ucNewResultIsAvailable == 0) )	return;	// no new data
 80061ba:	bf00      	nop
 80061bc:	e000      	b.n	80061c0 <OffsetCalibrationMainLoop+0xdc>
	}
	// ----------------------------------------------------------------------

	return;
 80061be:	bf00      	nop
}
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	20001adc 	.word	0x20001adc
 80061d0:	20001b80 	.word	0x20001b80

080061d4 <OffsetCalibrationTimer1KHZISR>:
//----------------------------------------------------------------------------------
static void OffsetCalibrationTimer1KHZISR(void)	// used for the calibration timeout
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
	if( (QREOffsetDetection.ucOfsetDetectionTimeoutMS) )
 80061d8:	4b0a      	ldr	r3, [pc, #40]	; (8006204 <OffsetCalibrationTimer1KHZISR+0x30>)
 80061da:	885b      	ldrh	r3, [r3, #2]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00e      	beq.n	8006200 <OffsetCalibrationTimer1KHZISR+0x2c>
	{
		QREOffsetDetection.ucOfsetDetectionTimeoutMS --;
 80061e2:	4b08      	ldr	r3, [pc, #32]	; (8006204 <OffsetCalibrationTimer1KHZISR+0x30>)
 80061e4:	885b      	ldrh	r3, [r3, #2]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	4b05      	ldr	r3, [pc, #20]	; (8006204 <OffsetCalibrationTimer1KHZISR+0x30>)
 80061ee:	805a      	strh	r2, [r3, #2]
		if( (QREOffsetDetection.ucOfsetDetectionTimeoutMS == 0) )	QREEndOffsetCalibration();
 80061f0:	4b04      	ldr	r3, [pc, #16]	; (8006204 <OffsetCalibrationTimer1KHZISR+0x30>)
 80061f2:	885b      	ldrh	r3, [r3, #2]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d102      	bne.n	8006200 <OffsetCalibrationTimer1KHZISR+0x2c>
 80061fa:	f7ff fd75 	bl	8005ce8 <QREEndOffsetCalibration>
	}

	return;
 80061fe:	bf00      	nop
 8006200:	bf00      	nop
}
 8006202:	bd80      	pop	{r7, pc}
 8006204:	20001b80 	.word	0x20001b80

08006208 <VL53l0xReslutCallback>:

// API
//==================================================================================================================== API_START
// callback
__attribute__ ((weak)) void VL53l0xReslutCallback(uint16_t ui16BL53l0xResultMM)			// if implemented in the client *.c file it will be called every time a new result is available
{	// called every time a new measurement result is available
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	4603      	mov	r3, r0
 8006210:	80fb      	strh	r3, [r7, #6]
		sprintf((char * )m_ucDebugBuffer,"VL53: Error, No Data\r\n");
	}
	DebugSendData(m_ucDebugBuffer,strlen((char *)m_ucDebugBuffer));
	#endif

	return;
 8006212:	bf00      	nop
}
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
	...

08006220 <VL53l0xInit>:


// SYSTEM
//==================================================================================================================== SYSTEM_START
void VL53l0xInit(void)	// used to initialize the VL53l0x Module. Called from main.c file @ init section
{
 8006220:	b580      	push	{r7, lr}
 8006222:	af00      	add	r7, sp, #0
	// trigger the first reception
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&m_ucRXChar, 1);
 8006224:	2201      	movs	r2, #1
 8006226:	4903      	ldr	r1, [pc, #12]	; (8006234 <VL53l0xInit+0x14>)
 8006228:	4803      	ldr	r0, [pc, #12]	; (8006238 <VL53l0xInit+0x18>)
 800622a:	f00b f8cf 	bl	80113cc <HAL_UART_Receive_IT>

	return;
 800622e:	bf00      	nop
}
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	20001bc6 	.word	0x20001bc6
 8006238:	200025d8 	.word	0x200025d8

0800623c <VL53l0xMainLoop>:
//----------------------------------------------------------------------------------
void VL53l0xMainLoop(void)	// loop function of the VL53l0x Module. Called from the main.c file @ main loop section
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
	uint8_t ucTXData;

	// skip real time
	if(m_uiVL53l0xSkipRealTime)
 8006242:	4b1e      	ldr	r3, [pc, #120]	; (80062bc <VL53l0xMainLoop+0x80>)
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d006      	beq.n	8006258 <VL53l0xMainLoop+0x1c>
	{
		m_uiVL53l0xSkipRealTime --;
 800624a:	4b1c      	ldr	r3, [pc, #112]	; (80062bc <VL53l0xMainLoop+0x80>)
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	3b01      	subs	r3, #1
 8006250:	b29a      	uxth	r2, r3
 8006252:	4b1a      	ldr	r3, [pc, #104]	; (80062bc <VL53l0xMainLoop+0x80>)
 8006254:	801a      	strh	r2, [r3, #0]
		return;
 8006256:	e02d      	b.n	80062b4 <VL53l0xMainLoop+0x78>
	}
	m_uiVL53l0xSkipRealTime = VL53L0X_SKIP_REAL_TIME;
 8006258:	4b18      	ldr	r3, [pc, #96]	; (80062bc <VL53l0xMainLoop+0x80>)
 800625a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800625e:	801a      	strh	r2, [r3, #0]
	//--------------------------------------------------------

	// ------------ TX section ----------------
	if( m_ui16TimerDivider1KHZ == 0 )
 8006260:	4b17      	ldr	r3, [pc, #92]	; (80062c0 <VL53l0xMainLoop+0x84>)
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	b29b      	uxth	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10b      	bne.n	8006282 <VL53l0xMainLoop+0x46>
	{	// trigger another interrogation
		ucTXData = 'i';
 800626a:	2369      	movs	r3, #105	; 0x69
 800626c:	71fb      	strb	r3, [r7, #7]
		// HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
		// HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH
		//HAL_UART_Transmit(&huart3,&ucTXData,1,HAL_MAX_DELAY);
		HAL_UART_Transmit_IT(&huart3,&ucTXData,1);
 800626e:	1dfb      	adds	r3, r7, #7
 8006270:	2201      	movs	r2, #1
 8006272:	4619      	mov	r1, r3
 8006274:	4813      	ldr	r0, [pc, #76]	; (80062c4 <VL53l0xMainLoop+0x88>)
 8006276:	f00b f864 	bl	8011342 <HAL_UART_Transmit_IT>
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  //	debug on PC13 LOW
		m_ui16TimerDivider1KHZ = 999;
 800627a:	4b11      	ldr	r3, [pc, #68]	; (80062c0 <VL53l0xMainLoop+0x84>)
 800627c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006280:	801a      	strh	r2, [r3, #0]
	// ----------------------------------------


	// ------------- RX Section ---------------
	// check RX timeout
	if( (m_ucRXTimeoutMS == 0) && (m_ucRXBufferIndex != 0) )
 8006282:	4b11      	ldr	r3, [pc, #68]	; (80062c8 <VL53l0xMainLoop+0x8c>)
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d106      	bne.n	800629a <VL53l0xMainLoop+0x5e>
 800628c:	4b0f      	ldr	r3, [pc, #60]	; (80062cc <VL53l0xMainLoop+0x90>)
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <VL53l0xMainLoop+0x5e>
	{	// timeout occurred during reception
		RXReset();
 8006296:	f000 f8d1 	bl	800643c <RXReset>
	}
	// decode received data
	if( (m_ucRXBufferIndex == VL53L0X_RX_COMPLETED_INDEX) )
 800629a:	4b0c      	ldr	r3, [pc, #48]	; (80062cc <VL53l0xMainLoop+0x90>)
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b64      	cmp	r3, #100	; 0x64
 80062a2:	d106      	bne.n	80062b2 <VL53l0xMainLoop+0x76>
	{	// reception has completed
		RXDecodeData();
 80062a4:	f000 f892 	bl	80063cc <RXDecodeData>
		RXReset();
 80062a8:	f000 f8c8 	bl	800643c <RXReset>
		m_ui16TimerDivider1KHZ = 99;
 80062ac:	4b04      	ldr	r3, [pc, #16]	; (80062c0 <VL53l0xMainLoop+0x84>)
 80062ae:	2263      	movs	r2, #99	; 0x63
 80062b0:	801a      	strh	r2, [r3, #0]

	// ----------------------------------------
	// ----------------------------------------


	return;
 80062b2:	bf00      	nop
}
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20001bc4 	.word	0x20001bc4
 80062c0:	20001bfc 	.word	0x20001bfc
 80062c4:	200025d8 	.word	0x200025d8
 80062c8:	20001bfb 	.word	0x20001bfb
 80062cc:	20001bfa 	.word	0x20001bfa

080062d0 <VL53l0xTimer1KHZISR>:
//----------------------------------------------------------------------------------
void VL53l0xTimer1KHZISR(void)	// 1KHZ timer function called from System ISR from stm32f4xx_it.c file @ SysTick Function (!!! keep as short as possible !!!)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
	if( m_ui16TimerDivider1KHZ )	m_ui16TimerDivider1KHZ --;		// for TX re-transmission
 80062d4:	4b0e      	ldr	r3, [pc, #56]	; (8006310 <VL53l0xTimer1KHZISR+0x40>)
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d006      	beq.n	80062ec <VL53l0xTimer1KHZISR+0x1c>
 80062de:	4b0c      	ldr	r3, [pc, #48]	; (8006310 <VL53l0xTimer1KHZISR+0x40>)
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	3b01      	subs	r3, #1
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	4b09      	ldr	r3, [pc, #36]	; (8006310 <VL53l0xTimer1KHZISR+0x40>)
 80062ea:	801a      	strh	r2, [r3, #0]
	if( m_ucRXTimeoutMS )			m_ucRXTimeoutMS --;				// for RX timeout
 80062ec:	4b09      	ldr	r3, [pc, #36]	; (8006314 <VL53l0xTimer1KHZISR+0x44>)
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d007      	beq.n	8006306 <VL53l0xTimer1KHZISR+0x36>
 80062f6:	4b07      	ldr	r3, [pc, #28]	; (8006314 <VL53l0xTimer1KHZISR+0x44>)
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	3b01      	subs	r3, #1
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	4b04      	ldr	r3, [pc, #16]	; (8006314 <VL53l0xTimer1KHZISR+0x44>)
 8006302:	701a      	strb	r2, [r3, #0]
	return;
 8006304:	bf00      	nop
 8006306:	bf00      	nop
}
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	20001bfc 	.word	0x20001bfc
 8006314:	20001bfb 	.word	0x20001bfb

08006318 <VL53l0xRXComplete>:
//----------------------------------------------------------------------------------
void VL53l0xRXComplete(void)		// will be called from the RX complete callback from main.c
{
 8006318:	b580      	push	{r7, lr}
 800631a:	af00      	add	r7, sp, #0
	// 1 byte was received
	m_ucRXTimeoutMS = 10;		// set another 10ms timeout
 800631c:	4b05      	ldr	r3, [pc, #20]	; (8006334 <VL53l0xRXComplete+0x1c>)
 800631e:	220a      	movs	r2, #10
 8006320:	701a      	strb	r2, [r3, #0]
	RXConcatenate();			// add m_ucRXChar to the RX buffer
 8006322:	f000 f80d 	bl	8006340 <RXConcatenate>

	// trigger another reception
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&m_ucRXChar, 1);
 8006326:	2201      	movs	r2, #1
 8006328:	4903      	ldr	r1, [pc, #12]	; (8006338 <VL53l0xRXComplete+0x20>)
 800632a:	4804      	ldr	r0, [pc, #16]	; (800633c <VL53l0xRXComplete+0x24>)
 800632c:	f00b f84e 	bl	80113cc <HAL_UART_Receive_IT>
	return;
 8006330:	bf00      	nop
}
 8006332:	bd80      	pop	{r7, pc}
 8006334:	20001bfb 	.word	0x20001bfb
 8006338:	20001bc6 	.word	0x20001bc6
 800633c:	200025d8 	.word	0x200025d8

08006340 <RXConcatenate>:


// STATIC (INTERN) implementation
//==================================================================================================================== STATIC_START
static void RXConcatenate(void)			// received data is available in the global variable "m_ucRXChar"
{
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
	if( (m_ucRXBufferIndex == VL53L0X_RX_COMPLETED_INDEX) )	return;	// some data is already available tin the RXBuffer just needs to be decoded
 8006344:	4b1e      	ldr	r3, [pc, #120]	; (80063c0 <RXConcatenate+0x80>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b64      	cmp	r3, #100	; 0x64
 800634c:	d032      	beq.n	80063b4 <RXConcatenate+0x74>

	if( (m_ucRXChar == '\n') || (m_ucRXChar == '\r') )
 800634e:	4b1d      	ldr	r3, [pc, #116]	; (80063c4 <RXConcatenate+0x84>)
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b0a      	cmp	r3, #10
 8006356:	d004      	beq.n	8006362 <RXConcatenate+0x22>
 8006358:	4b1a      	ldr	r3, [pc, #104]	; (80063c4 <RXConcatenate+0x84>)
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b0d      	cmp	r3, #13
 8006360:	d110      	bne.n	8006384 <RXConcatenate+0x44>
	{	// some end of row char was received
		if( m_ucRXBufferIndex == 0 )
 8006362:	4b17      	ldr	r3, [pc, #92]	; (80063c0 <RXConcatenate+0x80>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	d025      	beq.n	80063b8 <RXConcatenate+0x78>
		{	// just skip, is the start of the buffer
			return;
		}
		else
		{	// is the end of the buffer
			m_ucRXDataBuffer[m_ucRXBufferIndex] = 0;	// end of the string
 800636c:	4b14      	ldr	r3, [pc, #80]	; (80063c0 <RXConcatenate+0x80>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	b2db      	uxtb	r3, r3
 8006372:	461a      	mov	r2, r3
 8006374:	4b14      	ldr	r3, [pc, #80]	; (80063c8 <RXConcatenate+0x88>)
 8006376:	2100      	movs	r1, #0
 8006378:	5499      	strb	r1, [r3, r2]
			m_ucRXBufferIndex = VL53L0X_RX_COMPLETED_INDEX;
 800637a:	4b11      	ldr	r3, [pc, #68]	; (80063c0 <RXConcatenate+0x80>)
 800637c:	2264      	movs	r2, #100	; 0x64
 800637e:	701a      	strb	r2, [r3, #0]
		if( m_ucRXBufferIndex == 0 )
 8006380:	bf00      	nop
		if( (m_ucRXBufferIndex > 49) )
		{	// too many data => reception error
			RXReset();
		}
	}
	return;
 8006382:	e01b      	b.n	80063bc <RXConcatenate+0x7c>
		m_ucRXDataBuffer[m_ucRXBufferIndex] = m_ucRXChar;
 8006384:	4b0e      	ldr	r3, [pc, #56]	; (80063c0 <RXConcatenate+0x80>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	461a      	mov	r2, r3
 800638c:	4b0d      	ldr	r3, [pc, #52]	; (80063c4 <RXConcatenate+0x84>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	b2d9      	uxtb	r1, r3
 8006392:	4b0d      	ldr	r3, [pc, #52]	; (80063c8 <RXConcatenate+0x88>)
 8006394:	5499      	strb	r1, [r3, r2]
		m_ucRXBufferIndex ++;
 8006396:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <RXConcatenate+0x80>)
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	b2db      	uxtb	r3, r3
 800639c:	3301      	adds	r3, #1
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <RXConcatenate+0x80>)
 80063a2:	701a      	strb	r2, [r3, #0]
		if( (m_ucRXBufferIndex > 49) )
 80063a4:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <RXConcatenate+0x80>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b31      	cmp	r3, #49	; 0x31
 80063ac:	d906      	bls.n	80063bc <RXConcatenate+0x7c>
			RXReset();
 80063ae:	f000 f845 	bl	800643c <RXReset>
	return;
 80063b2:	e003      	b.n	80063bc <RXConcatenate+0x7c>
	if( (m_ucRXBufferIndex == VL53L0X_RX_COMPLETED_INDEX) )	return;	// some data is already available tin the RXBuffer just needs to be decoded
 80063b4:	bf00      	nop
 80063b6:	e002      	b.n	80063be <RXConcatenate+0x7e>
			return;
 80063b8:	bf00      	nop
 80063ba:	e000      	b.n	80063be <RXConcatenate+0x7e>
	return;
 80063bc:	bf00      	nop
}
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20001bfa 	.word	0x20001bfa
 80063c4:	20001bc6 	.word	0x20001bc6
 80063c8:	20001bc8 	.word	0x20001bc8

080063cc <RXDecodeData>:
//----------------------------------------------------------------------------------
static void RXDecodeData(void)				// decodes the received data from the reception buffer
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
	uint16_t ui16Temp;

	if( (m_ucRXDataBuffer[0] == 'M') && (m_ucRXDataBuffer[1] == ':') )
 80063d2:	4b17      	ldr	r3, [pc, #92]	; (8006430 <RXDecodeData+0x64>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b4d      	cmp	r3, #77	; 0x4d
 80063da:	d10d      	bne.n	80063f8 <RXDecodeData+0x2c>
 80063dc:	4b14      	ldr	r3, [pc, #80]	; (8006430 <RXDecodeData+0x64>)
 80063de:	785b      	ldrb	r3, [r3, #1]
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b3a      	cmp	r3, #58	; 0x3a
 80063e4:	d108      	bne.n	80063f8 <RXDecodeData+0x2c>
	{	// measurement result
		ui16Temp = (uint16_t)atoi((char *)&m_ucRXDataBuffer[2]);
 80063e6:	4813      	ldr	r0, [pc, #76]	; (8006434 <RXDecodeData+0x68>)
 80063e8:	f00c f866 	bl	80124b8 <atoi>
 80063ec:	4603      	mov	r3, r0
 80063ee:	80fb      	strh	r3, [r7, #6]
		m_ui16VL53L0XResult = ui16Temp;
 80063f0:	4a11      	ldr	r2, [pc, #68]	; (8006438 <RXDecodeData+0x6c>)
 80063f2:	88fb      	ldrh	r3, [r7, #6]
 80063f4:	8013      	strh	r3, [r2, #0]
 80063f6:	e010      	b.n	800641a <RXDecodeData+0x4e>
		#ifdef VL53L0X_DEBUG_MODE
		//sprintf((char * )m_ucDebugBuffer,"VL53: Measurement: %u\r\n",ui16Temp);
		#endif
	}
	else if( (m_ucRXDataBuffer[0] == 'E') && (m_ucRXDataBuffer[1] == ':') )
 80063f8:	4b0d      	ldr	r3, [pc, #52]	; (8006430 <RXDecodeData+0x64>)
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b45      	cmp	r3, #69	; 0x45
 8006400:	d108      	bne.n	8006414 <RXDecodeData+0x48>
 8006402:	4b0b      	ldr	r3, [pc, #44]	; (8006430 <RXDecodeData+0x64>)
 8006404:	785b      	ldrb	r3, [r3, #1]
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b3a      	cmp	r3, #58	; 0x3a
 800640a:	d103      	bne.n	8006414 <RXDecodeData+0x48>
	{	// error
		m_ui16VL53L0XResult = 0;
 800640c:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <RXDecodeData+0x6c>)
 800640e:	2200      	movs	r2, #0
 8006410:	801a      	strh	r2, [r3, #0]
 8006412:	e002      	b.n	800641a <RXDecodeData+0x4e>
		//sprintf((char * )m_ucDebugBuffer,"VL53: Error\r\n");
		#endif
	}
	else
	{	// unknown string
		m_ui16VL53L0XResult = 0;
 8006414:	4b08      	ldr	r3, [pc, #32]	; (8006438 <RXDecodeData+0x6c>)
 8006416:	2200      	movs	r2, #0
 8006418:	801a      	strh	r2, [r3, #0]
		#ifdef VL53L0X_DEBUG_MODE
		//sprintf((char * )m_ucDebugBuffer,"VL53: Unknown\r\n");
		#endif
	}

	VL53l0xReslutCallback(m_ui16VL53L0XResult);
 800641a:	4b07      	ldr	r3, [pc, #28]	; (8006438 <RXDecodeData+0x6c>)
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	b29b      	uxth	r3, r3
 8006420:	4618      	mov	r0, r3
 8006422:	f7ff fef1 	bl	8006208 <VL53l0xReslutCallback>
	#ifdef VL53L0X_DEBUG_MODE
	//sprintf((char * )m_ucDebugBuffer,"VL53: >%s<\r\n",m_ucRXDataBuffer);
	//DebugSendData(m_ucDebugBuffer,strlen((char *)m_ucDebugBuffer));
	#endif

	return;
 8006426:	bf00      	nop
}
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	20001bc8 	.word	0x20001bc8
 8006434:	20001bca 	.word	0x20001bca
 8006438:	20001bfe 	.word	0x20001bfe

0800643c <RXReset>:
//----------------------------------------------------------------------------------
static void RXReset(void)					// clears the RX parameters in order to start another reception
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
	uint8_t i;

	for(i=0; i<50; i++)		m_ucRXDataBuffer[i] = 0;
 8006442:	2300      	movs	r3, #0
 8006444:	71fb      	strb	r3, [r7, #7]
 8006446:	e006      	b.n	8006456 <RXReset+0x1a>
 8006448:	79fb      	ldrb	r3, [r7, #7]
 800644a:	4a09      	ldr	r2, [pc, #36]	; (8006470 <RXReset+0x34>)
 800644c:	2100      	movs	r1, #0
 800644e:	54d1      	strb	r1, [r2, r3]
 8006450:	79fb      	ldrb	r3, [r7, #7]
 8006452:	3301      	adds	r3, #1
 8006454:	71fb      	strb	r3, [r7, #7]
 8006456:	79fb      	ldrb	r3, [r7, #7]
 8006458:	2b31      	cmp	r3, #49	; 0x31
 800645a:	d9f5      	bls.n	8006448 <RXReset+0xc>
	m_ucRXBufferIndex = 0;
 800645c:	4b05      	ldr	r3, [pc, #20]	; (8006474 <RXReset+0x38>)
 800645e:	2200      	movs	r2, #0
 8006460:	701a      	strb	r2, [r3, #0]
	return;
 8006462:	bf00      	nop
}
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	20001bc8 	.word	0x20001bc8
 8006474:	20001bfa 	.word	0x20001bfa

08006478 <WS2812SetDisplay>:


// API
//==================================================================================================================== API_START
WS2812_STATUS WS2812SetDisplay(WS2812_DISPLY_ID WS2812DisplayID, uint8_t ucLEDIndex, uint8_t ucLEDIntensity, uint8_t ucLEDR, uint8_t ucLEDG, uint8_t ucLEDB)
{	// used to set the RGB and Intensity of an LED from an LED display object
 8006478:	b590      	push	{r4, r7, lr}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	4604      	mov	r4, r0
 8006480:	4608      	mov	r0, r1
 8006482:	4611      	mov	r1, r2
 8006484:	461a      	mov	r2, r3
 8006486:	4623      	mov	r3, r4
 8006488:	71fb      	strb	r3, [r7, #7]
 800648a:	4603      	mov	r3, r0
 800648c:	71bb      	strb	r3, [r7, #6]
 800648e:	460b      	mov	r3, r1
 8006490:	717b      	strb	r3, [r7, #5]
 8006492:	4613      	mov	r3, r2
 8006494:	713b      	strb	r3, [r7, #4]
	// - ucLEDR					=  LED Red component, 		RANGE=[0 ... 255], 0=OFF, 255=MAX
	// - ucLEDG					=  LED Green component, 	RANGE=[0 ... 255], 0=OFF, 255=MAX
	// - ucLEDB					=  LED Blue component, 		RANGE=[0 ... 255], 0=OFF, 255=MAX
	//---------------------------------------------

	if((WS2812DisplayID < (DISPLAY_FIRST)) || (WS2812DisplayID > (DISPALY_LAST - 1)))				return RANGE_ERROR;
 8006496:	79fb      	ldrb	r3, [r7, #7]
 8006498:	2b07      	cmp	r3, #7
 800649a:	d901      	bls.n	80064a0 <WS2812SetDisplay+0x28>
 800649c:	2301      	movs	r3, #1
 800649e:	e09c      	b.n	80065da <WS2812SetDisplay+0x162>
	if((ucLEDIndex < 1) || (ucLEDIndex > 12)) 														return RANGE_ERROR;
 80064a0:	79bb      	ldrb	r3, [r7, #6]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <WS2812SetDisplay+0x34>
 80064a6:	79bb      	ldrb	r3, [r7, #6]
 80064a8:	2b0c      	cmp	r3, #12
 80064aa:	d901      	bls.n	80064b0 <WS2812SetDisplay+0x38>
 80064ac:	2301      	movs	r3, #1
 80064ae:	e094      	b.n	80065da <WS2812SetDisplay+0x162>

	double dTemp;
	uint32_t uiTemp, uiTemp2;

	// GREEN
	dTemp     = (double)ucLEDIntensity;
 80064b0:	797b      	ldrb	r3, [r7, #5]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fa f846 	bl	8000544 <__aeabi_ui2d>
 80064b8:	4602      	mov	r2, r0
 80064ba:	460b      	mov	r3, r1
 80064bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	dTemp    *= (double)ucLEDG;
 80064c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7fa f83d 	bl	8000544 <__aeabi_ui2d>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80064d2:	f7fa f8b1 	bl	8000638 <__aeabi_dmul>
 80064d6:	4602      	mov	r2, r0
 80064d8:	460b      	mov	r3, r1
 80064da:	e9c7 2304 	strd	r2, r3, [r7, #16]
	dTemp    /= (double)255U;
 80064de:	a343      	add	r3, pc, #268	; (adr r3, 80065ec <WS2812SetDisplay+0x174>)
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80064e8:	f7fa f9d0 	bl	800088c <__aeabi_ddiv>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uiTemp2   = (uint32_t)dTemp;
 80064f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80064f8:	f7fa fb76 	bl	8000be8 <__aeabi_d2uiz>
 80064fc:	4603      	mov	r3, r0
 80064fe:	60fb      	str	r3, [r7, #12]
	uiTemp2 <<= (16);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	041b      	lsls	r3, r3, #16
 8006504:	60fb      	str	r3, [r7, #12]
	uiTemp    = uiTemp2;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	60bb      	str	r3, [r7, #8]

	// RED
	dTemp     = (double)ucLEDIntensity;
 800650a:	797b      	ldrb	r3, [r7, #5]
 800650c:	4618      	mov	r0, r3
 800650e:	f7fa f819 	bl	8000544 <__aeabi_ui2d>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	e9c7 2304 	strd	r2, r3, [r7, #16]
	dTemp    *= (double)ucLEDR;
 800651a:	793b      	ldrb	r3, [r7, #4]
 800651c:	4618      	mov	r0, r3
 800651e:	f7fa f811 	bl	8000544 <__aeabi_ui2d>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800652a:	f7fa f885 	bl	8000638 <__aeabi_dmul>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	e9c7 2304 	strd	r2, r3, [r7, #16]
	dTemp    /= (double)255U;
 8006536:	a32d      	add	r3, pc, #180	; (adr r3, 80065ec <WS2812SetDisplay+0x174>)
 8006538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006540:	f7fa f9a4 	bl	800088c <__aeabi_ddiv>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uiTemp2   = (uint32_t)dTemp;
 800654c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006550:	f7fa fb4a 	bl	8000be8 <__aeabi_d2uiz>
 8006554:	4603      	mov	r3, r0
 8006556:	60fb      	str	r3, [r7, #12]
	uiTemp2 <<= (8);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	021b      	lsls	r3, r3, #8
 800655c:	60fb      	str	r3, [r7, #12]
	uiTemp   |= uiTemp2;
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4313      	orrs	r3, r2
 8006564:	60bb      	str	r3, [r7, #8]

	// BLUE
	dTemp     = (double)ucLEDIntensity;
 8006566:	797b      	ldrb	r3, [r7, #5]
 8006568:	4618      	mov	r0, r3
 800656a:	f7f9 ffeb 	bl	8000544 <__aeabi_ui2d>
 800656e:	4602      	mov	r2, r0
 8006570:	460b      	mov	r3, r1
 8006572:	e9c7 2304 	strd	r2, r3, [r7, #16]
	dTemp    *= (double)ucLEDB;
 8006576:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800657a:	4618      	mov	r0, r3
 800657c:	f7f9 ffe2 	bl	8000544 <__aeabi_ui2d>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006588:	f7fa f856 	bl	8000638 <__aeabi_dmul>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	e9c7 2304 	strd	r2, r3, [r7, #16]
	dTemp    /= (double)255U;
 8006594:	a315      	add	r3, pc, #84	; (adr r3, 80065ec <WS2812SetDisplay+0x174>)
 8006596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800659e:	f7fa f975 	bl	800088c <__aeabi_ddiv>
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uiTemp2   = (uint32_t)dTemp;
 80065aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80065ae:	f7fa fb1b 	bl	8000be8 <__aeabi_d2uiz>
 80065b2:	4603      	mov	r3, r0
 80065b4:	60fb      	str	r3, [r7, #12]
	uiTemp   |= uiTemp2;
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	60bb      	str	r3, [r7, #8]

	WS2812Displays[WS2812DisplayID].ui32WSRGBData[(ucLEDIndex - 1)] = uiTemp;
 80065be:	79fa      	ldrb	r2, [r7, #7]
 80065c0:	79bb      	ldrb	r3, [r7, #6]
 80065c2:	1e59      	subs	r1, r3, #1
 80065c4:	4808      	ldr	r0, [pc, #32]	; (80065e8 <WS2812SetDisplay+0x170>)
 80065c6:	4613      	mov	r3, r2
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	440b      	add	r3, r1
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

	return NO_ERROR;
 80065d8:	2300      	movs	r3, #0

}
 80065da:	4618      	mov	r0, r3
 80065dc:	371c      	adds	r7, #28
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd90      	pop	{r4, r7, pc}
 80065e2:	bf00      	nop
 80065e4:	f3af 8000 	nop.w
 80065e8:	20001ea8 	.word	0x20001ea8
 80065ec:	00000000 	.word	0x00000000
 80065f0:	406fe000 	.word	0x406fe000

080065f4 <WS2812ShowDisplay>:

	return WS2812SetDisplay(WS2812DisplayID, ucLEDIndex, ucLEDIntensity, 0, (255 - ucGBBalance), ucGBBalance);
}
//----------------------------------------------------------------------------------
WS2812_STATUS WS2812ShowDisplay(WS2812_DISPLY_ID WS2812DisplayID, uint16_t ui16DisplayFreezTimeout_ms)
{	// used to show a display buffer on the WS2812 LEDs
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	4603      	mov	r3, r0
 80065fc:	460a      	mov	r2, r1
 80065fe:	71fb      	strb	r3, [r7, #7]
 8006600:	4613      	mov	r3, r2
 8006602:	80bb      	strh	r3, [r7, #4]
	if((WS2812DisplayID < (DISPLAY_FIRST)) || (WS2812DisplayID > (DISPALY_LAST - 1)))				return RANGE_ERROR;
 8006604:	79fb      	ldrb	r3, [r7, #7]
 8006606:	2b07      	cmp	r3, #7
 8006608:	d901      	bls.n	800660e <WS2812ShowDisplay+0x1a>
 800660a:	2301      	movs	r3, #1
 800660c:	e012      	b.n	8006634 <WS2812ShowDisplay+0x40>

	WS2812Displays[WS2812DisplayID].ucShowNow = REFRESH_DISPLAY;
 800660e:	79fb      	ldrb	r3, [r7, #7]
 8006610:	4a0b      	ldr	r2, [pc, #44]	; (8006640 <WS2812ShowDisplay+0x4c>)
 8006612:	2134      	movs	r1, #52	; 0x34
 8006614:	fb01 f303 	mul.w	r3, r1, r3
 8006618:	4413      	add	r3, r2
 800661a:	3330      	adds	r3, #48	; 0x30
 800661c:	2201      	movs	r2, #1
 800661e:	701a      	strb	r2, [r3, #0]
	WS2812Displays[WS2812DisplayID].ui16BKeepDisplayOn_ms = ui16DisplayFreezTimeout_ms;
 8006620:	79fb      	ldrb	r3, [r7, #7]
 8006622:	4a07      	ldr	r2, [pc, #28]	; (8006640 <WS2812ShowDisplay+0x4c>)
 8006624:	2134      	movs	r1, #52	; 0x34
 8006626:	fb01 f303 	mul.w	r3, r1, r3
 800662a:	4413      	add	r3, r2
 800662c:	3332      	adds	r3, #50	; 0x32
 800662e:	88ba      	ldrh	r2, [r7, #4]
 8006630:	801a      	strh	r2, [r3, #0]

	return NO_ERROR;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	20001ea8 	.word	0x20001ea8

08006644 <WS2812EmptyDisplay>:
//----------------------------------------------------------------------------------
WS2812_STATUS WS2812EmptyDisplay(WS2812_DISPLY_ID WS2812DisplayID)
{	// used to empty the display buffer identified by WS2812DisplayID
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af02      	add	r7, sp, #8
 800664a:	4603      	mov	r3, r0
 800664c:	71fb      	strb	r3, [r7, #7]
	//------------------------------------

	if((WS2812DisplayID < (DISPLAY_FIRST)) || (WS2812DisplayID > (DISPALY_LAST - 1)))				return RANGE_ERROR;
 800664e:	79fb      	ldrb	r3, [r7, #7]
 8006650:	2b07      	cmp	r3, #7
 8006652:	d901      	bls.n	8006658 <WS2812EmptyDisplay+0x14>
 8006654:	2301      	movs	r3, #1
 8006656:	e014      	b.n	8006682 <WS2812EmptyDisplay+0x3e>

	for(int i=1;i<13;i++) 		WS2812SetDisplay(WS2812DisplayID, i , 0, 0, 0, 0);		// on display with ID = DisplayIndex, clear all the 12 LED data
 8006658:	2301      	movs	r3, #1
 800665a:	60fb      	str	r3, [r7, #12]
 800665c:	e00d      	b.n	800667a <WS2812EmptyDisplay+0x36>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	b2d9      	uxtb	r1, r3
 8006662:	79f8      	ldrb	r0, [r7, #7]
 8006664:	2300      	movs	r3, #0
 8006666:	9301      	str	r3, [sp, #4]
 8006668:	2300      	movs	r3, #0
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	2300      	movs	r3, #0
 800666e:	2200      	movs	r2, #0
 8006670:	f7ff ff02 	bl	8006478 <WS2812SetDisplay>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3301      	adds	r3, #1
 8006678:	60fb      	str	r3, [r7, #12]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b0c      	cmp	r3, #12
 800667e:	ddee      	ble.n	800665e <WS2812EmptyDisplay+0x1a>

	return NO_ERROR;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
	...

0800668c <WS2812Init>:


// SYSTEM
//==================================================================================================================== SYSTEM_START
void WS2812Init(void)				// used to initialize the WS2812 Module. Called from main.c file @ init section
{
 800668c:	b580      	push	{r7, lr}
 800668e:	af00      	add	r7, sp, #0

	// general init
	m_uiWS2812SkipRealTime = WS2812_SKIP_REAL_TIME;
 8006690:	4b11      	ldr	r3, [pc, #68]	; (80066d8 <WS2812Init+0x4c>)
 8006692:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006696:	801a      	strh	r2, [r3, #0]

	// clear the WS2812 LED buffer
	memset((uint16_t*)m_uiWS2812LedDataBuffer,0,sizeof(m_uiWS2812LedDataBuffer));
 8006698:	f44f 7229 	mov.w	r2, #676	; 0x2a4
 800669c:	2100      	movs	r1, #0
 800669e:	480f      	ldr	r0, [pc, #60]	; (80066dc <WS2812Init+0x50>)
 80066a0:	f00c fd10 	bl	80130c4 <memset>
	m_uiStopDisplayRefresh_ms = 0;
 80066a4:	4b0e      	ldr	r3, [pc, #56]	; (80066e0 <WS2812Init+0x54>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	801a      	strh	r2, [r3, #0]

	// LED Swap Init
	LEDSwapInit();
 80066aa:	f000 ff69 	bl	8007580 <LEDSwapInit>

	// Animations Init
	AnimationSwitchONInit();
 80066ae:	f000 f96b 	bl	8006988 <AnimationSwitchONInit>
	AnimationSwitchOFFInit();
 80066b2:	f000 fa27 	bl	8006b04 <AnimationSwitchOFFInit>
	Animation1Init();
 80066b6:	f000 fae3 	bl	8006c80 <Animation1Init>
	Animation2Init();
 80066ba:	f000 fba1 	bl	8006e00 <Animation2Init>
	Animation3Init();
 80066be:	f000 fc5f 	bl	8006f80 <Animation3Init>
	Animation4Init();
 80066c2:	f000 fd1d 	bl	8007100 <Animation4Init>
	Animation5Init();
 80066c6:	f000 fddb 	bl	8007280 <Animation5Init>
	Animation6Init();
 80066ca:	f000 fe99 	bl	8007400 <Animation6Init>

	// first clear all LEDs @ startup---> temp just until lunching the ON Animation @ startup
	SendWS2812Data(WS2812Displays[DISPLY_ANIMATION].ui32WSRGBData);
 80066ce:	4805      	ldr	r0, [pc, #20]	; (80066e4 <WS2812Init+0x58>)
 80066d0:	f000 f8f6 	bl	80068c0 <SendWS2812Data>

	SendWS2812Data(WS2812Displays[DISPLY_SYSTEM_1].ui32WSRGBData);
	WS2812ShowDisplay(DISPLY_SYSTEM_1,150);		// show DISPLY_SYSTEM_1 and do not refresh for 150mS
	*/

	return;
 80066d4:	bf00      	nop
}
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	20002048 	.word	0x20002048
 80066dc:	20001c00 	.word	0x20001c00
 80066e0:	20001ea4 	.word	0x20001ea4
 80066e4:	20001edc 	.word	0x20001edc

080066e8 <WS2812MainLoop>:
//----------------------------------------------------------------------------------
void WS2812MainLoop(void)			// loop function of the WS2812 Module. Called from the main.c file @ main loop section
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0

	// skip real time
	if(m_uiWS2812SkipRealTime)
 80066ec:	4b50      	ldr	r3, [pc, #320]	; (8006830 <WS2812MainLoop+0x148>)
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d006      	beq.n	8006702 <WS2812MainLoop+0x1a>
	{
		m_uiWS2812SkipRealTime --;
 80066f4:	4b4e      	ldr	r3, [pc, #312]	; (8006830 <WS2812MainLoop+0x148>)
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	4b4c      	ldr	r3, [pc, #304]	; (8006830 <WS2812MainLoop+0x148>)
 80066fe:	801a      	strh	r2, [r3, #0]
		return;
 8006700:	e094      	b.n	800682c <WS2812MainLoop+0x144>
	}
	m_uiWS2812SkipRealTime = WS2812_SKIP_REAL_TIME;
 8006702:	4b4b      	ldr	r3, [pc, #300]	; (8006830 <WS2812MainLoop+0x148>)
 8006704:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006708:	801a      	strh	r2, [r3, #0]
	//------------------------------------------------------

	// Animations
	AnimationsMainLoop();
 800670a:	f000 ff67 	bl	80075dc <AnimationsMainLoop>
	//------------------------------------------------------


	//freeze display
	if(m_uiStopDisplayRefresh_ms)	return;
 800670e:	4b49      	ldr	r3, [pc, #292]	; (8006834 <WS2812MainLoop+0x14c>)
 8006710:	881b      	ldrh	r3, [r3, #0]
 8006712:	b29b      	uxth	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	f040 8086 	bne.w	8006826 <WS2812MainLoop+0x13e>


	// Display Setting
	if(WS2812Displays[DISPLY_ANIMATION].ucShowNow == REFRESH_DISPLAY)
 800671a:	4b47      	ldr	r3, [pc, #284]	; (8006838 <WS2812MainLoop+0x150>)
 800671c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b01      	cmp	r3, #1
 8006724:	d107      	bne.n	8006736 <WS2812MainLoop+0x4e>
	{	// set LED's according to the display
		SendWS2812Data(WS2812Displays[DISPLY_ANIMATION].ui32WSRGBData);
 8006726:	4845      	ldr	r0, [pc, #276]	; (800683c <WS2812MainLoop+0x154>)
 8006728:	f000 f8ca 	bl	80068c0 <SendWS2812Data>
		WS2812Displays[DISPLY_ANIMATION].ucShowNow = DO_NOT_REFRESH_DISPLAY;
 800672c:	4b42      	ldr	r3, [pc, #264]	; (8006838 <WS2812MainLoop+0x150>)
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		//m_uiStopDisplayRefresh_ms = WS2812Displays[DISPLY_ANIMATION].ui16BKeepDisplayOn_ms;
		return;
 8006734:	e07a      	b.n	800682c <WS2812MainLoop+0x144>
	}
	if(WS2812Displays[DISPLY_SYSTEM_1].ucShowNow == REFRESH_DISPLAY)
 8006736:	4b40      	ldr	r3, [pc, #256]	; (8006838 <WS2812MainLoop+0x150>)
 8006738:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b01      	cmp	r3, #1
 8006740:	d10d      	bne.n	800675e <WS2812MainLoop+0x76>
	{	// set LED's according to the display
		SendWS2812Data(WS2812Displays[DISPLY_SYSTEM_1].ui32WSRGBData);
 8006742:	483f      	ldr	r0, [pc, #252]	; (8006840 <WS2812MainLoop+0x158>)
 8006744:	f000 f8bc 	bl	80068c0 <SendWS2812Data>
		WS2812Displays[DISPLY_SYSTEM_1].ucShowNow = DO_NOT_REFRESH_DISPLAY;
 8006748:	4b3b      	ldr	r3, [pc, #236]	; (8006838 <WS2812MainLoop+0x150>)
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		m_uiStopDisplayRefresh_ms = WS2812Displays[DISPLY_SYSTEM_1].ui16BKeepDisplayOn_ms;
 8006750:	4b39      	ldr	r3, [pc, #228]	; (8006838 <WS2812MainLoop+0x150>)
 8006752:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8006756:	b29a      	uxth	r2, r3
 8006758:	4b36      	ldr	r3, [pc, #216]	; (8006834 <WS2812MainLoop+0x14c>)
 800675a:	801a      	strh	r2, [r3, #0]
		return;
 800675c:	e066      	b.n	800682c <WS2812MainLoop+0x144>
	}
	if(WS2812Displays[DISPLY_SYSTEM_2].ucShowNow == REFRESH_DISPLAY)
 800675e:	4b36      	ldr	r3, [pc, #216]	; (8006838 <WS2812MainLoop+0x150>)
 8006760:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b01      	cmp	r3, #1
 8006768:	d10d      	bne.n	8006786 <WS2812MainLoop+0x9e>
	{	// set LED's according to the display
		SendWS2812Data(WS2812Displays[DISPLY_SYSTEM_2].ui32WSRGBData);
 800676a:	4836      	ldr	r0, [pc, #216]	; (8006844 <WS2812MainLoop+0x15c>)
 800676c:	f000 f8a8 	bl	80068c0 <SendWS2812Data>
		WS2812Displays[DISPLY_SYSTEM_2].ucShowNow = DO_NOT_REFRESH_DISPLAY;
 8006770:	4b31      	ldr	r3, [pc, #196]	; (8006838 <WS2812MainLoop+0x150>)
 8006772:	2200      	movs	r2, #0
 8006774:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
		m_uiStopDisplayRefresh_ms = WS2812Displays[DISPLY_SYSTEM_2].ui16BKeepDisplayOn_ms;
 8006778:	4b2f      	ldr	r3, [pc, #188]	; (8006838 <WS2812MainLoop+0x150>)
 800677a:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 800677e:	b29a      	uxth	r2, r3
 8006780:	4b2c      	ldr	r3, [pc, #176]	; (8006834 <WS2812MainLoop+0x14c>)
 8006782:	801a      	strh	r2, [r3, #0]
		return;
 8006784:	e052      	b.n	800682c <WS2812MainLoop+0x144>
	}
	if(WS2812Displays[DISPLY_SYSTEM_3].ucShowNow == REFRESH_DISPLAY)
 8006786:	4b2c      	ldr	r3, [pc, #176]	; (8006838 <WS2812MainLoop+0x150>)
 8006788:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b01      	cmp	r3, #1
 8006790:	d10d      	bne.n	80067ae <WS2812MainLoop+0xc6>
	{	// set LED's according to the display
		SendWS2812Data(WS2812Displays[DISPLY_SYSTEM_3].ui32WSRGBData);
 8006792:	482d      	ldr	r0, [pc, #180]	; (8006848 <WS2812MainLoop+0x160>)
 8006794:	f000 f894 	bl	80068c0 <SendWS2812Data>
		WS2812Displays[DISPLY_SYSTEM_3].ucShowNow = DO_NOT_REFRESH_DISPLAY;
 8006798:	4b27      	ldr	r3, [pc, #156]	; (8006838 <WS2812MainLoop+0x150>)
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
		m_uiStopDisplayRefresh_ms = WS2812Displays[DISPLY_SYSTEM_3].ui16BKeepDisplayOn_ms;
 80067a0:	4b25      	ldr	r3, [pc, #148]	; (8006838 <WS2812MainLoop+0x150>)
 80067a2:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	4b22      	ldr	r3, [pc, #136]	; (8006834 <WS2812MainLoop+0x14c>)
 80067aa:	801a      	strh	r2, [r3, #0]
		return;
 80067ac:	e03e      	b.n	800682c <WS2812MainLoop+0x144>
	}
	if(WS2812Displays[DISPLY_SYSTEM_4].ucShowNow == REFRESH_DISPLAY)
 80067ae:	4b22      	ldr	r3, [pc, #136]	; (8006838 <WS2812MainLoop+0x150>)
 80067b0:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d10d      	bne.n	80067d6 <WS2812MainLoop+0xee>
	{	// set LED's according to the display
		SendWS2812Data(WS2812Displays[DISPLY_SYSTEM_4].ui32WSRGBData);
 80067ba:	4824      	ldr	r0, [pc, #144]	; (800684c <WS2812MainLoop+0x164>)
 80067bc:	f000 f880 	bl	80068c0 <SendWS2812Data>
		WS2812Displays[DISPLY_SYSTEM_4].ucShowNow = DO_NOT_REFRESH_DISPLAY;
 80067c0:	4b1d      	ldr	r3, [pc, #116]	; (8006838 <WS2812MainLoop+0x150>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
		m_uiStopDisplayRefresh_ms = WS2812Displays[DISPLY_SYSTEM_4].ui16BKeepDisplayOn_ms;
 80067c8:	4b1b      	ldr	r3, [pc, #108]	; (8006838 <WS2812MainLoop+0x150>)
 80067ca:	f8b3 3136 	ldrh.w	r3, [r3, #310]	; 0x136
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	4b18      	ldr	r3, [pc, #96]	; (8006834 <WS2812MainLoop+0x14c>)
 80067d2:	801a      	strh	r2, [r3, #0]
		return;
 80067d4:	e02a      	b.n	800682c <WS2812MainLoop+0x144>
	}
	if(WS2812Displays[DISPLY_SYSTEM_5].ucShowNow == REFRESH_DISPLAY)
 80067d6:	4b18      	ldr	r3, [pc, #96]	; (8006838 <WS2812MainLoop+0x150>)
 80067d8:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d10d      	bne.n	80067fe <WS2812MainLoop+0x116>
	{	// set LED's according to the display
		SendWS2812Data(WS2812Displays[DISPLY_SYSTEM_5].ui32WSRGBData);
 80067e2:	481b      	ldr	r0, [pc, #108]	; (8006850 <WS2812MainLoop+0x168>)
 80067e4:	f000 f86c 	bl	80068c0 <SendWS2812Data>
		WS2812Displays[DISPLY_SYSTEM_5].ucShowNow = DO_NOT_REFRESH_DISPLAY;
 80067e8:	4b13      	ldr	r3, [pc, #76]	; (8006838 <WS2812MainLoop+0x150>)
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
		m_uiStopDisplayRefresh_ms = WS2812Displays[DISPLY_SYSTEM_5].ui16BKeepDisplayOn_ms;
 80067f0:	4b11      	ldr	r3, [pc, #68]	; (8006838 <WS2812MainLoop+0x150>)
 80067f2:	f8b3 316a 	ldrh.w	r3, [r3, #362]	; 0x16a
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	4b0e      	ldr	r3, [pc, #56]	; (8006834 <WS2812MainLoop+0x14c>)
 80067fa:	801a      	strh	r2, [r3, #0]
		return;
 80067fc:	e016      	b.n	800682c <WS2812MainLoop+0x144>
	}
	if(WS2812Displays[DISPLY_SYSTEM_6].ucShowNow == REFRESH_DISPLAY)
 80067fe:	4b0e      	ldr	r3, [pc, #56]	; (8006838 <WS2812MainLoop+0x150>)
 8006800:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b01      	cmp	r3, #1
 8006808:	d10f      	bne.n	800682a <WS2812MainLoop+0x142>
	{	// set LED's according to the display
		SendWS2812Data(WS2812Displays[DISPLY_SYSTEM_6].ui32WSRGBData);
 800680a:	4812      	ldr	r0, [pc, #72]	; (8006854 <WS2812MainLoop+0x16c>)
 800680c:	f000 f858 	bl	80068c0 <SendWS2812Data>
		WS2812Displays[DISPLY_SYSTEM_6].ucShowNow = DO_NOT_REFRESH_DISPLAY;
 8006810:	4b09      	ldr	r3, [pc, #36]	; (8006838 <WS2812MainLoop+0x150>)
 8006812:	2200      	movs	r2, #0
 8006814:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
		m_uiStopDisplayRefresh_ms = WS2812Displays[DISPLY_SYSTEM_6].ui16BKeepDisplayOn_ms;
 8006818:	4b07      	ldr	r3, [pc, #28]	; (8006838 <WS2812MainLoop+0x150>)
 800681a:	f8b3 319e 	ldrh.w	r3, [r3, #414]	; 0x19e
 800681e:	b29a      	uxth	r2, r3
 8006820:	4b04      	ldr	r3, [pc, #16]	; (8006834 <WS2812MainLoop+0x14c>)
 8006822:	801a      	strh	r2, [r3, #0]
		return;
 8006824:	e002      	b.n	800682c <WS2812MainLoop+0x144>
	if(m_uiStopDisplayRefresh_ms)	return;
 8006826:	bf00      	nop
 8006828:	e000      	b.n	800682c <WS2812MainLoop+0x144>
	}

	//------------------------------------------------------

	return;
 800682a:	bf00      	nop
}
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	20002048 	.word	0x20002048
 8006834:	20001ea4 	.word	0x20001ea4
 8006838:	20001ea8 	.word	0x20001ea8
 800683c:	20001edc 	.word	0x20001edc
 8006840:	20001f10 	.word	0x20001f10
 8006844:	20001f44 	.word	0x20001f44
 8006848:	20001f78 	.word	0x20001f78
 800684c:	20001fac 	.word	0x20001fac
 8006850:	20001fe0 	.word	0x20001fe0
 8006854:	20002014 	.word	0x20002014

08006858 <WS2812Timer1KHZISR>:
//----------------------------------------------------------------------------------
void WS2812Timer1KHZISR(void)		// 1KHZ timer function called from System ISR from stm32f4xx_it.c file @ SysTick Function
{	// max 2.4 uS
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH

	// freeze display
	if(m_uiStopDisplayRefresh_ms)		m_uiStopDisplayRefresh_ms --;
 800685c:	4b0e      	ldr	r3, [pc, #56]	; (8006898 <WS2812Timer1KHZISR+0x40>)
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	b29b      	uxth	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d006      	beq.n	8006874 <WS2812Timer1KHZISR+0x1c>
 8006866:	4b0c      	ldr	r3, [pc, #48]	; (8006898 <WS2812Timer1KHZISR+0x40>)
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	b29b      	uxth	r3, r3
 800686c:	3b01      	subs	r3, #1
 800686e:	b29a      	uxth	r2, r3
 8006870:	4b09      	ldr	r3, [pc, #36]	; (8006898 <WS2812Timer1KHZISR+0x40>)
 8006872:	801a      	strh	r2, [r3, #0]


	// Switch OFF Animation
	AnimationSwitchOFFTimer1KHZ();
 8006874:	f000 f9e8 	bl	8006c48 <AnimationSwitchOFFTimer1KHZ>

	// Animation 1
	Animation1Timer1KHZ();
 8006878:	f000 faa6 	bl	8006dc8 <Animation1Timer1KHZ>

	// Animation 2
	Animation2Timer1KHZ();
 800687c:	f000 fb64 	bl	8006f48 <Animation2Timer1KHZ>

	// Animation 3
	Animation3Timer1KHZ();
 8006880:	f000 fc22 	bl	80070c8 <Animation3Timer1KHZ>

	// Animation 4
	Animation4Timer1KHZ();
 8006884:	f000 fce0 	bl	8007248 <Animation4Timer1KHZ>

	// Animation 5
	Animation5Timer1KHZ();
 8006888:	f000 fd9e 	bl	80073c8 <Animation5Timer1KHZ>

	// Animation 6
	Animation6Timer1KHZ();
 800688c:	f000 fe5c 	bl	8007548 <Animation6Timer1KHZ>



	// Switch ON Animation
	AnimationSwitchONTimer1KHZ();
 8006890:	f000 f91c 	bl	8006acc <AnimationSwitchONTimer1KHZ>

	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  //	debug on PC13 LOW

	return;
 8006894:	bf00      	nop
}
 8006896:	bd80      	pop	{r7, pc}
 8006898:	20001ea4 	.word	0x20001ea4

0800689c <HAL_TIM_PWM_PulseFinishedCallback>:

// STATIC (INTERN) implementation
//==================================================================================================================== STATIC_START
// defined in .c file
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{//UNUSED(htim);
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) 		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_4);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	7f1b      	ldrb	r3, [r3, #28]
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d103      	bne.n	80068b4 <HAL_TIM_PWM_PulseFinishedCallback+0x18>
 80068ac:	210c      	movs	r1, #12
 80068ae:	4803      	ldr	r0, [pc, #12]	; (80068bc <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80068b0:	f009 fb08 	bl	800fec4 <HAL_TIM_PWM_Stop_DMA>
}
 80068b4:	bf00      	nop
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	200022f4 	.word	0x200022f4

080068c0 <SendWS2812Data>:
//----------------------------------------------------------------------------------
static void SendWS2812Data(volatile uint32_t * ui32ColorBuffer)
{	// using data from ui32ColorBuffer it will prepare and send the m_uiWS2812LedDataBuffer[] data to the LEDs
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
	// ui32ColorBuffer[12] :
	// LEDn  => ui32ColorBuffer[(n-1)] -> 00000000 Gggggggg Rrrrrrrr Bbbbbbbb  => G,R,B are the MSB bits for the corresponding color information

	int i,j;

	for(i=0;i<12;i++)
 80068c8:	2300      	movs	r3, #0
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	e034      	b.n	8006938 <SendWS2812Data+0x78>
	{
		for(j=23;j>=0;j--)
 80068ce:	2317      	movs	r3, #23
 80068d0:	60bb      	str	r3, [r7, #8]
 80068d2:	e02b      	b.n	800692c <SendWS2812Data+0x6c>
		{
			if(ui32ColorBuffer[i] & (1U<<j))	m_uiWS2812LedDataBuffer[((i*24) + (23-j))] = 150;	// -> sending logic 1 = 66% of the period is HIGH
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	4413      	add	r3, r2
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	2101      	movs	r1, #1
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	fa01 f303 	lsl.w	r3, r1, r3
 80068e6:	4013      	ands	r3, r2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00e      	beq.n	800690a <SendWS2812Data+0x4a>
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	4613      	mov	r3, r2
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	4413      	add	r3, r2
 80068f4:	00db      	lsls	r3, r3, #3
 80068f6:	461a      	mov	r2, r3
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	f1c3 0317 	rsb	r3, r3, #23
 80068fe:	4413      	add	r3, r2
 8006900:	4a1f      	ldr	r2, [pc, #124]	; (8006980 <SendWS2812Data+0xc0>)
 8006902:	2196      	movs	r1, #150	; 0x96
 8006904:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8006908:	e00d      	b.n	8006926 <SendWS2812Data+0x66>
			else								m_uiWS2812LedDataBuffer[((i*24) + (23-j))] = 74;	// -> sending logic 0 = 33% of the period is HIGH
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	4613      	mov	r3, r2
 800690e:	005b      	lsls	r3, r3, #1
 8006910:	4413      	add	r3, r2
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	461a      	mov	r2, r3
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f1c3 0317 	rsb	r3, r3, #23
 800691c:	4413      	add	r3, r2
 800691e:	4a18      	ldr	r2, [pc, #96]	; (8006980 <SendWS2812Data+0xc0>)
 8006920:	214a      	movs	r1, #74	; 0x4a
 8006922:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(j=23;j>=0;j--)
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	3b01      	subs	r3, #1
 800692a:	60bb      	str	r3, [r7, #8]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2b00      	cmp	r3, #0
 8006930:	dad0      	bge.n	80068d4 <SendWS2812Data+0x14>
	for(i=0;i<12;i++)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3301      	adds	r3, #1
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2b0b      	cmp	r3, #11
 800693c:	ddc7      	ble.n	80068ce <SendWS2812Data+0xe>
		}
	}
	for(i=288;i<338;i++)						m_uiWS2812LedDataBuffer[i] = 0;						// add ZEROS as reset period after the data was sent to WS2812
 800693e:	f44f 7390 	mov.w	r3, #288	; 0x120
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	e007      	b.n	8006956 <SendWS2812Data+0x96>
 8006946:	4a0e      	ldr	r2, [pc, #56]	; (8006980 <SendWS2812Data+0xc0>)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2100      	movs	r1, #0
 800694c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	3301      	adds	r3, #1
 8006954:	60fb      	str	r3, [r7, #12]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f5b3 7fa9 	cmp.w	r3, #338	; 0x152
 800695c:	dbf3      	blt.n	8006946 <SendWS2812Data+0x86>

	if(HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4, (uint32_t *)m_uiWS2812LedDataBuffer, ((12 * 24) + 50)) != HAL_OK)
 800695e:	f44f 73a9 	mov.w	r3, #338	; 0x152
 8006962:	4a07      	ldr	r2, [pc, #28]	; (8006980 <SendWS2812Data+0xc0>)
 8006964:	210c      	movs	r1, #12
 8006966:	4807      	ldr	r0, [pc, #28]	; (8006984 <SendWS2812Data+0xc4>)
 8006968:	f009 f8e4 	bl	800fb34 <HAL_TIM_PWM_Start_DMA>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <SendWS2812Data+0xb8>
	 {
		Error_Handler2(ERROR_CODE_WS2812_SENDWS2812DATA);
 8006972:	20c8      	movs	r0, #200	; 0xc8
 8006974:	f002 ffce 	bl	8009914 <Error_Handler2>
		//Error_Handler();
	 }

}
 8006978:	bf00      	nop
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	20001c00 	.word	0x20001c00
 8006984:	200022f4 	.word	0x200022f4

08006988 <AnimationSwitchONInit>:
//----------------------------------------------------------------------------------
static void AnimationSwitchONInit(void)
{	// called @ initialization
 8006988:	b580      	push	{r7, lr}
 800698a:	af00      	add	r7, sp, #0
	m_AnimationSwitchON.DispID = DISPLY_ANIMATION;
 800698c:	4b10      	ldr	r3, [pc, #64]	; (80069d0 <AnimationSwitchONInit+0x48>)
 800698e:	2201      	movs	r2, #1
 8006990:	701a      	strb	r2, [r3, #0]
	m_AnimationSwitchON.AnimationState = ANIMATION_NOT_RUNNING;
 8006992:	4b0f      	ldr	r3, [pc, #60]	; (80069d0 <AnimationSwitchONInit+0x48>)
 8006994:	2200      	movs	r2, #0
 8006996:	719a      	strb	r2, [r3, #6]
	m_AnimationSwitchON.SetNextAnimation = ANIMATION_WAIT;
 8006998:	4b0d      	ldr	r3, [pc, #52]	; (80069d0 <AnimationSwitchONInit+0x48>)
 800699a:	2200      	movs	r2, #0
 800699c:	70da      	strb	r2, [r3, #3]
	m_AnimationSwitchON.ucAnimationMaxStage = 30;
 800699e:	4b0c      	ldr	r3, [pc, #48]	; (80069d0 <AnimationSwitchONInit+0x48>)
 80069a0:	221e      	movs	r2, #30
 80069a2:	711a      	strb	r2, [r3, #4]
	m_AnimationSwitchON.ucAnimationStageCounter = m_AnimationSwitchON.ucAnimationMaxStage ;
 80069a4:	4b0a      	ldr	r3, [pc, #40]	; (80069d0 <AnimationSwitchONInit+0x48>)
 80069a6:	791a      	ldrb	r2, [r3, #4]
 80069a8:	4b09      	ldr	r3, [pc, #36]	; (80069d0 <AnimationSwitchONInit+0x48>)
 80069aa:	715a      	strb	r2, [r3, #5]
	m_AnimationSwitchON.ucAnimationPeriod = 50;
 80069ac:	4b08      	ldr	r3, [pc, #32]	; (80069d0 <AnimationSwitchONInit+0x48>)
 80069ae:	2232      	movs	r2, #50	; 0x32
 80069b0:	705a      	strb	r2, [r3, #1]
	m_AnimationSwitchON.ucAnimationPeriodCounter = m_AnimationSwitchON.ucAnimationPeriod;
 80069b2:	4b07      	ldr	r3, [pc, #28]	; (80069d0 <AnimationSwitchONInit+0x48>)
 80069b4:	785a      	ldrb	r2, [r3, #1]
 80069b6:	4b06      	ldr	r3, [pc, #24]	; (80069d0 <AnimationSwitchONInit+0x48>)
 80069b8:	709a      	strb	r2, [r3, #2]
	m_AnimationSwitchON.ucAnimationRepeatCount = 0;	// by default the animation do not repeat
 80069ba:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <AnimationSwitchONInit+0x48>)
 80069bc:	2200      	movs	r2, #0
 80069be:	71da      	strb	r2, [r3, #7]

	// clear the display buffer for this animation
	WS2812EmptyDisplay(m_AnimationSwitchON.DispID);
 80069c0:	4b03      	ldr	r3, [pc, #12]	; (80069d0 <AnimationSwitchONInit+0x48>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7ff fe3d 	bl	8006644 <WS2812EmptyDisplay>

	return;
 80069ca:	bf00      	nop
}
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	2000204c 	.word	0x2000204c

080069d4 <AnimationSwitchONLoop>:
//----------------------------------------------------------------------------------
static void AnimationSwitchONLoop(void)
{	// called from the main loop to handle the animation
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af02      	add	r7, sp, #8
	// --------------------------------------
	if(m_AnimationSwitchON.SetNextAnimation == ANIMATION_WAIT)		return;			// waiting for the time elapse
 80069da:	4b3a      	ldr	r3, [pc, #232]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 80069dc:	78db      	ldrb	r3, [r3, #3]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d06d      	beq.n	8006abe <AnimationSwitchONLoop+0xea>

	if(m_AnimationSwitchON.ucAnimationStageCounter == 0)
 80069e2:	4b38      	ldr	r3, [pc, #224]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 80069e4:	795b      	ldrb	r3, [r3, #5]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d11c      	bne.n	8006a26 <AnimationSwitchONLoop+0x52>
	{
		if(m_AnimationSwitchON.ucAnimationRepeatCount <= 1)
 80069ec:	4b35      	ldr	r3, [pc, #212]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 80069ee:	79db      	ldrb	r3, [r3, #7]
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d803      	bhi.n	80069fe <AnimationSwitchONLoop+0x2a>
		{	// end the animation
			m_AnimationSwitchON.AnimationState = ANIMATION_NOT_RUNNING;				// this animation is done
 80069f6:	4b33      	ldr	r3, [pc, #204]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	719a      	strb	r2, [r3, #6]
			return;
 80069fc:	e060      	b.n	8006ac0 <AnimationSwitchONLoop+0xec>
		}
		// prepare another animation
		if(m_AnimationSwitchON.ucAnimationRepeatCount < 255) m_AnimationSwitchON.ucAnimationRepeatCount --;
 80069fe:	4b31      	ldr	r3, [pc, #196]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 8006a00:	79db      	ldrb	r3, [r3, #7]
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2bff      	cmp	r3, #255	; 0xff
 8006a06:	d006      	beq.n	8006a16 <AnimationSwitchONLoop+0x42>
 8006a08:	4b2e      	ldr	r3, [pc, #184]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 8006a0a:	79db      	ldrb	r3, [r3, #7]
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	4b2c      	ldr	r3, [pc, #176]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 8006a14:	71da      	strb	r2, [r3, #7]
		m_AnimationSwitchON.ucAnimationStageCounter = m_AnimationSwitchON.ucAnimationMaxStage ;
 8006a16:	4b2b      	ldr	r3, [pc, #172]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 8006a18:	791a      	ldrb	r2, [r3, #4]
 8006a1a:	4b2a      	ldr	r3, [pc, #168]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 8006a1c:	715a      	strb	r2, [r3, #5]
		m_AnimationSwitchON.ucAnimationPeriodCounter = m_AnimationSwitchON.ucAnimationPeriod;
 8006a1e:	4b29      	ldr	r3, [pc, #164]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 8006a20:	785a      	ldrb	r2, [r3, #1]
 8006a22:	4b28      	ldr	r3, [pc, #160]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 8006a24:	709a      	strb	r2, [r3, #2]
	}
	//-------------------------------------

	if( (m_AnimationSwitchON.ucAnimationStageCounter > (m_AnimationSwitchON.ucAnimationMaxStage - 12)) )
 8006a26:	4b27      	ldr	r3, [pc, #156]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 8006a28:	791b      	ldrb	r3, [r3, #4]
 8006a2a:	3b0b      	subs	r3, #11
 8006a2c:	4a25      	ldr	r2, [pc, #148]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 8006a2e:	7952      	ldrb	r2, [r2, #5]
 8006a30:	b2d2      	uxtb	r2, r2
 8006a32:	4293      	cmp	r3, r2
 8006a34:	dc18      	bgt.n	8006a68 <AnimationSwitchONLoop+0x94>
	{	// turning LEDs GREEN High intensity ON
		//WS2812SetDisplay(m_AnimationSwitchON.DispID, (m_AnimationSwitchON.ucAnimationMaxStage - m_AnimationSwitchON.ucAnimationStageCounter + 1) , 255, 0, 255, 0);
		WS2812SetDisplay(m_AnimationSwitchON.DispID, m_ucLEDSwapMatrix[(m_AnimationSwitchON.ucAnimationMaxStage - m_AnimationSwitchON.ucAnimationStageCounter)] , 255, 0, 255, 0);
 8006a36:	4b23      	ldr	r3, [pc, #140]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 8006a38:	7818      	ldrb	r0, [r3, #0]
 8006a3a:	4b22      	ldr	r3, [pc, #136]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 8006a3c:	791b      	ldrb	r3, [r3, #4]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	4b20      	ldr	r3, [pc, #128]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 8006a42:	795b      	ldrb	r3, [r3, #5]
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	4a1f      	ldr	r2, [pc, #124]	; (8006ac8 <AnimationSwitchONLoop+0xf4>)
 8006a4a:	5cd1      	ldrb	r1, [r2, r3]
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	9301      	str	r3, [sp, #4]
 8006a50:	23ff      	movs	r3, #255	; 0xff
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	2300      	movs	r3, #0
 8006a56:	22ff      	movs	r2, #255	; 0xff
 8006a58:	f7ff fd0e 	bl	8006478 <WS2812SetDisplay>
		WS2812ShowDisplay(m_AnimationSwitchON.DispID,0);
 8006a5c:	4b19      	ldr	r3, [pc, #100]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2100      	movs	r1, #0
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7ff fdc6 	bl	80065f4 <WS2812ShowDisplay>
	}

	if( (m_AnimationSwitchON.ucAnimationStageCounter < 13) )
 8006a68:	4b16      	ldr	r3, [pc, #88]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 8006a6a:	795b      	ldrb	r3, [r3, #5]
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b0c      	cmp	r3, #12
 8006a70:	d816      	bhi.n	8006aa0 <AnimationSwitchONLoop+0xcc>
	{	// Setting LEDs GREEN Low Intensity
		//WS2812SetDisplay(m_AnimationSwitchON.DispID,(12-m_AnimationSwitchON.ucAnimationStageCounter),4, 0, 255, 0);
		WS2812SetDisplay(m_AnimationSwitchON.DispID,m_ucLEDSwapMatrix[(12-m_AnimationSwitchON.ucAnimationStageCounter)],4, 0, 255, 0);
 8006a72:	4b14      	ldr	r3, [pc, #80]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 8006a74:	7818      	ldrb	r0, [r3, #0]
 8006a76:	4b13      	ldr	r3, [pc, #76]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 8006a78:	795b      	ldrb	r3, [r3, #5]
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	f1c3 030c 	rsb	r3, r3, #12
 8006a80:	4a11      	ldr	r2, [pc, #68]	; (8006ac8 <AnimationSwitchONLoop+0xf4>)
 8006a82:	5cd1      	ldrb	r1, [r2, r3]
 8006a84:	2300      	movs	r3, #0
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	23ff      	movs	r3, #255	; 0xff
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	2204      	movs	r2, #4
 8006a90:	f7ff fcf2 	bl	8006478 <WS2812SetDisplay>
		WS2812ShowDisplay(m_AnimationSwitchON.DispID,0);
 8006a94:	4b0b      	ldr	r3, [pc, #44]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7ff fdaa 	bl	80065f4 <WS2812ShowDisplay>
	}

	m_AnimationSwitchON.ucAnimationPeriodCounter = m_AnimationSwitchON.ucAnimationPeriod;	// set the new timer
 8006aa0:	4b08      	ldr	r3, [pc, #32]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 8006aa2:	785a      	ldrb	r2, [r3, #1]
 8006aa4:	4b07      	ldr	r3, [pc, #28]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 8006aa6:	709a      	strb	r2, [r3, #2]
	m_AnimationSwitchON.SetNextAnimation = ANIMATION_WAIT;									// wait for the time to elapse
 8006aa8:	4b06      	ldr	r3, [pc, #24]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	70da      	strb	r2, [r3, #3]
	m_AnimationSwitchON.ucAnimationStageCounter --;											// select the next stage of the animation
 8006aae:	4b05      	ldr	r3, [pc, #20]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 8006ab0:	795b      	ldrb	r3, [r3, #5]
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	4b02      	ldr	r3, [pc, #8]	; (8006ac4 <AnimationSwitchONLoop+0xf0>)
 8006aba:	715a      	strb	r2, [r3, #5]
	return;
 8006abc:	e000      	b.n	8006ac0 <AnimationSwitchONLoop+0xec>
	if(m_AnimationSwitchON.SetNextAnimation == ANIMATION_WAIT)		return;			// waiting for the time elapse
 8006abe:	bf00      	nop
}
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	2000204c 	.word	0x2000204c
 8006ac8:	2000208c 	.word	0x2000208c

08006acc <AnimationSwitchONTimer1KHZ>:
//----------------------------------------------------------------------------------
static void AnimationSwitchONTimer1KHZ(void)
{// called from the 1KHZ ISR system timer
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0

	if(m_AnimationSwitchON.ucAnimationPeriodCounter > 1) 		m_AnimationSwitchON.ucAnimationPeriodCounter --;
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <AnimationSwitchONTimer1KHZ+0x34>)
 8006ad2:	789b      	ldrb	r3, [r3, #2]
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d907      	bls.n	8006aea <AnimationSwitchONTimer1KHZ+0x1e>
 8006ada:	4b09      	ldr	r3, [pc, #36]	; (8006b00 <AnimationSwitchONTimer1KHZ+0x34>)
 8006adc:	789b      	ldrb	r3, [r3, #2]
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	4b06      	ldr	r3, [pc, #24]	; (8006b00 <AnimationSwitchONTimer1KHZ+0x34>)
 8006ae6:	709a      	strb	r2, [r3, #2]
	{
		m_AnimationSwitchON.ucAnimationPeriodCounter = 0;
		m_AnimationSwitchON.SetNextAnimation = SET_NEXT_ANIMATION;
	}

	return;
 8006ae8:	e006      	b.n	8006af8 <AnimationSwitchONTimer1KHZ+0x2c>
		m_AnimationSwitchON.ucAnimationPeriodCounter = 0;
 8006aea:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <AnimationSwitchONTimer1KHZ+0x34>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	709a      	strb	r2, [r3, #2]
		m_AnimationSwitchON.SetNextAnimation = SET_NEXT_ANIMATION;
 8006af0:	4b03      	ldr	r3, [pc, #12]	; (8006b00 <AnimationSwitchONTimer1KHZ+0x34>)
 8006af2:	2201      	movs	r2, #1
 8006af4:	70da      	strb	r2, [r3, #3]
	return;
 8006af6:	bf00      	nop
}
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	2000204c 	.word	0x2000204c

08006b04 <AnimationSwitchOFFInit>:
//----------------------------------------------------------------------------------
static void AnimationSwitchOFFInit(void)
{	// called @ initialization
 8006b04:	b480      	push	{r7}
 8006b06:	af00      	add	r7, sp, #0
	m_AnimationSwitchOFF.DispID = DISPLY_ANIMATION;
 8006b08:	4b0f      	ldr	r3, [pc, #60]	; (8006b48 <AnimationSwitchOFFInit+0x44>)
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	701a      	strb	r2, [r3, #0]
	m_AnimationSwitchOFF.AnimationState = ANIMATION_NOT_RUNNING;
 8006b0e:	4b0e      	ldr	r3, [pc, #56]	; (8006b48 <AnimationSwitchOFFInit+0x44>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	719a      	strb	r2, [r3, #6]
	m_AnimationSwitchOFF.SetNextAnimation = ANIMATION_WAIT;
 8006b14:	4b0c      	ldr	r3, [pc, #48]	; (8006b48 <AnimationSwitchOFFInit+0x44>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	70da      	strb	r2, [r3, #3]
	m_AnimationSwitchOFF.ucAnimationMaxStage = 30;
 8006b1a:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <AnimationSwitchOFFInit+0x44>)
 8006b1c:	221e      	movs	r2, #30
 8006b1e:	711a      	strb	r2, [r3, #4]
	m_AnimationSwitchOFF.ucAnimationStageCounter = m_AnimationSwitchOFF.ucAnimationMaxStage ;
 8006b20:	4b09      	ldr	r3, [pc, #36]	; (8006b48 <AnimationSwitchOFFInit+0x44>)
 8006b22:	791a      	ldrb	r2, [r3, #4]
 8006b24:	4b08      	ldr	r3, [pc, #32]	; (8006b48 <AnimationSwitchOFFInit+0x44>)
 8006b26:	715a      	strb	r2, [r3, #5]
	m_AnimationSwitchOFF.ucAnimationPeriod = 50;
 8006b28:	4b07      	ldr	r3, [pc, #28]	; (8006b48 <AnimationSwitchOFFInit+0x44>)
 8006b2a:	2232      	movs	r2, #50	; 0x32
 8006b2c:	705a      	strb	r2, [r3, #1]
	m_AnimationSwitchOFF.ucAnimationPeriodCounter = m_AnimationSwitchOFF.ucAnimationPeriod;
 8006b2e:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <AnimationSwitchOFFInit+0x44>)
 8006b30:	785a      	ldrb	r2, [r3, #1]
 8006b32:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <AnimationSwitchOFFInit+0x44>)
 8006b34:	709a      	strb	r2, [r3, #2]
	m_AnimationSwitchOFF.ucAnimationRepeatCount = 0;
 8006b36:	4b04      	ldr	r3, [pc, #16]	; (8006b48 <AnimationSwitchOFFInit+0x44>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	71da      	strb	r2, [r3, #7]

	// clear the display buffer for this animation
	//WS2812EmptyDisplay(m_AnimationSwitchOFF.DispID);

	return;
 8006b3c:	bf00      	nop
}
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	20002054 	.word	0x20002054

08006b4c <AnimationSwitchOFFLoop>:
//----------------------------------------------------------------------------------
static void AnimationSwitchOFFLoop(void)
{	// called from the main loop to handle the animation
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af02      	add	r7, sp, #8
	// --------------------------------------
	if(m_AnimationSwitchOFF.SetNextAnimation == ANIMATION_WAIT)		return;		// waiting for the time elapse
 8006b52:	4b3b      	ldr	r3, [pc, #236]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006b54:	78db      	ldrb	r3, [r3, #3]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d06e      	beq.n	8006c38 <AnimationSwitchOFFLoop+0xec>

	if(m_AnimationSwitchOFF.ucAnimationStageCounter == 0)
 8006b5a:	4b39      	ldr	r3, [pc, #228]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006b5c:	795b      	ldrb	r3, [r3, #5]
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d11c      	bne.n	8006b9e <AnimationSwitchOFFLoop+0x52>
	{
		if(m_AnimationSwitchOFF.ucAnimationRepeatCount <= 1)
 8006b64:	4b36      	ldr	r3, [pc, #216]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006b66:	79db      	ldrb	r3, [r3, #7]
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d803      	bhi.n	8006b76 <AnimationSwitchOFFLoop+0x2a>
		{	// end the animation
			m_AnimationSwitchOFF.AnimationState = ANIMATION_NOT_RUNNING;				// this animation is done
 8006b6e:	4b34      	ldr	r3, [pc, #208]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	719a      	strb	r2, [r3, #6]
			return;
 8006b74:	e061      	b.n	8006c3a <AnimationSwitchOFFLoop+0xee>
		}
		// prepare another animation
		if(m_AnimationSwitchOFF.ucAnimationRepeatCount < 255) m_AnimationSwitchOFF.ucAnimationRepeatCount --;
 8006b76:	4b32      	ldr	r3, [pc, #200]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006b78:	79db      	ldrb	r3, [r3, #7]
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2bff      	cmp	r3, #255	; 0xff
 8006b7e:	d006      	beq.n	8006b8e <AnimationSwitchOFFLoop+0x42>
 8006b80:	4b2f      	ldr	r3, [pc, #188]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006b82:	79db      	ldrb	r3, [r3, #7]
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	3b01      	subs	r3, #1
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	4b2d      	ldr	r3, [pc, #180]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006b8c:	71da      	strb	r2, [r3, #7]
		m_AnimationSwitchOFF.ucAnimationStageCounter = m_AnimationSwitchOFF.ucAnimationMaxStage ;
 8006b8e:	4b2c      	ldr	r3, [pc, #176]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006b90:	791a      	ldrb	r2, [r3, #4]
 8006b92:	4b2b      	ldr	r3, [pc, #172]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006b94:	715a      	strb	r2, [r3, #5]
		m_AnimationSwitchOFF.ucAnimationPeriodCounter = m_AnimationSwitchOFF.ucAnimationPeriod;
 8006b96:	4b2a      	ldr	r3, [pc, #168]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006b98:	785a      	ldrb	r2, [r3, #1]
 8006b9a:	4b29      	ldr	r3, [pc, #164]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006b9c:	709a      	strb	r2, [r3, #2]
	}
	//-------------------------------------

	if( (m_AnimationSwitchOFF.ucAnimationStageCounter > (m_AnimationSwitchOFF.ucAnimationMaxStage - 12)) )
 8006b9e:	4b28      	ldr	r3, [pc, #160]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006ba0:	791b      	ldrb	r3, [r3, #4]
 8006ba2:	3b0b      	subs	r3, #11
 8006ba4:	4a26      	ldr	r2, [pc, #152]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006ba6:	7952      	ldrb	r2, [r2, #5]
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	4293      	cmp	r3, r2
 8006bac:	dc1a      	bgt.n	8006be4 <AnimationSwitchOFFLoop+0x98>
	{	// turning LEDs RED High intensity ON
		//WS2812SetDisplay(m_AnimationSwitchOFF.DispID, (m_AnimationSwitchOFF.ucAnimationMaxStage - m_AnimationSwitchOFF.ucAnimationStageCounter + 1) , 255, 0, 255, 0);
		WS2812SetDisplay(m_AnimationSwitchOFF.DispID, m_ucLEDSwapMatrix[(11-(m_AnimationSwitchOFF.ucAnimationMaxStage - m_AnimationSwitchOFF.ucAnimationStageCounter))] , 255, 255, 0, 0);
 8006bae:	4b24      	ldr	r3, [pc, #144]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006bb0:	7818      	ldrb	r0, [r3, #0]
 8006bb2:	4b23      	ldr	r3, [pc, #140]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006bb4:	791b      	ldrb	r3, [r3, #4]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	4b21      	ldr	r3, [pc, #132]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006bba:	795b      	ldrb	r3, [r3, #5]
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	f1c3 030b 	rsb	r3, r3, #11
 8006bc4:	4a1f      	ldr	r2, [pc, #124]	; (8006c44 <AnimationSwitchOFFLoop+0xf8>)
 8006bc6:	5cd1      	ldrb	r1, [r2, r3]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	9301      	str	r3, [sp, #4]
 8006bcc:	2300      	movs	r3, #0
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	23ff      	movs	r3, #255	; 0xff
 8006bd2:	22ff      	movs	r2, #255	; 0xff
 8006bd4:	f7ff fc50 	bl	8006478 <WS2812SetDisplay>
		WS2812ShowDisplay(m_AnimationSwitchOFF.DispID,0);
 8006bd8:	4b19      	ldr	r3, [pc, #100]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2100      	movs	r1, #0
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7ff fd08 	bl	80065f4 <WS2812ShowDisplay>
	}

	if( (m_AnimationSwitchOFF.ucAnimationStageCounter < 13) )
 8006be4:	4b16      	ldr	r3, [pc, #88]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006be6:	795b      	ldrb	r3, [r3, #5]
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b0c      	cmp	r3, #12
 8006bec:	d815      	bhi.n	8006c1a <AnimationSwitchOFFLoop+0xce>
	{	// Setting LEDs OFF
		//WS2812SetDisplay(m_AnimationSwitchOFF.DispID,(12-m_AnimationSwitchOFF.ucAnimationStageCounter),4, 0, 255, 0);
		WS2812SetDisplay(m_AnimationSwitchOFF.DispID,m_ucLEDSwapMatrix[(11-(12-m_AnimationSwitchOFF.ucAnimationStageCounter))],0, 0, 0, 0);
 8006bee:	4b14      	ldr	r3, [pc, #80]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006bf0:	7818      	ldrb	r0, [r3, #0]
 8006bf2:	4b13      	ldr	r3, [pc, #76]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006bf4:	795b      	ldrb	r3, [r3, #5]
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	4a12      	ldr	r2, [pc, #72]	; (8006c44 <AnimationSwitchOFFLoop+0xf8>)
 8006bfc:	5cd1      	ldrb	r1, [r2, r3]
 8006bfe:	2300      	movs	r3, #0
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	2300      	movs	r3, #0
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	2300      	movs	r3, #0
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f7ff fc35 	bl	8006478 <WS2812SetDisplay>
		WS2812ShowDisplay(m_AnimationSwitchOFF.DispID,0);
 8006c0e:	4b0c      	ldr	r3, [pc, #48]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	2100      	movs	r1, #0
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7ff fced 	bl	80065f4 <WS2812ShowDisplay>
	}

	m_AnimationSwitchOFF.ucAnimationPeriodCounter = m_AnimationSwitchOFF.ucAnimationPeriod;	// set the new timer
 8006c1a:	4b09      	ldr	r3, [pc, #36]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006c1c:	785a      	ldrb	r2, [r3, #1]
 8006c1e:	4b08      	ldr	r3, [pc, #32]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006c20:	709a      	strb	r2, [r3, #2]
	m_AnimationSwitchOFF.SetNextAnimation = ANIMATION_WAIT;									// wait for the time to elapse
 8006c22:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	70da      	strb	r2, [r3, #3]
	m_AnimationSwitchOFF.ucAnimationStageCounter --;											// select the next stage of the animation
 8006c28:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006c2a:	795b      	ldrb	r3, [r3, #5]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	4b03      	ldr	r3, [pc, #12]	; (8006c40 <AnimationSwitchOFFLoop+0xf4>)
 8006c34:	715a      	strb	r2, [r3, #5]
	return;
 8006c36:	e000      	b.n	8006c3a <AnimationSwitchOFFLoop+0xee>
	if(m_AnimationSwitchOFF.SetNextAnimation == ANIMATION_WAIT)		return;		// waiting for the time elapse
 8006c38:	bf00      	nop
}
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	20002054 	.word	0x20002054
 8006c44:	2000208c 	.word	0x2000208c

08006c48 <AnimationSwitchOFFTimer1KHZ>:
//----------------------------------------------------------------------------------
static void AnimationSwitchOFFTimer1KHZ(void)
{// called from the 1KHZ ISR system timer
 8006c48:	b480      	push	{r7}
 8006c4a:	af00      	add	r7, sp, #0

	if(m_AnimationSwitchOFF.ucAnimationPeriodCounter > 1) 		m_AnimationSwitchOFF.ucAnimationPeriodCounter --;
 8006c4c:	4b0b      	ldr	r3, [pc, #44]	; (8006c7c <AnimationSwitchOFFTimer1KHZ+0x34>)
 8006c4e:	789b      	ldrb	r3, [r3, #2]
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d907      	bls.n	8006c66 <AnimationSwitchOFFTimer1KHZ+0x1e>
 8006c56:	4b09      	ldr	r3, [pc, #36]	; (8006c7c <AnimationSwitchOFFTimer1KHZ+0x34>)
 8006c58:	789b      	ldrb	r3, [r3, #2]
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	4b06      	ldr	r3, [pc, #24]	; (8006c7c <AnimationSwitchOFFTimer1KHZ+0x34>)
 8006c62:	709a      	strb	r2, [r3, #2]
	{
		m_AnimationSwitchOFF.ucAnimationPeriodCounter = 0;
		m_AnimationSwitchOFF.SetNextAnimation = SET_NEXT_ANIMATION;
	}

	return;
 8006c64:	e006      	b.n	8006c74 <AnimationSwitchOFFTimer1KHZ+0x2c>
		m_AnimationSwitchOFF.ucAnimationPeriodCounter = 0;
 8006c66:	4b05      	ldr	r3, [pc, #20]	; (8006c7c <AnimationSwitchOFFTimer1KHZ+0x34>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	709a      	strb	r2, [r3, #2]
		m_AnimationSwitchOFF.SetNextAnimation = SET_NEXT_ANIMATION;
 8006c6c:	4b03      	ldr	r3, [pc, #12]	; (8006c7c <AnimationSwitchOFFTimer1KHZ+0x34>)
 8006c6e:	2201      	movs	r2, #1
 8006c70:	70da      	strb	r2, [r3, #3]
	return;
 8006c72:	bf00      	nop
}
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	20002054 	.word	0x20002054

08006c80 <Animation1Init>:
//----------------------------------------------------------------------------------
static void Animation1Init(void)
{	// called @ initialization
 8006c80:	b580      	push	{r7, lr}
 8006c82:	af00      	add	r7, sp, #0
	m_Animation1.DispID = DISPLY_ANIMATION;
 8006c84:	4b10      	ldr	r3, [pc, #64]	; (8006cc8 <Animation1Init+0x48>)
 8006c86:	2201      	movs	r2, #1
 8006c88:	701a      	strb	r2, [r3, #0]
	m_Animation1.AnimationState = ANIMATION_NOT_RUNNING;
 8006c8a:	4b0f      	ldr	r3, [pc, #60]	; (8006cc8 <Animation1Init+0x48>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	719a      	strb	r2, [r3, #6]
	m_Animation1.SetNextAnimation = ANIMATION_WAIT;
 8006c90:	4b0d      	ldr	r3, [pc, #52]	; (8006cc8 <Animation1Init+0x48>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	70da      	strb	r2, [r3, #3]
	m_Animation1.ucAnimationMaxStage = 30;
 8006c96:	4b0c      	ldr	r3, [pc, #48]	; (8006cc8 <Animation1Init+0x48>)
 8006c98:	221e      	movs	r2, #30
 8006c9a:	711a      	strb	r2, [r3, #4]
	m_Animation1.ucAnimationStageCounter = m_Animation1.ucAnimationMaxStage ;
 8006c9c:	4b0a      	ldr	r3, [pc, #40]	; (8006cc8 <Animation1Init+0x48>)
 8006c9e:	791a      	ldrb	r2, [r3, #4]
 8006ca0:	4b09      	ldr	r3, [pc, #36]	; (8006cc8 <Animation1Init+0x48>)
 8006ca2:	715a      	strb	r2, [r3, #5]
	m_Animation1.ucAnimationPeriod = 100;
 8006ca4:	4b08      	ldr	r3, [pc, #32]	; (8006cc8 <Animation1Init+0x48>)
 8006ca6:	2264      	movs	r2, #100	; 0x64
 8006ca8:	705a      	strb	r2, [r3, #1]
	m_Animation1.ucAnimationPeriodCounter = m_Animation1.ucAnimationPeriod;
 8006caa:	4b07      	ldr	r3, [pc, #28]	; (8006cc8 <Animation1Init+0x48>)
 8006cac:	785a      	ldrb	r2, [r3, #1]
 8006cae:	4b06      	ldr	r3, [pc, #24]	; (8006cc8 <Animation1Init+0x48>)
 8006cb0:	709a      	strb	r2, [r3, #2]
	m_Animation1.ucAnimationRepeatCount = 0;
 8006cb2:	4b05      	ldr	r3, [pc, #20]	; (8006cc8 <Animation1Init+0x48>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	71da      	strb	r2, [r3, #7]

	// clear the display buffer for this animation
	WS2812EmptyDisplay(m_Animation1.DispID);
 8006cb8:	4b03      	ldr	r3, [pc, #12]	; (8006cc8 <Animation1Init+0x48>)
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7ff fcc1 	bl	8006644 <WS2812EmptyDisplay>

	return;
 8006cc2:	bf00      	nop
}
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	2000205c 	.word	0x2000205c

08006ccc <Animation1Loop>:
//----------------------------------------------------------------------------------
static void Animation1Loop(void)
{	// called from the main loop to handle the animation
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af02      	add	r7, sp, #8
	// --------------------------------------
	if(m_Animation1.SetNextAnimation == ANIMATION_WAIT)			return;		// waiting for the time elapse
 8006cd2:	4b3b      	ldr	r3, [pc, #236]	; (8006dc0 <Animation1Loop+0xf4>)
 8006cd4:	78db      	ldrb	r3, [r3, #3]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d06e      	beq.n	8006db8 <Animation1Loop+0xec>

	if(m_Animation1.ucAnimationStageCounter == 0)
 8006cda:	4b39      	ldr	r3, [pc, #228]	; (8006dc0 <Animation1Loop+0xf4>)
 8006cdc:	795b      	ldrb	r3, [r3, #5]
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d11c      	bne.n	8006d1e <Animation1Loop+0x52>
	{
		if(m_Animation1.ucAnimationRepeatCount <= 1)
 8006ce4:	4b36      	ldr	r3, [pc, #216]	; (8006dc0 <Animation1Loop+0xf4>)
 8006ce6:	79db      	ldrb	r3, [r3, #7]
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d803      	bhi.n	8006cf6 <Animation1Loop+0x2a>
		{	// end the animation
			m_Animation1.AnimationState = ANIMATION_NOT_RUNNING;				// this animation is done
 8006cee:	4b34      	ldr	r3, [pc, #208]	; (8006dc0 <Animation1Loop+0xf4>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	719a      	strb	r2, [r3, #6]
			return;
 8006cf4:	e061      	b.n	8006dba <Animation1Loop+0xee>
		}
		// prepare another animation
		if(m_Animation1.ucAnimationRepeatCount < 255) m_Animation1.ucAnimationRepeatCount --;
 8006cf6:	4b32      	ldr	r3, [pc, #200]	; (8006dc0 <Animation1Loop+0xf4>)
 8006cf8:	79db      	ldrb	r3, [r3, #7]
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2bff      	cmp	r3, #255	; 0xff
 8006cfe:	d006      	beq.n	8006d0e <Animation1Loop+0x42>
 8006d00:	4b2f      	ldr	r3, [pc, #188]	; (8006dc0 <Animation1Loop+0xf4>)
 8006d02:	79db      	ldrb	r3, [r3, #7]
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	3b01      	subs	r3, #1
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	4b2d      	ldr	r3, [pc, #180]	; (8006dc0 <Animation1Loop+0xf4>)
 8006d0c:	71da      	strb	r2, [r3, #7]
		m_Animation1.ucAnimationStageCounter = m_Animation1.ucAnimationMaxStage ;
 8006d0e:	4b2c      	ldr	r3, [pc, #176]	; (8006dc0 <Animation1Loop+0xf4>)
 8006d10:	791a      	ldrb	r2, [r3, #4]
 8006d12:	4b2b      	ldr	r3, [pc, #172]	; (8006dc0 <Animation1Loop+0xf4>)
 8006d14:	715a      	strb	r2, [r3, #5]
		m_Animation1.ucAnimationPeriodCounter = m_Animation1.ucAnimationPeriod;
 8006d16:	4b2a      	ldr	r3, [pc, #168]	; (8006dc0 <Animation1Loop+0xf4>)
 8006d18:	785a      	ldrb	r2, [r3, #1]
 8006d1a:	4b29      	ldr	r3, [pc, #164]	; (8006dc0 <Animation1Loop+0xf4>)
 8006d1c:	709a      	strb	r2, [r3, #2]
	}
	//-------------------------------------

	if( (m_Animation1.ucAnimationStageCounter > (m_Animation1.ucAnimationMaxStage - 12)) )
 8006d1e:	4b28      	ldr	r3, [pc, #160]	; (8006dc0 <Animation1Loop+0xf4>)
 8006d20:	791b      	ldrb	r3, [r3, #4]
 8006d22:	3b0b      	subs	r3, #11
 8006d24:	4a26      	ldr	r2, [pc, #152]	; (8006dc0 <Animation1Loop+0xf4>)
 8006d26:	7952      	ldrb	r2, [r2, #5]
 8006d28:	b2d2      	uxtb	r2, r2
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	dc1a      	bgt.n	8006d64 <Animation1Loop+0x98>
	{	// turning LEDs ON / OFF
		WS2812SetDisplay(m_Animation1.DispID, m_ucLEDSwapMatrix[(11-(m_Animation1.ucAnimationMaxStage - m_Animation1.ucAnimationStageCounter))] , 255, 255, 255, 255);
 8006d2e:	4b24      	ldr	r3, [pc, #144]	; (8006dc0 <Animation1Loop+0xf4>)
 8006d30:	7818      	ldrb	r0, [r3, #0]
 8006d32:	4b23      	ldr	r3, [pc, #140]	; (8006dc0 <Animation1Loop+0xf4>)
 8006d34:	791b      	ldrb	r3, [r3, #4]
 8006d36:	461a      	mov	r2, r3
 8006d38:	4b21      	ldr	r3, [pc, #132]	; (8006dc0 <Animation1Loop+0xf4>)
 8006d3a:	795b      	ldrb	r3, [r3, #5]
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	f1c3 030b 	rsb	r3, r3, #11
 8006d44:	4a1f      	ldr	r2, [pc, #124]	; (8006dc4 <Animation1Loop+0xf8>)
 8006d46:	5cd1      	ldrb	r1, [r2, r3]
 8006d48:	23ff      	movs	r3, #255	; 0xff
 8006d4a:	9301      	str	r3, [sp, #4]
 8006d4c:	23ff      	movs	r3, #255	; 0xff
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	23ff      	movs	r3, #255	; 0xff
 8006d52:	22ff      	movs	r2, #255	; 0xff
 8006d54:	f7ff fb90 	bl	8006478 <WS2812SetDisplay>
		WS2812ShowDisplay(m_Animation1.DispID,0);
 8006d58:	4b19      	ldr	r3, [pc, #100]	; (8006dc0 <Animation1Loop+0xf4>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7ff fc48 	bl	80065f4 <WS2812ShowDisplay>
	}

	if( (m_Animation1.ucAnimationStageCounter < 13) )
 8006d64:	4b16      	ldr	r3, [pc, #88]	; (8006dc0 <Animation1Loop+0xf4>)
 8006d66:	795b      	ldrb	r3, [r3, #5]
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b0c      	cmp	r3, #12
 8006d6c:	d815      	bhi.n	8006d9a <Animation1Loop+0xce>
	{	// Setting LEDs ON / OFF
		WS2812SetDisplay(m_Animation1.DispID,m_ucLEDSwapMatrix[(11-(12-m_Animation1.ucAnimationStageCounter))],0, 0, 0, 0);
 8006d6e:	4b14      	ldr	r3, [pc, #80]	; (8006dc0 <Animation1Loop+0xf4>)
 8006d70:	7818      	ldrb	r0, [r3, #0]
 8006d72:	4b13      	ldr	r3, [pc, #76]	; (8006dc0 <Animation1Loop+0xf4>)
 8006d74:	795b      	ldrb	r3, [r3, #5]
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	4a12      	ldr	r2, [pc, #72]	; (8006dc4 <Animation1Loop+0xf8>)
 8006d7c:	5cd1      	ldrb	r1, [r2, r3]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	9301      	str	r3, [sp, #4]
 8006d82:	2300      	movs	r3, #0
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	2300      	movs	r3, #0
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f7ff fb75 	bl	8006478 <WS2812SetDisplay>
		WS2812ShowDisplay(m_Animation1.DispID,0);
 8006d8e:	4b0c      	ldr	r3, [pc, #48]	; (8006dc0 <Animation1Loop+0xf4>)
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	2100      	movs	r1, #0
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7ff fc2d 	bl	80065f4 <WS2812ShowDisplay>
	}

	m_Animation1.ucAnimationPeriodCounter = m_Animation1.ucAnimationPeriod;			// set the new timer
 8006d9a:	4b09      	ldr	r3, [pc, #36]	; (8006dc0 <Animation1Loop+0xf4>)
 8006d9c:	785a      	ldrb	r2, [r3, #1]
 8006d9e:	4b08      	ldr	r3, [pc, #32]	; (8006dc0 <Animation1Loop+0xf4>)
 8006da0:	709a      	strb	r2, [r3, #2]
	m_Animation1.SetNextAnimation = ANIMATION_WAIT;									// wait for the time to elapse
 8006da2:	4b07      	ldr	r3, [pc, #28]	; (8006dc0 <Animation1Loop+0xf4>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	70da      	strb	r2, [r3, #3]
	m_Animation1.ucAnimationStageCounter --;										// select the next stage of the animation
 8006da8:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <Animation1Loop+0xf4>)
 8006daa:	795b      	ldrb	r3, [r3, #5]
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	3b01      	subs	r3, #1
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	4b03      	ldr	r3, [pc, #12]	; (8006dc0 <Animation1Loop+0xf4>)
 8006db4:	715a      	strb	r2, [r3, #5]
	return;
 8006db6:	e000      	b.n	8006dba <Animation1Loop+0xee>
	if(m_Animation1.SetNextAnimation == ANIMATION_WAIT)			return;		// waiting for the time elapse
 8006db8:	bf00      	nop
}
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	2000205c 	.word	0x2000205c
 8006dc4:	2000208c 	.word	0x2000208c

08006dc8 <Animation1Timer1KHZ>:
//----------------------------------------------------------------------------------
static void Animation1Timer1KHZ(void)
{// called from the 1KHZ ISR system timer
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0

	if(m_Animation1.ucAnimationPeriodCounter > 1) 		m_Animation1.ucAnimationPeriodCounter --;
 8006dcc:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <Animation1Timer1KHZ+0x34>)
 8006dce:	789b      	ldrb	r3, [r3, #2]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d907      	bls.n	8006de6 <Animation1Timer1KHZ+0x1e>
 8006dd6:	4b09      	ldr	r3, [pc, #36]	; (8006dfc <Animation1Timer1KHZ+0x34>)
 8006dd8:	789b      	ldrb	r3, [r3, #2]
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	4b06      	ldr	r3, [pc, #24]	; (8006dfc <Animation1Timer1KHZ+0x34>)
 8006de2:	709a      	strb	r2, [r3, #2]
	{
		m_Animation1.ucAnimationPeriodCounter = 0;
		m_Animation1.SetNextAnimation = SET_NEXT_ANIMATION;
	}

	return;
 8006de4:	e006      	b.n	8006df4 <Animation1Timer1KHZ+0x2c>
		m_Animation1.ucAnimationPeriodCounter = 0;
 8006de6:	4b05      	ldr	r3, [pc, #20]	; (8006dfc <Animation1Timer1KHZ+0x34>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	709a      	strb	r2, [r3, #2]
		m_Animation1.SetNextAnimation = SET_NEXT_ANIMATION;
 8006dec:	4b03      	ldr	r3, [pc, #12]	; (8006dfc <Animation1Timer1KHZ+0x34>)
 8006dee:	2201      	movs	r2, #1
 8006df0:	70da      	strb	r2, [r3, #3]
	return;
 8006df2:	bf00      	nop
}
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	2000205c 	.word	0x2000205c

08006e00 <Animation2Init>:
//----------------------------------------------------------------------------------
static void Animation2Init(void)
{	// called @ initialization
 8006e00:	b580      	push	{r7, lr}
 8006e02:	af00      	add	r7, sp, #0
	m_Animation2.DispID = DISPLY_ANIMATION;
 8006e04:	4b10      	ldr	r3, [pc, #64]	; (8006e48 <Animation2Init+0x48>)
 8006e06:	2201      	movs	r2, #1
 8006e08:	701a      	strb	r2, [r3, #0]
	m_Animation2.AnimationState = ANIMATION_NOT_RUNNING;
 8006e0a:	4b0f      	ldr	r3, [pc, #60]	; (8006e48 <Animation2Init+0x48>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	719a      	strb	r2, [r3, #6]
	m_Animation2.SetNextAnimation = ANIMATION_WAIT;
 8006e10:	4b0d      	ldr	r3, [pc, #52]	; (8006e48 <Animation2Init+0x48>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	70da      	strb	r2, [r3, #3]
	m_Animation2.ucAnimationMaxStage = 30;
 8006e16:	4b0c      	ldr	r3, [pc, #48]	; (8006e48 <Animation2Init+0x48>)
 8006e18:	221e      	movs	r2, #30
 8006e1a:	711a      	strb	r2, [r3, #4]
	m_Animation2.ucAnimationStageCounter = m_Animation2.ucAnimationMaxStage ;
 8006e1c:	4b0a      	ldr	r3, [pc, #40]	; (8006e48 <Animation2Init+0x48>)
 8006e1e:	791a      	ldrb	r2, [r3, #4]
 8006e20:	4b09      	ldr	r3, [pc, #36]	; (8006e48 <Animation2Init+0x48>)
 8006e22:	715a      	strb	r2, [r3, #5]
	m_Animation2.ucAnimationPeriod = 50;
 8006e24:	4b08      	ldr	r3, [pc, #32]	; (8006e48 <Animation2Init+0x48>)
 8006e26:	2232      	movs	r2, #50	; 0x32
 8006e28:	705a      	strb	r2, [r3, #1]
	m_Animation2.ucAnimationPeriodCounter = m_Animation2.ucAnimationPeriod;
 8006e2a:	4b07      	ldr	r3, [pc, #28]	; (8006e48 <Animation2Init+0x48>)
 8006e2c:	785a      	ldrb	r2, [r3, #1]
 8006e2e:	4b06      	ldr	r3, [pc, #24]	; (8006e48 <Animation2Init+0x48>)
 8006e30:	709a      	strb	r2, [r3, #2]
	m_Animation2.ucAnimationRepeatCount = 0;
 8006e32:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <Animation2Init+0x48>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	71da      	strb	r2, [r3, #7]

	// clear the display buffer for this animation
	WS2812EmptyDisplay(m_Animation2.DispID);
 8006e38:	4b03      	ldr	r3, [pc, #12]	; (8006e48 <Animation2Init+0x48>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff fc01 	bl	8006644 <WS2812EmptyDisplay>

	return;
 8006e42:	bf00      	nop
}
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	20002064 	.word	0x20002064

08006e4c <Animation2Loop>:
//----------------------------------------------------------------------------------
static void Animation2Loop(void)
{	// called from the main loop to handle the animation
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af02      	add	r7, sp, #8
	// --------------------------------------
	if(m_Animation2.SetNextAnimation == ANIMATION_WAIT)			return;		// waiting for the time elapse
 8006e52:	4b3b      	ldr	r3, [pc, #236]	; (8006f40 <Animation2Loop+0xf4>)
 8006e54:	78db      	ldrb	r3, [r3, #3]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d06e      	beq.n	8006f38 <Animation2Loop+0xec>

	if(m_Animation2.ucAnimationStageCounter == 0)
 8006e5a:	4b39      	ldr	r3, [pc, #228]	; (8006f40 <Animation2Loop+0xf4>)
 8006e5c:	795b      	ldrb	r3, [r3, #5]
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d11c      	bne.n	8006e9e <Animation2Loop+0x52>
	{
		if(m_Animation2.ucAnimationRepeatCount <= 1)
 8006e64:	4b36      	ldr	r3, [pc, #216]	; (8006f40 <Animation2Loop+0xf4>)
 8006e66:	79db      	ldrb	r3, [r3, #7]
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d803      	bhi.n	8006e76 <Animation2Loop+0x2a>
		{	// end the animation
			m_Animation2.AnimationState = ANIMATION_NOT_RUNNING;				// this animation is done
 8006e6e:	4b34      	ldr	r3, [pc, #208]	; (8006f40 <Animation2Loop+0xf4>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	719a      	strb	r2, [r3, #6]
			return;
 8006e74:	e061      	b.n	8006f3a <Animation2Loop+0xee>
		}
		// prepare another animation
		if(m_Animation2.ucAnimationRepeatCount < 255) m_Animation2.ucAnimationRepeatCount --;
 8006e76:	4b32      	ldr	r3, [pc, #200]	; (8006f40 <Animation2Loop+0xf4>)
 8006e78:	79db      	ldrb	r3, [r3, #7]
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2bff      	cmp	r3, #255	; 0xff
 8006e7e:	d006      	beq.n	8006e8e <Animation2Loop+0x42>
 8006e80:	4b2f      	ldr	r3, [pc, #188]	; (8006f40 <Animation2Loop+0xf4>)
 8006e82:	79db      	ldrb	r3, [r3, #7]
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	3b01      	subs	r3, #1
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	4b2d      	ldr	r3, [pc, #180]	; (8006f40 <Animation2Loop+0xf4>)
 8006e8c:	71da      	strb	r2, [r3, #7]
		m_Animation2.ucAnimationStageCounter = m_Animation2.ucAnimationMaxStage ;
 8006e8e:	4b2c      	ldr	r3, [pc, #176]	; (8006f40 <Animation2Loop+0xf4>)
 8006e90:	791a      	ldrb	r2, [r3, #4]
 8006e92:	4b2b      	ldr	r3, [pc, #172]	; (8006f40 <Animation2Loop+0xf4>)
 8006e94:	715a      	strb	r2, [r3, #5]
		m_Animation2.ucAnimationPeriodCounter = m_Animation2.ucAnimationPeriod;
 8006e96:	4b2a      	ldr	r3, [pc, #168]	; (8006f40 <Animation2Loop+0xf4>)
 8006e98:	785a      	ldrb	r2, [r3, #1]
 8006e9a:	4b29      	ldr	r3, [pc, #164]	; (8006f40 <Animation2Loop+0xf4>)
 8006e9c:	709a      	strb	r2, [r3, #2]
	}
	//-------------------------------------

	if( (m_Animation2.ucAnimationStageCounter > (m_Animation2.ucAnimationMaxStage - 12)) )
 8006e9e:	4b28      	ldr	r3, [pc, #160]	; (8006f40 <Animation2Loop+0xf4>)
 8006ea0:	791b      	ldrb	r3, [r3, #4]
 8006ea2:	3b0b      	subs	r3, #11
 8006ea4:	4a26      	ldr	r2, [pc, #152]	; (8006f40 <Animation2Loop+0xf4>)
 8006ea6:	7952      	ldrb	r2, [r2, #5]
 8006ea8:	b2d2      	uxtb	r2, r2
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	dc1a      	bgt.n	8006ee4 <Animation2Loop+0x98>
	{	// turning LEDs ON / OFF
		WS2812SetDisplay(m_Animation2.DispID, m_ucLEDSwapMatrix[(11-(m_Animation2.ucAnimationMaxStage - m_Animation2.ucAnimationStageCounter))] , 255, 0, 0, 255);
 8006eae:	4b24      	ldr	r3, [pc, #144]	; (8006f40 <Animation2Loop+0xf4>)
 8006eb0:	7818      	ldrb	r0, [r3, #0]
 8006eb2:	4b23      	ldr	r3, [pc, #140]	; (8006f40 <Animation2Loop+0xf4>)
 8006eb4:	791b      	ldrb	r3, [r3, #4]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	4b21      	ldr	r3, [pc, #132]	; (8006f40 <Animation2Loop+0xf4>)
 8006eba:	795b      	ldrb	r3, [r3, #5]
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	f1c3 030b 	rsb	r3, r3, #11
 8006ec4:	4a1f      	ldr	r2, [pc, #124]	; (8006f44 <Animation2Loop+0xf8>)
 8006ec6:	5cd1      	ldrb	r1, [r2, r3]
 8006ec8:	23ff      	movs	r3, #255	; 0xff
 8006eca:	9301      	str	r3, [sp, #4]
 8006ecc:	2300      	movs	r3, #0
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	22ff      	movs	r2, #255	; 0xff
 8006ed4:	f7ff fad0 	bl	8006478 <WS2812SetDisplay>
		WS2812ShowDisplay(m_Animation2.DispID,0);
 8006ed8:	4b19      	ldr	r3, [pc, #100]	; (8006f40 <Animation2Loop+0xf4>)
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	2100      	movs	r1, #0
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7ff fb88 	bl	80065f4 <WS2812ShowDisplay>
	}

	if( (m_Animation2.ucAnimationStageCounter < 13) )
 8006ee4:	4b16      	ldr	r3, [pc, #88]	; (8006f40 <Animation2Loop+0xf4>)
 8006ee6:	795b      	ldrb	r3, [r3, #5]
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b0c      	cmp	r3, #12
 8006eec:	d815      	bhi.n	8006f1a <Animation2Loop+0xce>
	{	// Setting LEDs ON / OFF
		WS2812SetDisplay(m_Animation2.DispID,m_ucLEDSwapMatrix[(11-(12-m_Animation2.ucAnimationStageCounter))],0, 0, 0, 0);
 8006eee:	4b14      	ldr	r3, [pc, #80]	; (8006f40 <Animation2Loop+0xf4>)
 8006ef0:	7818      	ldrb	r0, [r3, #0]
 8006ef2:	4b13      	ldr	r3, [pc, #76]	; (8006f40 <Animation2Loop+0xf4>)
 8006ef4:	795b      	ldrb	r3, [r3, #5]
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	4a12      	ldr	r2, [pc, #72]	; (8006f44 <Animation2Loop+0xf8>)
 8006efc:	5cd1      	ldrb	r1, [r2, r3]
 8006efe:	2300      	movs	r3, #0
 8006f00:	9301      	str	r3, [sp, #4]
 8006f02:	2300      	movs	r3, #0
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	2300      	movs	r3, #0
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f7ff fab5 	bl	8006478 <WS2812SetDisplay>
		WS2812ShowDisplay(m_Animation2.DispID,0);
 8006f0e:	4b0c      	ldr	r3, [pc, #48]	; (8006f40 <Animation2Loop+0xf4>)
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	2100      	movs	r1, #0
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7ff fb6d 	bl	80065f4 <WS2812ShowDisplay>
	}

	m_Animation2.ucAnimationPeriodCounter = m_Animation2.ucAnimationPeriod;			// set the new timer
 8006f1a:	4b09      	ldr	r3, [pc, #36]	; (8006f40 <Animation2Loop+0xf4>)
 8006f1c:	785a      	ldrb	r2, [r3, #1]
 8006f1e:	4b08      	ldr	r3, [pc, #32]	; (8006f40 <Animation2Loop+0xf4>)
 8006f20:	709a      	strb	r2, [r3, #2]
	m_Animation2.SetNextAnimation = ANIMATION_WAIT;									// wait for the time to elapse
 8006f22:	4b07      	ldr	r3, [pc, #28]	; (8006f40 <Animation2Loop+0xf4>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	70da      	strb	r2, [r3, #3]
	m_Animation2.ucAnimationStageCounter --;										// select the next stage of the animation
 8006f28:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <Animation2Loop+0xf4>)
 8006f2a:	795b      	ldrb	r3, [r3, #5]
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	4b03      	ldr	r3, [pc, #12]	; (8006f40 <Animation2Loop+0xf4>)
 8006f34:	715a      	strb	r2, [r3, #5]
	return;
 8006f36:	e000      	b.n	8006f3a <Animation2Loop+0xee>
	if(m_Animation2.SetNextAnimation == ANIMATION_WAIT)			return;		// waiting for the time elapse
 8006f38:	bf00      	nop
}
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	20002064 	.word	0x20002064
 8006f44:	2000208c 	.word	0x2000208c

08006f48 <Animation2Timer1KHZ>:
//----------------------------------------------------------------------------------
static void Animation2Timer1KHZ(void)
{// called from the 1KHZ ISR system timer
 8006f48:	b480      	push	{r7}
 8006f4a:	af00      	add	r7, sp, #0

	if(m_Animation2.ucAnimationPeriodCounter > 1) 		m_Animation2.ucAnimationPeriodCounter --;
 8006f4c:	4b0b      	ldr	r3, [pc, #44]	; (8006f7c <Animation2Timer1KHZ+0x34>)
 8006f4e:	789b      	ldrb	r3, [r3, #2]
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d907      	bls.n	8006f66 <Animation2Timer1KHZ+0x1e>
 8006f56:	4b09      	ldr	r3, [pc, #36]	; (8006f7c <Animation2Timer1KHZ+0x34>)
 8006f58:	789b      	ldrb	r3, [r3, #2]
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	4b06      	ldr	r3, [pc, #24]	; (8006f7c <Animation2Timer1KHZ+0x34>)
 8006f62:	709a      	strb	r2, [r3, #2]
	{
		m_Animation2.ucAnimationPeriodCounter = 0;
		m_Animation2.SetNextAnimation = SET_NEXT_ANIMATION;
	}

	return;
 8006f64:	e006      	b.n	8006f74 <Animation2Timer1KHZ+0x2c>
		m_Animation2.ucAnimationPeriodCounter = 0;
 8006f66:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <Animation2Timer1KHZ+0x34>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	709a      	strb	r2, [r3, #2]
		m_Animation2.SetNextAnimation = SET_NEXT_ANIMATION;
 8006f6c:	4b03      	ldr	r3, [pc, #12]	; (8006f7c <Animation2Timer1KHZ+0x34>)
 8006f6e:	2201      	movs	r2, #1
 8006f70:	70da      	strb	r2, [r3, #3]
	return;
 8006f72:	bf00      	nop
}
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	20002064 	.word	0x20002064

08006f80 <Animation3Init>:
//----------------------------------------------------------------------------------
static void Animation3Init(void)
{	// called @ initialization
 8006f80:	b580      	push	{r7, lr}
 8006f82:	af00      	add	r7, sp, #0
	m_Animation3.DispID = DISPLY_ANIMATION;
 8006f84:	4b10      	ldr	r3, [pc, #64]	; (8006fc8 <Animation3Init+0x48>)
 8006f86:	2201      	movs	r2, #1
 8006f88:	701a      	strb	r2, [r3, #0]
	m_Animation3.AnimationState = ANIMATION_NOT_RUNNING;
 8006f8a:	4b0f      	ldr	r3, [pc, #60]	; (8006fc8 <Animation3Init+0x48>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	719a      	strb	r2, [r3, #6]
	m_Animation3.SetNextAnimation = ANIMATION_WAIT;
 8006f90:	4b0d      	ldr	r3, [pc, #52]	; (8006fc8 <Animation3Init+0x48>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	70da      	strb	r2, [r3, #3]
	m_Animation3.ucAnimationMaxStage = 30;
 8006f96:	4b0c      	ldr	r3, [pc, #48]	; (8006fc8 <Animation3Init+0x48>)
 8006f98:	221e      	movs	r2, #30
 8006f9a:	711a      	strb	r2, [r3, #4]
	m_Animation3.ucAnimationStageCounter = m_Animation3.ucAnimationMaxStage ;
 8006f9c:	4b0a      	ldr	r3, [pc, #40]	; (8006fc8 <Animation3Init+0x48>)
 8006f9e:	791a      	ldrb	r2, [r3, #4]
 8006fa0:	4b09      	ldr	r3, [pc, #36]	; (8006fc8 <Animation3Init+0x48>)
 8006fa2:	715a      	strb	r2, [r3, #5]
	m_Animation3.ucAnimationPeriod = 50;
 8006fa4:	4b08      	ldr	r3, [pc, #32]	; (8006fc8 <Animation3Init+0x48>)
 8006fa6:	2232      	movs	r2, #50	; 0x32
 8006fa8:	705a      	strb	r2, [r3, #1]
	m_Animation3.ucAnimationPeriodCounter = m_Animation3.ucAnimationPeriod;
 8006faa:	4b07      	ldr	r3, [pc, #28]	; (8006fc8 <Animation3Init+0x48>)
 8006fac:	785a      	ldrb	r2, [r3, #1]
 8006fae:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <Animation3Init+0x48>)
 8006fb0:	709a      	strb	r2, [r3, #2]
	m_Animation3.ucAnimationRepeatCount = 0;
 8006fb2:	4b05      	ldr	r3, [pc, #20]	; (8006fc8 <Animation3Init+0x48>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	71da      	strb	r2, [r3, #7]

	// clear the display buffer for this animation
	WS2812EmptyDisplay(m_Animation3.DispID);
 8006fb8:	4b03      	ldr	r3, [pc, #12]	; (8006fc8 <Animation3Init+0x48>)
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7ff fb41 	bl	8006644 <WS2812EmptyDisplay>

	return;
 8006fc2:	bf00      	nop
}
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	2000206c 	.word	0x2000206c

08006fcc <Animation3Loop>:
//----------------------------------------------------------------------------------
static void Animation3Loop(void)
{	// called from the main loop to handle the animation
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af02      	add	r7, sp, #8
	// --------------------------------------
	if(m_Animation3.SetNextAnimation == ANIMATION_WAIT)			return;		// waiting for the time elapse
 8006fd2:	4b3b      	ldr	r3, [pc, #236]	; (80070c0 <Animation3Loop+0xf4>)
 8006fd4:	78db      	ldrb	r3, [r3, #3]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d06e      	beq.n	80070b8 <Animation3Loop+0xec>

	if(m_Animation3.ucAnimationStageCounter == 0)
 8006fda:	4b39      	ldr	r3, [pc, #228]	; (80070c0 <Animation3Loop+0xf4>)
 8006fdc:	795b      	ldrb	r3, [r3, #5]
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d11c      	bne.n	800701e <Animation3Loop+0x52>
	{
		if(m_Animation3.ucAnimationRepeatCount <= 1)
 8006fe4:	4b36      	ldr	r3, [pc, #216]	; (80070c0 <Animation3Loop+0xf4>)
 8006fe6:	79db      	ldrb	r3, [r3, #7]
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d803      	bhi.n	8006ff6 <Animation3Loop+0x2a>
		{	// end the animation
			m_Animation3.AnimationState = ANIMATION_NOT_RUNNING;				// this animation is done
 8006fee:	4b34      	ldr	r3, [pc, #208]	; (80070c0 <Animation3Loop+0xf4>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	719a      	strb	r2, [r3, #6]
			return;
 8006ff4:	e061      	b.n	80070ba <Animation3Loop+0xee>
		}
		// prepare another animation
		if(m_Animation3.ucAnimationRepeatCount < 255) m_Animation3.ucAnimationRepeatCount --;
 8006ff6:	4b32      	ldr	r3, [pc, #200]	; (80070c0 <Animation3Loop+0xf4>)
 8006ff8:	79db      	ldrb	r3, [r3, #7]
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2bff      	cmp	r3, #255	; 0xff
 8006ffe:	d006      	beq.n	800700e <Animation3Loop+0x42>
 8007000:	4b2f      	ldr	r3, [pc, #188]	; (80070c0 <Animation3Loop+0xf4>)
 8007002:	79db      	ldrb	r3, [r3, #7]
 8007004:	b2db      	uxtb	r3, r3
 8007006:	3b01      	subs	r3, #1
 8007008:	b2da      	uxtb	r2, r3
 800700a:	4b2d      	ldr	r3, [pc, #180]	; (80070c0 <Animation3Loop+0xf4>)
 800700c:	71da      	strb	r2, [r3, #7]
		m_Animation3.ucAnimationStageCounter = m_Animation3.ucAnimationMaxStage ;
 800700e:	4b2c      	ldr	r3, [pc, #176]	; (80070c0 <Animation3Loop+0xf4>)
 8007010:	791a      	ldrb	r2, [r3, #4]
 8007012:	4b2b      	ldr	r3, [pc, #172]	; (80070c0 <Animation3Loop+0xf4>)
 8007014:	715a      	strb	r2, [r3, #5]
		m_Animation3.ucAnimationPeriodCounter = m_Animation3.ucAnimationPeriod;
 8007016:	4b2a      	ldr	r3, [pc, #168]	; (80070c0 <Animation3Loop+0xf4>)
 8007018:	785a      	ldrb	r2, [r3, #1]
 800701a:	4b29      	ldr	r3, [pc, #164]	; (80070c0 <Animation3Loop+0xf4>)
 800701c:	709a      	strb	r2, [r3, #2]
	}
	//-------------------------------------

	if( (m_Animation3.ucAnimationStageCounter > (m_Animation3.ucAnimationMaxStage - 12)) )
 800701e:	4b28      	ldr	r3, [pc, #160]	; (80070c0 <Animation3Loop+0xf4>)
 8007020:	791b      	ldrb	r3, [r3, #4]
 8007022:	3b0b      	subs	r3, #11
 8007024:	4a26      	ldr	r2, [pc, #152]	; (80070c0 <Animation3Loop+0xf4>)
 8007026:	7952      	ldrb	r2, [r2, #5]
 8007028:	b2d2      	uxtb	r2, r2
 800702a:	4293      	cmp	r3, r2
 800702c:	dc1a      	bgt.n	8007064 <Animation3Loop+0x98>
	{	// turning LEDs ON / OFF
		WS2812SetDisplay(m_Animation3.DispID, m_ucLEDSwapMatrix[(11-(m_Animation3.ucAnimationMaxStage - m_Animation3.ucAnimationStageCounter))] , 255, 0, 0, 255);
 800702e:	4b24      	ldr	r3, [pc, #144]	; (80070c0 <Animation3Loop+0xf4>)
 8007030:	7818      	ldrb	r0, [r3, #0]
 8007032:	4b23      	ldr	r3, [pc, #140]	; (80070c0 <Animation3Loop+0xf4>)
 8007034:	791b      	ldrb	r3, [r3, #4]
 8007036:	461a      	mov	r2, r3
 8007038:	4b21      	ldr	r3, [pc, #132]	; (80070c0 <Animation3Loop+0xf4>)
 800703a:	795b      	ldrb	r3, [r3, #5]
 800703c:	b2db      	uxtb	r3, r3
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	f1c3 030b 	rsb	r3, r3, #11
 8007044:	4a1f      	ldr	r2, [pc, #124]	; (80070c4 <Animation3Loop+0xf8>)
 8007046:	5cd1      	ldrb	r1, [r2, r3]
 8007048:	23ff      	movs	r3, #255	; 0xff
 800704a:	9301      	str	r3, [sp, #4]
 800704c:	2300      	movs	r3, #0
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	2300      	movs	r3, #0
 8007052:	22ff      	movs	r2, #255	; 0xff
 8007054:	f7ff fa10 	bl	8006478 <WS2812SetDisplay>
		WS2812ShowDisplay(m_Animation3.DispID,0);
 8007058:	4b19      	ldr	r3, [pc, #100]	; (80070c0 <Animation3Loop+0xf4>)
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	2100      	movs	r1, #0
 800705e:	4618      	mov	r0, r3
 8007060:	f7ff fac8 	bl	80065f4 <WS2812ShowDisplay>
	}

	if( (m_Animation3.ucAnimationStageCounter < 13) )
 8007064:	4b16      	ldr	r3, [pc, #88]	; (80070c0 <Animation3Loop+0xf4>)
 8007066:	795b      	ldrb	r3, [r3, #5]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b0c      	cmp	r3, #12
 800706c:	d815      	bhi.n	800709a <Animation3Loop+0xce>
	{	// Setting LEDs ON / OFF
		WS2812SetDisplay(m_Animation3.DispID,m_ucLEDSwapMatrix[(11-(12-m_Animation3.ucAnimationStageCounter))],0, 0, 0, 0);
 800706e:	4b14      	ldr	r3, [pc, #80]	; (80070c0 <Animation3Loop+0xf4>)
 8007070:	7818      	ldrb	r0, [r3, #0]
 8007072:	4b13      	ldr	r3, [pc, #76]	; (80070c0 <Animation3Loop+0xf4>)
 8007074:	795b      	ldrb	r3, [r3, #5]
 8007076:	b2db      	uxtb	r3, r3
 8007078:	3b01      	subs	r3, #1
 800707a:	4a12      	ldr	r2, [pc, #72]	; (80070c4 <Animation3Loop+0xf8>)
 800707c:	5cd1      	ldrb	r1, [r2, r3]
 800707e:	2300      	movs	r3, #0
 8007080:	9301      	str	r3, [sp, #4]
 8007082:	2300      	movs	r3, #0
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	2300      	movs	r3, #0
 8007088:	2200      	movs	r2, #0
 800708a:	f7ff f9f5 	bl	8006478 <WS2812SetDisplay>
		WS2812ShowDisplay(m_Animation3.DispID,0);
 800708e:	4b0c      	ldr	r3, [pc, #48]	; (80070c0 <Animation3Loop+0xf4>)
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	2100      	movs	r1, #0
 8007094:	4618      	mov	r0, r3
 8007096:	f7ff faad 	bl	80065f4 <WS2812ShowDisplay>
	}

	m_Animation3.ucAnimationPeriodCounter = m_Animation3.ucAnimationPeriod;			// set the new timer
 800709a:	4b09      	ldr	r3, [pc, #36]	; (80070c0 <Animation3Loop+0xf4>)
 800709c:	785a      	ldrb	r2, [r3, #1]
 800709e:	4b08      	ldr	r3, [pc, #32]	; (80070c0 <Animation3Loop+0xf4>)
 80070a0:	709a      	strb	r2, [r3, #2]
	m_Animation3.SetNextAnimation = ANIMATION_WAIT;									// wait for the time to elapse
 80070a2:	4b07      	ldr	r3, [pc, #28]	; (80070c0 <Animation3Loop+0xf4>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	70da      	strb	r2, [r3, #3]
	m_Animation3.ucAnimationStageCounter --;										// select the next stage of the animation
 80070a8:	4b05      	ldr	r3, [pc, #20]	; (80070c0 <Animation3Loop+0xf4>)
 80070aa:	795b      	ldrb	r3, [r3, #5]
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	3b01      	subs	r3, #1
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	4b03      	ldr	r3, [pc, #12]	; (80070c0 <Animation3Loop+0xf4>)
 80070b4:	715a      	strb	r2, [r3, #5]
	return;
 80070b6:	e000      	b.n	80070ba <Animation3Loop+0xee>
	if(m_Animation3.SetNextAnimation == ANIMATION_WAIT)			return;		// waiting for the time elapse
 80070b8:	bf00      	nop
}
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	2000206c 	.word	0x2000206c
 80070c4:	2000208c 	.word	0x2000208c

080070c8 <Animation3Timer1KHZ>:
//----------------------------------------------------------------------------------
static void Animation3Timer1KHZ(void)
{// called from the 1KHZ ISR system timer
 80070c8:	b480      	push	{r7}
 80070ca:	af00      	add	r7, sp, #0

	if(m_Animation3.ucAnimationPeriodCounter > 1) 		m_Animation3.ucAnimationPeriodCounter --;
 80070cc:	4b0b      	ldr	r3, [pc, #44]	; (80070fc <Animation3Timer1KHZ+0x34>)
 80070ce:	789b      	ldrb	r3, [r3, #2]
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d907      	bls.n	80070e6 <Animation3Timer1KHZ+0x1e>
 80070d6:	4b09      	ldr	r3, [pc, #36]	; (80070fc <Animation3Timer1KHZ+0x34>)
 80070d8:	789b      	ldrb	r3, [r3, #2]
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	3b01      	subs	r3, #1
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	4b06      	ldr	r3, [pc, #24]	; (80070fc <Animation3Timer1KHZ+0x34>)
 80070e2:	709a      	strb	r2, [r3, #2]
	{
		m_Animation3.ucAnimationPeriodCounter = 0;
		m_Animation3.SetNextAnimation = SET_NEXT_ANIMATION;
	}

	return;
 80070e4:	e006      	b.n	80070f4 <Animation3Timer1KHZ+0x2c>
		m_Animation3.ucAnimationPeriodCounter = 0;
 80070e6:	4b05      	ldr	r3, [pc, #20]	; (80070fc <Animation3Timer1KHZ+0x34>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	709a      	strb	r2, [r3, #2]
		m_Animation3.SetNextAnimation = SET_NEXT_ANIMATION;
 80070ec:	4b03      	ldr	r3, [pc, #12]	; (80070fc <Animation3Timer1KHZ+0x34>)
 80070ee:	2201      	movs	r2, #1
 80070f0:	70da      	strb	r2, [r3, #3]
	return;
 80070f2:	bf00      	nop
}
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	2000206c 	.word	0x2000206c

08007100 <Animation4Init>:
//----------------------------------------------------------------------------------
static void Animation4Init(void)
{	// called @ initialization
 8007100:	b580      	push	{r7, lr}
 8007102:	af00      	add	r7, sp, #0
	m_Animation4.DispID = DISPLY_ANIMATION;
 8007104:	4b10      	ldr	r3, [pc, #64]	; (8007148 <Animation4Init+0x48>)
 8007106:	2201      	movs	r2, #1
 8007108:	701a      	strb	r2, [r3, #0]
	m_Animation4.AnimationState = ANIMATION_NOT_RUNNING;
 800710a:	4b0f      	ldr	r3, [pc, #60]	; (8007148 <Animation4Init+0x48>)
 800710c:	2200      	movs	r2, #0
 800710e:	719a      	strb	r2, [r3, #6]
	m_Animation4.SetNextAnimation = ANIMATION_WAIT;
 8007110:	4b0d      	ldr	r3, [pc, #52]	; (8007148 <Animation4Init+0x48>)
 8007112:	2200      	movs	r2, #0
 8007114:	70da      	strb	r2, [r3, #3]
	m_Animation4.ucAnimationMaxStage = 30;
 8007116:	4b0c      	ldr	r3, [pc, #48]	; (8007148 <Animation4Init+0x48>)
 8007118:	221e      	movs	r2, #30
 800711a:	711a      	strb	r2, [r3, #4]
	m_Animation4.ucAnimationStageCounter = m_Animation4.ucAnimationMaxStage ;
 800711c:	4b0a      	ldr	r3, [pc, #40]	; (8007148 <Animation4Init+0x48>)
 800711e:	791a      	ldrb	r2, [r3, #4]
 8007120:	4b09      	ldr	r3, [pc, #36]	; (8007148 <Animation4Init+0x48>)
 8007122:	715a      	strb	r2, [r3, #5]
	m_Animation4.ucAnimationPeriod = 50;
 8007124:	4b08      	ldr	r3, [pc, #32]	; (8007148 <Animation4Init+0x48>)
 8007126:	2232      	movs	r2, #50	; 0x32
 8007128:	705a      	strb	r2, [r3, #1]
	m_Animation4.ucAnimationPeriodCounter = m_Animation4.ucAnimationPeriod;
 800712a:	4b07      	ldr	r3, [pc, #28]	; (8007148 <Animation4Init+0x48>)
 800712c:	785a      	ldrb	r2, [r3, #1]
 800712e:	4b06      	ldr	r3, [pc, #24]	; (8007148 <Animation4Init+0x48>)
 8007130:	709a      	strb	r2, [r3, #2]
	m_Animation4.ucAnimationRepeatCount = 0;
 8007132:	4b05      	ldr	r3, [pc, #20]	; (8007148 <Animation4Init+0x48>)
 8007134:	2200      	movs	r2, #0
 8007136:	71da      	strb	r2, [r3, #7]

	// clear the display buffer for this animation
	WS2812EmptyDisplay(m_Animation4.DispID);
 8007138:	4b03      	ldr	r3, [pc, #12]	; (8007148 <Animation4Init+0x48>)
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	4618      	mov	r0, r3
 800713e:	f7ff fa81 	bl	8006644 <WS2812EmptyDisplay>

	return;
 8007142:	bf00      	nop
}
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	20002074 	.word	0x20002074

0800714c <Animation4Loop>:
//----------------------------------------------------------------------------------
static void Animation4Loop(void)
{	// called from the main loop to handle the animation
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af02      	add	r7, sp, #8
	// --------------------------------------
	if(m_Animation4.SetNextAnimation == ANIMATION_WAIT)			return;		// waiting for the time elapse
 8007152:	4b3b      	ldr	r3, [pc, #236]	; (8007240 <Animation4Loop+0xf4>)
 8007154:	78db      	ldrb	r3, [r3, #3]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d06e      	beq.n	8007238 <Animation4Loop+0xec>

	if(m_Animation4.ucAnimationStageCounter == 0)
 800715a:	4b39      	ldr	r3, [pc, #228]	; (8007240 <Animation4Loop+0xf4>)
 800715c:	795b      	ldrb	r3, [r3, #5]
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2b00      	cmp	r3, #0
 8007162:	d11c      	bne.n	800719e <Animation4Loop+0x52>
	{
		if(m_Animation4.ucAnimationRepeatCount <= 1)
 8007164:	4b36      	ldr	r3, [pc, #216]	; (8007240 <Animation4Loop+0xf4>)
 8007166:	79db      	ldrb	r3, [r3, #7]
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b01      	cmp	r3, #1
 800716c:	d803      	bhi.n	8007176 <Animation4Loop+0x2a>
		{	// end the animation
			m_Animation4.AnimationState = ANIMATION_NOT_RUNNING;				// this animation is done
 800716e:	4b34      	ldr	r3, [pc, #208]	; (8007240 <Animation4Loop+0xf4>)
 8007170:	2200      	movs	r2, #0
 8007172:	719a      	strb	r2, [r3, #6]
			return;
 8007174:	e061      	b.n	800723a <Animation4Loop+0xee>
		}
		// prepare another animation
		if(m_Animation4.ucAnimationRepeatCount < 255) m_Animation4.ucAnimationRepeatCount --;
 8007176:	4b32      	ldr	r3, [pc, #200]	; (8007240 <Animation4Loop+0xf4>)
 8007178:	79db      	ldrb	r3, [r3, #7]
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2bff      	cmp	r3, #255	; 0xff
 800717e:	d006      	beq.n	800718e <Animation4Loop+0x42>
 8007180:	4b2f      	ldr	r3, [pc, #188]	; (8007240 <Animation4Loop+0xf4>)
 8007182:	79db      	ldrb	r3, [r3, #7]
 8007184:	b2db      	uxtb	r3, r3
 8007186:	3b01      	subs	r3, #1
 8007188:	b2da      	uxtb	r2, r3
 800718a:	4b2d      	ldr	r3, [pc, #180]	; (8007240 <Animation4Loop+0xf4>)
 800718c:	71da      	strb	r2, [r3, #7]
		m_Animation4.ucAnimationStageCounter = m_Animation4.ucAnimationMaxStage ;
 800718e:	4b2c      	ldr	r3, [pc, #176]	; (8007240 <Animation4Loop+0xf4>)
 8007190:	791a      	ldrb	r2, [r3, #4]
 8007192:	4b2b      	ldr	r3, [pc, #172]	; (8007240 <Animation4Loop+0xf4>)
 8007194:	715a      	strb	r2, [r3, #5]
		m_Animation4.ucAnimationPeriodCounter = m_Animation4.ucAnimationPeriod;
 8007196:	4b2a      	ldr	r3, [pc, #168]	; (8007240 <Animation4Loop+0xf4>)
 8007198:	785a      	ldrb	r2, [r3, #1]
 800719a:	4b29      	ldr	r3, [pc, #164]	; (8007240 <Animation4Loop+0xf4>)
 800719c:	709a      	strb	r2, [r3, #2]
	}
	//-------------------------------------

	if( (m_Animation4.ucAnimationStageCounter > (m_Animation4.ucAnimationMaxStage - 12)) )
 800719e:	4b28      	ldr	r3, [pc, #160]	; (8007240 <Animation4Loop+0xf4>)
 80071a0:	791b      	ldrb	r3, [r3, #4]
 80071a2:	3b0b      	subs	r3, #11
 80071a4:	4a26      	ldr	r2, [pc, #152]	; (8007240 <Animation4Loop+0xf4>)
 80071a6:	7952      	ldrb	r2, [r2, #5]
 80071a8:	b2d2      	uxtb	r2, r2
 80071aa:	4293      	cmp	r3, r2
 80071ac:	dc1a      	bgt.n	80071e4 <Animation4Loop+0x98>
	{	// turning LEDs ON / OFF
		WS2812SetDisplay(m_Animation4.DispID, m_ucLEDSwapMatrix[(11-(m_Animation4.ucAnimationMaxStage - m_Animation4.ucAnimationStageCounter))] , 255, 0, 0, 255);
 80071ae:	4b24      	ldr	r3, [pc, #144]	; (8007240 <Animation4Loop+0xf4>)
 80071b0:	7818      	ldrb	r0, [r3, #0]
 80071b2:	4b23      	ldr	r3, [pc, #140]	; (8007240 <Animation4Loop+0xf4>)
 80071b4:	791b      	ldrb	r3, [r3, #4]
 80071b6:	461a      	mov	r2, r3
 80071b8:	4b21      	ldr	r3, [pc, #132]	; (8007240 <Animation4Loop+0xf4>)
 80071ba:	795b      	ldrb	r3, [r3, #5]
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	f1c3 030b 	rsb	r3, r3, #11
 80071c4:	4a1f      	ldr	r2, [pc, #124]	; (8007244 <Animation4Loop+0xf8>)
 80071c6:	5cd1      	ldrb	r1, [r2, r3]
 80071c8:	23ff      	movs	r3, #255	; 0xff
 80071ca:	9301      	str	r3, [sp, #4]
 80071cc:	2300      	movs	r3, #0
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	2300      	movs	r3, #0
 80071d2:	22ff      	movs	r2, #255	; 0xff
 80071d4:	f7ff f950 	bl	8006478 <WS2812SetDisplay>
		WS2812ShowDisplay(m_Animation4.DispID,0);
 80071d8:	4b19      	ldr	r3, [pc, #100]	; (8007240 <Animation4Loop+0xf4>)
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	2100      	movs	r1, #0
 80071de:	4618      	mov	r0, r3
 80071e0:	f7ff fa08 	bl	80065f4 <WS2812ShowDisplay>
	}

	if( (m_Animation4.ucAnimationStageCounter < 13) )
 80071e4:	4b16      	ldr	r3, [pc, #88]	; (8007240 <Animation4Loop+0xf4>)
 80071e6:	795b      	ldrb	r3, [r3, #5]
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b0c      	cmp	r3, #12
 80071ec:	d815      	bhi.n	800721a <Animation4Loop+0xce>
	{	// Setting LEDs ON / OFF
		WS2812SetDisplay(m_Animation4.DispID,m_ucLEDSwapMatrix[(11-(12-m_Animation4.ucAnimationStageCounter))],0, 0, 0, 0);
 80071ee:	4b14      	ldr	r3, [pc, #80]	; (8007240 <Animation4Loop+0xf4>)
 80071f0:	7818      	ldrb	r0, [r3, #0]
 80071f2:	4b13      	ldr	r3, [pc, #76]	; (8007240 <Animation4Loop+0xf4>)
 80071f4:	795b      	ldrb	r3, [r3, #5]
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	3b01      	subs	r3, #1
 80071fa:	4a12      	ldr	r2, [pc, #72]	; (8007244 <Animation4Loop+0xf8>)
 80071fc:	5cd1      	ldrb	r1, [r2, r3]
 80071fe:	2300      	movs	r3, #0
 8007200:	9301      	str	r3, [sp, #4]
 8007202:	2300      	movs	r3, #0
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	2300      	movs	r3, #0
 8007208:	2200      	movs	r2, #0
 800720a:	f7ff f935 	bl	8006478 <WS2812SetDisplay>
		WS2812ShowDisplay(m_Animation4.DispID,0);
 800720e:	4b0c      	ldr	r3, [pc, #48]	; (8007240 <Animation4Loop+0xf4>)
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	2100      	movs	r1, #0
 8007214:	4618      	mov	r0, r3
 8007216:	f7ff f9ed 	bl	80065f4 <WS2812ShowDisplay>
	}

	m_Animation4.ucAnimationPeriodCounter = m_Animation4.ucAnimationPeriod;			// set the new timer
 800721a:	4b09      	ldr	r3, [pc, #36]	; (8007240 <Animation4Loop+0xf4>)
 800721c:	785a      	ldrb	r2, [r3, #1]
 800721e:	4b08      	ldr	r3, [pc, #32]	; (8007240 <Animation4Loop+0xf4>)
 8007220:	709a      	strb	r2, [r3, #2]
	m_Animation4.SetNextAnimation = ANIMATION_WAIT;									// wait for the time to elapse
 8007222:	4b07      	ldr	r3, [pc, #28]	; (8007240 <Animation4Loop+0xf4>)
 8007224:	2200      	movs	r2, #0
 8007226:	70da      	strb	r2, [r3, #3]
	m_Animation4.ucAnimationStageCounter --;										// select the next stage of the animation
 8007228:	4b05      	ldr	r3, [pc, #20]	; (8007240 <Animation4Loop+0xf4>)
 800722a:	795b      	ldrb	r3, [r3, #5]
 800722c:	b2db      	uxtb	r3, r3
 800722e:	3b01      	subs	r3, #1
 8007230:	b2da      	uxtb	r2, r3
 8007232:	4b03      	ldr	r3, [pc, #12]	; (8007240 <Animation4Loop+0xf4>)
 8007234:	715a      	strb	r2, [r3, #5]
	return;
 8007236:	e000      	b.n	800723a <Animation4Loop+0xee>
	if(m_Animation4.SetNextAnimation == ANIMATION_WAIT)			return;		// waiting for the time elapse
 8007238:	bf00      	nop
}
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	20002074 	.word	0x20002074
 8007244:	2000208c 	.word	0x2000208c

08007248 <Animation4Timer1KHZ>:
//----------------------------------------------------------------------------------
static void Animation4Timer1KHZ(void)
{// called from the 1KHZ ISR system timer
 8007248:	b480      	push	{r7}
 800724a:	af00      	add	r7, sp, #0

	if(m_Animation4.ucAnimationPeriodCounter > 1) 		m_Animation4.ucAnimationPeriodCounter --;
 800724c:	4b0b      	ldr	r3, [pc, #44]	; (800727c <Animation4Timer1KHZ+0x34>)
 800724e:	789b      	ldrb	r3, [r3, #2]
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b01      	cmp	r3, #1
 8007254:	d907      	bls.n	8007266 <Animation4Timer1KHZ+0x1e>
 8007256:	4b09      	ldr	r3, [pc, #36]	; (800727c <Animation4Timer1KHZ+0x34>)
 8007258:	789b      	ldrb	r3, [r3, #2]
 800725a:	b2db      	uxtb	r3, r3
 800725c:	3b01      	subs	r3, #1
 800725e:	b2da      	uxtb	r2, r3
 8007260:	4b06      	ldr	r3, [pc, #24]	; (800727c <Animation4Timer1KHZ+0x34>)
 8007262:	709a      	strb	r2, [r3, #2]
	{
		m_Animation4.ucAnimationPeriodCounter = 0;
		m_Animation4.SetNextAnimation = SET_NEXT_ANIMATION;
	}

	return;
 8007264:	e006      	b.n	8007274 <Animation4Timer1KHZ+0x2c>
		m_Animation4.ucAnimationPeriodCounter = 0;
 8007266:	4b05      	ldr	r3, [pc, #20]	; (800727c <Animation4Timer1KHZ+0x34>)
 8007268:	2200      	movs	r2, #0
 800726a:	709a      	strb	r2, [r3, #2]
		m_Animation4.SetNextAnimation = SET_NEXT_ANIMATION;
 800726c:	4b03      	ldr	r3, [pc, #12]	; (800727c <Animation4Timer1KHZ+0x34>)
 800726e:	2201      	movs	r2, #1
 8007270:	70da      	strb	r2, [r3, #3]
	return;
 8007272:	bf00      	nop
}
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	20002074 	.word	0x20002074

08007280 <Animation5Init>:
//----------------------------------------------------------------------------------
static void Animation5Init(void)
{	// called @ initialization
 8007280:	b580      	push	{r7, lr}
 8007282:	af00      	add	r7, sp, #0
	m_Animation5.DispID = DISPLY_ANIMATION;
 8007284:	4b10      	ldr	r3, [pc, #64]	; (80072c8 <Animation5Init+0x48>)
 8007286:	2201      	movs	r2, #1
 8007288:	701a      	strb	r2, [r3, #0]
	m_Animation5.AnimationState = ANIMATION_NOT_RUNNING;
 800728a:	4b0f      	ldr	r3, [pc, #60]	; (80072c8 <Animation5Init+0x48>)
 800728c:	2200      	movs	r2, #0
 800728e:	719a      	strb	r2, [r3, #6]
	m_Animation5.SetNextAnimation = ANIMATION_WAIT;
 8007290:	4b0d      	ldr	r3, [pc, #52]	; (80072c8 <Animation5Init+0x48>)
 8007292:	2200      	movs	r2, #0
 8007294:	70da      	strb	r2, [r3, #3]
	m_Animation5.ucAnimationMaxStage = 30;
 8007296:	4b0c      	ldr	r3, [pc, #48]	; (80072c8 <Animation5Init+0x48>)
 8007298:	221e      	movs	r2, #30
 800729a:	711a      	strb	r2, [r3, #4]
	m_Animation5.ucAnimationStageCounter = m_Animation5.ucAnimationMaxStage ;
 800729c:	4b0a      	ldr	r3, [pc, #40]	; (80072c8 <Animation5Init+0x48>)
 800729e:	791a      	ldrb	r2, [r3, #4]
 80072a0:	4b09      	ldr	r3, [pc, #36]	; (80072c8 <Animation5Init+0x48>)
 80072a2:	715a      	strb	r2, [r3, #5]
	m_Animation5.ucAnimationPeriod = 50;
 80072a4:	4b08      	ldr	r3, [pc, #32]	; (80072c8 <Animation5Init+0x48>)
 80072a6:	2232      	movs	r2, #50	; 0x32
 80072a8:	705a      	strb	r2, [r3, #1]
	m_Animation5.ucAnimationPeriodCounter = m_Animation5.ucAnimationPeriod;
 80072aa:	4b07      	ldr	r3, [pc, #28]	; (80072c8 <Animation5Init+0x48>)
 80072ac:	785a      	ldrb	r2, [r3, #1]
 80072ae:	4b06      	ldr	r3, [pc, #24]	; (80072c8 <Animation5Init+0x48>)
 80072b0:	709a      	strb	r2, [r3, #2]
	m_Animation5.ucAnimationRepeatCount = 0;
 80072b2:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <Animation5Init+0x48>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	71da      	strb	r2, [r3, #7]

	// clear the display buffer for this animation
	WS2812EmptyDisplay(m_Animation5.DispID);
 80072b8:	4b03      	ldr	r3, [pc, #12]	; (80072c8 <Animation5Init+0x48>)
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	4618      	mov	r0, r3
 80072be:	f7ff f9c1 	bl	8006644 <WS2812EmptyDisplay>

	return;
 80072c2:	bf00      	nop
}
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	2000207c 	.word	0x2000207c

080072cc <Animation5Loop>:
//----------------------------------------------------------------------------------
static void Animation5Loop(void)
{	// called from the main loop to handle the animation
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af02      	add	r7, sp, #8
	// --------------------------------------
	if(m_Animation5.SetNextAnimation == ANIMATION_WAIT)			return;		// waiting for the time elapse
 80072d2:	4b3b      	ldr	r3, [pc, #236]	; (80073c0 <Animation5Loop+0xf4>)
 80072d4:	78db      	ldrb	r3, [r3, #3]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d06e      	beq.n	80073b8 <Animation5Loop+0xec>

	if(m_Animation5.ucAnimationStageCounter == 0)
 80072da:	4b39      	ldr	r3, [pc, #228]	; (80073c0 <Animation5Loop+0xf4>)
 80072dc:	795b      	ldrb	r3, [r3, #5]
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d11c      	bne.n	800731e <Animation5Loop+0x52>
	{
		if(m_Animation5.ucAnimationRepeatCount <= 1)
 80072e4:	4b36      	ldr	r3, [pc, #216]	; (80073c0 <Animation5Loop+0xf4>)
 80072e6:	79db      	ldrb	r3, [r3, #7]
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d803      	bhi.n	80072f6 <Animation5Loop+0x2a>
		{	// end the animation
			m_Animation5.AnimationState = ANIMATION_NOT_RUNNING;				// this animation is done
 80072ee:	4b34      	ldr	r3, [pc, #208]	; (80073c0 <Animation5Loop+0xf4>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	719a      	strb	r2, [r3, #6]
			return;
 80072f4:	e061      	b.n	80073ba <Animation5Loop+0xee>
		}
		// prepare another animation
		if(m_Animation5.ucAnimationRepeatCount < 255) m_Animation5.ucAnimationRepeatCount --;
 80072f6:	4b32      	ldr	r3, [pc, #200]	; (80073c0 <Animation5Loop+0xf4>)
 80072f8:	79db      	ldrb	r3, [r3, #7]
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2bff      	cmp	r3, #255	; 0xff
 80072fe:	d006      	beq.n	800730e <Animation5Loop+0x42>
 8007300:	4b2f      	ldr	r3, [pc, #188]	; (80073c0 <Animation5Loop+0xf4>)
 8007302:	79db      	ldrb	r3, [r3, #7]
 8007304:	b2db      	uxtb	r3, r3
 8007306:	3b01      	subs	r3, #1
 8007308:	b2da      	uxtb	r2, r3
 800730a:	4b2d      	ldr	r3, [pc, #180]	; (80073c0 <Animation5Loop+0xf4>)
 800730c:	71da      	strb	r2, [r3, #7]
		m_Animation5.ucAnimationStageCounter = m_Animation5.ucAnimationMaxStage ;
 800730e:	4b2c      	ldr	r3, [pc, #176]	; (80073c0 <Animation5Loop+0xf4>)
 8007310:	791a      	ldrb	r2, [r3, #4]
 8007312:	4b2b      	ldr	r3, [pc, #172]	; (80073c0 <Animation5Loop+0xf4>)
 8007314:	715a      	strb	r2, [r3, #5]
		m_Animation5.ucAnimationPeriodCounter = m_Animation5.ucAnimationPeriod;
 8007316:	4b2a      	ldr	r3, [pc, #168]	; (80073c0 <Animation5Loop+0xf4>)
 8007318:	785a      	ldrb	r2, [r3, #1]
 800731a:	4b29      	ldr	r3, [pc, #164]	; (80073c0 <Animation5Loop+0xf4>)
 800731c:	709a      	strb	r2, [r3, #2]
	}
	//-------------------------------------

	if( (m_Animation5.ucAnimationStageCounter > (m_Animation5.ucAnimationMaxStage - 12)) )
 800731e:	4b28      	ldr	r3, [pc, #160]	; (80073c0 <Animation5Loop+0xf4>)
 8007320:	791b      	ldrb	r3, [r3, #4]
 8007322:	3b0b      	subs	r3, #11
 8007324:	4a26      	ldr	r2, [pc, #152]	; (80073c0 <Animation5Loop+0xf4>)
 8007326:	7952      	ldrb	r2, [r2, #5]
 8007328:	b2d2      	uxtb	r2, r2
 800732a:	4293      	cmp	r3, r2
 800732c:	dc1a      	bgt.n	8007364 <Animation5Loop+0x98>
	{	// turning LEDs ON / OFF
		WS2812SetDisplay(m_Animation5.DispID, m_ucLEDSwapMatrix[(11-(m_Animation5.ucAnimationMaxStage - m_Animation5.ucAnimationStageCounter))] , 255, 0, 0, 255);
 800732e:	4b24      	ldr	r3, [pc, #144]	; (80073c0 <Animation5Loop+0xf4>)
 8007330:	7818      	ldrb	r0, [r3, #0]
 8007332:	4b23      	ldr	r3, [pc, #140]	; (80073c0 <Animation5Loop+0xf4>)
 8007334:	791b      	ldrb	r3, [r3, #4]
 8007336:	461a      	mov	r2, r3
 8007338:	4b21      	ldr	r3, [pc, #132]	; (80073c0 <Animation5Loop+0xf4>)
 800733a:	795b      	ldrb	r3, [r3, #5]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	f1c3 030b 	rsb	r3, r3, #11
 8007344:	4a1f      	ldr	r2, [pc, #124]	; (80073c4 <Animation5Loop+0xf8>)
 8007346:	5cd1      	ldrb	r1, [r2, r3]
 8007348:	23ff      	movs	r3, #255	; 0xff
 800734a:	9301      	str	r3, [sp, #4]
 800734c:	2300      	movs	r3, #0
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	2300      	movs	r3, #0
 8007352:	22ff      	movs	r2, #255	; 0xff
 8007354:	f7ff f890 	bl	8006478 <WS2812SetDisplay>
		WS2812ShowDisplay(m_Animation5.DispID,0);
 8007358:	4b19      	ldr	r3, [pc, #100]	; (80073c0 <Animation5Loop+0xf4>)
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	2100      	movs	r1, #0
 800735e:	4618      	mov	r0, r3
 8007360:	f7ff f948 	bl	80065f4 <WS2812ShowDisplay>
	}

	if( (m_Animation5.ucAnimationStageCounter < 13) )
 8007364:	4b16      	ldr	r3, [pc, #88]	; (80073c0 <Animation5Loop+0xf4>)
 8007366:	795b      	ldrb	r3, [r3, #5]
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b0c      	cmp	r3, #12
 800736c:	d815      	bhi.n	800739a <Animation5Loop+0xce>
	{	// Setting LEDs ON / OFF
		WS2812SetDisplay(m_Animation5.DispID,m_ucLEDSwapMatrix[(11-(12-m_Animation5.ucAnimationStageCounter))],0, 0, 0, 0);
 800736e:	4b14      	ldr	r3, [pc, #80]	; (80073c0 <Animation5Loop+0xf4>)
 8007370:	7818      	ldrb	r0, [r3, #0]
 8007372:	4b13      	ldr	r3, [pc, #76]	; (80073c0 <Animation5Loop+0xf4>)
 8007374:	795b      	ldrb	r3, [r3, #5]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	3b01      	subs	r3, #1
 800737a:	4a12      	ldr	r2, [pc, #72]	; (80073c4 <Animation5Loop+0xf8>)
 800737c:	5cd1      	ldrb	r1, [r2, r3]
 800737e:	2300      	movs	r3, #0
 8007380:	9301      	str	r3, [sp, #4]
 8007382:	2300      	movs	r3, #0
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	2300      	movs	r3, #0
 8007388:	2200      	movs	r2, #0
 800738a:	f7ff f875 	bl	8006478 <WS2812SetDisplay>
		WS2812ShowDisplay(m_Animation5.DispID,0);
 800738e:	4b0c      	ldr	r3, [pc, #48]	; (80073c0 <Animation5Loop+0xf4>)
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	2100      	movs	r1, #0
 8007394:	4618      	mov	r0, r3
 8007396:	f7ff f92d 	bl	80065f4 <WS2812ShowDisplay>
	}

	m_Animation5.ucAnimationPeriodCounter = m_Animation5.ucAnimationPeriod;			// set the new timer
 800739a:	4b09      	ldr	r3, [pc, #36]	; (80073c0 <Animation5Loop+0xf4>)
 800739c:	785a      	ldrb	r2, [r3, #1]
 800739e:	4b08      	ldr	r3, [pc, #32]	; (80073c0 <Animation5Loop+0xf4>)
 80073a0:	709a      	strb	r2, [r3, #2]
	m_Animation5.SetNextAnimation = ANIMATION_WAIT;									// wait for the time to elapse
 80073a2:	4b07      	ldr	r3, [pc, #28]	; (80073c0 <Animation5Loop+0xf4>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	70da      	strb	r2, [r3, #3]
	m_Animation5.ucAnimationStageCounter --;										// select the next stage of the animation
 80073a8:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <Animation5Loop+0xf4>)
 80073aa:	795b      	ldrb	r3, [r3, #5]
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	3b01      	subs	r3, #1
 80073b0:	b2da      	uxtb	r2, r3
 80073b2:	4b03      	ldr	r3, [pc, #12]	; (80073c0 <Animation5Loop+0xf4>)
 80073b4:	715a      	strb	r2, [r3, #5]
	return;
 80073b6:	e000      	b.n	80073ba <Animation5Loop+0xee>
	if(m_Animation5.SetNextAnimation == ANIMATION_WAIT)			return;		// waiting for the time elapse
 80073b8:	bf00      	nop
}
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	2000207c 	.word	0x2000207c
 80073c4:	2000208c 	.word	0x2000208c

080073c8 <Animation5Timer1KHZ>:
//----------------------------------------------------------------------------------
static void Animation5Timer1KHZ(void)
{// called from the 1KHZ ISR system timer
 80073c8:	b480      	push	{r7}
 80073ca:	af00      	add	r7, sp, #0

	if(m_Animation5.ucAnimationPeriodCounter > 1) 		m_Animation5.ucAnimationPeriodCounter --;
 80073cc:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <Animation5Timer1KHZ+0x34>)
 80073ce:	789b      	ldrb	r3, [r3, #2]
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d907      	bls.n	80073e6 <Animation5Timer1KHZ+0x1e>
 80073d6:	4b09      	ldr	r3, [pc, #36]	; (80073fc <Animation5Timer1KHZ+0x34>)
 80073d8:	789b      	ldrb	r3, [r3, #2]
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	3b01      	subs	r3, #1
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	4b06      	ldr	r3, [pc, #24]	; (80073fc <Animation5Timer1KHZ+0x34>)
 80073e2:	709a      	strb	r2, [r3, #2]
	{
		m_Animation5.ucAnimationPeriodCounter = 0;
		m_Animation5.SetNextAnimation = SET_NEXT_ANIMATION;
	}

	return;
 80073e4:	e006      	b.n	80073f4 <Animation5Timer1KHZ+0x2c>
		m_Animation5.ucAnimationPeriodCounter = 0;
 80073e6:	4b05      	ldr	r3, [pc, #20]	; (80073fc <Animation5Timer1KHZ+0x34>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	709a      	strb	r2, [r3, #2]
		m_Animation5.SetNextAnimation = SET_NEXT_ANIMATION;
 80073ec:	4b03      	ldr	r3, [pc, #12]	; (80073fc <Animation5Timer1KHZ+0x34>)
 80073ee:	2201      	movs	r2, #1
 80073f0:	70da      	strb	r2, [r3, #3]
	return;
 80073f2:	bf00      	nop
}
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	2000207c 	.word	0x2000207c

08007400 <Animation6Init>:
//----------------------------------------------------------------------------------
static void Animation6Init(void)
{	// called @ initialization
 8007400:	b580      	push	{r7, lr}
 8007402:	af00      	add	r7, sp, #0
	m_Animation6.DispID = DISPLY_ANIMATION;
 8007404:	4b10      	ldr	r3, [pc, #64]	; (8007448 <Animation6Init+0x48>)
 8007406:	2201      	movs	r2, #1
 8007408:	701a      	strb	r2, [r3, #0]
	m_Animation6.AnimationState = ANIMATION_NOT_RUNNING;
 800740a:	4b0f      	ldr	r3, [pc, #60]	; (8007448 <Animation6Init+0x48>)
 800740c:	2200      	movs	r2, #0
 800740e:	719a      	strb	r2, [r3, #6]
	m_Animation6.SetNextAnimation = ANIMATION_WAIT;
 8007410:	4b0d      	ldr	r3, [pc, #52]	; (8007448 <Animation6Init+0x48>)
 8007412:	2200      	movs	r2, #0
 8007414:	70da      	strb	r2, [r3, #3]
	m_Animation6.ucAnimationMaxStage = 30;
 8007416:	4b0c      	ldr	r3, [pc, #48]	; (8007448 <Animation6Init+0x48>)
 8007418:	221e      	movs	r2, #30
 800741a:	711a      	strb	r2, [r3, #4]
	m_Animation6.ucAnimationStageCounter = m_Animation6.ucAnimationMaxStage ;
 800741c:	4b0a      	ldr	r3, [pc, #40]	; (8007448 <Animation6Init+0x48>)
 800741e:	791a      	ldrb	r2, [r3, #4]
 8007420:	4b09      	ldr	r3, [pc, #36]	; (8007448 <Animation6Init+0x48>)
 8007422:	715a      	strb	r2, [r3, #5]
	m_Animation6.ucAnimationPeriod = 50;
 8007424:	4b08      	ldr	r3, [pc, #32]	; (8007448 <Animation6Init+0x48>)
 8007426:	2232      	movs	r2, #50	; 0x32
 8007428:	705a      	strb	r2, [r3, #1]
	m_Animation6.ucAnimationPeriodCounter = m_Animation6.ucAnimationPeriod;
 800742a:	4b07      	ldr	r3, [pc, #28]	; (8007448 <Animation6Init+0x48>)
 800742c:	785a      	ldrb	r2, [r3, #1]
 800742e:	4b06      	ldr	r3, [pc, #24]	; (8007448 <Animation6Init+0x48>)
 8007430:	709a      	strb	r2, [r3, #2]
	m_Animation6.ucAnimationRepeatCount = 0;
 8007432:	4b05      	ldr	r3, [pc, #20]	; (8007448 <Animation6Init+0x48>)
 8007434:	2200      	movs	r2, #0
 8007436:	71da      	strb	r2, [r3, #7]

	// clear the display buffer for this animation
	WS2812EmptyDisplay(m_Animation6.DispID);
 8007438:	4b03      	ldr	r3, [pc, #12]	; (8007448 <Animation6Init+0x48>)
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	4618      	mov	r0, r3
 800743e:	f7ff f901 	bl	8006644 <WS2812EmptyDisplay>

	return;
 8007442:	bf00      	nop
}
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	20002084 	.word	0x20002084

0800744c <Animation6Loop>:
//----------------------------------------------------------------------------------
static void Animation6Loop(void)
{	// called from the main loop to handle the animation
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af02      	add	r7, sp, #8
	// --------------------------------------
	if(m_Animation6.SetNextAnimation == ANIMATION_WAIT)			return;		// waiting for the time elapse
 8007452:	4b3b      	ldr	r3, [pc, #236]	; (8007540 <Animation6Loop+0xf4>)
 8007454:	78db      	ldrb	r3, [r3, #3]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d06e      	beq.n	8007538 <Animation6Loop+0xec>

	if(m_Animation6.ucAnimationStageCounter == 0)
 800745a:	4b39      	ldr	r3, [pc, #228]	; (8007540 <Animation6Loop+0xf4>)
 800745c:	795b      	ldrb	r3, [r3, #5]
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b00      	cmp	r3, #0
 8007462:	d11c      	bne.n	800749e <Animation6Loop+0x52>
	{
		if(m_Animation6.ucAnimationRepeatCount <= 1)
 8007464:	4b36      	ldr	r3, [pc, #216]	; (8007540 <Animation6Loop+0xf4>)
 8007466:	79db      	ldrb	r3, [r3, #7]
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b01      	cmp	r3, #1
 800746c:	d803      	bhi.n	8007476 <Animation6Loop+0x2a>
		{	// end the animation
			m_Animation6.AnimationState = ANIMATION_NOT_RUNNING;				// this animation is done
 800746e:	4b34      	ldr	r3, [pc, #208]	; (8007540 <Animation6Loop+0xf4>)
 8007470:	2200      	movs	r2, #0
 8007472:	719a      	strb	r2, [r3, #6]
			return;
 8007474:	e061      	b.n	800753a <Animation6Loop+0xee>
		}
		// prepare another animation
		if(m_Animation6.ucAnimationRepeatCount < 255) m_Animation6.ucAnimationRepeatCount --;
 8007476:	4b32      	ldr	r3, [pc, #200]	; (8007540 <Animation6Loop+0xf4>)
 8007478:	79db      	ldrb	r3, [r3, #7]
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2bff      	cmp	r3, #255	; 0xff
 800747e:	d006      	beq.n	800748e <Animation6Loop+0x42>
 8007480:	4b2f      	ldr	r3, [pc, #188]	; (8007540 <Animation6Loop+0xf4>)
 8007482:	79db      	ldrb	r3, [r3, #7]
 8007484:	b2db      	uxtb	r3, r3
 8007486:	3b01      	subs	r3, #1
 8007488:	b2da      	uxtb	r2, r3
 800748a:	4b2d      	ldr	r3, [pc, #180]	; (8007540 <Animation6Loop+0xf4>)
 800748c:	71da      	strb	r2, [r3, #7]
		m_Animation6.ucAnimationStageCounter = m_Animation6.ucAnimationMaxStage ;
 800748e:	4b2c      	ldr	r3, [pc, #176]	; (8007540 <Animation6Loop+0xf4>)
 8007490:	791a      	ldrb	r2, [r3, #4]
 8007492:	4b2b      	ldr	r3, [pc, #172]	; (8007540 <Animation6Loop+0xf4>)
 8007494:	715a      	strb	r2, [r3, #5]
		m_Animation6.ucAnimationPeriodCounter = m_Animation6.ucAnimationPeriod;
 8007496:	4b2a      	ldr	r3, [pc, #168]	; (8007540 <Animation6Loop+0xf4>)
 8007498:	785a      	ldrb	r2, [r3, #1]
 800749a:	4b29      	ldr	r3, [pc, #164]	; (8007540 <Animation6Loop+0xf4>)
 800749c:	709a      	strb	r2, [r3, #2]
	}
	//-------------------------------------

	if( (m_Animation6.ucAnimationStageCounter > (m_Animation6.ucAnimationMaxStage - 12)) )
 800749e:	4b28      	ldr	r3, [pc, #160]	; (8007540 <Animation6Loop+0xf4>)
 80074a0:	791b      	ldrb	r3, [r3, #4]
 80074a2:	3b0b      	subs	r3, #11
 80074a4:	4a26      	ldr	r2, [pc, #152]	; (8007540 <Animation6Loop+0xf4>)
 80074a6:	7952      	ldrb	r2, [r2, #5]
 80074a8:	b2d2      	uxtb	r2, r2
 80074aa:	4293      	cmp	r3, r2
 80074ac:	dc1a      	bgt.n	80074e4 <Animation6Loop+0x98>
	{	// turning LEDs ON / OFF
		WS2812SetDisplay(m_Animation6.DispID, m_ucLEDSwapMatrix[(11-(m_Animation6.ucAnimationMaxStage - m_Animation6.ucAnimationStageCounter))] , 255, 0, 0, 255);
 80074ae:	4b24      	ldr	r3, [pc, #144]	; (8007540 <Animation6Loop+0xf4>)
 80074b0:	7818      	ldrb	r0, [r3, #0]
 80074b2:	4b23      	ldr	r3, [pc, #140]	; (8007540 <Animation6Loop+0xf4>)
 80074b4:	791b      	ldrb	r3, [r3, #4]
 80074b6:	461a      	mov	r2, r3
 80074b8:	4b21      	ldr	r3, [pc, #132]	; (8007540 <Animation6Loop+0xf4>)
 80074ba:	795b      	ldrb	r3, [r3, #5]
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	f1c3 030b 	rsb	r3, r3, #11
 80074c4:	4a1f      	ldr	r2, [pc, #124]	; (8007544 <Animation6Loop+0xf8>)
 80074c6:	5cd1      	ldrb	r1, [r2, r3]
 80074c8:	23ff      	movs	r3, #255	; 0xff
 80074ca:	9301      	str	r3, [sp, #4]
 80074cc:	2300      	movs	r3, #0
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	2300      	movs	r3, #0
 80074d2:	22ff      	movs	r2, #255	; 0xff
 80074d4:	f7fe ffd0 	bl	8006478 <WS2812SetDisplay>
		WS2812ShowDisplay(m_Animation6.DispID,0);
 80074d8:	4b19      	ldr	r3, [pc, #100]	; (8007540 <Animation6Loop+0xf4>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2100      	movs	r1, #0
 80074de:	4618      	mov	r0, r3
 80074e0:	f7ff f888 	bl	80065f4 <WS2812ShowDisplay>
	}

	if( (m_Animation6.ucAnimationStageCounter < 13) )
 80074e4:	4b16      	ldr	r3, [pc, #88]	; (8007540 <Animation6Loop+0xf4>)
 80074e6:	795b      	ldrb	r3, [r3, #5]
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b0c      	cmp	r3, #12
 80074ec:	d815      	bhi.n	800751a <Animation6Loop+0xce>
	{	// Setting LEDs ON / OFF
		WS2812SetDisplay(m_Animation6.DispID,m_ucLEDSwapMatrix[(11-(12-m_Animation6.ucAnimationStageCounter))],0, 0, 0, 0);
 80074ee:	4b14      	ldr	r3, [pc, #80]	; (8007540 <Animation6Loop+0xf4>)
 80074f0:	7818      	ldrb	r0, [r3, #0]
 80074f2:	4b13      	ldr	r3, [pc, #76]	; (8007540 <Animation6Loop+0xf4>)
 80074f4:	795b      	ldrb	r3, [r3, #5]
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	3b01      	subs	r3, #1
 80074fa:	4a12      	ldr	r2, [pc, #72]	; (8007544 <Animation6Loop+0xf8>)
 80074fc:	5cd1      	ldrb	r1, [r2, r3]
 80074fe:	2300      	movs	r3, #0
 8007500:	9301      	str	r3, [sp, #4]
 8007502:	2300      	movs	r3, #0
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	2300      	movs	r3, #0
 8007508:	2200      	movs	r2, #0
 800750a:	f7fe ffb5 	bl	8006478 <WS2812SetDisplay>
		WS2812ShowDisplay(m_Animation6.DispID,0);
 800750e:	4b0c      	ldr	r3, [pc, #48]	; (8007540 <Animation6Loop+0xf4>)
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	2100      	movs	r1, #0
 8007514:	4618      	mov	r0, r3
 8007516:	f7ff f86d 	bl	80065f4 <WS2812ShowDisplay>
	}

	m_Animation6.ucAnimationPeriodCounter = m_Animation6.ucAnimationPeriod;			// set the new timer
 800751a:	4b09      	ldr	r3, [pc, #36]	; (8007540 <Animation6Loop+0xf4>)
 800751c:	785a      	ldrb	r2, [r3, #1]
 800751e:	4b08      	ldr	r3, [pc, #32]	; (8007540 <Animation6Loop+0xf4>)
 8007520:	709a      	strb	r2, [r3, #2]
	m_Animation6.SetNextAnimation = ANIMATION_WAIT;									// wait for the time to elapse
 8007522:	4b07      	ldr	r3, [pc, #28]	; (8007540 <Animation6Loop+0xf4>)
 8007524:	2200      	movs	r2, #0
 8007526:	70da      	strb	r2, [r3, #3]
	m_Animation6.ucAnimationStageCounter --;										// select the next stage of the animation
 8007528:	4b05      	ldr	r3, [pc, #20]	; (8007540 <Animation6Loop+0xf4>)
 800752a:	795b      	ldrb	r3, [r3, #5]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	3b01      	subs	r3, #1
 8007530:	b2da      	uxtb	r2, r3
 8007532:	4b03      	ldr	r3, [pc, #12]	; (8007540 <Animation6Loop+0xf4>)
 8007534:	715a      	strb	r2, [r3, #5]
	return;
 8007536:	e000      	b.n	800753a <Animation6Loop+0xee>
	if(m_Animation6.SetNextAnimation == ANIMATION_WAIT)			return;		// waiting for the time elapse
 8007538:	bf00      	nop
}
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	20002084 	.word	0x20002084
 8007544:	2000208c 	.word	0x2000208c

08007548 <Animation6Timer1KHZ>:
//----------------------------------------------------------------------------------
static void Animation6Timer1KHZ(void)
{// called from the 1KHZ ISR system timer
 8007548:	b480      	push	{r7}
 800754a:	af00      	add	r7, sp, #0

	if(m_Animation6.ucAnimationPeriodCounter > 1) 		m_Animation6.ucAnimationPeriodCounter --;
 800754c:	4b0b      	ldr	r3, [pc, #44]	; (800757c <Animation6Timer1KHZ+0x34>)
 800754e:	789b      	ldrb	r3, [r3, #2]
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b01      	cmp	r3, #1
 8007554:	d907      	bls.n	8007566 <Animation6Timer1KHZ+0x1e>
 8007556:	4b09      	ldr	r3, [pc, #36]	; (800757c <Animation6Timer1KHZ+0x34>)
 8007558:	789b      	ldrb	r3, [r3, #2]
 800755a:	b2db      	uxtb	r3, r3
 800755c:	3b01      	subs	r3, #1
 800755e:	b2da      	uxtb	r2, r3
 8007560:	4b06      	ldr	r3, [pc, #24]	; (800757c <Animation6Timer1KHZ+0x34>)
 8007562:	709a      	strb	r2, [r3, #2]
	{
		m_Animation6.ucAnimationPeriodCounter = 0;
		m_Animation6.SetNextAnimation = SET_NEXT_ANIMATION;
	}

	return;
 8007564:	e006      	b.n	8007574 <Animation6Timer1KHZ+0x2c>
		m_Animation6.ucAnimationPeriodCounter = 0;
 8007566:	4b05      	ldr	r3, [pc, #20]	; (800757c <Animation6Timer1KHZ+0x34>)
 8007568:	2200      	movs	r2, #0
 800756a:	709a      	strb	r2, [r3, #2]
		m_Animation6.SetNextAnimation = SET_NEXT_ANIMATION;
 800756c:	4b03      	ldr	r3, [pc, #12]	; (800757c <Animation6Timer1KHZ+0x34>)
 800756e:	2201      	movs	r2, #1
 8007570:	70da      	strb	r2, [r3, #3]
	return;
 8007572:	bf00      	nop
}
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	20002084 	.word	0x20002084

08007580 <LEDSwapInit>:
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
static void LEDSwapInit(void)
{// configure the swap matrix
 8007580:	b480      	push	{r7}
 8007582:	af00      	add	r7, sp, #0
	m_ucLEDSwapMatrix[1 -1] = 7;
 8007584:	4b14      	ldr	r3, [pc, #80]	; (80075d8 <LEDSwapInit+0x58>)
 8007586:	2207      	movs	r2, #7
 8007588:	701a      	strb	r2, [r3, #0]
	m_ucLEDSwapMatrix[2 -1] = 6;
 800758a:	4b13      	ldr	r3, [pc, #76]	; (80075d8 <LEDSwapInit+0x58>)
 800758c:	2206      	movs	r2, #6
 800758e:	705a      	strb	r2, [r3, #1]
	m_ucLEDSwapMatrix[3 -1] = 5;
 8007590:	4b11      	ldr	r3, [pc, #68]	; (80075d8 <LEDSwapInit+0x58>)
 8007592:	2205      	movs	r2, #5
 8007594:	709a      	strb	r2, [r3, #2]
	m_ucLEDSwapMatrix[4 -1] = 4;
 8007596:	4b10      	ldr	r3, [pc, #64]	; (80075d8 <LEDSwapInit+0x58>)
 8007598:	2204      	movs	r2, #4
 800759a:	70da      	strb	r2, [r3, #3]
	m_ucLEDSwapMatrix[5 -1] = 3;
 800759c:	4b0e      	ldr	r3, [pc, #56]	; (80075d8 <LEDSwapInit+0x58>)
 800759e:	2203      	movs	r2, #3
 80075a0:	711a      	strb	r2, [r3, #4]
	m_ucLEDSwapMatrix[6 -1] = 2;
 80075a2:	4b0d      	ldr	r3, [pc, #52]	; (80075d8 <LEDSwapInit+0x58>)
 80075a4:	2202      	movs	r2, #2
 80075a6:	715a      	strb	r2, [r3, #5]
	m_ucLEDSwapMatrix[7 -1] = 1;
 80075a8:	4b0b      	ldr	r3, [pc, #44]	; (80075d8 <LEDSwapInit+0x58>)
 80075aa:	2201      	movs	r2, #1
 80075ac:	719a      	strb	r2, [r3, #6]
	m_ucLEDSwapMatrix[8 -1] = 12;
 80075ae:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <LEDSwapInit+0x58>)
 80075b0:	220c      	movs	r2, #12
 80075b2:	71da      	strb	r2, [r3, #7]
	m_ucLEDSwapMatrix[9 -1] = 11;
 80075b4:	4b08      	ldr	r3, [pc, #32]	; (80075d8 <LEDSwapInit+0x58>)
 80075b6:	220b      	movs	r2, #11
 80075b8:	721a      	strb	r2, [r3, #8]
	m_ucLEDSwapMatrix[10-1] = 10;
 80075ba:	4b07      	ldr	r3, [pc, #28]	; (80075d8 <LEDSwapInit+0x58>)
 80075bc:	220a      	movs	r2, #10
 80075be:	725a      	strb	r2, [r3, #9]
	m_ucLEDSwapMatrix[11-1] = 9;
 80075c0:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <LEDSwapInit+0x58>)
 80075c2:	2209      	movs	r2, #9
 80075c4:	729a      	strb	r2, [r3, #10]
	m_ucLEDSwapMatrix[12-1] = 8;
 80075c6:	4b04      	ldr	r3, [pc, #16]	; (80075d8 <LEDSwapInit+0x58>)
 80075c8:	2208      	movs	r2, #8
 80075ca:	72da      	strb	r2, [r3, #11]
	return;
 80075cc:	bf00      	nop
}
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	2000208c 	.word	0x2000208c

080075dc <AnimationsMainLoop>:
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------

static void AnimationsMainLoop(void)
{	// called on the main loop
 80075dc:	b580      	push	{r7, lr}
 80075de:	af00      	add	r7, sp, #0

	// Switch OFF Animation (with highest priority)
	if(m_AnimationSwitchOFF.AnimationState == ANIMATION_RUNNING)
 80075e0:	4b1c      	ldr	r3, [pc, #112]	; (8007654 <AnimationsMainLoop+0x78>)
 80075e2:	799b      	ldrb	r3, [r3, #6]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d102      	bne.n	80075ee <AnimationsMainLoop+0x12>
	{
		AnimationSwitchOFFLoop();
 80075e8:	f7ff fab0 	bl	8006b4c <AnimationSwitchOFFLoop>
		return;
 80075ec:	e030      	b.n	8007650 <AnimationsMainLoop+0x74>
	}

	// Animation1
	if(m_Animation1.AnimationState == ANIMATION_RUNNING)
 80075ee:	4b1a      	ldr	r3, [pc, #104]	; (8007658 <AnimationsMainLoop+0x7c>)
 80075f0:	799b      	ldrb	r3, [r3, #6]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d102      	bne.n	80075fc <AnimationsMainLoop+0x20>
	{
		Animation1Loop();
 80075f6:	f7ff fb69 	bl	8006ccc <Animation1Loop>
		return;
 80075fa:	e029      	b.n	8007650 <AnimationsMainLoop+0x74>
	}

	// Animation2
	if(m_Animation2.AnimationState == ANIMATION_RUNNING)
 80075fc:	4b17      	ldr	r3, [pc, #92]	; (800765c <AnimationsMainLoop+0x80>)
 80075fe:	799b      	ldrb	r3, [r3, #6]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d102      	bne.n	800760a <AnimationsMainLoop+0x2e>
	{
		Animation2Loop();
 8007604:	f7ff fc22 	bl	8006e4c <Animation2Loop>
		return;
 8007608:	e022      	b.n	8007650 <AnimationsMainLoop+0x74>
	}

	// Animation3
	if(m_Animation3.AnimationState == ANIMATION_RUNNING)
 800760a:	4b15      	ldr	r3, [pc, #84]	; (8007660 <AnimationsMainLoop+0x84>)
 800760c:	799b      	ldrb	r3, [r3, #6]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d102      	bne.n	8007618 <AnimationsMainLoop+0x3c>
	{
		Animation3Loop();
 8007612:	f7ff fcdb 	bl	8006fcc <Animation3Loop>
		return;
 8007616:	e01b      	b.n	8007650 <AnimationsMainLoop+0x74>
	}

	// Animation4
	if(m_Animation4.AnimationState == ANIMATION_RUNNING)
 8007618:	4b12      	ldr	r3, [pc, #72]	; (8007664 <AnimationsMainLoop+0x88>)
 800761a:	799b      	ldrb	r3, [r3, #6]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d102      	bne.n	8007626 <AnimationsMainLoop+0x4a>
	{
		Animation4Loop();
 8007620:	f7ff fd94 	bl	800714c <Animation4Loop>
		return;
 8007624:	e014      	b.n	8007650 <AnimationsMainLoop+0x74>
	}

	// Animation5
	if(m_Animation5.AnimationState == ANIMATION_RUNNING)
 8007626:	4b10      	ldr	r3, [pc, #64]	; (8007668 <AnimationsMainLoop+0x8c>)
 8007628:	799b      	ldrb	r3, [r3, #6]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d102      	bne.n	8007634 <AnimationsMainLoop+0x58>
	{
		Animation5Loop();
 800762e:	f7ff fe4d 	bl	80072cc <Animation5Loop>
		return;
 8007632:	e00d      	b.n	8007650 <AnimationsMainLoop+0x74>
	}

	// Animation6
	if(m_Animation6.AnimationState == ANIMATION_RUNNING)
 8007634:	4b0d      	ldr	r3, [pc, #52]	; (800766c <AnimationsMainLoop+0x90>)
 8007636:	799b      	ldrb	r3, [r3, #6]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d102      	bne.n	8007642 <AnimationsMainLoop+0x66>
	{
		Animation6Loop();
 800763c:	f7ff ff06 	bl	800744c <Animation6Loop>
		return;
 8007640:	e006      	b.n	8007650 <AnimationsMainLoop+0x74>




	// Switch ON Animation (with lowest priority)
	if(m_AnimationSwitchON.AnimationState == ANIMATION_RUNNING)
 8007642:	4b0b      	ldr	r3, [pc, #44]	; (8007670 <AnimationsMainLoop+0x94>)
 8007644:	799b      	ldrb	r3, [r3, #6]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d102      	bne.n	8007650 <AnimationsMainLoop+0x74>
	{
		AnimationSwitchONLoop();
 800764a:	f7ff f9c3 	bl	80069d4 <AnimationSwitchONLoop>
		return;
 800764e:	bf00      	nop
	}

}
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	20002054 	.word	0x20002054
 8007658:	2000205c 	.word	0x2000205c
 800765c:	20002064 	.word	0x20002064
 8007660:	2000206c 	.word	0x2000206c
 8007664:	20002074 	.word	0x20002074
 8007668:	2000207c 	.word	0x2000207c
 800766c:	20002084 	.word	0x20002084
 8007670:	2000204c 	.word	0x2000204c

08007674 <WheelRobotStop>:


// API
//==================================================================================================================== API_START
void WheelRobotStop(void)		// stops both motors
{
 8007674:	b580      	push	{r7, lr}
 8007676:	af00      	add	r7, sp, #0
	WheelRightStop();
 8007678:	f000 f9ae 	bl	80079d8 <WheelRightStop>
	WheelLeftStop();
 800767c:	f000 fa4a 	bl	8007b14 <WheelLeftStop>
	return;
 8007680:	bf00      	nop
}
 8007682:	bd80      	pop	{r7, pc}

08007684 <WheelRobotGoPWM>:
//----------------------------------------------------------------------------------
ROBOT_COMMAND_STATUS WheelRobotGoPWM(ROBOT_DIRECTION Direction, uint8_t ucPWMPercentage)	// used to command both wheels for a certain direction. PWM can be between 15% and 100%
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	4603      	mov	r3, r0
 800768c:	460a      	mov	r2, r1
 800768e:	71fb      	strb	r3, [r7, #7]
 8007690:	4613      	mov	r3, r2
 8007692:	71bb      	strb	r3, [r7, #6]
	uint8_t ucCommandStatusR, ucCommandStatusL;

	if( (Direction != GOING_FORWARD ) && (Direction != GOING_BACKWARD) )					return STATE_PARAMETER_ERROR;
 8007694:	79fb      	ldrb	r3, [r7, #7]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d004      	beq.n	80076a4 <WheelRobotGoPWM+0x20>
 800769a:	79fb      	ldrb	r3, [r7, #7]
 800769c:	2b02      	cmp	r3, #2
 800769e:	d001      	beq.n	80076a4 <WheelRobotGoPWM+0x20>
 80076a0:	2303      	movs	r3, #3
 80076a2:	e022      	b.n	80076ea <WheelRobotGoPWM+0x66>
	if( (ucPWMPercentage < 15) || (ucPWMPercentage > 100) )									return STATE_PARAMETER_ERROR;
 80076a4:	79bb      	ldrb	r3, [r7, #6]
 80076a6:	2b0e      	cmp	r3, #14
 80076a8:	d902      	bls.n	80076b0 <WheelRobotGoPWM+0x2c>
 80076aa:	79bb      	ldrb	r3, [r7, #6]
 80076ac:	2b64      	cmp	r3, #100	; 0x64
 80076ae:	d901      	bls.n	80076b4 <WheelRobotGoPWM+0x30>
 80076b0:	2303      	movs	r3, #3
 80076b2:	e01a      	b.n	80076ea <WheelRobotGoPWM+0x66>
	// empty the distance to go in case it contain some data
	//m_MotorRight.ui32DistanceToGoPulses = 0;
	//m_MotorLeft.ui32DistanceToGoPulses = 0;

	// Right Wheel
	ucCommandStatusR = WheelRightGo(Direction, ucPWMPercentage);
 80076b4:	79ba      	ldrb	r2, [r7, #6]
 80076b6:	79fb      	ldrb	r3, [r7, #7]
 80076b8:	4611      	mov	r1, r2
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 f90c 	bl	80078d8 <WheelRightGo>
 80076c0:	4603      	mov	r3, r0
 80076c2:	73fb      	strb	r3, [r7, #15]
	// Left Wheel
	ucCommandStatusL = WheelLeftGo(Direction, ucPWMPercentage);
 80076c4:	79ba      	ldrb	r2, [r7, #6]
 80076c6:	79fb      	ldrb	r3, [r7, #7]
 80076c8:	4611      	mov	r1, r2
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 f9a2 	bl	8007a14 <WheelLeftGo>
 80076d0:	4603      	mov	r3, r0
 80076d2:	73bb      	strb	r3, [r7, #14]

	if(ucCommandStatusR != STATE_OK)	return ucCommandStatusR;
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d001      	beq.n	80076de <WheelRobotGoPWM+0x5a>
 80076da:	7bfb      	ldrb	r3, [r7, #15]
 80076dc:	e005      	b.n	80076ea <WheelRobotGoPWM+0x66>
	if(ucCommandStatusL != STATE_OK)	return ucCommandStatusL;
 80076de:	7bbb      	ldrb	r3, [r7, #14]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d001      	beq.n	80076e8 <WheelRobotGoPWM+0x64>
 80076e4:	7bbb      	ldrb	r3, [r7, #14]
 80076e6:	e000      	b.n	80076ea <WheelRobotGoPWM+0x66>

	return STATE_OK;
 80076e8:	2301      	movs	r3, #1
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
	...

080076f4 <WheelRobotGoPWMTmo>:
//----------------------------------------------------------------------------------
ROBOT_COMMAND_STATUS WheelRobotGoPWMTmo(ROBOT_DIRECTION Direction, uint8_t ucPWMPercentage, uint8_t ucTimeToRunHMS) // used to command both wheels for a certain direction and a specified time in Hundreds of MilliSeconds.
// - PWM can be between 15% and 100%
// - Time is in range of[1 ... 250] representing max 25.0 Seconds
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	4603      	mov	r3, r0
 80076fc:	71fb      	strb	r3, [r7, #7]
 80076fe:	460b      	mov	r3, r1
 8007700:	71bb      	strb	r3, [r7, #6]
 8007702:	4613      	mov	r3, r2
 8007704:	717b      	strb	r3, [r7, #5]
	if( (Direction != GOING_FORWARD ) && (Direction != GOING_BACKWARD) )					return STATE_PARAMETER_ERROR;
 8007706:	79fb      	ldrb	r3, [r7, #7]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d004      	beq.n	8007716 <WheelRobotGoPWMTmo+0x22>
 800770c:	79fb      	ldrb	r3, [r7, #7]
 800770e:	2b02      	cmp	r3, #2
 8007710:	d001      	beq.n	8007716 <WheelRobotGoPWMTmo+0x22>
 8007712:	2303      	movs	r3, #3
 8007714:	e01c      	b.n	8007750 <WheelRobotGoPWMTmo+0x5c>
	if( (ucPWMPercentage < 15) || (ucPWMPercentage > 100) )									return STATE_PARAMETER_ERROR;
 8007716:	79bb      	ldrb	r3, [r7, #6]
 8007718:	2b0e      	cmp	r3, #14
 800771a:	d902      	bls.n	8007722 <WheelRobotGoPWMTmo+0x2e>
 800771c:	79bb      	ldrb	r3, [r7, #6]
 800771e:	2b64      	cmp	r3, #100	; 0x64
 8007720:	d901      	bls.n	8007726 <WheelRobotGoPWMTmo+0x32>
 8007722:	2303      	movs	r3, #3
 8007724:	e014      	b.n	8007750 <WheelRobotGoPWMTmo+0x5c>
	if( (ucTimeToRunHMS < 1)   || (ucTimeToRunHMS > 250) )									return STATE_PARAMETER_ERROR;
 8007726:	797b      	ldrb	r3, [r7, #5]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <WheelRobotGoPWMTmo+0x3e>
 800772c:	797b      	ldrb	r3, [r7, #5]
 800772e:	2bfa      	cmp	r3, #250	; 0xfa
 8007730:	d901      	bls.n	8007736 <WheelRobotGoPWMTmo+0x42>
 8007732:	2303      	movs	r3, #3
 8007734:	e00c      	b.n	8007750 <WheelRobotGoPWMTmo+0x5c>

	// set the timeout => after the time is elapsed the "WheelRobotCommandEndCallback()" callback function will be called
	m_MotorRight.ucTimeToRunHMS = ucTimeToRunHMS;
 8007736:	4a08      	ldr	r2, [pc, #32]	; (8007758 <WheelRobotGoPWMTmo+0x64>)
 8007738:	797b      	ldrb	r3, [r7, #5]
 800773a:	7413      	strb	r3, [r2, #16]
	m_MotorLeft.ucTimeToRunHMS = ucTimeToRunHMS;
 800773c:	4a07      	ldr	r2, [pc, #28]	; (800775c <WheelRobotGoPWMTmo+0x68>)
 800773e:	797b      	ldrb	r3, [r7, #5]
 8007740:	7413      	strb	r3, [r2, #16]
	// empty the distance to go in case it contain some data
	//m_MotorRight.ui32DistanceToGoPulses = 0;
	//m_MotorLeft.ui32DistanceToGoPulses = 0;

	// start the robot
	return WheelRobotGoPWM(Direction,ucPWMPercentage);
 8007742:	79ba      	ldrb	r2, [r7, #6]
 8007744:	79fb      	ldrb	r3, [r7, #7]
 8007746:	4611      	mov	r1, r2
 8007748:	4618      	mov	r0, r3
 800774a:	f7ff ff9b 	bl	8007684 <WheelRobotGoPWM>
 800774e:	4603      	mov	r3, r0

	//return STATE_OK;
}
 8007750:	4618      	mov	r0, r3
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	200020cc 	.word	0x200020cc
 800775c:	200020e4 	.word	0x200020e4

08007760 <WheelRobotGoSpeedTmo>:
}
//----------------------------------------------------------------------------------
ROBOT_COMMAND_STATUS WheelRobotGoSpeedTmo(ROBOT_DIRECTION Direction, uint16_t uiSpeedMMS, uint8_t ucTimeToRunHMS) // used to command both wheels for a certain direction and a specified time in Hundreds of MilliSeconds using a specified speed.
// - Speed (uiSpeedMMS) can be between in range [50 .... 500] expressed in mm/s units
// - Time is in range of[1 ... 250] representing max 25.0 Seconds
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	4603      	mov	r3, r0
 8007768:	71fb      	strb	r3, [r7, #7]
 800776a:	460b      	mov	r3, r1
 800776c:	80bb      	strh	r3, [r7, #4]
 800776e:	4613      	mov	r3, r2
 8007770:	71bb      	strb	r3, [r7, #6]
	if( (Direction != GOING_FORWARD ) && (Direction != GOING_BACKWARD) )					return STATE_PARAMETER_ERROR;
 8007772:	79fb      	ldrb	r3, [r7, #7]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d004      	beq.n	8007782 <WheelRobotGoSpeedTmo+0x22>
 8007778:	79fb      	ldrb	r3, [r7, #7]
 800777a:	2b02      	cmp	r3, #2
 800777c:	d001      	beq.n	8007782 <WheelRobotGoSpeedTmo+0x22>
 800777e:	2303      	movs	r3, #3
 8007780:	e023      	b.n	80077ca <WheelRobotGoSpeedTmo+0x6a>
	if( (uiSpeedMMS < 50) || (uiSpeedMMS > 500) )											return STATE_PARAMETER_ERROR;
 8007782:	88bb      	ldrh	r3, [r7, #4]
 8007784:	2b31      	cmp	r3, #49	; 0x31
 8007786:	d903      	bls.n	8007790 <WheelRobotGoSpeedTmo+0x30>
 8007788:	88bb      	ldrh	r3, [r7, #4]
 800778a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800778e:	d901      	bls.n	8007794 <WheelRobotGoSpeedTmo+0x34>
 8007790:	2303      	movs	r3, #3
 8007792:	e01a      	b.n	80077ca <WheelRobotGoSpeedTmo+0x6a>
	if( (ucTimeToRunHMS < 1) || (ucTimeToRunHMS > 250) )									return STATE_PARAMETER_ERROR;
 8007794:	79bb      	ldrb	r3, [r7, #6]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d002      	beq.n	80077a0 <WheelRobotGoSpeedTmo+0x40>
 800779a:	79bb      	ldrb	r3, [r7, #6]
 800779c:	2bfa      	cmp	r3, #250	; 0xfa
 800779e:	d901      	bls.n	80077a4 <WheelRobotGoSpeedTmo+0x44>
 80077a0:	2303      	movs	r3, #3
 80077a2:	e012      	b.n	80077ca <WheelRobotGoSpeedTmo+0x6a>

	uint8_t ucEstimatedPWMPercentage;

	ucEstimatedPWMPercentage = MMSSpeedToPWM(uiSpeedMMS);
 80077a4:	88bb      	ldrh	r3, [r7, #4]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 ffde 	bl	8008768 <MMSSpeedToPWM>
 80077ac:	4603      	mov	r3, r0
 80077ae:	73fb      	strb	r3, [r7, #15]

	m_MotorRight.uiRequestedSpeedMMS = uiSpeedMMS;
 80077b0:	4a08      	ldr	r2, [pc, #32]	; (80077d4 <WheelRobotGoSpeedTmo+0x74>)
 80077b2:	88bb      	ldrh	r3, [r7, #4]
 80077b4:	8113      	strh	r3, [r2, #8]
	m_MotorLeft.uiRequestedSpeedMMS = uiSpeedMMS;
 80077b6:	4a08      	ldr	r2, [pc, #32]	; (80077d8 <WheelRobotGoSpeedTmo+0x78>)
 80077b8:	88bb      	ldrh	r3, [r7, #4]
 80077ba:	8113      	strh	r3, [r2, #8]

	return WheelRobotGoPWMTmo(Direction, ucEstimatedPWMPercentage, ucTimeToRunHMS);
 80077bc:	79ba      	ldrb	r2, [r7, #6]
 80077be:	7bf9      	ldrb	r1, [r7, #15]
 80077c0:	79fb      	ldrb	r3, [r7, #7]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7ff ff96 	bl	80076f4 <WheelRobotGoPWMTmo>
 80077c8:	4603      	mov	r3, r0

	//return STATE_OK;
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	200020cc 	.word	0x200020cc
 80077d8:	200020e4 	.word	0x200020e4

080077dc <WheelRobotRotateTmo>:

	return STATE_OK;
}
//----------------------------------------------------------------------------------
ROBOT_COMMAND_STATUS WheelRobotRotateTmo(int16_t iRotationAngle, uint8_t ucPWMPercentage)		// used to turn the robot with a certain angle in the range of[-180 ... 180] degrees. trigonometric direction is positive using timeout
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	4603      	mov	r3, r0
 80077e4:	460a      	mov	r2, r1
 80077e6:	80fb      	strh	r3, [r7, #6]
 80077e8:	4613      	mov	r3, r2
 80077ea:	717b      	strb	r3, [r7, #5]
	if( (iRotationAngle < -180 ) && (iRotationAngle > 180) )					return STATE_PARAMETER_ERROR;
 80077ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077f0:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 80077f4:	da05      	bge.n	8007802 <WheelRobotRotateTmo+0x26>
 80077f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077fa:	2bb4      	cmp	r3, #180	; 0xb4
 80077fc:	dd01      	ble.n	8007802 <WheelRobotRotateTmo+0x26>
 80077fe:	2303      	movs	r3, #3
 8007800:	e05d      	b.n	80078be <WheelRobotRotateTmo+0xe2>
	if( (iRotationAngle > -9  ) && (iRotationAngle < 9) )						return STATE_PARAMETER_ERROR;
 8007802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007806:	f113 0f08 	cmn.w	r3, #8
 800780a:	db05      	blt.n	8007818 <WheelRobotRotateTmo+0x3c>
 800780c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007810:	2b08      	cmp	r3, #8
 8007812:	dc01      	bgt.n	8007818 <WheelRobotRotateTmo+0x3c>
 8007814:	2303      	movs	r3, #3
 8007816:	e052      	b.n	80078be <WheelRobotRotateTmo+0xe2>
	if( (iRotationAngle == 0) )													return STATE_OK;
 8007818:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d101      	bne.n	8007824 <WheelRobotRotateTmo+0x48>
 8007820:	2301      	movs	r3, #1
 8007822:	e04c      	b.n	80078be <WheelRobotRotateTmo+0xe2>

	double dTemp;
	dTemp  = (double)abs(iRotationAngle);
 8007824:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007828:	2b00      	cmp	r3, #0
 800782a:	bfb8      	it	lt
 800782c:	425b      	neglt	r3, r3
 800782e:	b29b      	uxth	r3, r3
 8007830:	4618      	mov	r0, r3
 8007832:	f7f8 fe97 	bl	8000564 <__aeabi_i2d>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	dTemp *= CORRECTION_VALUE_BECAUSE_OF_MOTOR;
 800783e:	f04f 0200 	mov.w	r2, #0
 8007842:	4b21      	ldr	r3, [pc, #132]	; (80078c8 <WheelRobotRotateTmo+0xec>)
 8007844:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007848:	f7f8 fef6 	bl	8000638 <__aeabi_dmul>
 800784c:	4602      	mov	r2, r0
 800784e:	460b      	mov	r3, r1
 8007850:	e9c7 2302 	strd	r2, r3, [r7, #8]
	dTemp /= 90;
 8007854:	f04f 0200 	mov.w	r2, #0
 8007858:	4b1c      	ldr	r3, [pc, #112]	; (80078cc <WheelRobotRotateTmo+0xf0>)
 800785a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800785e:	f7f9 f815 	bl	800088c <__aeabi_ddiv>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	e9c7 2302 	strd	r2, r3, [r7, #8]

	m_MotorRight.ucTimeToRunHMS = dTemp;
 800786a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800786e:	f7f9 f9bb 	bl	8000be8 <__aeabi_d2uiz>
 8007872:	4603      	mov	r3, r0
 8007874:	b2da      	uxtb	r2, r3
 8007876:	4b16      	ldr	r3, [pc, #88]	; (80078d0 <WheelRobotRotateTmo+0xf4>)
 8007878:	741a      	strb	r2, [r3, #16]
	m_MotorLeft.ucTimeToRunHMS = dTemp;
 800787a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800787e:	f7f9 f9b3 	bl	8000be8 <__aeabi_d2uiz>
 8007882:	4603      	mov	r3, r0
 8007884:	b2da      	uxtb	r2, r3
 8007886:	4b13      	ldr	r3, [pc, #76]	; (80078d4 <WheelRobotRotateTmo+0xf8>)
 8007888:	741a      	strb	r2, [r3, #16]

	if( (iRotationAngle > 0) )
 800788a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800788e:	2b00      	cmp	r3, #0
 8007890:	dd0a      	ble.n	80078a8 <WheelRobotRotateTmo+0xcc>
	{	// turn to LEFT is positive (trigonometric direction)
		WheelRightGo(GOING_FORWARD,ucPWMPercentage);
 8007892:	797b      	ldrb	r3, [r7, #5]
 8007894:	4619      	mov	r1, r3
 8007896:	2001      	movs	r0, #1
 8007898:	f000 f81e 	bl	80078d8 <WheelRightGo>
		WheelLeftGo(GOING_BACKWARD,ucPWMPercentage);
 800789c:	797b      	ldrb	r3, [r7, #5]
 800789e:	4619      	mov	r1, r3
 80078a0:	2002      	movs	r0, #2
 80078a2:	f000 f8b7 	bl	8007a14 <WheelLeftGo>
 80078a6:	e009      	b.n	80078bc <WheelRobotRotateTmo+0xe0>
	}
	else
	{	// turn to RIGHT is negative
		WheelRightGo(GOING_BACKWARD,ucPWMPercentage);
 80078a8:	797b      	ldrb	r3, [r7, #5]
 80078aa:	4619      	mov	r1, r3
 80078ac:	2002      	movs	r0, #2
 80078ae:	f000 f813 	bl	80078d8 <WheelRightGo>
		WheelLeftGo(GOING_FORWARD,ucPWMPercentage);
 80078b2:	797b      	ldrb	r3, [r7, #5]
 80078b4:	4619      	mov	r1, r3
 80078b6:	2001      	movs	r0, #1
 80078b8:	f000 f8ac 	bl	8007a14 <WheelLeftGo>
	}

	return STATE_OK;
 80078bc:	2301      	movs	r3, #1
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	40260000 	.word	0x40260000
 80078cc:	40568000 	.word	0x40568000
 80078d0:	200020cc 	.word	0x200020cc
 80078d4:	200020e4 	.word	0x200020e4

080078d8 <WheelRightGo>:
//----------------------------------------------------------------------------------
ROBOT_COMMAND_STATUS WheelRightGo(ROBOT_DIRECTION Direction, uint8_t ucPWMPercentage)	// used to command the Right motor. PWM is in the range of 15% ... 100%
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	4603      	mov	r3, r0
 80078e0:	460a      	mov	r2, r1
 80078e2:	71fb      	strb	r3, [r7, #7]
 80078e4:	4613      	mov	r3, r2
 80078e6:	71bb      	strb	r3, [r7, #6]
	if( (Direction != GOING_FORWARD ) && (Direction != GOING_BACKWARD) )					return STATE_PARAMETER_ERROR;
 80078e8:	79fb      	ldrb	r3, [r7, #7]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d004      	beq.n	80078f8 <WheelRightGo+0x20>
 80078ee:	79fb      	ldrb	r3, [r7, #7]
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d001      	beq.n	80078f8 <WheelRightGo+0x20>
 80078f4:	2303      	movs	r3, #3
 80078f6:	e066      	b.n	80079c6 <WheelRightGo+0xee>
	if( (ucPWMPercentage < 15) || (ucPWMPercentage > 100) )									return STATE_PARAMETER_ERROR;
 80078f8:	79bb      	ldrb	r3, [r7, #6]
 80078fa:	2b0e      	cmp	r3, #14
 80078fc:	d902      	bls.n	8007904 <WheelRightGo+0x2c>
 80078fe:	79bb      	ldrb	r3, [r7, #6]
 8007900:	2b64      	cmp	r3, #100	; 0x64
 8007902:	d901      	bls.n	8007908 <WheelRightGo+0x30>
 8007904:	2303      	movs	r3, #3
 8007906:	e05e      	b.n	80079c6 <WheelRightGo+0xee>
	if(m_MotorRight.DirectionChangeWithoutStop == ROTATION_CHANGE_DETECTED)					return STATE_BUSY;		// too many commands and the last one (involving a rotation direction change is not yet done
 8007908:	4b31      	ldr	r3, [pc, #196]	; (80079d0 <WheelRightGo+0xf8>)
 800790a:	799b      	ldrb	r3, [r3, #6]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d101      	bne.n	8007914 <WheelRightGo+0x3c>
 8007910:	2302      	movs	r3, #2
 8007912:	e058      	b.n	80079c6 <WheelRightGo+0xee>

	// check if the wheel is not presently turning in the opposite direction. in case it dose return busy state and send stop command to the wheel
	if ( (Direction == GOING_FORWARD) && (m_MotorRight.TurningDirection == WHEEL_TURNING_BACKWARD) )
 8007914:	79fb      	ldrb	r3, [r7, #7]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d111      	bne.n	800793e <WheelRightGo+0x66>
 800791a:	4b2d      	ldr	r3, [pc, #180]	; (80079d0 <WheelRightGo+0xf8>)
 800791c:	785b      	ldrb	r3, [r3, #1]
 800791e:	2b02      	cmp	r3, #2
 8007920:	d10d      	bne.n	800793e <WheelRightGo+0x66>
	{
		m_MotorRight.DirectionChangeWithoutStop = ROTATION_CHANGE_DETECTED;	// most turn in opposite direction
 8007922:	4b2b      	ldr	r3, [pc, #172]	; (80079d0 <WheelRightGo+0xf8>)
 8007924:	2201      	movs	r2, #1
 8007926:	719a      	strb	r2, [r3, #6]
		m_MotorRight.ucPWMPercentageTarget2 = ucPWMPercentage;
 8007928:	4a29      	ldr	r2, [pc, #164]	; (80079d0 <WheelRightGo+0xf8>)
 800792a:	79bb      	ldrb	r3, [r7, #6]
 800792c:	70d3      	strb	r3, [r2, #3]
		// stop the motor first
		m_MotorRight.ucPWMPercentageTarget = 0;
 800792e:	4b28      	ldr	r3, [pc, #160]	; (80079d0 <WheelRightGo+0xf8>)
 8007930:	2200      	movs	r2, #0
 8007932:	709a      	strb	r2, [r3, #2]
		m_MotorRight.PWMSpeedStatus = PWM_SPEED_TRACKING;
 8007934:	4b26      	ldr	r3, [pc, #152]	; (80079d0 <WheelRightGo+0xf8>)
 8007936:	2201      	movs	r2, #1
 8007938:	715a      	strb	r2, [r3, #5]
		//WheelRightStop();
		return STATE_OK;
 800793a:	2301      	movs	r3, #1
 800793c:	e043      	b.n	80079c6 <WheelRightGo+0xee>
	}
	if ( (Direction == GOING_BACKWARD) && (m_MotorRight.TurningDirection == WHEEL_TURNING_FORWARD) )
 800793e:	79fb      	ldrb	r3, [r7, #7]
 8007940:	2b02      	cmp	r3, #2
 8007942:	d111      	bne.n	8007968 <WheelRightGo+0x90>
 8007944:	4b22      	ldr	r3, [pc, #136]	; (80079d0 <WheelRightGo+0xf8>)
 8007946:	785b      	ldrb	r3, [r3, #1]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d10d      	bne.n	8007968 <WheelRightGo+0x90>
	{
		m_MotorRight.DirectionChangeWithoutStop = ROTATION_CHANGE_DETECTED;	// most turn in opposite direction
 800794c:	4b20      	ldr	r3, [pc, #128]	; (80079d0 <WheelRightGo+0xf8>)
 800794e:	2201      	movs	r2, #1
 8007950:	719a      	strb	r2, [r3, #6]
		m_MotorRight.ucPWMPercentageTarget2 = ucPWMPercentage;
 8007952:	4a1f      	ldr	r2, [pc, #124]	; (80079d0 <WheelRightGo+0xf8>)
 8007954:	79bb      	ldrb	r3, [r7, #6]
 8007956:	70d3      	strb	r3, [r2, #3]
		// stop the motor first
		m_MotorRight.ucPWMPercentageTarget = 0;
 8007958:	4b1d      	ldr	r3, [pc, #116]	; (80079d0 <WheelRightGo+0xf8>)
 800795a:	2200      	movs	r2, #0
 800795c:	709a      	strb	r2, [r3, #2]
		m_MotorRight.PWMSpeedStatus = PWM_SPEED_TRACKING;
 800795e:	4b1c      	ldr	r3, [pc, #112]	; (80079d0 <WheelRightGo+0xf8>)
 8007960:	2201      	movs	r2, #1
 8007962:	715a      	strb	r2, [r3, #5]
		//WheelRightStop();
		return STATE_OK;
 8007964:	2301      	movs	r3, #1
 8007966:	e02e      	b.n	80079c6 <WheelRightGo+0xee>
	}

	// there is no rotation change while the wheel was previously spinning in the opposite direction
	m_MotorRight.DirectionChangeWithoutStop = NO_ROTATION_CHANGE_DETECTED;
 8007968:	4b19      	ldr	r3, [pc, #100]	; (80079d0 <WheelRightGo+0xf8>)
 800796a:	2200      	movs	r2, #0
 800796c:	719a      	strb	r2, [r3, #6]
	m_MotorRight.ucPWMPercentageTarget2 = 0;
 800796e:	4b18      	ldr	r3, [pc, #96]	; (80079d0 <WheelRightGo+0xf8>)
 8007970:	2200      	movs	r2, #0
 8007972:	70da      	strb	r2, [r3, #3]

	m_MotorRight.ucPWMPercentageTarget = ucPWMPercentage;
 8007974:	4a16      	ldr	r2, [pc, #88]	; (80079d0 <WheelRightGo+0xf8>)
 8007976:	79bb      	ldrb	r3, [r7, #6]
 8007978:	7093      	strb	r3, [r2, #2]
	m_MotorRight.PWMSpeedStatus = PWM_SPEED_TRACKING;
 800797a:	4b15      	ldr	r3, [pc, #84]	; (80079d0 <WheelRightGo+0xf8>)
 800797c:	2201      	movs	r2, #1
 800797e:	715a      	strb	r2, [r3, #5]
	//__HAL_TIM_SET_COMPARE(&htim9,TIM_CHANNEL_1,(uint16_t)m_MotorRight.ucPWMPercentageTarget);  //(commented here and ramped inside the MotorTimer1KHZ)

	if( Direction == GOING_FORWARD )
 8007980:	79fb      	ldrb	r3, [r7, #7]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d10f      	bne.n	80079a6 <WheelRightGo+0xce>
	{	// forward
		m_MotorRight.TurningDirection = WHEEL_TURNING_FORWARD;
 8007986:	4b12      	ldr	r3, [pc, #72]	; (80079d0 <WheelRightGo+0xf8>)
 8007988:	2201      	movs	r2, #1
 800798a:	705a      	strb	r2, [r3, #1]
		HAL_GPIO_WritePin(RIN1_GPIO_Port, RIN1_Pin, GPIO_PIN_RESET);
 800798c:	2200      	movs	r2, #0
 800798e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007992:	4810      	ldr	r0, [pc, #64]	; (80079d4 <WheelRightGo+0xfc>)
 8007994:	f004 fa3a 	bl	800be0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIN1_GPIO_Port, RIN2_Pin, GPIO_PIN_SET);
 8007998:	2201      	movs	r2, #1
 800799a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800799e:	480d      	ldr	r0, [pc, #52]	; (80079d4 <WheelRightGo+0xfc>)
 80079a0:	f004 fa34 	bl	800be0c <HAL_GPIO_WritePin>
 80079a4:	e00e      	b.n	80079c4 <WheelRightGo+0xec>
	}
	else
	{	// backward
		m_MotorRight.TurningDirection = WHEEL_TURNING_BACKWARD;
 80079a6:	4b0a      	ldr	r3, [pc, #40]	; (80079d0 <WheelRightGo+0xf8>)
 80079a8:	2202      	movs	r2, #2
 80079aa:	705a      	strb	r2, [r3, #1]
		HAL_GPIO_WritePin(RIN1_GPIO_Port, RIN1_Pin, GPIO_PIN_SET);
 80079ac:	2201      	movs	r2, #1
 80079ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80079b2:	4808      	ldr	r0, [pc, #32]	; (80079d4 <WheelRightGo+0xfc>)
 80079b4:	f004 fa2a 	bl	800be0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIN1_GPIO_Port, RIN2_Pin, GPIO_PIN_RESET);
 80079b8:	2200      	movs	r2, #0
 80079ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80079be:	4805      	ldr	r0, [pc, #20]	; (80079d4 <WheelRightGo+0xfc>)
 80079c0:	f004 fa24 	bl	800be0c <HAL_GPIO_WritePin>
	}

	return STATE_OK;
 80079c4:	2301      	movs	r3, #1
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	200020cc 	.word	0x200020cc
 80079d4:	40020c00 	.word	0x40020c00

080079d8 <WheelRightStop>:
//----------------------------------------------------------------------------------
void WheelRightStop(void)		// used to stop the right motor
{
 80079d8:	b480      	push	{r7}
 80079da:	af00      	add	r7, sp, #0
	m_MotorRight.ucPWMPercentageTarget = 0;
 80079dc:	4b0c      	ldr	r3, [pc, #48]	; (8007a10 <WheelRightStop+0x38>)
 80079de:	2200      	movs	r2, #0
 80079e0:	709a      	strb	r2, [r3, #2]
	m_MotorRight.DirectionChangeWithoutStop = NO_ROTATION_CHANGE_DETECTED;
 80079e2:	4b0b      	ldr	r3, [pc, #44]	; (8007a10 <WheelRightStop+0x38>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	719a      	strb	r2, [r3, #6]
	m_MotorRight.ucPWMPercentageTarget2 = 0;
 80079e8:	4b09      	ldr	r3, [pc, #36]	; (8007a10 <WheelRightStop+0x38>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	70da      	strb	r2, [r3, #3]
	m_MotorRight.ucTimeToRunHMS = 0;		// timeout
 80079ee:	4b08      	ldr	r3, [pc, #32]	; (8007a10 <WheelRightStop+0x38>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	741a      	strb	r2, [r3, #16]
	m_MotorRight.ui32DistanceToGoPulses = 0;	// no pulse target
 80079f4:	4b06      	ldr	r3, [pc, #24]	; (8007a10 <WheelRightStop+0x38>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	60da      	str	r2, [r3, #12]
	m_MotorRight.uiRequestedSpeedMMS  = 0;		// no speed control
 80079fa:	4b05      	ldr	r3, [pc, #20]	; (8007a10 <WheelRightStop+0x38>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	811a      	strh	r2, [r3, #8]
	//m_MotorRight.TurningDirection = WHEEL_NOT_TURNING;
	m_MotorRight.PWMSpeedStatus = PWM_SPEED_TRACKING;	// start the stopping process
 8007a00:	4b03      	ldr	r3, [pc, #12]	; (8007a10 <WheelRightStop+0x38>)
 8007a02:	2201      	movs	r2, #1
 8007a04:	715a      	strb	r2, [r3, #5]
	//__HAL_TIM_SET_COMPARE(&htim9,TIM_CHANNEL_1,(uint16_t)m_MotorRight.ucPWMPercentageTarget);		// set PWM CH1@Tim9 to ZERO  //(commented here and ramped inside the MotorTimer1KHZ)
	//HAL_GPIO_WritePin(RIN1_GPIO_Port, RIN1_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(RIN1_GPIO_Port, RIN2_Pin, GPIO_PIN_RESET);

	return;
 8007a06:	bf00      	nop
}
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	200020cc 	.word	0x200020cc

08007a14 <WheelLeftGo>:
//----------------------------------------------------------------------------------
ROBOT_COMMAND_STATUS WheelLeftGo(ROBOT_DIRECTION Direction, uint8_t ucPWMPercentage)	// used to command the Right motor. PWM is in the range of 15% ... 100%
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	460a      	mov	r2, r1
 8007a1e:	71fb      	strb	r3, [r7, #7]
 8007a20:	4613      	mov	r3, r2
 8007a22:	71bb      	strb	r3, [r7, #6]
	if( (Direction != GOING_FORWARD ) && (Direction != GOING_BACKWARD) )					return STATE_PARAMETER_ERROR;
 8007a24:	79fb      	ldrb	r3, [r7, #7]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d004      	beq.n	8007a34 <WheelLeftGo+0x20>
 8007a2a:	79fb      	ldrb	r3, [r7, #7]
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d001      	beq.n	8007a34 <WheelLeftGo+0x20>
 8007a30:	2303      	movs	r3, #3
 8007a32:	e066      	b.n	8007b02 <WheelLeftGo+0xee>
	if( (ucPWMPercentage < 15) || (ucPWMPercentage > 100) )									return STATE_PARAMETER_ERROR;
 8007a34:	79bb      	ldrb	r3, [r7, #6]
 8007a36:	2b0e      	cmp	r3, #14
 8007a38:	d902      	bls.n	8007a40 <WheelLeftGo+0x2c>
 8007a3a:	79bb      	ldrb	r3, [r7, #6]
 8007a3c:	2b64      	cmp	r3, #100	; 0x64
 8007a3e:	d901      	bls.n	8007a44 <WheelLeftGo+0x30>
 8007a40:	2303      	movs	r3, #3
 8007a42:	e05e      	b.n	8007b02 <WheelLeftGo+0xee>
	if(m_MotorLeft.DirectionChangeWithoutStop == ROTATION_CHANGE_DETECTED)					return STATE_BUSY;		// too many commands and the last one (involving a rotation direction change is not yet done
 8007a44:	4b31      	ldr	r3, [pc, #196]	; (8007b0c <WheelLeftGo+0xf8>)
 8007a46:	799b      	ldrb	r3, [r3, #6]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d101      	bne.n	8007a50 <WheelLeftGo+0x3c>
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	e058      	b.n	8007b02 <WheelLeftGo+0xee>

	// check if the wheel is not presently turning in the opposite direction. in case it dose return busy state and send stop command to the wheel
	if ( (Direction == GOING_FORWARD) && (m_MotorLeft.TurningDirection == WHEEL_TURNING_BACKWARD) )
 8007a50:	79fb      	ldrb	r3, [r7, #7]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d111      	bne.n	8007a7a <WheelLeftGo+0x66>
 8007a56:	4b2d      	ldr	r3, [pc, #180]	; (8007b0c <WheelLeftGo+0xf8>)
 8007a58:	785b      	ldrb	r3, [r3, #1]
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d10d      	bne.n	8007a7a <WheelLeftGo+0x66>
	{
		m_MotorLeft.DirectionChangeWithoutStop = ROTATION_CHANGE_DETECTED;	// most turn in opposite direction
 8007a5e:	4b2b      	ldr	r3, [pc, #172]	; (8007b0c <WheelLeftGo+0xf8>)
 8007a60:	2201      	movs	r2, #1
 8007a62:	719a      	strb	r2, [r3, #6]
		m_MotorLeft.ucPWMPercentageTarget2 = ucPWMPercentage;
 8007a64:	4a29      	ldr	r2, [pc, #164]	; (8007b0c <WheelLeftGo+0xf8>)
 8007a66:	79bb      	ldrb	r3, [r7, #6]
 8007a68:	70d3      	strb	r3, [r2, #3]
		// stop the motor first
		m_MotorLeft.ucPWMPercentageTarget = 0;
 8007a6a:	4b28      	ldr	r3, [pc, #160]	; (8007b0c <WheelLeftGo+0xf8>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	709a      	strb	r2, [r3, #2]
		m_MotorLeft.PWMSpeedStatus = PWM_SPEED_TRACKING;
 8007a70:	4b26      	ldr	r3, [pc, #152]	; (8007b0c <WheelLeftGo+0xf8>)
 8007a72:	2201      	movs	r2, #1
 8007a74:	715a      	strb	r2, [r3, #5]
		//WheelLeftStop();
		return STATE_OK;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e043      	b.n	8007b02 <WheelLeftGo+0xee>
	}
	if ( (Direction == GOING_BACKWARD) && (m_MotorLeft.TurningDirection == WHEEL_TURNING_FORWARD) )
 8007a7a:	79fb      	ldrb	r3, [r7, #7]
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d111      	bne.n	8007aa4 <WheelLeftGo+0x90>
 8007a80:	4b22      	ldr	r3, [pc, #136]	; (8007b0c <WheelLeftGo+0xf8>)
 8007a82:	785b      	ldrb	r3, [r3, #1]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d10d      	bne.n	8007aa4 <WheelLeftGo+0x90>
	{
		m_MotorLeft.DirectionChangeWithoutStop = ROTATION_CHANGE_DETECTED;	// most turn in opposite direction
 8007a88:	4b20      	ldr	r3, [pc, #128]	; (8007b0c <WheelLeftGo+0xf8>)
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	719a      	strb	r2, [r3, #6]
		m_MotorLeft.ucPWMPercentageTarget2 = ucPWMPercentage;
 8007a8e:	4a1f      	ldr	r2, [pc, #124]	; (8007b0c <WheelLeftGo+0xf8>)
 8007a90:	79bb      	ldrb	r3, [r7, #6]
 8007a92:	70d3      	strb	r3, [r2, #3]
		// stop the motor first
		m_MotorLeft.ucPWMPercentageTarget = 0;
 8007a94:	4b1d      	ldr	r3, [pc, #116]	; (8007b0c <WheelLeftGo+0xf8>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	709a      	strb	r2, [r3, #2]
		m_MotorLeft.PWMSpeedStatus = PWM_SPEED_TRACKING;
 8007a9a:	4b1c      	ldr	r3, [pc, #112]	; (8007b0c <WheelLeftGo+0xf8>)
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	715a      	strb	r2, [r3, #5]
		//WheelLeftStop();
		return STATE_OK;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e02e      	b.n	8007b02 <WheelLeftGo+0xee>
	}

	// there is no rotation change while the wheel was previously spinning in the opposite direction
	m_MotorLeft.DirectionChangeWithoutStop = NO_ROTATION_CHANGE_DETECTED;
 8007aa4:	4b19      	ldr	r3, [pc, #100]	; (8007b0c <WheelLeftGo+0xf8>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	719a      	strb	r2, [r3, #6]
	m_MotorLeft.ucPWMPercentageTarget2 = 0;
 8007aaa:	4b18      	ldr	r3, [pc, #96]	; (8007b0c <WheelLeftGo+0xf8>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	70da      	strb	r2, [r3, #3]

	m_MotorLeft.ucPWMPercentageTarget = ucPWMPercentage;
 8007ab0:	4a16      	ldr	r2, [pc, #88]	; (8007b0c <WheelLeftGo+0xf8>)
 8007ab2:	79bb      	ldrb	r3, [r7, #6]
 8007ab4:	7093      	strb	r3, [r2, #2]
	m_MotorLeft.PWMSpeedStatus = PWM_SPEED_TRACKING;
 8007ab6:	4b15      	ldr	r3, [pc, #84]	; (8007b0c <WheelLeftGo+0xf8>)
 8007ab8:	2201      	movs	r2, #1
 8007aba:	715a      	strb	r2, [r3, #5]

	//__HAL_TIM_SET_COMPARE(&htim9,TIM_CHANNEL_2,(uint16_t)m_MotorLeft.ucPWMPercentageTarget); //(commented here and ramped inside the MotorTimer1KHZ)
	if( Direction == GOING_FORWARD )
 8007abc:	79fb      	ldrb	r3, [r7, #7]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d10f      	bne.n	8007ae2 <WheelLeftGo+0xce>
	{	// forward
		m_MotorLeft.TurningDirection = WHEEL_TURNING_FORWARD;
 8007ac2:	4b12      	ldr	r3, [pc, #72]	; (8007b0c <WheelLeftGo+0xf8>)
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	705a      	strb	r2, [r3, #1]
		HAL_GPIO_WritePin(LIN1_GPIO_Port, LIN1_Pin, GPIO_PIN_SET);
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007ace:	4810      	ldr	r0, [pc, #64]	; (8007b10 <WheelLeftGo+0xfc>)
 8007ad0:	f004 f99c 	bl	800be0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIN1_GPIO_Port, LIN2_Pin, GPIO_PIN_RESET);
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ada:	480d      	ldr	r0, [pc, #52]	; (8007b10 <WheelLeftGo+0xfc>)
 8007adc:	f004 f996 	bl	800be0c <HAL_GPIO_WritePin>
 8007ae0:	e00e      	b.n	8007b00 <WheelLeftGo+0xec>
	}
	else
	{	// backward
		m_MotorLeft.TurningDirection = WHEEL_TURNING_BACKWARD;
 8007ae2:	4b0a      	ldr	r3, [pc, #40]	; (8007b0c <WheelLeftGo+0xf8>)
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	705a      	strb	r2, [r3, #1]
		HAL_GPIO_WritePin(LIN1_GPIO_Port, LIN1_Pin, GPIO_PIN_RESET);
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007aee:	4808      	ldr	r0, [pc, #32]	; (8007b10 <WheelLeftGo+0xfc>)
 8007af0:	f004 f98c 	bl	800be0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIN1_GPIO_Port, LIN2_Pin, GPIO_PIN_SET);
 8007af4:	2201      	movs	r2, #1
 8007af6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007afa:	4805      	ldr	r0, [pc, #20]	; (8007b10 <WheelLeftGo+0xfc>)
 8007afc:	f004 f986 	bl	800be0c <HAL_GPIO_WritePin>
	}

	return STATE_OK;
 8007b00:	2301      	movs	r3, #1
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	200020e4 	.word	0x200020e4
 8007b10:	40020c00 	.word	0x40020c00

08007b14 <WheelLeftStop>:
//----------------------------------------------------------------------------------
void WheelLeftStop(void)		// used to stop the left motor
{
 8007b14:	b480      	push	{r7}
 8007b16:	af00      	add	r7, sp, #0
	m_MotorLeft.ucPWMPercentageTarget = 0;
 8007b18:	4b0c      	ldr	r3, [pc, #48]	; (8007b4c <WheelLeftStop+0x38>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	709a      	strb	r2, [r3, #2]
	m_MotorLeft.DirectionChangeWithoutStop = NO_ROTATION_CHANGE_DETECTED;
 8007b1e:	4b0b      	ldr	r3, [pc, #44]	; (8007b4c <WheelLeftStop+0x38>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	719a      	strb	r2, [r3, #6]
	m_MotorLeft.ucPWMPercentageTarget2 = 0;
 8007b24:	4b09      	ldr	r3, [pc, #36]	; (8007b4c <WheelLeftStop+0x38>)
 8007b26:	2200      	movs	r2, #0
 8007b28:	70da      	strb	r2, [r3, #3]
	m_MotorLeft.ui32DistanceToGoPulses = 0;	// avoid getting false callback
 8007b2a:	4b08      	ldr	r3, [pc, #32]	; (8007b4c <WheelLeftStop+0x38>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	60da      	str	r2, [r3, #12]
	m_MotorLeft.ucTimeToRunHMS = 0;			// avoid getting false callback
 8007b30:	4b06      	ldr	r3, [pc, #24]	; (8007b4c <WheelLeftStop+0x38>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	741a      	strb	r2, [r3, #16]
	m_MotorLeft.uiRequestedSpeedMMS  = 0;	// no speed control
 8007b36:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <WheelLeftStop+0x38>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	811a      	strh	r2, [r3, #8]
	//m_MotorLeft.TurningDirection = WHEEL_NOT_TURNING;
	m_MotorLeft.PWMSpeedStatus = PWM_SPEED_TRACKING;	// start the stopping process
 8007b3c:	4b03      	ldr	r3, [pc, #12]	; (8007b4c <WheelLeftStop+0x38>)
 8007b3e:	2201      	movs	r2, #1
 8007b40:	715a      	strb	r2, [r3, #5]
	//__HAL_TIM_SET_COMPARE(&htim9,TIM_CHANNEL_2,(uint16_t)m_MotorLeft.ucPWMPercentageTarget);		// set PWM CH2@Tim9 to ZERO  //(commented here and ramped inside the MotorTimer1KHZ)
	//HAL_GPIO_WritePin(RIN1_GPIO_Port, LIN1_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(RIN1_GPIO_Port, LIN2_Pin, GPIO_PIN_RESET);
	return;
 8007b42:	bf00      	nop
}
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	200020e4 	.word	0x200020e4

08007b50 <WheelStallRightCallback>:
#endif
	return;
}
//----------------------------------------------------------------------------------
__attribute__((weak)) void WheelStallRightCallback(void)		// called if the will stalled (driving signal is not zero but the turning speed is zero) for the right motor [__attribute__((weak)) ]
{
 8007b50:	b480      	push	{r7}
 8007b52:	af00      	add	r7, sp, #0
	// debug
#ifdef WHEEL_DEBUG_MODE
	sprintf((char *)m_ucDebugBuffer,"RIGHT Wheel Stalled !!!\r\n");
	DebugSendData(m_ucDebugBuffer,strlen((char *)m_ucDebugBuffer));
#endif
	return;
 8007b54:	bf00      	nop
}
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <WheelStallLeftCallback>:
//----------------------------------------------------------------------------------
__attribute__((weak)) void WheelStallLeftCallback(void)			// called if the will stalled (driving signal is not zero but the turning speed is zero) for the left motor [__attribute__((weak)) ]
{
 8007b5e:	b480      	push	{r7}
 8007b60:	af00      	add	r7, sp, #0
	// debug
#ifdef WHEEL_DEBUG_MODE
	sprintf((char *)m_ucDebugBuffer,"LEFT Wheel Stalled !!!\r\n");
	DebugSendData(m_ucDebugBuffer,strlen((char *)m_ucDebugBuffer));
#endif
	return;
 8007b62:	bf00      	nop
}
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <WheelInit>:


// SYSTEM
//==================================================================================================================== SYSTEM_START
void WheelInit(void)	// used to initialize the Wheel Module. Called from main.c file @ init section
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	af00      	add	r7, sp, #0
	//Start the Encoder timers
	if(HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL) != HAL_OK)	// Right
 8007b70:	213c      	movs	r1, #60	; 0x3c
 8007b72:	4821      	ldr	r0, [pc, #132]	; (8007bf8 <WheelInit+0x8c>)
 8007b74:	f008 fb1e 	bl	80101b4 <HAL_TIM_Encoder_Start>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d003      	beq.n	8007b86 <WheelInit+0x1a>
    {
	    Error_Handler2(ERROR_CODE_WHEEL_INIT_001);
 8007b7e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007b82:	f001 fec7 	bl	8009914 <Error_Handler2>
		//Error_Handler();
    }
	if(HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL) != HAL_OK) // Left
 8007b86:	213c      	movs	r1, #60	; 0x3c
 8007b88:	481c      	ldr	r0, [pc, #112]	; (8007bfc <WheelInit+0x90>)
 8007b8a:	f008 fb13 	bl	80101b4 <HAL_TIM_Encoder_Start>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d003      	beq.n	8007b9c <WheelInit+0x30>
	{
		Error_Handler2(ERROR_CODE_WHEEL_INIT_002);
 8007b94:	f240 102d 	movw	r0, #301	; 0x12d
 8007b98:	f001 febc 	bl	8009914 <Error_Handler2>
		//Error_Handler();
	}
	if(HAL_TIM_PWM_Start(&htim9,TIM_CHANNEL_1) != HAL_OK)
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	4818      	ldr	r0, [pc, #96]	; (8007c00 <WheelInit+0x94>)
 8007ba0:	f007 ff00 	bl	800f9a4 <HAL_TIM_PWM_Start>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <WheelInit+0x46>
	{
		Error_Handler2(ERROR_CODE_WHEEL_INIT_003);
 8007baa:	f44f 7097 	mov.w	r0, #302	; 0x12e
 8007bae:	f001 feb1 	bl	8009914 <Error_Handler2>
		//Error_Handler();
	}
	if(HAL_TIM_PWM_Start(&htim9,TIM_CHANNEL_2) != HAL_OK)
 8007bb2:	2104      	movs	r1, #4
 8007bb4:	4812      	ldr	r0, [pc, #72]	; (8007c00 <WheelInit+0x94>)
 8007bb6:	f007 fef5 	bl	800f9a4 <HAL_TIM_PWM_Start>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d003      	beq.n	8007bc8 <WheelInit+0x5c>
	{
		Error_Handler2(ERROR_CODE_WHEEL_INIT_004);
 8007bc0:	f240 102f 	movw	r0, #303	; 0x12f
 8007bc4:	f001 fea6 	bl	8009914 <Error_Handler2>
		//Error_Handler();
	}

	// timer 1KHZ
	m_ui16TimerDivider = 0;
 8007bc8:	4b0e      	ldr	r3, [pc, #56]	; (8007c04 <WheelInit+0x98>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	801a      	strh	r2, [r3, #0]

	// encoder setup
	m_EncoderRight.EncoderSide = SIDE_RIGHT;
 8007bce:	4b0e      	ldr	r3, [pc, #56]	; (8007c08 <WheelInit+0x9c>)
 8007bd0:	2202      	movs	r2, #2
 8007bd2:	701a      	strb	r2, [r3, #0]
	m_EncoderLeft.EncoderSide = SIDE_LEFT;
 8007bd4:	4b0d      	ldr	r3, [pc, #52]	; (8007c0c <WheelInit+0xa0>)
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	701a      	strb	r2, [r3, #0]

	// motors
	m_MotorRight.MotorSide = SIDE_RIGHT;
 8007bda:	4b0d      	ldr	r3, [pc, #52]	; (8007c10 <WheelInit+0xa4>)
 8007bdc:	2202      	movs	r2, #2
 8007bde:	701a      	strb	r2, [r3, #0]
	m_MotorLeft.MotorSide = SIDE_LEFT;
 8007be0:	4b0c      	ldr	r3, [pc, #48]	; (8007c14 <WheelInit+0xa8>)
 8007be2:	2201      	movs	r2, #1
 8007be4:	701a      	strb	r2, [r3, #0]
	m_MotorRight.ucStallMaxCountValue = STALL_MAX_COUNT_VALUE;
 8007be6:	4b0a      	ldr	r3, [pc, #40]	; (8007c10 <WheelInit+0xa4>)
 8007be8:	2205      	movs	r2, #5
 8007bea:	749a      	strb	r2, [r3, #18]
	m_MotorLeft.ucStallMaxCountValue = STALL_MAX_COUNT_VALUE;
 8007bec:	4b09      	ldr	r3, [pc, #36]	; (8007c14 <WheelInit+0xa8>)
 8007bee:	2205      	movs	r2, #5
 8007bf0:	749a      	strb	r2, [r3, #18]





	return;
 8007bf2:	bf00      	nop
}
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	20002384 	.word	0x20002384
 8007bfc:	200023cc 	.word	0x200023cc
 8007c00:	200024a4 	.word	0x200024a4
 8007c04:	2000209a 	.word	0x2000209a
 8007c08:	2000209c 	.word	0x2000209c
 8007c0c:	200020b4 	.word	0x200020b4
 8007c10:	200020cc 	.word	0x200020cc
 8007c14:	200020e4 	.word	0x200020e4

08007c18 <WheelMainLoop>:
//----------------------------------------------------------------------------------
void WheelMainLoop(void)	// loop function of the Wheel Module. Called from the main.c file @ main loop section
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	af00      	add	r7, sp, #0
	// skip real time
	if(m_uiWheelSkipRealTime)
 8007c1c:	4b09      	ldr	r3, [pc, #36]	; (8007c44 <WheelMainLoop+0x2c>)
 8007c1e:	881b      	ldrh	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d006      	beq.n	8007c32 <WheelMainLoop+0x1a>
	{
		m_uiWheelSkipRealTime --;
 8007c24:	4b07      	ldr	r3, [pc, #28]	; (8007c44 <WheelMainLoop+0x2c>)
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	4b05      	ldr	r3, [pc, #20]	; (8007c44 <WheelMainLoop+0x2c>)
 8007c2e:	801a      	strh	r2, [r3, #0]
		return;
 8007c30:	e006      	b.n	8007c40 <WheelMainLoop+0x28>
	}
	m_uiWheelSkipRealTime = WHEEL_SKIP_REAL_TIME;
 8007c32:	4b04      	ldr	r3, [pc, #16]	; (8007c44 <WheelMainLoop+0x2c>)
 8007c34:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007c38:	801a      	strh	r2, [r3, #0]

	// -------------------------------------------------- ENCODER END


	// -------------------------------------------------- MOTOR START
	MotorMainLoop();		// motor thread activities
 8007c3a:	f000 fd5b 	bl	80086f4 <MotorMainLoop>
	*/
#endif



	return;
 8007c3e:	bf00      	nop
}
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	20002098 	.word	0x20002098

08007c48 <WheelTimer1KHZISR>:
//----------------------------------------------------------------------------------
void WheelTimer1KHZISR(void)	// 1KHZ timer function called from System ISR from stm32f4xx_it.c file @ SysTick Function (!!! keep as short as possible !!!)
{	// max 2.2uS
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	af00      	add	r7, sp, #0
	if(m_ui16TimerDivider >= TIMER_DIVIDER_MAX) 	m_ui16TimerDivider = 0;
 8007c4c:	4b0a      	ldr	r3, [pc, #40]	; (8007c78 <WheelTimer1KHZISR+0x30>)
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	2b63      	cmp	r3, #99	; 0x63
 8007c54:	d902      	bls.n	8007c5c <WheelTimer1KHZISR+0x14>
 8007c56:	4b08      	ldr	r3, [pc, #32]	; (8007c78 <WheelTimer1KHZISR+0x30>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	801a      	strh	r2, [r3, #0]
	m_ui16TimerDivider ++;
 8007c5c:	4b06      	ldr	r3, [pc, #24]	; (8007c78 <WheelTimer1KHZISR+0x30>)
 8007c5e:	881b      	ldrh	r3, [r3, #0]
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	3301      	adds	r3, #1
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	4b04      	ldr	r3, [pc, #16]	; (8007c78 <WheelTimer1KHZISR+0x30>)
 8007c68:	801a      	strh	r2, [r3, #0]
	//		@ 30 => 400ns ... 650ns		(Calculate the Left  Speed in mm/sec and mark the update status variable) (uiSpeedMMS, UpdateStatus)
	//-----------------------------
#ifdef WHEEL_DEBUG_MODE
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	// debug on PC13 HIGH
#endif
	EncoderTimer1KHZ();		// encoder timer
 8007c6a:	f000 f807 	bl	8007c7c <EncoderTimer1KHZ>
	//  @ 25  =>  Test the RIGHT Motor Stall condition (it must always follow the Timer Encoder Calculate Right Speed (in this case is 20)) // max 700nS, typically 500nS
	//  @ 35  =>  Test the LEFT  Motor Stall condition (it must always follow the Timer Encoder Calculate Left  Speed (in this case is 30)) // max 700nS, typically 500nS
	//  @ 37  =>  RIGHT and LEFT Wheel Timeout check and trigger Callback function at timeout // max 600nS, typically 450nS
	//  @ 39  =>  RIGHT and LEFT Wheel Distance to Go // max 1.8uS, typically 430nS
	//  @ 41  =>  MMsSpeed to PWM Feedback loop	//max 1.3uS, typically 500nS
	MotorTimer1KHZ();	// motor loop control timer
 8007c6e:	f000 f9a7 	bl	8007fc0 <MotorTimer1KHZ>
	// -------------------------------------------------- MOTOR END


	return;
 8007c72:	bf00      	nop
}
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	2000209a 	.word	0x2000209a

08007c7c <EncoderTimer1KHZ>:


// STATIC (INTERN) implementation
//==================================================================================================================== STATIC_START
static void EncoderTimer1KHZ(void)		// used to handle the encoder related real time
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
	if(m_ui16TimerDivider == 10)
 8007c82:	4b80      	ldr	r3, [pc, #512]	; (8007e84 <EncoderTimer1KHZ+0x208>)
 8007c84:	881b      	ldrh	r3, [r3, #0]
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	2b0a      	cmp	r3, #10
 8007c8a:	f040 8089 	bne.w	8007da0 <EncoderTimer1KHZ+0x124>
	{	// @ 10 read the Right Encoder (interrupt time = 800ns)
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	// debug on PC13 HIGH

		m_EncoderRight.uiNewEncoderRead = __HAL_TIM_GET_COUNTER(&htim3);	// read the new counter value
 8007c8e:	4b7e      	ldr	r3, [pc, #504]	; (8007e88 <EncoderTimer1KHZ+0x20c>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	4b7d      	ldr	r3, [pc, #500]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007c98:	809a      	strh	r2, [r3, #4]

		// Right Wheel turning FORWARD  => decrements (1431 pulses / complete rotation
		// Right Wheel turning BACKWARD => increments (1431 pulses / complete rotation
		if( (m_EncoderRight.uiNewEncoderRead > m_EncoderRight.uiOldEncoderRead) )
 8007c9a:	4b7c      	ldr	r3, [pc, #496]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007c9c:	889b      	ldrh	r3, [r3, #4]
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	4b7a      	ldr	r3, [pc, #488]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007ca2:	885b      	ldrh	r3, [r3, #2]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d93a      	bls.n	8007d20 <EncoderTimer1KHZ+0xa4>
		{	// 2 situations possible :
			// turning backward if (uiNewEncoderRead - uiOldEncoderRead) < 32000. Ex: (old)61234 --> (new)63456 (increment)
			if( (m_EncoderRight.uiNewEncoderRead - m_EncoderRight.uiOldEncoderRead) < 32000 )
 8007caa:	4b78      	ldr	r3, [pc, #480]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007cac:	889b      	ldrh	r3, [r3, #4]
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	4b76      	ldr	r3, [pc, #472]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007cb4:	885b      	ldrh	r3, [r3, #2]
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8007cbe:	da16      	bge.n	8007cee <EncoderTimer1KHZ+0x72>
			{	// turning backward
				m_EncoderRight.uiPulseDiference = (m_EncoderRight.uiNewEncoderRead - m_EncoderRight.uiOldEncoderRead);
 8007cc0:	4b72      	ldr	r3, [pc, #456]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007cc2:	889b      	ldrh	r3, [r3, #4]
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	4b71      	ldr	r3, [pc, #452]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007cc8:	885b      	ldrh	r3, [r3, #2]
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	4b6e      	ldr	r3, [pc, #440]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007cd2:	80da      	strh	r2, [r3, #6]
				m_EncoderRight.ui32TotalBackwardPulses += (uint32_t)m_EncoderRight.uiPulseDiference;
 8007cd4:	4b6d      	ldr	r3, [pc, #436]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007cd6:	88db      	ldrh	r3, [r3, #6]
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	461a      	mov	r2, r3
 8007cdc:	4b6b      	ldr	r3, [pc, #428]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007cde:	695b      	ldr	r3, [r3, #20]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	4a6a      	ldr	r2, [pc, #424]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007ce4:	6153      	str	r3, [r2, #20]
				m_EncoderRight.TurningDirection = WHEEL_TURNING_BACKWARD;
 8007ce6:	4b69      	ldr	r3, [pc, #420]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007ce8:	2202      	movs	r2, #2
 8007cea:	721a      	strb	r2, [r3, #8]
 8007cec:	e052      	b.n	8007d94 <EncoderTimer1KHZ+0x118>
			}
			// turning forward if  (uiNewEncoderRead - uiOldEncoderRead) > 32000. Ex: (old)01000 --> (new)65300 (apparent increment in reality is decrement)
			else
			{	// turning forward
				m_EncoderRight.uiPulseDiference = ((65535 - m_EncoderRight.uiNewEncoderRead) + m_EncoderRight.uiOldEncoderRead);
 8007cee:	4b67      	ldr	r3, [pc, #412]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007cf0:	885b      	ldrh	r3, [r3, #2]
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	4b65      	ldr	r3, [pc, #404]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007cf6:	889b      	ldrh	r3, [r3, #4]
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	4b62      	ldr	r3, [pc, #392]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d04:	80da      	strh	r2, [r3, #6]
				m_EncoderRight.ui32TotalForwardPulses += (uint32_t)m_EncoderRight.uiPulseDiference;
 8007d06:	4b61      	ldr	r3, [pc, #388]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d08:	88db      	ldrh	r3, [r3, #6]
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	4b5f      	ldr	r3, [pc, #380]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	4413      	add	r3, r2
 8007d14:	4a5d      	ldr	r2, [pc, #372]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d16:	6113      	str	r3, [r2, #16]
				m_EncoderRight.TurningDirection = WHEEL_TURNING_FORWARD;
 8007d18:	4b5c      	ldr	r3, [pc, #368]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	721a      	strb	r2, [r3, #8]
 8007d1e:	e039      	b.n	8007d94 <EncoderTimer1KHZ+0x118>
			}
		}
		else
		{	// 2 situations possible :
			// turning backward if (uiOldEncoderRead - uiNewEncoderRead) < 32000. Ex: (old)63456 --> (new)61234 (decrement)
			if( (m_EncoderRight.uiOldEncoderRead - m_EncoderRight.uiNewEncoderRead) < 32000 )
 8007d20:	4b5a      	ldr	r3, [pc, #360]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d22:	885b      	ldrh	r3, [r3, #2]
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	461a      	mov	r2, r3
 8007d28:	4b58      	ldr	r3, [pc, #352]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d2a:	889b      	ldrh	r3, [r3, #4]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8007d34:	da16      	bge.n	8007d64 <EncoderTimer1KHZ+0xe8>
			{	// turning backward
				m_EncoderRight.uiPulseDiference = (m_EncoderRight.uiOldEncoderRead - m_EncoderRight.uiNewEncoderRead);
 8007d36:	4b55      	ldr	r3, [pc, #340]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d38:	885b      	ldrh	r3, [r3, #2]
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	4b53      	ldr	r3, [pc, #332]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d3e:	889b      	ldrh	r3, [r3, #4]
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	4b51      	ldr	r3, [pc, #324]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d48:	80da      	strh	r2, [r3, #6]
				m_EncoderRight.ui32TotalForwardPulses += (uint32_t)m_EncoderRight.uiPulseDiference;
 8007d4a:	4b50      	ldr	r3, [pc, #320]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d4c:	88db      	ldrh	r3, [r3, #6]
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	461a      	mov	r2, r3
 8007d52:	4b4e      	ldr	r3, [pc, #312]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	4413      	add	r3, r2
 8007d58:	4a4c      	ldr	r2, [pc, #304]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d5a:	6113      	str	r3, [r2, #16]
				m_EncoderRight.TurningDirection = WHEEL_TURNING_FORWARD;
 8007d5c:	4b4b      	ldr	r3, [pc, #300]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d5e:	2201      	movs	r2, #1
 8007d60:	721a      	strb	r2, [r3, #8]
 8007d62:	e017      	b.n	8007d94 <EncoderTimer1KHZ+0x118>
			}
			// turning forward if  (uiOldEncoderRead - uiNewEncoderRead) > 32000. Ex: (old)65300 --> (new)01000 (apparent decrement in reality is increment)
			else
			{	// turning forward
				m_EncoderRight.uiPulseDiference = ((65535 - m_EncoderRight.uiOldEncoderRead) + m_EncoderRight.uiNewEncoderRead);
 8007d64:	4b49      	ldr	r3, [pc, #292]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d66:	889b      	ldrh	r3, [r3, #4]
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	4b48      	ldr	r3, [pc, #288]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d6c:	885b      	ldrh	r3, [r3, #2]
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	3b01      	subs	r3, #1
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	4b44      	ldr	r3, [pc, #272]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d7a:	80da      	strh	r2, [r3, #6]
				m_EncoderRight.ui32TotalBackwardPulses += (uint32_t)m_EncoderRight.uiPulseDiference;
 8007d7c:	4b43      	ldr	r3, [pc, #268]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d7e:	88db      	ldrh	r3, [r3, #6]
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	461a      	mov	r2, r3
 8007d84:	4b41      	ldr	r3, [pc, #260]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	4413      	add	r3, r2
 8007d8a:	4a40      	ldr	r2, [pc, #256]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d8c:	6153      	str	r3, [r2, #20]
				m_EncoderRight.TurningDirection = WHEEL_TURNING_BACKWARD;
 8007d8e:	4b3f      	ldr	r3, [pc, #252]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d90:	2202      	movs	r2, #2
 8007d92:	721a      	strb	r2, [r3, #8]
			}
		}
		m_EncoderRight.uiOldEncoderRead = m_EncoderRight.uiNewEncoderRead;
 8007d94:	4b3d      	ldr	r3, [pc, #244]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d96:	889b      	ldrh	r3, [r3, #4]
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	4b3c      	ldr	r3, [pc, #240]	; (8007e8c <EncoderTimer1KHZ+0x210>)
 8007d9c:	805a      	strh	r2, [r3, #2]
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	// debug on PC13 LOW
		return;
 8007d9e:	e0fe      	b.n	8007f9e <EncoderTimer1KHZ+0x322>
	}

	if(m_ui16TimerDivider == 11)
 8007da0:	4b38      	ldr	r3, [pc, #224]	; (8007e84 <EncoderTimer1KHZ+0x208>)
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	2b0b      	cmp	r3, #11
 8007da8:	f040 8094 	bne.w	8007ed4 <EncoderTimer1KHZ+0x258>
	{	// @ 11 read the Left Encoder (interrupt time = 800ns)

		m_EncoderLeft.uiNewEncoderRead = __HAL_TIM_GET_COUNTER(&htim4);	// read the new counter value
 8007dac:	4b38      	ldr	r3, [pc, #224]	; (8007e90 <EncoderTimer1KHZ+0x214>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	4b37      	ldr	r3, [pc, #220]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007db6:	809a      	strh	r2, [r3, #4]

		/* Left Wheel turning BACKWARD => decrements (1431 pulses / complete rotation */
		/* Left Wheel turning FORWARD  => increments (1431 pulses / complete rotation */
		if( (m_EncoderLeft.uiNewEncoderRead > m_EncoderLeft.uiOldEncoderRead) )
 8007db8:	4b36      	ldr	r3, [pc, #216]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007dba:	889b      	ldrh	r3, [r3, #4]
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	4b35      	ldr	r3, [pc, #212]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007dc0:	885b      	ldrh	r3, [r3, #2]
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d93a      	bls.n	8007e3e <EncoderTimer1KHZ+0x1c2>
		{	// 2 situations possible :
			// turning backward if (uiNewEncoderRead - uiOldEncoderRead) < 32000. Ex: (old)61234 --> (new)63456 (increment)
			if( (m_EncoderLeft.uiNewEncoderRead - m_EncoderLeft.uiOldEncoderRead) < 32000 )
 8007dc8:	4b32      	ldr	r3, [pc, #200]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007dca:	889b      	ldrh	r3, [r3, #4]
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	461a      	mov	r2, r3
 8007dd0:	4b30      	ldr	r3, [pc, #192]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007dd2:	885b      	ldrh	r3, [r3, #2]
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8007ddc:	da16      	bge.n	8007e0c <EncoderTimer1KHZ+0x190>
			{	// turning forward
				m_EncoderLeft.uiPulseDiference = (m_EncoderLeft.uiNewEncoderRead - m_EncoderLeft.uiOldEncoderRead);
 8007dde:	4b2d      	ldr	r3, [pc, #180]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007de0:	889b      	ldrh	r3, [r3, #4]
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	4b2b      	ldr	r3, [pc, #172]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007de6:	885b      	ldrh	r3, [r3, #2]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	4b29      	ldr	r3, [pc, #164]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007df0:	80da      	strh	r2, [r3, #6]
				m_EncoderLeft.ui32TotalForwardPulses += (uint32_t)m_EncoderLeft.uiPulseDiference;
 8007df2:	4b28      	ldr	r3, [pc, #160]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007df4:	88db      	ldrh	r3, [r3, #6]
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	461a      	mov	r2, r3
 8007dfa:	4b26      	ldr	r3, [pc, #152]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	4413      	add	r3, r2
 8007e00:	4a24      	ldr	r2, [pc, #144]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007e02:	6113      	str	r3, [r2, #16]
				m_EncoderLeft.TurningDirection = WHEEL_TURNING_FORWARD;
 8007e04:	4b23      	ldr	r3, [pc, #140]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007e06:	2201      	movs	r2, #1
 8007e08:	721a      	strb	r2, [r3, #8]
 8007e0a:	e05d      	b.n	8007ec8 <EncoderTimer1KHZ+0x24c>
			}
			// turning forward if  (uiNewEncoderRead - uiOldEncoderRead) > 32000. Ex: (old)01000 --> (new)65300 (apparent increment in reality is decrement)
			else
			{	// turning backward
				m_EncoderLeft.uiPulseDiference = ((65535 - m_EncoderLeft.uiNewEncoderRead) + m_EncoderLeft.uiOldEncoderRead);
 8007e0c:	4b21      	ldr	r3, [pc, #132]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007e0e:	885b      	ldrh	r3, [r3, #2]
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	4b20      	ldr	r3, [pc, #128]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007e14:	889b      	ldrh	r3, [r3, #4]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	4b1c      	ldr	r3, [pc, #112]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007e22:	80da      	strh	r2, [r3, #6]
				m_EncoderLeft.ui32TotalBackwardPulses += (uint32_t)m_EncoderLeft.uiPulseDiference;
 8007e24:	4b1b      	ldr	r3, [pc, #108]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007e26:	88db      	ldrh	r3, [r3, #6]
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	4b19      	ldr	r3, [pc, #100]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007e2e:	695b      	ldr	r3, [r3, #20]
 8007e30:	4413      	add	r3, r2
 8007e32:	4a18      	ldr	r2, [pc, #96]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007e34:	6153      	str	r3, [r2, #20]
				m_EncoderLeft.TurningDirection = WHEEL_TURNING_BACKWARD;
 8007e36:	4b17      	ldr	r3, [pc, #92]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007e38:	2202      	movs	r2, #2
 8007e3a:	721a      	strb	r2, [r3, #8]
 8007e3c:	e044      	b.n	8007ec8 <EncoderTimer1KHZ+0x24c>
			}
		}
		else
		{	// 2 situations possible :
			// turning backward if (uiOldEncoderRead - uiNewEncoderRead) < 32000. Ex: (old)63456 --> (new)61234 (decrement)
			if( (m_EncoderLeft.uiOldEncoderRead- m_EncoderLeft.uiNewEncoderRead ) < 32000 )
 8007e3e:	4b15      	ldr	r3, [pc, #84]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007e40:	885b      	ldrh	r3, [r3, #2]
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	461a      	mov	r2, r3
 8007e46:	4b13      	ldr	r3, [pc, #76]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007e48:	889b      	ldrh	r3, [r3, #4]
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8007e52:	da21      	bge.n	8007e98 <EncoderTimer1KHZ+0x21c>
			{	// turning forward
				m_EncoderLeft.uiPulseDiference = (m_EncoderLeft.uiOldEncoderRead - m_EncoderLeft.uiNewEncoderRead);
 8007e54:	4b0f      	ldr	r3, [pc, #60]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007e56:	885b      	ldrh	r3, [r3, #2]
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	4b0e      	ldr	r3, [pc, #56]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007e5c:	889b      	ldrh	r3, [r3, #4]
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	4b0b      	ldr	r3, [pc, #44]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007e66:	80da      	strh	r2, [r3, #6]
				m_EncoderLeft.ui32TotalBackwardPulses += (uint32_t)m_EncoderLeft.uiPulseDiference;
 8007e68:	4b0a      	ldr	r3, [pc, #40]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007e6a:	88db      	ldrh	r3, [r3, #6]
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	461a      	mov	r2, r3
 8007e70:	4b08      	ldr	r3, [pc, #32]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007e72:	695b      	ldr	r3, [r3, #20]
 8007e74:	4413      	add	r3, r2
 8007e76:	4a07      	ldr	r2, [pc, #28]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007e78:	6153      	str	r3, [r2, #20]
				m_EncoderLeft.TurningDirection = WHEEL_TURNING_BACKWARD;
 8007e7a:	4b06      	ldr	r3, [pc, #24]	; (8007e94 <EncoderTimer1KHZ+0x218>)
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	721a      	strb	r2, [r3, #8]
 8007e80:	e022      	b.n	8007ec8 <EncoderTimer1KHZ+0x24c>
 8007e82:	bf00      	nop
 8007e84:	2000209a 	.word	0x2000209a
 8007e88:	20002384 	.word	0x20002384
 8007e8c:	2000209c 	.word	0x2000209c
 8007e90:	200023cc 	.word	0x200023cc
 8007e94:	200020b4 	.word	0x200020b4
			}
			// turning forward if  (uiNewEncoderRead - uiOldEncoderRead) > 32000. Ex: (old)65300 --> (new)01000 (apparent decrement in reality is increment)
			else
			{	// turning backward
				m_EncoderLeft.uiPulseDiference = ((65535 - m_EncoderLeft.uiOldEncoderRead) + m_EncoderLeft.uiNewEncoderRead);
 8007e98:	4b43      	ldr	r3, [pc, #268]	; (8007fa8 <EncoderTimer1KHZ+0x32c>)
 8007e9a:	889b      	ldrh	r3, [r3, #4]
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	4b42      	ldr	r3, [pc, #264]	; (8007fa8 <EncoderTimer1KHZ+0x32c>)
 8007ea0:	885b      	ldrh	r3, [r3, #2]
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	4b3e      	ldr	r3, [pc, #248]	; (8007fa8 <EncoderTimer1KHZ+0x32c>)
 8007eae:	80da      	strh	r2, [r3, #6]
				m_EncoderLeft.ui32TotalForwardPulses += (uint32_t)m_EncoderLeft.uiPulseDiference;
 8007eb0:	4b3d      	ldr	r3, [pc, #244]	; (8007fa8 <EncoderTimer1KHZ+0x32c>)
 8007eb2:	88db      	ldrh	r3, [r3, #6]
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	4b3b      	ldr	r3, [pc, #236]	; (8007fa8 <EncoderTimer1KHZ+0x32c>)
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	4a3a      	ldr	r2, [pc, #232]	; (8007fa8 <EncoderTimer1KHZ+0x32c>)
 8007ec0:	6113      	str	r3, [r2, #16]
				m_EncoderLeft.TurningDirection = WHEEL_TURNING_FORWARD;
 8007ec2:	4b39      	ldr	r3, [pc, #228]	; (8007fa8 <EncoderTimer1KHZ+0x32c>)
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	721a      	strb	r2, [r3, #8]
			}
		}
		m_EncoderLeft.uiOldEncoderRead = m_EncoderLeft.uiNewEncoderRead;
 8007ec8:	4b37      	ldr	r3, [pc, #220]	; (8007fa8 <EncoderTimer1KHZ+0x32c>)
 8007eca:	889b      	ldrh	r3, [r3, #4]
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	4b36      	ldr	r3, [pc, #216]	; (8007fa8 <EncoderTimer1KHZ+0x32c>)
 8007ed0:	805a      	strh	r2, [r3, #2]
		return;
 8007ed2:	e064      	b.n	8007f9e <EncoderTimer1KHZ+0x322>
	}

	if(m_ui16TimerDivider == 20)
 8007ed4:	4b35      	ldr	r3, [pc, #212]	; (8007fac <EncoderTimer1KHZ+0x330>)
 8007ed6:	881b      	ldrh	r3, [r3, #0]
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	2b14      	cmp	r3, #20
 8007edc:	d12c      	bne.n	8007f38 <EncoderTimer1KHZ+0x2bc>

		uint32_t ui32Temp;

		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH

		if(m_EncoderRight.uiPulseDiference == 0)
 8007ede:	4b34      	ldr	r3, [pc, #208]	; (8007fb0 <EncoderTimer1KHZ+0x334>)
 8007ee0:	88db      	ldrh	r3, [r3, #6]
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d109      	bne.n	8007efc <EncoderTimer1KHZ+0x280>
		{
			m_EncoderRight.uiSpeedMMS = 0;	// speed in mm/sec
 8007ee8:	4b31      	ldr	r3, [pc, #196]	; (8007fb0 <EncoderTimer1KHZ+0x334>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	815a      	strh	r2, [r3, #10]
			m_EncoderRight.TurningDirection = WHEEL_NOT_TURNING;
 8007eee:	4b30      	ldr	r3, [pc, #192]	; (8007fb0 <EncoderTimer1KHZ+0x334>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	721a      	strb	r2, [r3, #8]
			m_EncoderRight.UpdateStatus = NEW_ENCODER_VALUE;
 8007ef4:	4b2e      	ldr	r3, [pc, #184]	; (8007fb0 <EncoderTimer1KHZ+0x334>)
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	731a      	strb	r2, [r3, #12]
			//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
			return;
 8007efa:	e050      	b.n	8007f9e <EncoderTimer1KHZ+0x322>
		}


		ui32Temp  = (uint32_t)(1000 * WHEEL_LENGTH_MM);
 8007efc:	4b2d      	ldr	r3, [pc, #180]	; (8007fb4 <EncoderTimer1KHZ+0x338>)
 8007efe:	603b      	str	r3, [r7, #0]
		ui32Temp *= (uint32_t)m_EncoderRight.uiPulseDiference;
 8007f00:	4b2b      	ldr	r3, [pc, #172]	; (8007fb0 <EncoderTimer1KHZ+0x334>)
 8007f02:	88db      	ldrh	r3, [r3, #6]
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	461a      	mov	r2, r3
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	fb02 f303 	mul.w	r3, r2, r3
 8007f0e:	603b      	str	r3, [r7, #0]
		ui32Temp /= (uint32_t)TIMER_DIVIDER_MAX;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	4a29      	ldr	r2, [pc, #164]	; (8007fb8 <EncoderTimer1KHZ+0x33c>)
 8007f14:	fba2 2303 	umull	r2, r3, r2, r3
 8007f18:	095b      	lsrs	r3, r3, #5
 8007f1a:	603b      	str	r3, [r7, #0]
		ui32Temp /= (uint32_t)ENCODER_PULSES_PER_ROTATION_RIGHT_WHEEL;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	4a27      	ldr	r2, [pc, #156]	; (8007fbc <EncoderTimer1KHZ+0x340>)
 8007f20:	fba2 2303 	umull	r2, r3, r2, r3
 8007f24:	0a9b      	lsrs	r3, r3, #10
 8007f26:	603b      	str	r3, [r7, #0]

		m_EncoderRight.uiSpeedMMS = (uint16_t)ui32Temp;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	4b20      	ldr	r3, [pc, #128]	; (8007fb0 <EncoderTimer1KHZ+0x334>)
 8007f2e:	815a      	strh	r2, [r3, #10]
		m_EncoderRight.UpdateStatus = NEW_ENCODER_VALUE;		// new value available and can be read from the main loop
 8007f30:	4b1f      	ldr	r3, [pc, #124]	; (8007fb0 <EncoderTimer1KHZ+0x334>)
 8007f32:	2202      	movs	r2, #2
 8007f34:	731a      	strb	r2, [r3, #12]

		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  //	debug on PC13 LOW
		return;
 8007f36:	e032      	b.n	8007f9e <EncoderTimer1KHZ+0x322>
	}

	if(m_ui16TimerDivider == 30)
 8007f38:	4b1c      	ldr	r3, [pc, #112]	; (8007fac <EncoderTimer1KHZ+0x330>)
 8007f3a:	881b      	ldrh	r3, [r3, #0]
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	2b1e      	cmp	r3, #30
 8007f40:	d12c      	bne.n	8007f9c <EncoderTimer1KHZ+0x320>

		uint32_t ui32Temp;

		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH

		if(m_EncoderLeft.uiPulseDiference == 0)
 8007f42:	4b19      	ldr	r3, [pc, #100]	; (8007fa8 <EncoderTimer1KHZ+0x32c>)
 8007f44:	88db      	ldrh	r3, [r3, #6]
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d109      	bne.n	8007f60 <EncoderTimer1KHZ+0x2e4>
		{
			m_EncoderLeft.uiSpeedMMS = 0;	// speed in mm/sec
 8007f4c:	4b16      	ldr	r3, [pc, #88]	; (8007fa8 <EncoderTimer1KHZ+0x32c>)
 8007f4e:	2200      	movs	r2, #0
 8007f50:	815a      	strh	r2, [r3, #10]
			m_EncoderLeft.TurningDirection = WHEEL_NOT_TURNING;
 8007f52:	4b15      	ldr	r3, [pc, #84]	; (8007fa8 <EncoderTimer1KHZ+0x32c>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	721a      	strb	r2, [r3, #8]
			m_EncoderLeft.UpdateStatus = NEW_ENCODER_VALUE;
 8007f58:	4b13      	ldr	r3, [pc, #76]	; (8007fa8 <EncoderTimer1KHZ+0x32c>)
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	731a      	strb	r2, [r3, #12]
			//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
			return;
 8007f5e:	e01e      	b.n	8007f9e <EncoderTimer1KHZ+0x322>
		}


		ui32Temp  = (uint32_t)(1000 * WHEEL_LENGTH_MM);
 8007f60:	4b14      	ldr	r3, [pc, #80]	; (8007fb4 <EncoderTimer1KHZ+0x338>)
 8007f62:	607b      	str	r3, [r7, #4]
		ui32Temp *= (uint32_t)m_EncoderLeft.uiPulseDiference;
 8007f64:	4b10      	ldr	r3, [pc, #64]	; (8007fa8 <EncoderTimer1KHZ+0x32c>)
 8007f66:	88db      	ldrh	r3, [r3, #6]
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	fb02 f303 	mul.w	r3, r2, r3
 8007f72:	607b      	str	r3, [r7, #4]
		ui32Temp /= (uint32_t)TIMER_DIVIDER_MAX;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a10      	ldr	r2, [pc, #64]	; (8007fb8 <EncoderTimer1KHZ+0x33c>)
 8007f78:	fba2 2303 	umull	r2, r3, r2, r3
 8007f7c:	095b      	lsrs	r3, r3, #5
 8007f7e:	607b      	str	r3, [r7, #4]
		ui32Temp /= (uint32_t)ENCODER_PULSES_PER_ROTATION_RIGHT_WHEEL;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a0e      	ldr	r2, [pc, #56]	; (8007fbc <EncoderTimer1KHZ+0x340>)
 8007f84:	fba2 2303 	umull	r2, r3, r2, r3
 8007f88:	0a9b      	lsrs	r3, r3, #10
 8007f8a:	607b      	str	r3, [r7, #4]

		m_EncoderLeft.uiSpeedMMS = (uint16_t)ui32Temp;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	4b05      	ldr	r3, [pc, #20]	; (8007fa8 <EncoderTimer1KHZ+0x32c>)
 8007f92:	815a      	strh	r2, [r3, #10]
		m_EncoderLeft.UpdateStatus = NEW_ENCODER_VALUE;		// new value available and can be read from the main loop
 8007f94:	4b04      	ldr	r3, [pc, #16]	; (8007fa8 <EncoderTimer1KHZ+0x32c>)
 8007f96:	2202      	movs	r2, #2
 8007f98:	731a      	strb	r2, [r3, #12]

		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  //	debug on PC13 LOW
		return;
 8007f9a:	e000      	b.n	8007f9e <EncoderTimer1KHZ+0x322>
	}

	return;
 8007f9c:	bf00      	nop
}
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr
 8007fa8:	200020b4 	.word	0x200020b4
 8007fac:	2000209a 	.word	0x2000209a
 8007fb0:	2000209c 	.word	0x2000209c
 8007fb4:	0001eadc 	.word	0x0001eadc
 8007fb8:	51eb851f 	.word	0x51eb851f
 8007fbc:	b7307b15 	.word	0xb7307b15

08007fc0 <MotorTimer1KHZ>:
//----------------------------------------------------------------------------------
static void MotorTimer1KHZ(void)	// used to handle the motors related real time
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	af00      	add	r7, sp, #0
	// RAMP the PWM Speed UP or DOWN
	if( (m_ui16TimerDivider == 15) )		// Ramp the PWM for the RIGHT Motor
 8007fc4:	4ba3      	ldr	r3, [pc, #652]	; (8008254 <MotorTimer1KHZ+0x294>)
 8007fc6:	881b      	ldrh	r3, [r3, #0]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	2b0f      	cmp	r3, #15
 8007fcc:	d164      	bne.n	8008098 <MotorTimer1KHZ+0xd8>
	{		// max 2.2uS, typically 400nS
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH

		if(m_MotorRight.PWMSpeedStatus != PWM_SPEED_TRACKING)
 8007fce:	4ba2      	ldr	r3, [pc, #648]	; (8008258 <MotorTimer1KHZ+0x298>)
 8007fd0:	795b      	ldrb	r3, [r3, #5]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	f040 8305 	bne.w	80085e2 <MotorTimer1KHZ+0x622>
			//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  //	debug on PC13 LOW
			return;		// only important during the speed tracking process
		}

		// PWM Speed tracking in progress
		MotorPWMSpeedTracking(&m_MotorRight);
 8007fd8:	489f      	ldr	r0, [pc, #636]	; (8008258 <MotorTimer1KHZ+0x298>)
 8007fda:	f000 fb25 	bl	8008628 <MotorPWMSpeedTracking>
		__HAL_TIM_SET_COMPARE(&htim9,TIM_CHANNEL_1,(uint16_t)m_MotorRight.ucPWMRampCounter);		// set the new PWM value and getting closer to the PWM Target (ucPWMPercentageTarget)
 8007fde:	4b9e      	ldr	r3, [pc, #632]	; (8008258 <MotorTimer1KHZ+0x298>)
 8007fe0:	791b      	ldrb	r3, [r3, #4]
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	4b9d      	ldr	r3, [pc, #628]	; (800825c <MotorTimer1KHZ+0x29c>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	635a      	str	r2, [r3, #52]	; 0x34
		if(m_MotorRight.ucPWMRampCounter == m_MotorRight.ucPWMPercentageTarget)		m_MotorRight.PWMSpeedStatus = PWM_SPEED_REACHED;		// also the Target PWM Speed was reached
 8007fea:	4b9b      	ldr	r3, [pc, #620]	; (8008258 <MotorTimer1KHZ+0x298>)
 8007fec:	791b      	ldrb	r3, [r3, #4]
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	4b99      	ldr	r3, [pc, #612]	; (8008258 <MotorTimer1KHZ+0x298>)
 8007ff2:	789b      	ldrb	r3, [r3, #2]
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d102      	bne.n	8008000 <MotorTimer1KHZ+0x40>
 8007ffa:	4b97      	ldr	r3, [pc, #604]	; (8008258 <MotorTimer1KHZ+0x298>)
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	715a      	strb	r2, [r3, #5]
		if(m_MotorRight.ucPWMRampCounter == 0)
 8008000:	4b95      	ldr	r3, [pc, #596]	; (8008258 <MotorTimer1KHZ+0x298>)
 8008002:	791b      	ldrb	r3, [r3, #4]
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b00      	cmp	r3, #0
 8008008:	f040 82ed 	bne.w	80085e6 <MotorTimer1KHZ+0x626>
		{	// it is also the case when the motor must stop
			// check if it is not a direction change on progress
			if( (m_MotorRight.DirectionChangeWithoutStop == ROTATION_CHANGE_DETECTED) )
 800800c:	4b92      	ldr	r3, [pc, #584]	; (8008258 <MotorTimer1KHZ+0x298>)
 800800e:	799b      	ldrb	r3, [r3, #6]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d131      	bne.n	8008078 <MotorTimer1KHZ+0xb8>
			{	// turning direction detected
				m_MotorRight.DirectionChangeWithoutStop = NO_ROTATION_CHANGE_DETECTED;
 8008014:	4b90      	ldr	r3, [pc, #576]	; (8008258 <MotorTimer1KHZ+0x298>)
 8008016:	2200      	movs	r2, #0
 8008018:	719a      	strb	r2, [r3, #6]
				m_MotorRight.ucPWMPercentageTarget = m_MotorRight.ucPWMPercentageTarget2;
 800801a:	4b8f      	ldr	r3, [pc, #572]	; (8008258 <MotorTimer1KHZ+0x298>)
 800801c:	78db      	ldrb	r3, [r3, #3]
 800801e:	b2da      	uxtb	r2, r3
 8008020:	4b8d      	ldr	r3, [pc, #564]	; (8008258 <MotorTimer1KHZ+0x298>)
 8008022:	709a      	strb	r2, [r3, #2]
				m_MotorRight.ucPWMPercentageTarget2 = 0;
 8008024:	4b8c      	ldr	r3, [pc, #560]	; (8008258 <MotorTimer1KHZ+0x298>)
 8008026:	2200      	movs	r2, #0
 8008028:	70da      	strb	r2, [r3, #3]
				if( (m_MotorRight.TurningDirection == WHEEL_TURNING_BACKWARD) )
 800802a:	4b8b      	ldr	r3, [pc, #556]	; (8008258 <MotorTimer1KHZ+0x298>)
 800802c:	785b      	ldrb	r3, [r3, #1]
 800802e:	2b02      	cmp	r3, #2
 8008030:	d10f      	bne.n	8008052 <MotorTimer1KHZ+0x92>
				{
					m_MotorRight.TurningDirection = WHEEL_TURNING_FORWARD;
 8008032:	4b89      	ldr	r3, [pc, #548]	; (8008258 <MotorTimer1KHZ+0x298>)
 8008034:	2201      	movs	r2, #1
 8008036:	705a      	strb	r2, [r3, #1]
					HAL_GPIO_WritePin(RIN1_GPIO_Port, RIN1_Pin, GPIO_PIN_RESET);
 8008038:	2200      	movs	r2, #0
 800803a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800803e:	4888      	ldr	r0, [pc, #544]	; (8008260 <MotorTimer1KHZ+0x2a0>)
 8008040:	f003 fee4 	bl	800be0c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(RIN1_GPIO_Port, RIN2_Pin, GPIO_PIN_SET);
 8008044:	2201      	movs	r2, #1
 8008046:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800804a:	4885      	ldr	r0, [pc, #532]	; (8008260 <MotorTimer1KHZ+0x2a0>)
 800804c:	f003 fede 	bl	800be0c <HAL_GPIO_WritePin>
 8008050:	e00e      	b.n	8008070 <MotorTimer1KHZ+0xb0>
				}
				else
				{
					m_MotorRight.TurningDirection = WHEEL_TURNING_BACKWARD;
 8008052:	4b81      	ldr	r3, [pc, #516]	; (8008258 <MotorTimer1KHZ+0x298>)
 8008054:	2202      	movs	r2, #2
 8008056:	705a      	strb	r2, [r3, #1]
					HAL_GPIO_WritePin(RIN1_GPIO_Port, RIN1_Pin, GPIO_PIN_SET);
 8008058:	2201      	movs	r2, #1
 800805a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800805e:	4880      	ldr	r0, [pc, #512]	; (8008260 <MotorTimer1KHZ+0x2a0>)
 8008060:	f003 fed4 	bl	800be0c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(RIN1_GPIO_Port, RIN2_Pin, GPIO_PIN_RESET);
 8008064:	2200      	movs	r2, #0
 8008066:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800806a:	487d      	ldr	r0, [pc, #500]	; (8008260 <MotorTimer1KHZ+0x2a0>)
 800806c:	f003 fece 	bl	800be0c <HAL_GPIO_WritePin>
				}
				m_MotorRight.PWMSpeedStatus = PWM_SPEED_TRACKING;	// start a new tracking
 8008070:	4b79      	ldr	r3, [pc, #484]	; (8008258 <MotorTimer1KHZ+0x298>)
 8008072:	2201      	movs	r2, #1
 8008074:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(RIN1_GPIO_Port, RIN1_Pin, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(RIN1_GPIO_Port, RIN2_Pin, GPIO_PIN_RESET);
			}
		}
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  //	debug on PC13 LOW
		return;
 8008076:	e2b6      	b.n	80085e6 <MotorTimer1KHZ+0x626>
				m_MotorRight.TurningDirection = WHEEL_NOT_TURNING;
 8008078:	4b77      	ldr	r3, [pc, #476]	; (8008258 <MotorTimer1KHZ+0x298>)
 800807a:	2200      	movs	r2, #0
 800807c:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(RIN1_GPIO_Port, RIN1_Pin, GPIO_PIN_RESET);
 800807e:	2200      	movs	r2, #0
 8008080:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008084:	4876      	ldr	r0, [pc, #472]	; (8008260 <MotorTimer1KHZ+0x2a0>)
 8008086:	f003 fec1 	bl	800be0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RIN1_GPIO_Port, RIN2_Pin, GPIO_PIN_RESET);
 800808a:	2200      	movs	r2, #0
 800808c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008090:	4873      	ldr	r0, [pc, #460]	; (8008260 <MotorTimer1KHZ+0x2a0>)
 8008092:	f003 febb 	bl	800be0c <HAL_GPIO_WritePin>
		return;
 8008096:	e2a6      	b.n	80085e6 <MotorTimer1KHZ+0x626>
	}


	if( (m_ui16TimerDivider == 16) )		// Ramp the PWM for the LEFT  Motor
 8008098:	4b6e      	ldr	r3, [pc, #440]	; (8008254 <MotorTimer1KHZ+0x294>)
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	b29b      	uxth	r3, r3
 800809e:	2b10      	cmp	r3, #16
 80080a0:	d164      	bne.n	800816c <MotorTimer1KHZ+0x1ac>
	{	// max 2.2uS, typically 400nS
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH
		if(m_MotorLeft.PWMSpeedStatus != PWM_SPEED_TRACKING)
 80080a2:	4b70      	ldr	r3, [pc, #448]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 80080a4:	795b      	ldrb	r3, [r3, #5]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	f040 829f 	bne.w	80085ea <MotorTimer1KHZ+0x62a>
			//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  //	debug on PC13 LOW
			return;		// only important during the speed tracking process
		}

		// PWM Speed tracking in progress
		MotorPWMSpeedTracking(&m_MotorLeft);
 80080ac:	486d      	ldr	r0, [pc, #436]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 80080ae:	f000 fabb 	bl	8008628 <MotorPWMSpeedTracking>
		__HAL_TIM_SET_COMPARE(&htim9,TIM_CHANNEL_2,(uint16_t)m_MotorLeft.ucPWMRampCounter);		// set the new PWM value and getting closer to the PWM Target (ucPWMPercentageTarget)
 80080b2:	4b6c      	ldr	r3, [pc, #432]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 80080b4:	791b      	ldrb	r3, [r3, #4]
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	4b68      	ldr	r3, [pc, #416]	; (800825c <MotorTimer1KHZ+0x29c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	639a      	str	r2, [r3, #56]	; 0x38
		if(m_MotorLeft.ucPWMRampCounter == m_MotorLeft.ucPWMPercentageTarget)		m_MotorLeft.PWMSpeedStatus = PWM_SPEED_REACHED;		// also the Target PWM Speed was reached
 80080be:	4b69      	ldr	r3, [pc, #420]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 80080c0:	791b      	ldrb	r3, [r3, #4]
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	4b67      	ldr	r3, [pc, #412]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 80080c6:	789b      	ldrb	r3, [r3, #2]
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d102      	bne.n	80080d4 <MotorTimer1KHZ+0x114>
 80080ce:	4b65      	ldr	r3, [pc, #404]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 80080d0:	2202      	movs	r2, #2
 80080d2:	715a      	strb	r2, [r3, #5]
		if(m_MotorLeft.ucPWMRampCounter == 0)
 80080d4:	4b63      	ldr	r3, [pc, #396]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 80080d6:	791b      	ldrb	r3, [r3, #4]
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f040 8287 	bne.w	80085ee <MotorTimer1KHZ+0x62e>
		{	// it is also the case when the motor must stop
			// check if it is not a direction change on progress
			if( (m_MotorLeft.DirectionChangeWithoutStop == ROTATION_CHANGE_DETECTED) )
 80080e0:	4b60      	ldr	r3, [pc, #384]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 80080e2:	799b      	ldrb	r3, [r3, #6]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d131      	bne.n	800814c <MotorTimer1KHZ+0x18c>
			{	// turning direction detected
				m_MotorLeft.DirectionChangeWithoutStop = NO_ROTATION_CHANGE_DETECTED;
 80080e8:	4b5e      	ldr	r3, [pc, #376]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 80080ea:	2200      	movs	r2, #0
 80080ec:	719a      	strb	r2, [r3, #6]
				m_MotorLeft.ucPWMPercentageTarget = m_MotorLeft.ucPWMPercentageTarget2;
 80080ee:	4b5d      	ldr	r3, [pc, #372]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 80080f0:	78db      	ldrb	r3, [r3, #3]
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	4b5b      	ldr	r3, [pc, #364]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 80080f6:	709a      	strb	r2, [r3, #2]
				m_MotorLeft.ucPWMPercentageTarget2 = 0;
 80080f8:	4b5a      	ldr	r3, [pc, #360]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	70da      	strb	r2, [r3, #3]
				if( (m_MotorLeft.TurningDirection == WHEEL_TURNING_BACKWARD) )
 80080fe:	4b59      	ldr	r3, [pc, #356]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 8008100:	785b      	ldrb	r3, [r3, #1]
 8008102:	2b02      	cmp	r3, #2
 8008104:	d10f      	bne.n	8008126 <MotorTimer1KHZ+0x166>
				{
					m_MotorLeft.TurningDirection = WHEEL_TURNING_FORWARD;
 8008106:	4b57      	ldr	r3, [pc, #348]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 8008108:	2201      	movs	r2, #1
 800810a:	705a      	strb	r2, [r3, #1]
					HAL_GPIO_WritePin(LIN1_GPIO_Port, LIN1_Pin, GPIO_PIN_SET);
 800810c:	2201      	movs	r2, #1
 800810e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008112:	4853      	ldr	r0, [pc, #332]	; (8008260 <MotorTimer1KHZ+0x2a0>)
 8008114:	f003 fe7a 	bl	800be0c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LIN1_GPIO_Port, LIN2_Pin, GPIO_PIN_RESET);
 8008118:	2200      	movs	r2, #0
 800811a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800811e:	4850      	ldr	r0, [pc, #320]	; (8008260 <MotorTimer1KHZ+0x2a0>)
 8008120:	f003 fe74 	bl	800be0c <HAL_GPIO_WritePin>
 8008124:	e00e      	b.n	8008144 <MotorTimer1KHZ+0x184>
				}
				else
				{
					m_MotorLeft.TurningDirection = WHEEL_TURNING_BACKWARD;
 8008126:	4b4f      	ldr	r3, [pc, #316]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 8008128:	2202      	movs	r2, #2
 800812a:	705a      	strb	r2, [r3, #1]
					HAL_GPIO_WritePin(LIN1_GPIO_Port, LIN1_Pin, GPIO_PIN_RESET);
 800812c:	2200      	movs	r2, #0
 800812e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008132:	484b      	ldr	r0, [pc, #300]	; (8008260 <MotorTimer1KHZ+0x2a0>)
 8008134:	f003 fe6a 	bl	800be0c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LIN1_GPIO_Port, LIN2_Pin, GPIO_PIN_SET);
 8008138:	2201      	movs	r2, #1
 800813a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800813e:	4848      	ldr	r0, [pc, #288]	; (8008260 <MotorTimer1KHZ+0x2a0>)
 8008140:	f003 fe64 	bl	800be0c <HAL_GPIO_WritePin>
				}
				m_MotorLeft.PWMSpeedStatus = PWM_SPEED_TRACKING;	// start a new tracking
 8008144:	4b47      	ldr	r3, [pc, #284]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 8008146:	2201      	movs	r2, #1
 8008148:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(LIN1_GPIO_Port, LIN1_Pin, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(LIN1_GPIO_Port, LIN2_Pin, GPIO_PIN_RESET);
			}
		}
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  //	debug on PC13 LOW
		return;
 800814a:	e250      	b.n	80085ee <MotorTimer1KHZ+0x62e>
				m_MotorLeft.TurningDirection = WHEEL_NOT_TURNING;
 800814c:	4b45      	ldr	r3, [pc, #276]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 800814e:	2200      	movs	r2, #0
 8008150:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(LIN1_GPIO_Port, LIN1_Pin, GPIO_PIN_RESET);
 8008152:	2200      	movs	r2, #0
 8008154:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008158:	4841      	ldr	r0, [pc, #260]	; (8008260 <MotorTimer1KHZ+0x2a0>)
 800815a:	f003 fe57 	bl	800be0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LIN1_GPIO_Port, LIN2_Pin, GPIO_PIN_RESET);
 800815e:	2200      	movs	r2, #0
 8008160:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008164:	483e      	ldr	r0, [pc, #248]	; (8008260 <MotorTimer1KHZ+0x2a0>)
 8008166:	f003 fe51 	bl	800be0c <HAL_GPIO_WritePin>
		return;
 800816a:	e240      	b.n	80085ee <MotorTimer1KHZ+0x62e>
	}


	if( (m_ui16TimerDivider == 25) )		// Test the RIGHT Motor Stall condition
 800816c:	4b39      	ldr	r3, [pc, #228]	; (8008254 <MotorTimer1KHZ+0x294>)
 800816e:	881b      	ldrh	r3, [r3, #0]
 8008170:	b29b      	uxth	r3, r3
 8008172:	2b19      	cmp	r3, #25
 8008174:	d134      	bne.n	80081e0 <MotorTimer1KHZ+0x220>
	{	// max 700nS, typically 500nS
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH
		if( (m_MotorRight.TurningDirection == WHEEL_NOT_TURNING) || (m_MotorRight.PWMSpeedStatus != PWM_SPEED_REACHED) )
 8008176:	4b38      	ldr	r3, [pc, #224]	; (8008258 <MotorTimer1KHZ+0x298>)
 8008178:	785b      	ldrb	r3, [r3, #1]
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 8239 	beq.w	80085f2 <MotorTimer1KHZ+0x632>
 8008180:	4b35      	ldr	r3, [pc, #212]	; (8008258 <MotorTimer1KHZ+0x298>)
 8008182:	795b      	ldrb	r3, [r3, #5]
 8008184:	2b02      	cmp	r3, #2
 8008186:	f040 8234 	bne.w	80085f2 <MotorTimer1KHZ+0x632>
			//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  //	debug on PC13 LOW
			return;		// either the wheel is stopped or its speed is not yet stable
		}
		// wheel is not stopped and its PWM speed is stable

		if( (m_EncoderRight.uiSpeedMMS != 0) )	// the wheel speed is not zero
 800818a:	4b37      	ldr	r3, [pc, #220]	; (8008268 <MotorTimer1KHZ+0x2a8>)
 800818c:	895b      	ldrh	r3, [r3, #10]
 800818e:	b29b      	uxth	r3, r3
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00b      	beq.n	80081ac <MotorTimer1KHZ+0x1ec>
		{	// wheel is not stalled
			m_MotorRight.ucStallCounter = m_MotorRight.ucStallMaxCountValue;
 8008194:	4b30      	ldr	r3, [pc, #192]	; (8008258 <MotorTimer1KHZ+0x298>)
 8008196:	7c9b      	ldrb	r3, [r3, #18]
 8008198:	b2da      	uxtb	r2, r3
 800819a:	4b2f      	ldr	r3, [pc, #188]	; (8008258 <MotorTimer1KHZ+0x298>)
 800819c:	745a      	strb	r2, [r3, #17]
			m_MotorRight.StallCondition = WHEEL_NOT_STALLED;
 800819e:	4b2e      	ldr	r3, [pc, #184]	; (8008258 <MotorTimer1KHZ+0x298>)
 80081a0:	2201      	movs	r2, #1
 80081a2:	74da      	strb	r2, [r3, #19]
			m_MotorRight.StallConditionCallback = WHEEL_NOT_STALLED;		// in case it was not cleared in the main loop
 80081a4:	4b2c      	ldr	r3, [pc, #176]	; (8008258 <MotorTimer1KHZ+0x298>)
 80081a6:	2201      	movs	r2, #1
 80081a8:	751a      	strb	r2, [r3, #20]
			//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  //	debug on PC13 LOW
			return;
 80081aa:	e231      	b.n	8008610 <MotorTimer1KHZ+0x650>
		}

		// the wheel speed is zero
		if( (m_MotorRight.ucStallCounter > 0) )
 80081ac:	4b2a      	ldr	r3, [pc, #168]	; (8008258 <MotorTimer1KHZ+0x298>)
 80081ae:	7c5b      	ldrb	r3, [r3, #17]
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 821f 	beq.w	80085f6 <MotorTimer1KHZ+0x636>
		{
			m_MotorRight.ucStallCounter --;
 80081b8:	4b27      	ldr	r3, [pc, #156]	; (8008258 <MotorTimer1KHZ+0x298>)
 80081ba:	7c5b      	ldrb	r3, [r3, #17]
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	3b01      	subs	r3, #1
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	4b25      	ldr	r3, [pc, #148]	; (8008258 <MotorTimer1KHZ+0x298>)
 80081c4:	745a      	strb	r2, [r3, #17]
			if( (m_MotorRight.ucStallCounter == 0) )
 80081c6:	4b24      	ldr	r3, [pc, #144]	; (8008258 <MotorTimer1KHZ+0x298>)
 80081c8:	7c5b      	ldrb	r3, [r3, #17]
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f040 8212 	bne.w	80085f6 <MotorTimer1KHZ+0x636>
			{	// wheel is stalled
				m_MotorRight.StallCondition = WHEEL_STALLED;
 80081d2:	4b21      	ldr	r3, [pc, #132]	; (8008258 <MotorTimer1KHZ+0x298>)
 80081d4:	2202      	movs	r2, #2
 80081d6:	74da      	strb	r2, [r3, #19]
				m_MotorRight.StallConditionCallback = WHEEL_STALLED;	// it will be cleared in the main loop once the callback is called
 80081d8:	4b1f      	ldr	r3, [pc, #124]	; (8008258 <MotorTimer1KHZ+0x298>)
 80081da:	2202      	movs	r2, #2
 80081dc:	751a      	strb	r2, [r3, #20]
				//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  //	debug on PC13 LOW
				return;
 80081de:	e217      	b.n	8008610 <MotorTimer1KHZ+0x650>
		return;
	}



	if( (m_ui16TimerDivider == 35) )		// Test the LEFT  Motor Stall condition
 80081e0:	4b1c      	ldr	r3, [pc, #112]	; (8008254 <MotorTimer1KHZ+0x294>)
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	2b23      	cmp	r3, #35	; 0x23
 80081e8:	d142      	bne.n	8008270 <MotorTimer1KHZ+0x2b0>
	{	// max 700nS, typically 500nS
		if( (m_MotorLeft.TurningDirection == WHEEL_NOT_TURNING) || (m_MotorLeft.PWMSpeedStatus != PWM_SPEED_REACHED) )	return;		// either the wheel is stopped or its speed is not yet stable
 80081ea:	4b1e      	ldr	r3, [pc, #120]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 80081ec:	785b      	ldrb	r3, [r3, #1]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 8203 	beq.w	80085fa <MotorTimer1KHZ+0x63a>
 80081f4:	4b1b      	ldr	r3, [pc, #108]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 80081f6:	795b      	ldrb	r3, [r3, #5]
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	f040 81fe 	bne.w	80085fa <MotorTimer1KHZ+0x63a>
		// wheel is not stopped and its PWM speed is stable

		if( (m_EncoderLeft.uiSpeedMMS != 0) ) // the wheel speed is not zero
 80081fe:	4b1b      	ldr	r3, [pc, #108]	; (800826c <MotorTimer1KHZ+0x2ac>)
 8008200:	895b      	ldrh	r3, [r3, #10]
 8008202:	b29b      	uxth	r3, r3
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00b      	beq.n	8008220 <MotorTimer1KHZ+0x260>
		{	// wheel is not stalled
			m_MotorLeft.ucStallCounter = m_MotorLeft.ucStallMaxCountValue;
 8008208:	4b16      	ldr	r3, [pc, #88]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 800820a:	7c9b      	ldrb	r3, [r3, #18]
 800820c:	b2da      	uxtb	r2, r3
 800820e:	4b15      	ldr	r3, [pc, #84]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 8008210:	745a      	strb	r2, [r3, #17]
			m_MotorLeft.StallCondition = WHEEL_NOT_STALLED;
 8008212:	4b14      	ldr	r3, [pc, #80]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 8008214:	2201      	movs	r2, #1
 8008216:	74da      	strb	r2, [r3, #19]
			m_MotorLeft.StallConditionCallback = WHEEL_NOT_STALLED;		// in case it was not cleared in the main loop
 8008218:	4b12      	ldr	r3, [pc, #72]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 800821a:	2201      	movs	r2, #1
 800821c:	751a      	strb	r2, [r3, #20]
			return;
 800821e:	e1f7      	b.n	8008610 <MotorTimer1KHZ+0x650>
		}

		// the wheel speed is zero
		if( (m_MotorLeft.ucStallCounter > 0) )
 8008220:	4b10      	ldr	r3, [pc, #64]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 8008222:	7c5b      	ldrb	r3, [r3, #17]
 8008224:	b2db      	uxtb	r3, r3
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 81e9 	beq.w	80085fe <MotorTimer1KHZ+0x63e>
		{
			m_MotorLeft.ucStallCounter --;
 800822c:	4b0d      	ldr	r3, [pc, #52]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 800822e:	7c5b      	ldrb	r3, [r3, #17]
 8008230:	b2db      	uxtb	r3, r3
 8008232:	3b01      	subs	r3, #1
 8008234:	b2da      	uxtb	r2, r3
 8008236:	4b0b      	ldr	r3, [pc, #44]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 8008238:	745a      	strb	r2, [r3, #17]
			if( (m_MotorLeft.ucStallCounter == 0) )
 800823a:	4b0a      	ldr	r3, [pc, #40]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 800823c:	7c5b      	ldrb	r3, [r3, #17]
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b00      	cmp	r3, #0
 8008242:	f040 81dc 	bne.w	80085fe <MotorTimer1KHZ+0x63e>
			{	// wheel is stalled
				m_MotorLeft.StallCondition = WHEEL_STALLED;
 8008246:	4b07      	ldr	r3, [pc, #28]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 8008248:	2202      	movs	r2, #2
 800824a:	74da      	strb	r2, [r3, #19]
				m_MotorLeft.StallConditionCallback = WHEEL_STALLED;	// it will be cleared in the main loop once the callback is called
 800824c:	4b05      	ldr	r3, [pc, #20]	; (8008264 <MotorTimer1KHZ+0x2a4>)
 800824e:	2202      	movs	r2, #2
 8008250:	751a      	strb	r2, [r3, #20]
				return;
 8008252:	e1dd      	b.n	8008610 <MotorTimer1KHZ+0x650>
 8008254:	2000209a 	.word	0x2000209a
 8008258:	200020cc 	.word	0x200020cc
 800825c:	200024a4 	.word	0x200024a4
 8008260:	40020c00 	.word	0x40020c00
 8008264:	200020e4 	.word	0x200020e4
 8008268:	2000209c 	.word	0x2000209c
 800826c:	200020b4 	.word	0x200020b4
		}
		return;
	}


	if( (m_ui16TimerDivider == 37) )		// RIGHT and LEFT Wheel Timeout check and trigger Callback function at timeout
 8008270:	4b8c      	ldr	r3, [pc, #560]	; (80084a4 <MotorTimer1KHZ+0x4e4>)
 8008272:	881b      	ldrh	r3, [r3, #0]
 8008274:	b29b      	uxth	r3, r3
 8008276:	2b25      	cmp	r3, #37	; 0x25
 8008278:	d142      	bne.n	8008300 <MotorTimer1KHZ+0x340>
	{	// max 600nS, typically 450nS
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH
		if(m_MotorRight.ucTimeToRunHMS > 1) 	m_MotorRight.ucTimeToRunHMS --;
 800827a:	4b8b      	ldr	r3, [pc, #556]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 800827c:	7c1b      	ldrb	r3, [r3, #16]
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b01      	cmp	r3, #1
 8008282:	d906      	bls.n	8008292 <MotorTimer1KHZ+0x2d2>
 8008284:	4b88      	ldr	r3, [pc, #544]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 8008286:	7c1b      	ldrb	r3, [r3, #16]
 8008288:	b2db      	uxtb	r3, r3
 800828a:	3b01      	subs	r3, #1
 800828c:	b2da      	uxtb	r2, r3
 800828e:	4b86      	ldr	r3, [pc, #536]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 8008290:	741a      	strb	r2, [r3, #16]
		if(m_MotorLeft.ucTimeToRunHMS > 1) 		m_MotorLeft.ucTimeToRunHMS --;
 8008292:	4b86      	ldr	r3, [pc, #536]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 8008294:	7c1b      	ldrb	r3, [r3, #16]
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b01      	cmp	r3, #1
 800829a:	d906      	bls.n	80082aa <MotorTimer1KHZ+0x2ea>
 800829c:	4b83      	ldr	r3, [pc, #524]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 800829e:	7c1b      	ldrb	r3, [r3, #16]
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	3b01      	subs	r3, #1
 80082a4:	b2da      	uxtb	r2, r3
 80082a6:	4b81      	ldr	r3, [pc, #516]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 80082a8:	741a      	strb	r2, [r3, #16]

		if( (m_MotorRight.ucTimeToRunHMS == 1) && (m_MotorLeft.ucTimeToRunHMS == 1) )
 80082aa:	4b7f      	ldr	r3, [pc, #508]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 80082ac:	7c1b      	ldrb	r3, [r3, #16]
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	f040 81a6 	bne.w	8008602 <MotorTimer1KHZ+0x642>
 80082b6:	4b7d      	ldr	r3, [pc, #500]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 80082b8:	7c1b      	ldrb	r3, [r3, #16]
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	2b01      	cmp	r3, #1
 80082be:	f040 81a0 	bne.w	8008602 <MotorTimer1KHZ+0x642>
		{
			// indicate the callback situation to the main loop function
			m_MotorRight.ucTimeToRunHMS = 255;
 80082c2:	4b79      	ldr	r3, [pc, #484]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 80082c4:	22ff      	movs	r2, #255	; 0xff
 80082c6:	741a      	strb	r2, [r3, #16]
			m_MotorLeft.ucTimeToRunHMS  = 255;
 80082c8:	4b78      	ldr	r3, [pc, #480]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 80082ca:	22ff      	movs	r2, #255	; 0xff
 80082cc:	741a      	strb	r2, [r3, #16]
			//WheelRobotStop();		// stop the motors
			m_MotorRight.DirectionChangeWithoutStop = NO_ROTATION_CHANGE_DETECTED;
 80082ce:	4b76      	ldr	r3, [pc, #472]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 80082d0:	2200      	movs	r2, #0
 80082d2:	719a      	strb	r2, [r3, #6]
			m_MotorRight.ucPWMPercentageTarget2 = 0;
 80082d4:	4b74      	ldr	r3, [pc, #464]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	70da      	strb	r2, [r3, #3]
			m_MotorRight.ucPWMPercentageTarget = 0;
 80082da:	4b73      	ldr	r3, [pc, #460]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 80082dc:	2200      	movs	r2, #0
 80082de:	709a      	strb	r2, [r3, #2]
			m_MotorRight.PWMSpeedStatus = PWM_SPEED_TRACKING;	// start a new tracking
 80082e0:	4b71      	ldr	r3, [pc, #452]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 80082e2:	2201      	movs	r2, #1
 80082e4:	715a      	strb	r2, [r3, #5]
			m_MotorLeft.DirectionChangeWithoutStop = NO_ROTATION_CHANGE_DETECTED;
 80082e6:	4b71      	ldr	r3, [pc, #452]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	719a      	strb	r2, [r3, #6]
			m_MotorLeft.ucPWMPercentageTarget2 = 0;
 80082ec:	4b6f      	ldr	r3, [pc, #444]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	70da      	strb	r2, [r3, #3]
			m_MotorLeft.ucPWMPercentageTarget = 0;
 80082f2:	4b6e      	ldr	r3, [pc, #440]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	709a      	strb	r2, [r3, #2]
			m_MotorLeft.PWMSpeedStatus = PWM_SPEED_TRACKING;	// start a new tracking
 80082f8:	4b6c      	ldr	r3, [pc, #432]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 80082fa:	2201      	movs	r2, #1
 80082fc:	715a      	strb	r2, [r3, #5]
		}
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  //	debug on PC13 LOW
		return;
 80082fe:	e180      	b.n	8008602 <MotorTimer1KHZ+0x642>
	}


	if( (m_ui16TimerDivider == 39) )		// RIGHT and LEFT Wheel Distance To Go
 8008300:	4b68      	ldr	r3, [pc, #416]	; (80084a4 <MotorTimer1KHZ+0x4e4>)
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	b29b      	uxth	r3, r3
 8008306:	2b27      	cmp	r3, #39	; 0x27
 8008308:	f040 80d8 	bne.w	80084bc <MotorTimer1KHZ+0x4fc>
	{	// max 1.8uS, typically 430nS
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH
		// Right Wheel
		if( (m_MotorRight.ui32DistanceToGoPulses != 0) && (m_MotorRight.ui32DistanceToGoPulses != 0xFFFFFFFF) )
 800830c:	4b66      	ldr	r3, [pc, #408]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d05d      	beq.n	80083d0 <MotorTimer1KHZ+0x410>
 8008314:	4b64      	ldr	r3, [pc, #400]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800831c:	d058      	beq.n	80083d0 <MotorTimer1KHZ+0x410>
		{	// there is a distance target
			if(m_MotorRight.TurningDirection == WHEEL_TURNING_FORWARD)
 800831e:	4b62      	ldr	r3, [pc, #392]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 8008320:	785b      	ldrb	r3, [r3, #1]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d12a      	bne.n	800837c <MotorTimer1KHZ+0x3bc>
			{	// wheel turning forward
				if(m_EncoderRight.ui32TotalForwardPulses >= m_MotorRight.ui32DistanceToGoPulses )
 8008326:	4b62      	ldr	r3, [pc, #392]	; (80084b0 <MotorTimer1KHZ+0x4f0>)
 8008328:	691a      	ldr	r2, [r3, #16]
 800832a:	4b5f      	ldr	r3, [pc, #380]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	429a      	cmp	r2, r3
 8008330:	d310      	bcc.n	8008354 <MotorTimer1KHZ+0x394>
				{	// Distance Target was reached on the RIGHT side
					HAL_GPIO_WritePin(RIN1_GPIO_Port, RIN1_Pin, GPIO_PIN_RESET);
 8008332:	2200      	movs	r2, #0
 8008334:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008338:	485e      	ldr	r0, [pc, #376]	; (80084b4 <MotorTimer1KHZ+0x4f4>)
 800833a:	f003 fd67 	bl	800be0c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(RIN1_GPIO_Port, RIN2_Pin, GPIO_PIN_RESET);
 800833e:	2200      	movs	r2, #0
 8008340:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008344:	485b      	ldr	r0, [pc, #364]	; (80084b4 <MotorTimer1KHZ+0x4f4>)
 8008346:	f003 fd61 	bl	800be0c <HAL_GPIO_WritePin>
					m_MotorRight.ui32DistanceToGoPulses = 0xFFFFFFFF;	// marker for all done and will be handled in the main loop
 800834a:	4b57      	ldr	r3, [pc, #348]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 800834c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008350:	60da      	str	r2, [r3, #12]
 8008352:	e03d      	b.n	80083d0 <MotorTimer1KHZ+0x410>
				}
				else
				{	// the destination is not yet reached
					if( ((m_MotorRight.ui32DistanceToGoPulses - m_EncoderRight.ui32TotalForwardPulses) < 700) && (m_MotorRight.ucPWMPercentageTarget > 15) )
 8008354:	4b54      	ldr	r3, [pc, #336]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 8008356:	68da      	ldr	r2, [r3, #12]
 8008358:	4b55      	ldr	r3, [pc, #340]	; (80084b0 <MotorTimer1KHZ+0x4f0>)
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8008362:	d235      	bcs.n	80083d0 <MotorTimer1KHZ+0x410>
 8008364:	4b50      	ldr	r3, [pc, #320]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 8008366:	789b      	ldrb	r3, [r3, #2]
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b0f      	cmp	r3, #15
 800836c:	d930      	bls.n	80083d0 <MotorTimer1KHZ+0x410>
					{	// slow down on the last part
						m_MotorRight.ucPWMPercentageTarget = 15;
 800836e:	4b4e      	ldr	r3, [pc, #312]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 8008370:	220f      	movs	r2, #15
 8008372:	709a      	strb	r2, [r3, #2]
						m_MotorRight.PWMSpeedStatus = PWM_SPEED_TRACKING;	// start a new tracking
 8008374:	4b4c      	ldr	r3, [pc, #304]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 8008376:	2201      	movs	r2, #1
 8008378:	715a      	strb	r2, [r3, #5]
 800837a:	e029      	b.n	80083d0 <MotorTimer1KHZ+0x410>
					}
				}
			}
			else
			{	// wheel turning backward
				if(m_EncoderRight.ui32TotalBackwardPulses >= m_MotorRight.ui32DistanceToGoPulses )
 800837c:	4b4c      	ldr	r3, [pc, #304]	; (80084b0 <MotorTimer1KHZ+0x4f0>)
 800837e:	695a      	ldr	r2, [r3, #20]
 8008380:	4b49      	ldr	r3, [pc, #292]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	429a      	cmp	r2, r3
 8008386:	d310      	bcc.n	80083aa <MotorTimer1KHZ+0x3ea>
				{	// Distance Target was reached on the RIGHT side
					HAL_GPIO_WritePin(RIN1_GPIO_Port, RIN1_Pin, GPIO_PIN_RESET);
 8008388:	2200      	movs	r2, #0
 800838a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800838e:	4849      	ldr	r0, [pc, #292]	; (80084b4 <MotorTimer1KHZ+0x4f4>)
 8008390:	f003 fd3c 	bl	800be0c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(RIN1_GPIO_Port, RIN2_Pin, GPIO_PIN_RESET);
 8008394:	2200      	movs	r2, #0
 8008396:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800839a:	4846      	ldr	r0, [pc, #280]	; (80084b4 <MotorTimer1KHZ+0x4f4>)
 800839c:	f003 fd36 	bl	800be0c <HAL_GPIO_WritePin>
					m_MotorRight.ui32DistanceToGoPulses = 0xFFFFFFFF;	// marker for all done and will be handled in the main loop
 80083a0:	4b41      	ldr	r3, [pc, #260]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 80083a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083a6:	60da      	str	r2, [r3, #12]
 80083a8:	e012      	b.n	80083d0 <MotorTimer1KHZ+0x410>
				}
				else
				{	// the destination is not yet reached
					if( ((m_MotorRight.ui32DistanceToGoPulses - m_EncoderRight.ui32TotalBackwardPulses) < 700) && (m_MotorRight.ucPWMPercentageTarget > 15) )
 80083aa:	4b3f      	ldr	r3, [pc, #252]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	4b40      	ldr	r3, [pc, #256]	; (80084b0 <MotorTimer1KHZ+0x4f0>)
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80083b8:	d20a      	bcs.n	80083d0 <MotorTimer1KHZ+0x410>
 80083ba:	4b3b      	ldr	r3, [pc, #236]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 80083bc:	789b      	ldrb	r3, [r3, #2]
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b0f      	cmp	r3, #15
 80083c2:	d905      	bls.n	80083d0 <MotorTimer1KHZ+0x410>
					{	// slow down on the last part
						m_MotorRight.ucPWMPercentageTarget = 15;
 80083c4:	4b38      	ldr	r3, [pc, #224]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 80083c6:	220f      	movs	r2, #15
 80083c8:	709a      	strb	r2, [r3, #2]
						m_MotorRight.PWMSpeedStatus = PWM_SPEED_TRACKING;	// start a new tracking
 80083ca:	4b37      	ldr	r3, [pc, #220]	; (80084a8 <MotorTimer1KHZ+0x4e8>)
 80083cc:	2201      	movs	r2, #1
 80083ce:	715a      	strb	r2, [r3, #5]
				}
			}
		}

		// Left Wheel
		if( (m_MotorLeft.ui32DistanceToGoPulses != 0) && (m_MotorLeft.ui32DistanceToGoPulses != 0xFFFFFFFF) )
 80083d0:	4b36      	ldr	r3, [pc, #216]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f000 8116 	beq.w	8008606 <MotorTimer1KHZ+0x646>
 80083da:	4b34      	ldr	r3, [pc, #208]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083e2:	f000 8110 	beq.w	8008606 <MotorTimer1KHZ+0x646>
		{	// there is a distance target
			if(m_MotorLeft.TurningDirection == WHEEL_TURNING_FORWARD)
 80083e6:	4b31      	ldr	r3, [pc, #196]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 80083e8:	785b      	ldrb	r3, [r3, #1]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d12c      	bne.n	8008448 <MotorTimer1KHZ+0x488>
			{	// wheel turning forward
				if(m_EncoderLeft.ui32TotalForwardPulses >= m_MotorLeft.ui32DistanceToGoPulses)
 80083ee:	4b32      	ldr	r3, [pc, #200]	; (80084b8 <MotorTimer1KHZ+0x4f8>)
 80083f0:	691a      	ldr	r2, [r3, #16]
 80083f2:	4b2e      	ldr	r3, [pc, #184]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d310      	bcc.n	800841c <MotorTimer1KHZ+0x45c>
				{	// Distance Target was reached on the RIGHT side
					HAL_GPIO_WritePin(LIN1_GPIO_Port, LIN1_Pin, GPIO_PIN_RESET);
 80083fa:	2200      	movs	r2, #0
 80083fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008400:	482c      	ldr	r0, [pc, #176]	; (80084b4 <MotorTimer1KHZ+0x4f4>)
 8008402:	f003 fd03 	bl	800be0c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LIN1_GPIO_Port, LIN2_Pin, GPIO_PIN_RESET);
 8008406:	2200      	movs	r2, #0
 8008408:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800840c:	4829      	ldr	r0, [pc, #164]	; (80084b4 <MotorTimer1KHZ+0x4f4>)
 800840e:	f003 fcfd 	bl	800be0c <HAL_GPIO_WritePin>
					m_MotorLeft.ui32DistanceToGoPulses = 0xFFFFFFFF;	// marker for all done and will be handled in the main loop
 8008412:	4b26      	ldr	r3, [pc, #152]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 8008414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008418:	60da      	str	r2, [r3, #12]
					}
				}
			}
		}
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  //	debug on PC13 LOW
		return;
 800841a:	e0f4      	b.n	8008606 <MotorTimer1KHZ+0x646>
					if( ((m_MotorLeft.ui32DistanceToGoPulses - m_EncoderLeft.ui32TotalForwardPulses) < 700) && (m_MotorLeft.ucPWMPercentageTarget > 15) )
 800841c:	4b23      	ldr	r3, [pc, #140]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 800841e:	68da      	ldr	r2, [r3, #12]
 8008420:	4b25      	ldr	r3, [pc, #148]	; (80084b8 <MotorTimer1KHZ+0x4f8>)
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800842a:	f080 80ec 	bcs.w	8008606 <MotorTimer1KHZ+0x646>
 800842e:	4b1f      	ldr	r3, [pc, #124]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 8008430:	789b      	ldrb	r3, [r3, #2]
 8008432:	b2db      	uxtb	r3, r3
 8008434:	2b0f      	cmp	r3, #15
 8008436:	f240 80e6 	bls.w	8008606 <MotorTimer1KHZ+0x646>
						m_MotorLeft.ucPWMPercentageTarget = 15;
 800843a:	4b1c      	ldr	r3, [pc, #112]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 800843c:	220f      	movs	r2, #15
 800843e:	709a      	strb	r2, [r3, #2]
						m_MotorLeft.PWMSpeedStatus = PWM_SPEED_TRACKING;	// start a new tracking
 8008440:	4b1a      	ldr	r3, [pc, #104]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 8008442:	2201      	movs	r2, #1
 8008444:	715a      	strb	r2, [r3, #5]
		return;
 8008446:	e0de      	b.n	8008606 <MotorTimer1KHZ+0x646>
				if(m_EncoderLeft.ui32TotalBackwardPulses >= m_MotorLeft.ui32DistanceToGoPulses)
 8008448:	4b1b      	ldr	r3, [pc, #108]	; (80084b8 <MotorTimer1KHZ+0x4f8>)
 800844a:	695a      	ldr	r2, [r3, #20]
 800844c:	4b17      	ldr	r3, [pc, #92]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	429a      	cmp	r2, r3
 8008452:	d310      	bcc.n	8008476 <MotorTimer1KHZ+0x4b6>
					HAL_GPIO_WritePin(LIN1_GPIO_Port, LIN1_Pin, GPIO_PIN_RESET);
 8008454:	2200      	movs	r2, #0
 8008456:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800845a:	4816      	ldr	r0, [pc, #88]	; (80084b4 <MotorTimer1KHZ+0x4f4>)
 800845c:	f003 fcd6 	bl	800be0c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LIN1_GPIO_Port, LIN2_Pin, GPIO_PIN_RESET);
 8008460:	2200      	movs	r2, #0
 8008462:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008466:	4813      	ldr	r0, [pc, #76]	; (80084b4 <MotorTimer1KHZ+0x4f4>)
 8008468:	f003 fcd0 	bl	800be0c <HAL_GPIO_WritePin>
					m_MotorLeft.ui32DistanceToGoPulses = 0xFFFFFFFF;	// marker for all done and will be handled in the main loop
 800846c:	4b0f      	ldr	r3, [pc, #60]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 800846e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008472:	60da      	str	r2, [r3, #12]
		return;
 8008474:	e0c7      	b.n	8008606 <MotorTimer1KHZ+0x646>
					if( ((m_MotorLeft.ui32DistanceToGoPulses - m_EncoderLeft.ui32TotalBackwardPulses) < 700) && (m_MotorLeft.ucPWMPercentageTarget > 15) )
 8008476:	4b0d      	ldr	r3, [pc, #52]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 8008478:	68da      	ldr	r2, [r3, #12]
 800847a:	4b0f      	ldr	r3, [pc, #60]	; (80084b8 <MotorTimer1KHZ+0x4f8>)
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8008484:	f080 80bf 	bcs.w	8008606 <MotorTimer1KHZ+0x646>
 8008488:	4b08      	ldr	r3, [pc, #32]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 800848a:	789b      	ldrb	r3, [r3, #2]
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b0f      	cmp	r3, #15
 8008490:	f240 80b9 	bls.w	8008606 <MotorTimer1KHZ+0x646>
						m_MotorLeft.ucPWMPercentageTarget = 15;
 8008494:	4b05      	ldr	r3, [pc, #20]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 8008496:	220f      	movs	r2, #15
 8008498:	709a      	strb	r2, [r3, #2]
						m_MotorLeft.PWMSpeedStatus = PWM_SPEED_TRACKING;	// start a new tracking
 800849a:	4b04      	ldr	r3, [pc, #16]	; (80084ac <MotorTimer1KHZ+0x4ec>)
 800849c:	2201      	movs	r2, #1
 800849e:	715a      	strb	r2, [r3, #5]
		return;
 80084a0:	e0b1      	b.n	8008606 <MotorTimer1KHZ+0x646>
 80084a2:	bf00      	nop
 80084a4:	2000209a 	.word	0x2000209a
 80084a8:	200020cc 	.word	0x200020cc
 80084ac:	200020e4 	.word	0x200020e4
 80084b0:	2000209c 	.word	0x2000209c
 80084b4:	40020c00 	.word	0x40020c00
 80084b8:	200020b4 	.word	0x200020b4
	}

	if( (m_ui16TimerDivider == 41) )	//  @ 41  =>  MMsSpeed to PWM Feedback loop
 80084bc:	4b55      	ldr	r3, [pc, #340]	; (8008614 <MotorTimer1KHZ+0x654>)
 80084be:	881b      	ldrh	r3, [r3, #0]
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	2b29      	cmp	r3, #41	; 0x29
 80084c4:	f040 80a1 	bne.w	800860a <MotorTimer1KHZ+0x64a>
	{	// max 1.3uS, typically 500nS
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH
		// RIGHT Wheel speed control
		if(m_MotorRight.uiRequestedSpeedMMS != 0)
 80084c8:	4b53      	ldr	r3, [pc, #332]	; (8008618 <MotorTimer1KHZ+0x658>)
 80084ca:	891b      	ldrh	r3, [r3, #8]
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d040      	beq.n	8008554 <MotorTimer1KHZ+0x594>
		{
			if(m_MotorRight.PWMSpeedStatus == PWM_SPEED_REACHED)
 80084d2:	4b51      	ldr	r3, [pc, #324]	; (8008618 <MotorTimer1KHZ+0x658>)
 80084d4:	795b      	ldrb	r3, [r3, #5]
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d13c      	bne.n	8008554 <MotorTimer1KHZ+0x594>
			{
				if(m_EncoderRight.uiSpeedMMS != 0)
 80084da:	4b50      	ldr	r3, [pc, #320]	; (800861c <MotorTimer1KHZ+0x65c>)
 80084dc:	895b      	ldrh	r3, [r3, #10]
 80084de:	b29b      	uxth	r3, r3
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d037      	beq.n	8008554 <MotorTimer1KHZ+0x594>
				{
					if( (m_MotorRight.uiRequestedSpeedMMS > (m_EncoderRight.uiSpeedMMS + 8)) )
 80084e4:	4b4c      	ldr	r3, [pc, #304]	; (8008618 <MotorTimer1KHZ+0x658>)
 80084e6:	891b      	ldrh	r3, [r3, #8]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	461a      	mov	r2, r3
 80084ec:	4b4b      	ldr	r3, [pc, #300]	; (800861c <MotorTimer1KHZ+0x65c>)
 80084ee:	895b      	ldrh	r3, [r3, #10]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	3308      	adds	r3, #8
 80084f4:	429a      	cmp	r2, r3
 80084f6:	dd0f      	ble.n	8008518 <MotorTimer1KHZ+0x558>
					{
						if(m_MotorRight.ucPWMPercentageTarget + 1 < 100)
 80084f8:	4b47      	ldr	r3, [pc, #284]	; (8008618 <MotorTimer1KHZ+0x658>)
 80084fa:	789b      	ldrb	r3, [r3, #2]
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b62      	cmp	r3, #98	; 0x62
 8008500:	d828      	bhi.n	8008554 <MotorTimer1KHZ+0x594>
						{
							m_MotorRight.ucPWMPercentageTarget += 1;
 8008502:	4b45      	ldr	r3, [pc, #276]	; (8008618 <MotorTimer1KHZ+0x658>)
 8008504:	789b      	ldrb	r3, [r3, #2]
 8008506:	b2db      	uxtb	r3, r3
 8008508:	3301      	adds	r3, #1
 800850a:	b2da      	uxtb	r2, r3
 800850c:	4b42      	ldr	r3, [pc, #264]	; (8008618 <MotorTimer1KHZ+0x658>)
 800850e:	709a      	strb	r2, [r3, #2]
							m_MotorRight.PWMSpeedStatus = PWM_SPEED_TRACKING;	// track a new speed
 8008510:	4b41      	ldr	r3, [pc, #260]	; (8008618 <MotorTimer1KHZ+0x658>)
 8008512:	2201      	movs	r2, #1
 8008514:	715a      	strb	r2, [r3, #5]
 8008516:	e01d      	b.n	8008554 <MotorTimer1KHZ+0x594>
						}
					}
					else
					{
						if( (m_EncoderRight.uiSpeedMMS > 8) )
 8008518:	4b40      	ldr	r3, [pc, #256]	; (800861c <MotorTimer1KHZ+0x65c>)
 800851a:	895b      	ldrh	r3, [r3, #10]
 800851c:	b29b      	uxth	r3, r3
 800851e:	2b08      	cmp	r3, #8
 8008520:	d918      	bls.n	8008554 <MotorTimer1KHZ+0x594>
						{
							if( (m_MotorRight.uiRequestedSpeedMMS < (m_EncoderRight.uiSpeedMMS - 8)) )
 8008522:	4b3d      	ldr	r3, [pc, #244]	; (8008618 <MotorTimer1KHZ+0x658>)
 8008524:	891b      	ldrh	r3, [r3, #8]
 8008526:	b29b      	uxth	r3, r3
 8008528:	461a      	mov	r2, r3
 800852a:	4b3c      	ldr	r3, [pc, #240]	; (800861c <MotorTimer1KHZ+0x65c>)
 800852c:	895b      	ldrh	r3, [r3, #10]
 800852e:	b29b      	uxth	r3, r3
 8008530:	3b08      	subs	r3, #8
 8008532:	429a      	cmp	r2, r3
 8008534:	da0e      	bge.n	8008554 <MotorTimer1KHZ+0x594>
							{
								if(m_MotorRight.ucPWMPercentageTarget > 16)	// 15 is the minimum PWM %
 8008536:	4b38      	ldr	r3, [pc, #224]	; (8008618 <MotorTimer1KHZ+0x658>)
 8008538:	789b      	ldrb	r3, [r3, #2]
 800853a:	b2db      	uxtb	r3, r3
 800853c:	2b10      	cmp	r3, #16
 800853e:	d909      	bls.n	8008554 <MotorTimer1KHZ+0x594>
								{
									m_MotorRight.ucPWMPercentageTarget -= 1;
 8008540:	4b35      	ldr	r3, [pc, #212]	; (8008618 <MotorTimer1KHZ+0x658>)
 8008542:	789b      	ldrb	r3, [r3, #2]
 8008544:	b2db      	uxtb	r3, r3
 8008546:	3b01      	subs	r3, #1
 8008548:	b2da      	uxtb	r2, r3
 800854a:	4b33      	ldr	r3, [pc, #204]	; (8008618 <MotorTimer1KHZ+0x658>)
 800854c:	709a      	strb	r2, [r3, #2]
									m_MotorRight.PWMSpeedStatus = PWM_SPEED_TRACKING;	// track a new speed
 800854e:	4b32      	ldr	r3, [pc, #200]	; (8008618 <MotorTimer1KHZ+0x658>)
 8008550:	2201      	movs	r2, #1
 8008552:	715a      	strb	r2, [r3, #5]
			}
		}


		// LEFT  Wheel speed control
		if(m_MotorLeft.uiRequestedSpeedMMS != 0)
 8008554:	4b32      	ldr	r3, [pc, #200]	; (8008620 <MotorTimer1KHZ+0x660>)
 8008556:	891b      	ldrh	r3, [r3, #8]
 8008558:	b29b      	uxth	r3, r3
 800855a:	2b00      	cmp	r3, #0
 800855c:	d057      	beq.n	800860e <MotorTimer1KHZ+0x64e>
		{
			if(m_MotorLeft.PWMSpeedStatus == PWM_SPEED_REACHED)
 800855e:	4b30      	ldr	r3, [pc, #192]	; (8008620 <MotorTimer1KHZ+0x660>)
 8008560:	795b      	ldrb	r3, [r3, #5]
 8008562:	2b02      	cmp	r3, #2
 8008564:	d153      	bne.n	800860e <MotorTimer1KHZ+0x64e>
			{	// only make new correction if the last one is settled
				if(m_EncoderLeft.uiSpeedMMS != 0)
 8008566:	4b2f      	ldr	r3, [pc, #188]	; (8008624 <MotorTimer1KHZ+0x664>)
 8008568:	895b      	ldrh	r3, [r3, #10]
 800856a:	b29b      	uxth	r3, r3
 800856c:	2b00      	cmp	r3, #0
 800856e:	d04e      	beq.n	800860e <MotorTimer1KHZ+0x64e>
				{	// only make correction if the wheel is not stopped
					if( (m_MotorLeft.uiRequestedSpeedMMS > (m_EncoderLeft.uiSpeedMMS + 8)) )
 8008570:	4b2b      	ldr	r3, [pc, #172]	; (8008620 <MotorTimer1KHZ+0x660>)
 8008572:	891b      	ldrh	r3, [r3, #8]
 8008574:	b29b      	uxth	r3, r3
 8008576:	461a      	mov	r2, r3
 8008578:	4b2a      	ldr	r3, [pc, #168]	; (8008624 <MotorTimer1KHZ+0x664>)
 800857a:	895b      	ldrh	r3, [r3, #10]
 800857c:	b29b      	uxth	r3, r3
 800857e:	3308      	adds	r3, #8
 8008580:	429a      	cmp	r2, r3
 8008582:	dd0f      	ble.n	80085a4 <MotorTimer1KHZ+0x5e4>
					{	// check if one need to increase the speed
						if(m_MotorLeft.ucPWMPercentageTarget + 1 < 100)
 8008584:	4b26      	ldr	r3, [pc, #152]	; (8008620 <MotorTimer1KHZ+0x660>)
 8008586:	789b      	ldrb	r3, [r3, #2]
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b62      	cmp	r3, #98	; 0x62
 800858c:	d83f      	bhi.n	800860e <MotorTimer1KHZ+0x64e>
						{	// make sure that the PWM Speed is not already at 100% and it will not overtake 100% after correction
							m_MotorLeft.ucPWMPercentageTarget += 1;
 800858e:	4b24      	ldr	r3, [pc, #144]	; (8008620 <MotorTimer1KHZ+0x660>)
 8008590:	789b      	ldrb	r3, [r3, #2]
 8008592:	b2db      	uxtb	r3, r3
 8008594:	3301      	adds	r3, #1
 8008596:	b2da      	uxtb	r2, r3
 8008598:	4b21      	ldr	r3, [pc, #132]	; (8008620 <MotorTimer1KHZ+0x660>)
 800859a:	709a      	strb	r2, [r3, #2]
							m_MotorLeft.PWMSpeedStatus = PWM_SPEED_TRACKING;	// track a new speed
 800859c:	4b20      	ldr	r3, [pc, #128]	; (8008620 <MotorTimer1KHZ+0x660>)
 800859e:	2201      	movs	r2, #1
 80085a0:	715a      	strb	r2, [r3, #5]
					}
				}
			}
		}
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  //	debug on PC13 LOW
		return;
 80085a2:	e034      	b.n	800860e <MotorTimer1KHZ+0x64e>
						if( (m_EncoderLeft.uiSpeedMMS > 8) )
 80085a4:	4b1f      	ldr	r3, [pc, #124]	; (8008624 <MotorTimer1KHZ+0x664>)
 80085a6:	895b      	ldrh	r3, [r3, #10]
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	2b08      	cmp	r3, #8
 80085ac:	d92f      	bls.n	800860e <MotorTimer1KHZ+0x64e>
							if( (m_MotorLeft.uiRequestedSpeedMMS < (m_EncoderLeft.uiSpeedMMS - 8)) )
 80085ae:	4b1c      	ldr	r3, [pc, #112]	; (8008620 <MotorTimer1KHZ+0x660>)
 80085b0:	891b      	ldrh	r3, [r3, #8]
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	461a      	mov	r2, r3
 80085b6:	4b1b      	ldr	r3, [pc, #108]	; (8008624 <MotorTimer1KHZ+0x664>)
 80085b8:	895b      	ldrh	r3, [r3, #10]
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	3b08      	subs	r3, #8
 80085be:	429a      	cmp	r2, r3
 80085c0:	da25      	bge.n	800860e <MotorTimer1KHZ+0x64e>
								if(m_MotorLeft.ucPWMPercentageTarget > 16)
 80085c2:	4b17      	ldr	r3, [pc, #92]	; (8008620 <MotorTimer1KHZ+0x660>)
 80085c4:	789b      	ldrb	r3, [r3, #2]
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b10      	cmp	r3, #16
 80085ca:	d920      	bls.n	800860e <MotorTimer1KHZ+0x64e>
									m_MotorLeft.ucPWMPercentageTarget -= 1;
 80085cc:	4b14      	ldr	r3, [pc, #80]	; (8008620 <MotorTimer1KHZ+0x660>)
 80085ce:	789b      	ldrb	r3, [r3, #2]
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	3b01      	subs	r3, #1
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	4b12      	ldr	r3, [pc, #72]	; (8008620 <MotorTimer1KHZ+0x660>)
 80085d8:	709a      	strb	r2, [r3, #2]
									m_MotorLeft.PWMSpeedStatus = PWM_SPEED_TRACKING;	// track a new speed
 80085da:	4b11      	ldr	r3, [pc, #68]	; (8008620 <MotorTimer1KHZ+0x660>)
 80085dc:	2201      	movs	r2, #1
 80085de:	715a      	strb	r2, [r3, #5]
		return;
 80085e0:	e015      	b.n	800860e <MotorTimer1KHZ+0x64e>
			return;		// only important during the speed tracking process
 80085e2:	bf00      	nop
 80085e4:	e014      	b.n	8008610 <MotorTimer1KHZ+0x650>
		return;
 80085e6:	bf00      	nop
 80085e8:	e012      	b.n	8008610 <MotorTimer1KHZ+0x650>
			return;		// only important during the speed tracking process
 80085ea:	bf00      	nop
 80085ec:	e010      	b.n	8008610 <MotorTimer1KHZ+0x650>
		return;
 80085ee:	bf00      	nop
 80085f0:	e00e      	b.n	8008610 <MotorTimer1KHZ+0x650>
			return;		// either the wheel is stopped or its speed is not yet stable
 80085f2:	bf00      	nop
 80085f4:	e00c      	b.n	8008610 <MotorTimer1KHZ+0x650>
		return;
 80085f6:	bf00      	nop
 80085f8:	e00a      	b.n	8008610 <MotorTimer1KHZ+0x650>
		if( (m_MotorLeft.TurningDirection == WHEEL_NOT_TURNING) || (m_MotorLeft.PWMSpeedStatus != PWM_SPEED_REACHED) )	return;		// either the wheel is stopped or its speed is not yet stable
 80085fa:	bf00      	nop
 80085fc:	e008      	b.n	8008610 <MotorTimer1KHZ+0x650>
		return;
 80085fe:	bf00      	nop
 8008600:	e006      	b.n	8008610 <MotorTimer1KHZ+0x650>
		return;
 8008602:	bf00      	nop
 8008604:	e004      	b.n	8008610 <MotorTimer1KHZ+0x650>
		return;
 8008606:	bf00      	nop
 8008608:	e002      	b.n	8008610 <MotorTimer1KHZ+0x650>
	}



	return;
 800860a:	bf00      	nop
 800860c:	e000      	b.n	8008610 <MotorTimer1KHZ+0x650>
		return;
 800860e:	bf00      	nop
}
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	2000209a 	.word	0x2000209a
 8008618:	200020cc 	.word	0x200020cc
 800861c:	2000209c 	.word	0x2000209c
 8008620:	200020e4 	.word	0x200020e4
 8008624:	200020b4 	.word	0x200020b4

08008628 <MotorPWMSpeedTracking>:
//----------------------------------------------------------------------------------
static void MotorPWMSpeedTracking(WheelMotorTypeDef * MotorData)	// used inside the MotorTimer1KHZ function, during the PWM Speed Tracking process in order to estimate the new PWM setting while
																	// getting closer to the PWM Speed Target
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
	uint8_t ucPWMStep;

	if(MotorData->ucPWMRampCounter == MotorData->ucPWMPercentageTarget)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	791b      	ldrb	r3, [r3, #4]
 8008634:	b2da      	uxtb	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	789b      	ldrb	r3, [r3, #2]
 800863a:	b2db      	uxtb	r3, r3
 800863c:	429a      	cmp	r2, r3
 800863e:	d033      	beq.n	80086a8 <MotorPWMSpeedTracking+0x80>
		//MotorData->PWMSpeedStatus = PWM_SPEED_REACHED;	// it is done in the calling function. in this way in case of motor stop one can also set the corresponding RIN1,RIN2 or LIN1,LIN2 to ZERO
		return;
	}

	// PWM Speed target was not yet reached
	if( (MotorData->ucPWMPercentageTarget > MotorData->ucPWMRampCounter) )
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	789b      	ldrb	r3, [r3, #2]
 8008644:	b2da      	uxtb	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	791b      	ldrb	r3, [r3, #4]
 800864a:	b2db      	uxtb	r3, r3
 800864c:	429a      	cmp	r2, r3
 800864e:	d915      	bls.n	800867c <MotorPWMSpeedTracking+0x54>
	{	// the target is higher than the current PWM value => the PWM setting on the motor must be increased
		ucPWMStep = GetPWMSpeedStep( (MotorData->ucPWMPercentageTarget - MotorData->ucPWMRampCounter) );
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	789b      	ldrb	r3, [r3, #2]
 8008654:	b2da      	uxtb	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	791b      	ldrb	r3, [r3, #4]
 800865a:	b2db      	uxtb	r3, r3
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	b2db      	uxtb	r3, r3
 8008660:	4618      	mov	r0, r3
 8008662:	f000 f825 	bl	80086b0 <GetPWMSpeedStep>
 8008666:	4603      	mov	r3, r0
 8008668:	73fb      	strb	r3, [r7, #15]
		MotorData->ucPWMRampCounter += ucPWMStep;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	791b      	ldrb	r3, [r3, #4]
 800866e:	b2da      	uxtb	r2, r3
 8008670:	7bfb      	ldrb	r3, [r7, #15]
 8008672:	4413      	add	r3, r2
 8008674:	b2da      	uxtb	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	711a      	strb	r2, [r3, #4]
		return;		// in the timer function (the calling function) now must set the PWM of the corresponding channel of the Timer9 with the new ucPWMRampCounter value
 800867a:	e016      	b.n	80086aa <MotorPWMSpeedTracking+0x82>
	}
	else
	{	// the setting is not incremental but decremental
		ucPWMStep = GetPWMSpeedStep( (MotorData->ucPWMRampCounter - MotorData->ucPWMPercentageTarget) );
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	791b      	ldrb	r3, [r3, #4]
 8008680:	b2da      	uxtb	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	789b      	ldrb	r3, [r3, #2]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	b2db      	uxtb	r3, r3
 800868c:	4618      	mov	r0, r3
 800868e:	f000 f80f 	bl	80086b0 <GetPWMSpeedStep>
 8008692:	4603      	mov	r3, r0
 8008694:	73fb      	strb	r3, [r7, #15]
		MotorData->ucPWMRampCounter -= ucPWMStep;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	791b      	ldrb	r3, [r3, #4]
 800869a:	b2da      	uxtb	r2, r3
 800869c:	7bfb      	ldrb	r3, [r7, #15]
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	711a      	strb	r2, [r3, #4]
		return;		// in the timer function (the calling function) now must set the PWM of the corresponding channel of the Timer9 with the new ucPWMRampCounter value
 80086a6:	e000      	b.n	80086aa <MotorPWMSpeedTracking+0x82>
		return;
 80086a8:	bf00      	nop
	}
	return;	// just dummy (it will never happen)
}
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <GetPWMSpeedStep>:
//----------------------------------------------------------------------------------
static uint8_t GetPWMSpeedStep(uint8_t ucActualSpeedDifference)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	4603      	mov	r3, r0
 80086b8:	71fb      	strb	r3, [r7, #7]
	if(ucActualSpeedDifference >= 15)											return 15;		// change the PWMRampCounter value with +/- 15 representing +/- 15%
 80086ba:	79fb      	ldrb	r3, [r7, #7]
 80086bc:	2b0e      	cmp	r3, #14
 80086be:	d901      	bls.n	80086c4 <GetPWMSpeedStep+0x14>
 80086c0:	230f      	movs	r3, #15
 80086c2:	e010      	b.n	80086e6 <GetPWMSpeedStep+0x36>
	if( (ucActualSpeedDifference < 15) && (ucActualSpeedDifference >= 10) )		return 10;		// change the PWMRampCounter value with +/- 10 representing +/- 10%
 80086c4:	79fb      	ldrb	r3, [r7, #7]
 80086c6:	2b0e      	cmp	r3, #14
 80086c8:	d804      	bhi.n	80086d4 <GetPWMSpeedStep+0x24>
 80086ca:	79fb      	ldrb	r3, [r7, #7]
 80086cc:	2b09      	cmp	r3, #9
 80086ce:	d901      	bls.n	80086d4 <GetPWMSpeedStep+0x24>
 80086d0:	230a      	movs	r3, #10
 80086d2:	e008      	b.n	80086e6 <GetPWMSpeedStep+0x36>
	if( (ucActualSpeedDifference < 10) && (ucActualSpeedDifference >= 5) )		return 5;		// change the PWMRampCounter value with +/- 5 representing +/- 5%
 80086d4:	79fb      	ldrb	r3, [r7, #7]
 80086d6:	2b09      	cmp	r3, #9
 80086d8:	d804      	bhi.n	80086e4 <GetPWMSpeedStep+0x34>
 80086da:	79fb      	ldrb	r3, [r7, #7]
 80086dc:	2b04      	cmp	r3, #4
 80086de:	d901      	bls.n	80086e4 <GetPWMSpeedStep+0x34>
 80086e0:	2305      	movs	r3, #5
 80086e2:	e000      	b.n	80086e6 <GetPWMSpeedStep+0x36>
	return 1;		// change the PWMRampCounter value with +/- 1 representing +/- 1%
 80086e4:	2301      	movs	r3, #1
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
	...

080086f4 <MotorMainLoop>:
//----------------------------------------------------------------------------------
static void MotorMainLoop(void)	// used in the system main loop to handle thread related activities with the motors
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	af00      	add	r7, sp, #0
	// -------- stall check and callback activation --------------- START
	// RIGHT
	if(m_MotorRight.StallConditionCallback == WHEEL_STALLED)
 80086f8:	4b19      	ldr	r3, [pc, #100]	; (8008760 <MotorMainLoop+0x6c>)
 80086fa:	7d1b      	ldrb	r3, [r3, #20]
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d104      	bne.n	800870a <MotorMainLoop+0x16>
	{	// Right motor is stalled
		// acknowledge the stall notification and re-arm the stall callback trigger.
		m_MotorRight.StallConditionCallback = WHEEL_STALLED_UNINITIALIZED;	// ready for an eventual new event
 8008700:	4b17      	ldr	r3, [pc, #92]	; (8008760 <MotorMainLoop+0x6c>)
 8008702:	2200      	movs	r2, #0
 8008704:	751a      	strb	r2, [r3, #20]
		WheelStallRightCallback();
 8008706:	f7ff fa23 	bl	8007b50 <WheelStallRightCallback>
	}
	// LEFT
	if(m_MotorLeft.StallConditionCallback == WHEEL_STALLED)
 800870a:	4b16      	ldr	r3, [pc, #88]	; (8008764 <MotorMainLoop+0x70>)
 800870c:	7d1b      	ldrb	r3, [r3, #20]
 800870e:	2b02      	cmp	r3, #2
 8008710:	d104      	bne.n	800871c <MotorMainLoop+0x28>
	{	// Left motor is stalled
		// acknowledge the stall notification and re-arm the stall callback trigger.
		m_MotorLeft.StallConditionCallback = WHEEL_STALLED_UNINITIALIZED;	// ready for an eventual new event
 8008712:	4b14      	ldr	r3, [pc, #80]	; (8008764 <MotorMainLoop+0x70>)
 8008714:	2200      	movs	r2, #0
 8008716:	751a      	strb	r2, [r3, #20]
		WheelStallLeftCallback();
 8008718:	f7ff fa21 	bl	8007b5e <WheelStallLeftCallback>

	// --------------- Motor Status Update ------------------------ START
	// --------------- Motor Status Update ------------------------ END

	// ------------ Timeout Command Callback  --------------------- START
	if( (m_MotorRight.ucTimeToRunHMS == 255) && (m_MotorLeft.ucTimeToRunHMS == 255) )
 800871c:	4b10      	ldr	r3, [pc, #64]	; (8008760 <MotorMainLoop+0x6c>)
 800871e:	7c1b      	ldrb	r3, [r3, #16]
 8008720:	b2db      	uxtb	r3, r3
 8008722:	2bff      	cmp	r3, #255	; 0xff
 8008724:	d109      	bne.n	800873a <MotorMainLoop+0x46>
 8008726:	4b0f      	ldr	r3, [pc, #60]	; (8008764 <MotorMainLoop+0x70>)
 8008728:	7c1b      	ldrb	r3, [r3, #16]
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2bff      	cmp	r3, #255	; 0xff
 800872e:	d104      	bne.n	800873a <MotorMainLoop+0x46>
	{
		//m_MotorRight.ucTimeToRunHMS = 0;
		//m_MotorLeft.ucTimeToRunHMS = 0;
		WheelRobotStop();
 8008730:	f7fe ffa0 	bl	8007674 <WheelRobotStop>
		WheelRobotCommandEndCallback(TIMEOUT_COMMAND_CALLBACK);		// call the command end callback function
 8008734:	2001      	movs	r0, #1
 8008736:	f7f8 fcc9 	bl	80010cc <WheelRobotCommandEndCallback>
	}
	// ------------ Timeout Command Callback  --------------------- END

	// ------------- Distance to Go Callback  --------------------- START
	if( (m_MotorRight.ui32DistanceToGoPulses == 0xFFFFFFFF) && (m_MotorLeft.ui32DistanceToGoPulses == 0xFFFFFFFF) )
 800873a:	4b09      	ldr	r3, [pc, #36]	; (8008760 <MotorMainLoop+0x6c>)
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008742:	d10a      	bne.n	800875a <MotorMainLoop+0x66>
 8008744:	4b07      	ldr	r3, [pc, #28]	; (8008764 <MotorMainLoop+0x70>)
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800874c:	d105      	bne.n	800875a <MotorMainLoop+0x66>
	{
		WheelRobotStop();
 800874e:	f7fe ff91 	bl	8007674 <WheelRobotStop>
		WheelRobotCommandEndCallback(DISTANCE_REACHED_CALLBACK);		// call the command end callback function
 8008752:	2002      	movs	r0, #2
 8008754:	f7f8 fcba 	bl	80010cc <WheelRobotCommandEndCallback>





	return;
 8008758:	bf00      	nop
 800875a:	bf00      	nop
}
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	200020cc 	.word	0x200020cc
 8008764:	200020e4 	.word	0x200020e4

08008768 <MMSSpeedToPWM>:
//----------------------------------------------------------------------------------
static uint8_t MMSSpeedToPWM(uint16_t uiMMSSpeed) // used to estimate the PWMPercentage as function of the MMSSpeed
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af00      	add	r7, sp, #0
 800876e:	4603      	mov	r3, r0
 8008770:	80fb      	strh	r3, [r7, #6]
	// PWMTarget = ((85*(SpeedMMS - 50)/450) + 15)
	double dPWMTarget;
	uint8_t ucPWMPercentage;


	dPWMTarget  = (double)(uiMMSSpeed - 50);
 8008772:	88fb      	ldrh	r3, [r7, #6]
 8008774:	3b32      	subs	r3, #50	; 0x32
 8008776:	4618      	mov	r0, r3
 8008778:	f7f7 fef4 	bl	8000564 <__aeabi_i2d>
 800877c:	4602      	mov	r2, r0
 800877e:	460b      	mov	r3, r1
 8008780:	e9c7 2304 	strd	r2, r3, [r7, #16]
	//dPWMTarget *= (double)85;
	dPWMTarget *= (double)65;
 8008784:	f04f 0200 	mov.w	r2, #0
 8008788:	4b25      	ldr	r3, [pc, #148]	; (8008820 <MMSSpeedToPWM+0xb8>)
 800878a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800878e:	f7f7 ff53 	bl	8000638 <__aeabi_dmul>
 8008792:	4602      	mov	r2, r0
 8008794:	460b      	mov	r3, r1
 8008796:	e9c7 2304 	strd	r2, r3, [r7, #16]
	dPWMTarget /= (double)450;
 800879a:	a31f      	add	r3, pc, #124	; (adr r3, 8008818 <MMSSpeedToPWM+0xb0>)
 800879c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80087a4:	f7f8 f872 	bl	800088c <__aeabi_ddiv>
 80087a8:	4602      	mov	r2, r0
 80087aa:	460b      	mov	r3, r1
 80087ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
	dPWMTarget += (double)15;
 80087b0:	f04f 0200 	mov.w	r2, #0
 80087b4:	4b1b      	ldr	r3, [pc, #108]	; (8008824 <MMSSpeedToPWM+0xbc>)
 80087b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80087ba:	f7f7 fd87 	bl	80002cc <__adddf3>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if(dPWMTarget < 15) 	dPWMTarget = 15;
 80087c6:	f04f 0200 	mov.w	r2, #0
 80087ca:	4b16      	ldr	r3, [pc, #88]	; (8008824 <MMSSpeedToPWM+0xbc>)
 80087cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80087d0:	f7f8 f9a4 	bl	8000b1c <__aeabi_dcmplt>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d004      	beq.n	80087e4 <MMSSpeedToPWM+0x7c>
 80087da:	f04f 0200 	mov.w	r2, #0
 80087de:	4b11      	ldr	r3, [pc, #68]	; (8008824 <MMSSpeedToPWM+0xbc>)
 80087e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if(dPWMTarget > 100)	dPWMTarget = 100;
 80087e4:	f04f 0200 	mov.w	r2, #0
 80087e8:	4b0f      	ldr	r3, [pc, #60]	; (8008828 <MMSSpeedToPWM+0xc0>)
 80087ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80087ee:	f7f8 f9b3 	bl	8000b58 <__aeabi_dcmpgt>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d004      	beq.n	8008802 <MMSSpeedToPWM+0x9a>
 80087f8:	f04f 0200 	mov.w	r2, #0
 80087fc:	4b0a      	ldr	r3, [pc, #40]	; (8008828 <MMSSpeedToPWM+0xc0>)
 80087fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	ucPWMPercentage = (uint8_t) dPWMTarget;
 8008802:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008806:	f7f8 f9ef 	bl	8000be8 <__aeabi_d2uiz>
 800880a:	4603      	mov	r3, r0
 800880c:	73fb      	strb	r3, [r7, #15]

	return ucPWMPercentage;
 800880e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3718      	adds	r7, #24
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	00000000 	.word	0x00000000
 800881c:	407c2000 	.word	0x407c2000
 8008820:	40504000 	.word	0x40504000
 8008824:	402e0000 	.word	0x402e0000
 8008828:	40590000 	.word	0x40590000

0800882c <DebugInit>:

//--------------------------------------------------
// DEBUG RX / TX

void DebugInit(void)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	af00      	add	r7, sp, #0
	// RX
	memset(m_ucDegugBufferRX,0,sizeof(m_ucDegugBufferRX));
 8008830:	22fa      	movs	r2, #250	; 0xfa
 8008832:	2100      	movs	r1, #0
 8008834:	480e      	ldr	r0, [pc, #56]	; (8008870 <DebugInit+0x44>)
 8008836:	f00a fc45 	bl	80130c4 <memset>
	m_ucDebugRXCounter = 0;
 800883a:	4b0e      	ldr	r3, [pc, #56]	; (8008874 <DebugInit+0x48>)
 800883c:	2200      	movs	r2, #0
 800883e:	701a      	strb	r2, [r3, #0]
	m_ucDebugRXStatus = 0;
 8008840:	4b0d      	ldr	r3, [pc, #52]	; (8008878 <DebugInit+0x4c>)
 8008842:	2200      	movs	r2, #0
 8008844:	701a      	strb	r2, [r3, #0]
	if(HAL_UART_Receive_IT(&huart2, &m_ucDebugRXTempChar, 1) != HAL_OK)
 8008846:	2201      	movs	r2, #1
 8008848:	490c      	ldr	r1, [pc, #48]	; (800887c <DebugInit+0x50>)
 800884a:	480d      	ldr	r0, [pc, #52]	; (8008880 <DebugInit+0x54>)
 800884c:	f008 fdbe 	bl	80113cc <HAL_UART_Receive_IT>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d002      	beq.n	800885c <DebugInit+0x30>
	{
		Error_Handler2(ERROR_CODE_MAIN_DEBUG_INIT);
 8008856:	2064      	movs	r0, #100	; 0x64
 8008858:	f001 f85c 	bl	8009914 <Error_Handler2>
		//Error_Handler();
	}

	//TX
	memset(m_ucDebugBufferTX,0,sizeof(m_ucDebugBufferTX));
 800885c:	22fa      	movs	r2, #250	; 0xfa
 800885e:	2100      	movs	r1, #0
 8008860:	4808      	ldr	r0, [pc, #32]	; (8008884 <DebugInit+0x58>)
 8008862:	f00a fc2f 	bl	80130c4 <memset>
	m_ucDebugTXStatus = DEBUG_TX_OK;
 8008866:	4b08      	ldr	r3, [pc, #32]	; (8008888 <DebugInit+0x5c>)
 8008868:	2200      	movs	r2, #0
 800886a:	701a      	strb	r2, [r3, #0]

	return;
 800886c:	bf00      	nop
}
 800886e:	bd80      	pop	{r7, pc}
 8008870:	2000267c 	.word	0x2000267c
 8008874:	20002776 	.word	0x20002776
 8008878:	20002777 	.word	0x20002777
 800887c:	20002778 	.word	0x20002778
 8008880:	20002594 	.word	0x20002594
 8008884:	2000277c 	.word	0x2000277c
 8008888:	20002876 	.word	0x20002876

0800888c <HAL_UART_RxCpltCallback>:
//--------------------------------------------------

// RX section
//--------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
	//char chTemp[50];

	// USART2 = used for debugging
	// USART3 = used for VL53L0X distance sensor
	if(huart->Instance == USART3)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a09      	ldr	r2, [pc, #36]	; (80088c0 <HAL_UART_RxCpltCallback+0x34>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d102      	bne.n	80088a4 <HAL_UART_RxCpltCallback+0x18>
	{	// this is for VL53L0x
		// call the proper function:
		VL53l0xRXComplete();
 800889e:	f7fd fd3b 	bl	8006318 <VL53l0xRXComplete>
		return;
 80088a2:	e00a      	b.n	80088ba <HAL_UART_RxCpltCallback+0x2e>



#ifdef APPLICATION_DEBUG_MODE
	// ApplicationDebugRX();							// debug the Application.c with string message
	ApplicationDebugRXChar(m_ucDebugRXTempChar);		// debug the Application.c with single char messages
 80088a4:	4b07      	ldr	r3, [pc, #28]	; (80088c4 <HAL_UART_RxCpltCallback+0x38>)
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7f9 f89d 	bl	80019e8 <ApplicationDebugRXChar>
	//sprintf(chTemp,"The received char is >%c<\n\r",m_ucDebugRXTempChar);
	//sprintf(chTemp,"Intensity=%d   Bakance=%d\n\r",m_ucTemp1,m_ucTemp2);

	//DebugSendData((uint8_t*)chTemp,strlen(chTemp));

	if(HAL_UART_Receive_IT(&huart2, &m_ucDebugRXTempChar, 1) != HAL_OK)
 80088ae:	2201      	movs	r2, #1
 80088b0:	4904      	ldr	r1, [pc, #16]	; (80088c4 <HAL_UART_RxCpltCallback+0x38>)
 80088b2:	4805      	ldr	r0, [pc, #20]	; (80088c8 <HAL_UART_RxCpltCallback+0x3c>)
 80088b4:	f008 fd8a 	bl	80113cc <HAL_UART_Receive_IT>
	{
		//Error_Handler2(ERROR_CODE_MAIN_DEBUG_RXCPLTCLBACK);
		//Error_Handler();
	}
	return;
 80088b8:	bf00      	nop
}
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	40004800 	.word	0x40004800
 80088c4:	20002778 	.word	0x20002778
 80088c8:	20002594 	.word	0x20002594

080088cc <DebugSendData>:
//--------------------------------------------------


// TX section
uint8_t DebugSendData(uint8_t *ucDataBuffer, uint8_t ucDataLength)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint8_t ErrorStatus;

	if(m_ucDebugTXStatus != DEBUG_TX_OK)			return DEBUG_TX_BUSY;
 80088d8:	4b1b      	ldr	r3, [pc, #108]	; (8008948 <DebugSendData+0x7c>)
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d001      	beq.n	80088e4 <DebugSendData+0x18>
 80088e0:	2364      	movs	r3, #100	; 0x64
 80088e2:	e02d      	b.n	8008940 <DebugSendData+0x74>
	if(ucDataLength > (DEBUG_TX_BUFFER_SIZE - 1)) 	return DEBUG_TX_DATA_ERROR;
 80088e4:	78fb      	ldrb	r3, [r7, #3]
 80088e6:	2bf9      	cmp	r3, #249	; 0xf9
 80088e8:	d901      	bls.n	80088ee <DebugSendData+0x22>
 80088ea:	2382      	movs	r3, #130	; 0x82
 80088ec:	e028      	b.n	8008940 <DebugSendData+0x74>

	for(i=0;i<ucDataLength;i++) m_ucDebugBufferTX[i] = ucDataBuffer[i];
 80088ee:	2300      	movs	r3, #0
 80088f0:	73fb      	strb	r3, [r7, #15]
 80088f2:	e009      	b.n	8008908 <DebugSendData+0x3c>
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	441a      	add	r2, r3
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
 80088fc:	7811      	ldrb	r1, [r2, #0]
 80088fe:	4a13      	ldr	r2, [pc, #76]	; (800894c <DebugSendData+0x80>)
 8008900:	54d1      	strb	r1, [r2, r3]
 8008902:	7bfb      	ldrb	r3, [r7, #15]
 8008904:	3301      	adds	r3, #1
 8008906:	73fb      	strb	r3, [r7, #15]
 8008908:	7bfa      	ldrb	r2, [r7, #15]
 800890a:	78fb      	ldrb	r3, [r7, #3]
 800890c:	429a      	cmp	r2, r3
 800890e:	d3f1      	bcc.n	80088f4 <DebugSendData+0x28>

	ErrorStatus = HAL_UART_Transmit_DMA(&huart2, (uint8_t*)m_ucDebugBufferTX, (uint16_t)ucDataLength);
 8008910:	78fb      	ldrb	r3, [r7, #3]
 8008912:	b29b      	uxth	r3, r3
 8008914:	461a      	mov	r2, r3
 8008916:	490d      	ldr	r1, [pc, #52]	; (800894c <DebugSendData+0x80>)
 8008918:	480d      	ldr	r0, [pc, #52]	; (8008950 <DebugSendData+0x84>)
 800891a:	f008 fd87 	bl	801142c <HAL_UART_Transmit_DMA>
 800891e:	4603      	mov	r3, r0
 8008920:	73bb      	strb	r3, [r7, #14]
	if(ErrorStatus == HAL_BUSY)						return DEBUG_TX_BUSY;
 8008922:	7bbb      	ldrb	r3, [r7, #14]
 8008924:	2b02      	cmp	r3, #2
 8008926:	d101      	bne.n	800892c <DebugSendData+0x60>
 8008928:	2364      	movs	r3, #100	; 0x64
 800892a:	e009      	b.n	8008940 <DebugSendData+0x74>
	if(ErrorStatus != HAL_OK)
 800892c:	7bbb      	ldrb	r3, [r7, #14]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d002      	beq.n	8008938 <DebugSendData+0x6c>
	//if(HAL_UART_Transmit(&huart2, (uint8_t*)m_ucDebugBufferTX, (uint16_t)ucDataLength,HAL_MAX_DELAY) != HAL_OK)
	{
		Error_Handler2(ERROR_CODE_MAIN_DEBUG_SENDDATA);
 8008932:	2066      	movs	r0, #102	; 0x66
 8008934:	f000 ffee 	bl	8009914 <Error_Handler2>
		//return DEBUG_TX_DMA_ERROR;
		//Error_Handler();
	}

	m_ucDebugTXStatus = DEBUG_TX_BUSY;		// set TX in use and clear @ callback handler
 8008938:	4b03      	ldr	r3, [pc, #12]	; (8008948 <DebugSendData+0x7c>)
 800893a:	2264      	movs	r2, #100	; 0x64
 800893c:	701a      	strb	r2, [r3, #0]
	return DEBUG_TX_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	20002876 	.word	0x20002876
 800894c:	2000277c 	.word	0x2000277c
 8008950:	20002594 	.word	0x20002594

08008954 <HAL_UART_TxCpltCallback>:
//--------------------------------------------------

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  //UNUSED(huart);
	if(huart->Instance == USART2)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a06      	ldr	r2, [pc, #24]	; (800897c <HAL_UART_TxCpltCallback+0x28>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d103      	bne.n	800896e <HAL_UART_TxCpltCallback+0x1a>
	{
		m_ucDebugTXStatus = DEBUG_TX_OK;
 8008966:	4b06      	ldr	r3, [pc, #24]	; (8008980 <HAL_UART_TxCpltCallback+0x2c>)
 8008968:	2200      	movs	r2, #0
 800896a:	701a      	strb	r2, [r3, #0]
	}

	return;
 800896c:	bf00      	nop
 800896e:	bf00      	nop
}
 8008970:	370c      	adds	r7, #12
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	40004400 	.word	0x40004400
 8008980:	20002876 	.word	0x20002876

08008984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008988:	f001 fee8 	bl	800a75c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800898c:	f000 f85c 	bl	8008a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008990:	f000 fe5e 	bl	8009650 <MX_GPIO_Init>
  MX_DMA_Init();
 8008994:	f000 fe16 	bl	80095c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8008998:	f000 fdc0 	bl	800951c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800899c:	f000 fa6e 	bl	8008e7c <MX_TIM1_Init>
  MX_TIM3_Init();
 80089a0:	f000 fb56 	bl	8009050 <MX_TIM3_Init>
  MX_TIM4_Init();
 80089a4:	f000 fba8 	bl	80090f8 <MX_TIM4_Init>
  MX_TIM9_Init();
 80089a8:	f000 fcea 	bl	8009380 <MX_TIM9_Init>
  MX_ADC1_Init();
 80089ac:	f000 f8be 	bl	8008b2c <MX_ADC1_Init>
  MX_TIM2_Init();
 80089b0:	f000 fb02 	bl	8008fb8 <MX_TIM2_Init>
  MX_TIM5_Init();
 80089b4:	f000 fbf4 	bl	80091a0 <MX_TIM5_Init>
  MX_ADC2_Init();
 80089b8:	f000 f950 	bl	8008c5c <MX_ADC2_Init>
  MX_TIM8_Init();
 80089bc:	f000 fc3e 	bl	800923c <MX_TIM8_Init>
  MX_TIM12_Init();
 80089c0:	f000 fd4a 	bl	8009458 <MX_TIM12_Init>
  MX_I2C1_Init();
 80089c4:	f000 f9fe 	bl	8008dc4 <MX_I2C1_Init>
  MX_I2C3_Init();
 80089c8:	f000 fa2a 	bl	8008e20 <MX_I2C3_Init>
  MX_USART3_UART_Init();
 80089cc:	f000 fdd0 	bl	8009570 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // all inits
  DebugInit();
 80089d0:	f7ff ff2c 	bl	800882c <DebugInit>
  I2CDevicesInit();		// many other inits may relay on the I2C EEPROM
 80089d4:	f7f9 fa8a 	bl	8001eec <I2CDevicesInit>
  AddressInit();
 80089d8:	f7f8 faa4 	bl	8000f24 <AddressInit>
  WS2812Init();
 80089dc:	f7fd fe56 	bl	800668c <WS2812Init>
  WheelInit();
 80089e0:	f7ff f8c4 	bl	8007b6c <WheelInit>
  InteractionInit();
 80089e4:	f7fa fb78 	bl	80030d8 <InteractionInit>
  QREInit();
 80089e8:	f7fd f9ca 	bl	8005d80 <QREInit>
  IrTsopInit();
 80089ec:	f7fc fe4e 	bl	800568c <IrTsopInit>
  AudioInit();
 80089f0:	f7f9 f834 	bl	8001a5c <AudioInit>
  VL53l0xInit();
 80089f4:	f7fd fc14 	bl	8006220 <VL53l0xInit>



  ApplicationInit();
 80089f8:	f7f8 fb78 	bl	80010ec <ApplicationInit>




  // tests
  sprintf(m_ucDebufTestBuffer,"my first robot string 2\r\n");
 80089fc:	4910      	ldr	r1, [pc, #64]	; (8008a40 <main+0xbc>)
 80089fe:	4811      	ldr	r0, [pc, #68]	; (8008a44 <main+0xc0>)
 8008a00:	f00a f9c4 	bl	8012d8c <siprintf>
  DebugSendData((uint8_t *)m_ucDebufTestBuffer, strlen(m_ucDebufTestBuffer));
 8008a04:	480f      	ldr	r0, [pc, #60]	; (8008a44 <main+0xc0>)
 8008a06:	f7f7 fc53 	bl	80002b0 <strlen>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	4619      	mov	r1, r3
 8008a10:	480c      	ldr	r0, [pc, #48]	; (8008a44 <main+0xc0>)
 8008a12:	f7ff ff5b 	bl	80088cc <DebugSendData>
  while (1)
  {

	  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH

	  AddressMainLoop();
 8008a16:	f7f8 fa91 	bl	8000f3c <AddressMainLoop>
	  WS2812MainLoop();
 8008a1a:	f7fd fe65 	bl	80066e8 <WS2812MainLoop>
	  WheelMainLoop();
 8008a1e:	f7ff f8fb 	bl	8007c18 <WheelMainLoop>
	  InteractionMainLoop();
 8008a22:	f7fa fb7f 	bl	8003124 <InteractionMainLoop>
	  QREMainLoop();
 8008a26:	f7fd f9bb 	bl	8005da0 <QREMainLoop>
	  IrTsopMainLoop();
 8008a2a:	f7fc fe55 	bl	80056d8 <IrTsopMainLoop>
	  AudioMainLoop();
 8008a2e:	f7f9 f829 	bl	8001a84 <AudioMainLoop>
	  I2CDevicesMainLoop();
 8008a32:	f7f9 fa8b 	bl	8001f4c <I2CDevicesMainLoop>
	  VL53l0xMainLoop();
 8008a36:	f7fd fc01 	bl	800623c <VL53l0xMainLoop>

	  ApplicationMainLoop();
 8008a3a:	f7f8 fbbd 	bl	80011b8 <ApplicationMainLoop>
	  AddressMainLoop();
 8008a3e:	e7ea      	b.n	8008a16 <main+0x92>
 8008a40:	08015848 	.word	0x08015848
 8008a44:	20002878 	.word	0x20002878

08008a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b094      	sub	sp, #80	; 0x50
 8008a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008a4e:	f107 031c 	add.w	r3, r7, #28
 8008a52:	2234      	movs	r2, #52	; 0x34
 8008a54:	2100      	movs	r1, #0
 8008a56:	4618      	mov	r0, r3
 8008a58:	f00a fb34 	bl	80130c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008a5c:	f107 0308 	add.w	r3, r7, #8
 8008a60:	2200      	movs	r2, #0
 8008a62:	601a      	str	r2, [r3, #0]
 8008a64:	605a      	str	r2, [r3, #4]
 8008a66:	609a      	str	r2, [r3, #8]
 8008a68:	60da      	str	r2, [r3, #12]
 8008a6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	607b      	str	r3, [r7, #4]
 8008a70:	4b2c      	ldr	r3, [pc, #176]	; (8008b24 <SystemClock_Config+0xdc>)
 8008a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a74:	4a2b      	ldr	r2, [pc, #172]	; (8008b24 <SystemClock_Config+0xdc>)
 8008a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8008a7c:	4b29      	ldr	r3, [pc, #164]	; (8008b24 <SystemClock_Config+0xdc>)
 8008a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a84:	607b      	str	r3, [r7, #4]
 8008a86:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008a88:	2300      	movs	r3, #0
 8008a8a:	603b      	str	r3, [r7, #0]
 8008a8c:	4b26      	ldr	r3, [pc, #152]	; (8008b28 <SystemClock_Config+0xe0>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a25      	ldr	r2, [pc, #148]	; (8008b28 <SystemClock_Config+0xe0>)
 8008a92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a96:	6013      	str	r3, [r2, #0]
 8008a98:	4b23      	ldr	r3, [pc, #140]	; (8008b28 <SystemClock_Config+0xe0>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008aa0:	603b      	str	r3, [r7, #0]
 8008aa2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008aac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008aae:	2302      	movs	r3, #2
 8008ab0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008ab2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008ab6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008ab8:	2308      	movs	r3, #8
 8008aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8008abc:	23b4      	movs	r3, #180	; 0xb4
 8008abe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8008ac8:	2302      	movs	r3, #2
 8008aca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008acc:	f107 031c 	add.w	r3, r7, #28
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f006 fa25 	bl	800ef20 <HAL_RCC_OscConfig>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d001      	beq.n	8008ae0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8008adc:	f000 ff5a 	bl	8009994 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008ae0:	f005 fe86 	bl	800e7f0 <HAL_PWREx_EnableOverDrive>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8008aea:	f000 ff53 	bl	8009994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008aee:	230f      	movs	r3, #15
 8008af0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008af2:	2302      	movs	r3, #2
 8008af4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008af6:	2300      	movs	r3, #0
 8008af8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008afa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008afe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b04:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008b06:	f107 0308 	add.w	r3, r7, #8
 8008b0a:	2105      	movs	r1, #5
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f005 febf 	bl	800e890 <HAL_RCC_ClockConfig>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d001      	beq.n	8008b1c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8008b18:	f000 ff3c 	bl	8009994 <Error_Handler>
  }
}
 8008b1c:	bf00      	nop
 8008b1e:	3750      	adds	r7, #80	; 0x50
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	40023800 	.word	0x40023800
 8008b28:	40007000 	.word	0x40007000

08008b2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008b32:	463b      	mov	r3, r7
 8008b34:	2200      	movs	r2, #0
 8008b36:	601a      	str	r2, [r3, #0]
 8008b38:	605a      	str	r2, [r3, #4]
 8008b3a:	609a      	str	r2, [r3, #8]
 8008b3c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8008b3e:	4b44      	ldr	r3, [pc, #272]	; (8008c50 <MX_ADC1_Init+0x124>)
 8008b40:	4a44      	ldr	r2, [pc, #272]	; (8008c54 <MX_ADC1_Init+0x128>)
 8008b42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8008b44:	4b42      	ldr	r3, [pc, #264]	; (8008c50 <MX_ADC1_Init+0x124>)
 8008b46:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008b4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008b4c:	4b40      	ldr	r3, [pc, #256]	; (8008c50 <MX_ADC1_Init+0x124>)
 8008b4e:	2200      	movs	r2, #0
 8008b50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8008b52:	4b3f      	ldr	r3, [pc, #252]	; (8008c50 <MX_ADC1_Init+0x124>)
 8008b54:	2201      	movs	r2, #1
 8008b56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8008b58:	4b3d      	ldr	r3, [pc, #244]	; (8008c50 <MX_ADC1_Init+0x124>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008b5e:	4b3c      	ldr	r3, [pc, #240]	; (8008c50 <MX_ADC1_Init+0x124>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008b66:	4b3a      	ldr	r3, [pc, #232]	; (8008c50 <MX_ADC1_Init+0x124>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008b6c:	4b38      	ldr	r3, [pc, #224]	; (8008c50 <MX_ADC1_Init+0x124>)
 8008b6e:	4a3a      	ldr	r2, [pc, #232]	; (8008c58 <MX_ADC1_Init+0x12c>)
 8008b70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008b72:	4b37      	ldr	r3, [pc, #220]	; (8008c50 <MX_ADC1_Init+0x124>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8008b78:	4b35      	ldr	r3, [pc, #212]	; (8008c50 <MX_ADC1_Init+0x124>)
 8008b7a:	2206      	movs	r2, #6
 8008b7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8008b7e:	4b34      	ldr	r3, [pc, #208]	; (8008c50 <MX_ADC1_Init+0x124>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8008b86:	4b32      	ldr	r3, [pc, #200]	; (8008c50 <MX_ADC1_Init+0x124>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008b8c:	4830      	ldr	r0, [pc, #192]	; (8008c50 <MX_ADC1_Init+0x124>)
 8008b8e:	f001 fe57 	bl	800a840 <HAL_ADC_Init>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d001      	beq.n	8008b9c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8008b98:	f000 fefc 	bl	8009994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8008b9c:	2309      	movs	r3, #9
 8008b9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8008ba4:	2304      	movs	r3, #4
 8008ba6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008ba8:	463b      	mov	r3, r7
 8008baa:	4619      	mov	r1, r3
 8008bac:	4828      	ldr	r0, [pc, #160]	; (8008c50 <MX_ADC1_Init+0x124>)
 8008bae:	f001 ffaf 	bl	800ab10 <HAL_ADC_ConfigChannel>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d001      	beq.n	8008bbc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8008bb8:	f000 feec 	bl	8009994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8008bbc:	2304      	movs	r3, #4
 8008bbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008bc4:	463b      	mov	r3, r7
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	4821      	ldr	r0, [pc, #132]	; (8008c50 <MX_ADC1_Init+0x124>)
 8008bca:	f001 ffa1 	bl	800ab10 <HAL_ADC_ConfigChannel>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d001      	beq.n	8008bd8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8008bd4:	f000 fede 	bl	8009994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8008bd8:	2305      	movs	r3, #5
 8008bda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008be0:	463b      	mov	r3, r7
 8008be2:	4619      	mov	r1, r3
 8008be4:	481a      	ldr	r0, [pc, #104]	; (8008c50 <MX_ADC1_Init+0x124>)
 8008be6:	f001 ff93 	bl	800ab10 <HAL_ADC_ConfigChannel>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8008bf0:	f000 fed0 	bl	8009994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8008bf4:	230d      	movs	r3, #13
 8008bf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8008bf8:	2304      	movs	r3, #4
 8008bfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008bfc:	463b      	mov	r3, r7
 8008bfe:	4619      	mov	r1, r3
 8008c00:	4813      	ldr	r0, [pc, #76]	; (8008c50 <MX_ADC1_Init+0x124>)
 8008c02:	f001 ff85 	bl	800ab10 <HAL_ADC_ConfigChannel>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8008c0c:	f000 fec2 	bl	8009994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8008c10:	230c      	movs	r3, #12
 8008c12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8008c14:	2305      	movs	r3, #5
 8008c16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008c18:	463b      	mov	r3, r7
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	480c      	ldr	r0, [pc, #48]	; (8008c50 <MX_ADC1_Init+0x124>)
 8008c1e:	f001 ff77 	bl	800ab10 <HAL_ADC_ConfigChannel>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d001      	beq.n	8008c2c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8008c28:	f000 feb4 	bl	8009994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8008c2c:	230b      	movs	r3, #11
 8008c2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8008c30:	2306      	movs	r3, #6
 8008c32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008c34:	463b      	mov	r3, r7
 8008c36:	4619      	mov	r1, r3
 8008c38:	4805      	ldr	r0, [pc, #20]	; (8008c50 <MX_ADC1_Init+0x124>)
 8008c3a:	f001 ff69 	bl	800ab10 <HAL_ADC_ConfigChannel>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8008c44:	f000 fea6 	bl	8009994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008c48:	bf00      	nop
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	200020fc 	.word	0x200020fc
 8008c54:	40012000 	.word	0x40012000
 8008c58:	0f000001 	.word	0x0f000001

08008c5c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008c62:	463b      	mov	r3, r7
 8008c64:	2200      	movs	r2, #0
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	605a      	str	r2, [r3, #4]
 8008c6a:	609a      	str	r2, [r3, #8]
 8008c6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8008c6e:	4b52      	ldr	r3, [pc, #328]	; (8008db8 <MX_ADC2_Init+0x15c>)
 8008c70:	4a52      	ldr	r2, [pc, #328]	; (8008dbc <MX_ADC2_Init+0x160>)
 8008c72:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8008c74:	4b50      	ldr	r3, [pc, #320]	; (8008db8 <MX_ADC2_Init+0x15c>)
 8008c76:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008c7a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8008c7c:	4b4e      	ldr	r3, [pc, #312]	; (8008db8 <MX_ADC2_Init+0x15c>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8008c82:	4b4d      	ldr	r3, [pc, #308]	; (8008db8 <MX_ADC2_Init+0x15c>)
 8008c84:	2201      	movs	r2, #1
 8008c86:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8008c88:	4b4b      	ldr	r3, [pc, #300]	; (8008db8 <MX_ADC2_Init+0x15c>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8008c8e:	4b4a      	ldr	r3, [pc, #296]	; (8008db8 <MX_ADC2_Init+0x15c>)
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008c96:	4b48      	ldr	r3, [pc, #288]	; (8008db8 <MX_ADC2_Init+0x15c>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008c9c:	4b46      	ldr	r3, [pc, #280]	; (8008db8 <MX_ADC2_Init+0x15c>)
 8008c9e:	4a48      	ldr	r2, [pc, #288]	; (8008dc0 <MX_ADC2_Init+0x164>)
 8008ca0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008ca2:	4b45      	ldr	r3, [pc, #276]	; (8008db8 <MX_ADC2_Init+0x15c>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 8;
 8008ca8:	4b43      	ldr	r3, [pc, #268]	; (8008db8 <MX_ADC2_Init+0x15c>)
 8008caa:	2208      	movs	r2, #8
 8008cac:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8008cae:	4b42      	ldr	r3, [pc, #264]	; (8008db8 <MX_ADC2_Init+0x15c>)
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8008cb6:	4b40      	ldr	r3, [pc, #256]	; (8008db8 <MX_ADC2_Init+0x15c>)
 8008cb8:	2200      	movs	r2, #0
 8008cba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8008cbc:	483e      	ldr	r0, [pc, #248]	; (8008db8 <MX_ADC2_Init+0x15c>)
 8008cbe:	f001 fdbf 	bl	800a840 <HAL_ADC_Init>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d001      	beq.n	8008ccc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8008cc8:	f000 fe64 	bl	8009994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8008ccc:	230f      	movs	r3, #15
 8008cce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8008cd4:	2302      	movs	r3, #2
 8008cd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008cd8:	463b      	mov	r3, r7
 8008cda:	4619      	mov	r1, r3
 8008cdc:	4836      	ldr	r0, [pc, #216]	; (8008db8 <MX_ADC2_Init+0x15c>)
 8008cde:	f001 ff17 	bl	800ab10 <HAL_ADC_ConfigChannel>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d001      	beq.n	8008cec <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8008ce8:	f000 fe54 	bl	8009994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8008cec:	230e      	movs	r3, #14
 8008cee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8008cf0:	2302      	movs	r3, #2
 8008cf2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008cf4:	463b      	mov	r3, r7
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	482f      	ldr	r0, [pc, #188]	; (8008db8 <MX_ADC2_Init+0x15c>)
 8008cfa:	f001 ff09 	bl	800ab10 <HAL_ADC_ConfigChannel>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d001      	beq.n	8008d08 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8008d04:	f000 fe46 	bl	8009994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8008d08:	2308      	movs	r3, #8
 8008d0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008d10:	463b      	mov	r3, r7
 8008d12:	4619      	mov	r1, r3
 8008d14:	4828      	ldr	r0, [pc, #160]	; (8008db8 <MX_ADC2_Init+0x15c>)
 8008d16:	f001 fefb 	bl	800ab10 <HAL_ADC_ConfigChannel>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d001      	beq.n	8008d24 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8008d20:	f000 fe38 	bl	8009994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8008d24:	2307      	movs	r3, #7
 8008d26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8008d28:	2304      	movs	r3, #4
 8008d2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008d2c:	463b      	mov	r3, r7
 8008d2e:	4619      	mov	r1, r3
 8008d30:	4821      	ldr	r0, [pc, #132]	; (8008db8 <MX_ADC2_Init+0x15c>)
 8008d32:	f001 feed 	bl	800ab10 <HAL_ADC_ConfigChannel>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d001      	beq.n	8008d40 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8008d3c:	f000 fe2a 	bl	8009994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8008d40:	230a      	movs	r3, #10
 8008d42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8008d44:	2305      	movs	r3, #5
 8008d46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008d48:	463b      	mov	r3, r7
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	481a      	ldr	r0, [pc, #104]	; (8008db8 <MX_ADC2_Init+0x15c>)
 8008d4e:	f001 fedf 	bl	800ab10 <HAL_ADC_ConfigChannel>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8008d58:	f000 fe1c 	bl	8009994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8008d60:	2306      	movs	r3, #6
 8008d62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008d64:	463b      	mov	r3, r7
 8008d66:	4619      	mov	r1, r3
 8008d68:	4813      	ldr	r0, [pc, #76]	; (8008db8 <MX_ADC2_Init+0x15c>)
 8008d6a:	f001 fed1 	bl	800ab10 <HAL_ADC_ConfigChannel>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d001      	beq.n	8008d78 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8008d74:	f000 fe0e 	bl	8009994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8008d7c:	2307      	movs	r3, #7
 8008d7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008d80:	463b      	mov	r3, r7
 8008d82:	4619      	mov	r1, r3
 8008d84:	480c      	ldr	r0, [pc, #48]	; (8008db8 <MX_ADC2_Init+0x15c>)
 8008d86:	f001 fec3 	bl	800ab10 <HAL_ADC_ConfigChannel>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d001      	beq.n	8008d94 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8008d90:	f000 fe00 	bl	8009994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8008d94:	2302      	movs	r3, #2
 8008d96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8008d98:	2308      	movs	r3, #8
 8008d9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008d9c:	463b      	mov	r3, r7
 8008d9e:	4619      	mov	r1, r3
 8008da0:	4805      	ldr	r0, [pc, #20]	; (8008db8 <MX_ADC2_Init+0x15c>)
 8008da2:	f001 feb5 	bl	800ab10 <HAL_ADC_ConfigChannel>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8008dac:	f000 fdf2 	bl	8009994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8008db0:	bf00      	nop
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	20002144 	.word	0x20002144
 8008dbc:	40012100 	.word	0x40012100
 8008dc0:	0f000001 	.word	0x0f000001

08008dc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008dc8:	4b12      	ldr	r3, [pc, #72]	; (8008e14 <MX_I2C1_Init+0x50>)
 8008dca:	4a13      	ldr	r2, [pc, #76]	; (8008e18 <MX_I2C1_Init+0x54>)
 8008dcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8008dce:	4b11      	ldr	r3, [pc, #68]	; (8008e14 <MX_I2C1_Init+0x50>)
 8008dd0:	4a12      	ldr	r2, [pc, #72]	; (8008e1c <MX_I2C1_Init+0x58>)
 8008dd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008dd4:	4b0f      	ldr	r3, [pc, #60]	; (8008e14 <MX_I2C1_Init+0x50>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008dda:	4b0e      	ldr	r3, [pc, #56]	; (8008e14 <MX_I2C1_Init+0x50>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008de0:	4b0c      	ldr	r3, [pc, #48]	; (8008e14 <MX_I2C1_Init+0x50>)
 8008de2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008de6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008de8:	4b0a      	ldr	r3, [pc, #40]	; (8008e14 <MX_I2C1_Init+0x50>)
 8008dea:	2200      	movs	r2, #0
 8008dec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008dee:	4b09      	ldr	r3, [pc, #36]	; (8008e14 <MX_I2C1_Init+0x50>)
 8008df0:	2200      	movs	r2, #0
 8008df2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008df4:	4b07      	ldr	r3, [pc, #28]	; (8008e14 <MX_I2C1_Init+0x50>)
 8008df6:	2200      	movs	r2, #0
 8008df8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008dfa:	4b06      	ldr	r3, [pc, #24]	; (8008e14 <MX_I2C1_Init+0x50>)
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008e00:	4804      	ldr	r0, [pc, #16]	; (8008e14 <MX_I2C1_Init+0x50>)
 8008e02:	f003 f835 	bl	800be70 <HAL_I2C_Init>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d001      	beq.n	8008e10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008e0c:	f000 fdc2 	bl	8009994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008e10:	bf00      	nop
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	2000224c 	.word	0x2000224c
 8008e18:	40005400 	.word	0x40005400
 8008e1c:	000186a0 	.word	0x000186a0

08008e20 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8008e24:	4b12      	ldr	r3, [pc, #72]	; (8008e70 <MX_I2C3_Init+0x50>)
 8008e26:	4a13      	ldr	r2, [pc, #76]	; (8008e74 <MX_I2C3_Init+0x54>)
 8008e28:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8008e2a:	4b11      	ldr	r3, [pc, #68]	; (8008e70 <MX_I2C3_Init+0x50>)
 8008e2c:	4a12      	ldr	r2, [pc, #72]	; (8008e78 <MX_I2C3_Init+0x58>)
 8008e2e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008e30:	4b0f      	ldr	r3, [pc, #60]	; (8008e70 <MX_I2C3_Init+0x50>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8008e36:	4b0e      	ldr	r3, [pc, #56]	; (8008e70 <MX_I2C3_Init+0x50>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008e3c:	4b0c      	ldr	r3, [pc, #48]	; (8008e70 <MX_I2C3_Init+0x50>)
 8008e3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008e42:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008e44:	4b0a      	ldr	r3, [pc, #40]	; (8008e70 <MX_I2C3_Init+0x50>)
 8008e46:	2200      	movs	r2, #0
 8008e48:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8008e4a:	4b09      	ldr	r3, [pc, #36]	; (8008e70 <MX_I2C3_Init+0x50>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008e50:	4b07      	ldr	r3, [pc, #28]	; (8008e70 <MX_I2C3_Init+0x50>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008e56:	4b06      	ldr	r3, [pc, #24]	; (8008e70 <MX_I2C3_Init+0x50>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8008e5c:	4804      	ldr	r0, [pc, #16]	; (8008e70 <MX_I2C3_Init+0x50>)
 8008e5e:	f003 f807 	bl	800be70 <HAL_I2C_Init>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8008e68:	f000 fd94 	bl	8009994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8008e6c:	bf00      	nop
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	200022a0 	.word	0x200022a0
 8008e74:	40005c00 	.word	0x40005c00
 8008e78:	000186a0 	.word	0x000186a0

08008e7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b096      	sub	sp, #88	; 0x58
 8008e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008e82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008e86:	2200      	movs	r2, #0
 8008e88:	601a      	str	r2, [r3, #0]
 8008e8a:	605a      	str	r2, [r3, #4]
 8008e8c:	609a      	str	r2, [r3, #8]
 8008e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008e90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008e94:	2200      	movs	r2, #0
 8008e96:	601a      	str	r2, [r3, #0]
 8008e98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	605a      	str	r2, [r3, #4]
 8008ea4:	609a      	str	r2, [r3, #8]
 8008ea6:	60da      	str	r2, [r3, #12]
 8008ea8:	611a      	str	r2, [r3, #16]
 8008eaa:	615a      	str	r2, [r3, #20]
 8008eac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008eae:	1d3b      	adds	r3, r7, #4
 8008eb0:	2220      	movs	r2, #32
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f00a f905 	bl	80130c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008eba:	4b3d      	ldr	r3, [pc, #244]	; (8008fb0 <MX_TIM1_Init+0x134>)
 8008ebc:	4a3d      	ldr	r2, [pc, #244]	; (8008fb4 <MX_TIM1_Init+0x138>)
 8008ebe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8008ec0:	4b3b      	ldr	r3, [pc, #236]	; (8008fb0 <MX_TIM1_Init+0x134>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ec6:	4b3a      	ldr	r3, [pc, #232]	; (8008fb0 <MX_TIM1_Init+0x134>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 224;
 8008ecc:	4b38      	ldr	r3, [pc, #224]	; (8008fb0 <MX_TIM1_Init+0x134>)
 8008ece:	22e0      	movs	r2, #224	; 0xe0
 8008ed0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ed2:	4b37      	ldr	r3, [pc, #220]	; (8008fb0 <MX_TIM1_Init+0x134>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008ed8:	4b35      	ldr	r3, [pc, #212]	; (8008fb0 <MX_TIM1_Init+0x134>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ede:	4b34      	ldr	r3, [pc, #208]	; (8008fb0 <MX_TIM1_Init+0x134>)
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008ee4:	4832      	ldr	r0, [pc, #200]	; (8008fb0 <MX_TIM1_Init+0x134>)
 8008ee6:	f006 fab9 	bl	800f45c <HAL_TIM_Base_Init>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d001      	beq.n	8008ef4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8008ef0:	f000 fd50 	bl	8009994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ef8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008efa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008efe:	4619      	mov	r1, r3
 8008f00:	482b      	ldr	r0, [pc, #172]	; (8008fb0 <MX_TIM1_Init+0x134>)
 8008f02:	f007 fc0b 	bl	801071c <HAL_TIM_ConfigClockSource>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8008f0c:	f000 fd42 	bl	8009994 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008f10:	4827      	ldr	r0, [pc, #156]	; (8008fb0 <MX_TIM1_Init+0x134>)
 8008f12:	f006 fced 	bl	800f8f0 <HAL_TIM_PWM_Init>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d001      	beq.n	8008f20 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8008f1c:	f000 fd3a 	bl	8009994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f20:	2300      	movs	r3, #0
 8008f22:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f24:	2300      	movs	r3, #0
 8008f26:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008f28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4820      	ldr	r0, [pc, #128]	; (8008fb0 <MX_TIM1_Init+0x134>)
 8008f30:	f008 f8d8 	bl	80110e4 <HAL_TIMEx_MasterConfigSynchronization>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d001      	beq.n	8008f3e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8008f3a:	f000 fd2b 	bl	8009994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008f3e:	2360      	movs	r3, #96	; 0x60
 8008f40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8008f42:	2300      	movs	r3, #0
 8008f44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008f46:	2300      	movs	r3, #0
 8008f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008f52:	2300      	movs	r3, #0
 8008f54:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f5a:	220c      	movs	r2, #12
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	4814      	ldr	r0, [pc, #80]	; (8008fb0 <MX_TIM1_Init+0x134>)
 8008f60:	f007 fb1a 	bl	8010598 <HAL_TIM_PWM_ConfigChannel>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d001      	beq.n	8008f6e <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8008f6a:	f000 fd13 	bl	8009994 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008f72:	2300      	movs	r3, #0
 8008f74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008f76:	2300      	movs	r3, #0
 8008f78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008f82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008f8c:	1d3b      	adds	r3, r7, #4
 8008f8e:	4619      	mov	r1, r3
 8008f90:	4807      	ldr	r0, [pc, #28]	; (8008fb0 <MX_TIM1_Init+0x134>)
 8008f92:	f008 f923 	bl	80111dc <HAL_TIMEx_ConfigBreakDeadTime>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d001      	beq.n	8008fa0 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8008f9c:	f000 fcfa 	bl	8009994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008fa0:	4803      	ldr	r0, [pc, #12]	; (8008fb0 <MX_TIM1_Init+0x134>)
 8008fa2:	f001 f86f 	bl	800a084 <HAL_TIM_MspPostInit>

}
 8008fa6:	bf00      	nop
 8008fa8:	3758      	adds	r7, #88	; 0x58
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	200022f4 	.word	0x200022f4
 8008fb4:	40010000 	.word	0x40010000

08008fb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008fbe:	f107 0308 	add.w	r3, r7, #8
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	601a      	str	r2, [r3, #0]
 8008fc6:	605a      	str	r2, [r3, #4]
 8008fc8:	609a      	str	r2, [r3, #8]
 8008fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008fcc:	463b      	mov	r3, r7
 8008fce:	2200      	movs	r2, #0
 8008fd0:	601a      	str	r2, [r3, #0]
 8008fd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008fd4:	4b1d      	ldr	r3, [pc, #116]	; (800904c <MX_TIM2_Init+0x94>)
 8008fd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008fda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008fdc:	4b1b      	ldr	r3, [pc, #108]	; (800904c <MX_TIM2_Init+0x94>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008fe2:	4b1a      	ldr	r3, [pc, #104]	; (800904c <MX_TIM2_Init+0x94>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8999;
 8008fe8:	4b18      	ldr	r3, [pc, #96]	; (800904c <MX_TIM2_Init+0x94>)
 8008fea:	f242 3227 	movw	r2, #8999	; 0x2327
 8008fee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ff0:	4b16      	ldr	r3, [pc, #88]	; (800904c <MX_TIM2_Init+0x94>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ff6:	4b15      	ldr	r3, [pc, #84]	; (800904c <MX_TIM2_Init+0x94>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008ffc:	4813      	ldr	r0, [pc, #76]	; (800904c <MX_TIM2_Init+0x94>)
 8008ffe:	f006 fa2d 	bl	800f45c <HAL_TIM_Base_Init>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8009008:	f000 fcc4 	bl	8009994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800900c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009010:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009012:	f107 0308 	add.w	r3, r7, #8
 8009016:	4619      	mov	r1, r3
 8009018:	480c      	ldr	r0, [pc, #48]	; (800904c <MX_TIM2_Init+0x94>)
 800901a:	f007 fb7f 	bl	801071c <HAL_TIM_ConfigClockSource>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d001      	beq.n	8009028 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8009024:	f000 fcb6 	bl	8009994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009028:	2300      	movs	r3, #0
 800902a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800902c:	2300      	movs	r3, #0
 800902e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009030:	463b      	mov	r3, r7
 8009032:	4619      	mov	r1, r3
 8009034:	4805      	ldr	r0, [pc, #20]	; (800904c <MX_TIM2_Init+0x94>)
 8009036:	f008 f855 	bl	80110e4 <HAL_TIMEx_MasterConfigSynchronization>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d001      	beq.n	8009044 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8009040:	f000 fca8 	bl	8009994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8009044:	bf00      	nop
 8009046:	3718      	adds	r7, #24
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	2000233c 	.word	0x2000233c

08009050 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b08c      	sub	sp, #48	; 0x30
 8009054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009056:	f107 030c 	add.w	r3, r7, #12
 800905a:	2224      	movs	r2, #36	; 0x24
 800905c:	2100      	movs	r1, #0
 800905e:	4618      	mov	r0, r3
 8009060:	f00a f830 	bl	80130c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009064:	1d3b      	adds	r3, r7, #4
 8009066:	2200      	movs	r2, #0
 8009068:	601a      	str	r2, [r3, #0]
 800906a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800906c:	4b20      	ldr	r3, [pc, #128]	; (80090f0 <MX_TIM3_Init+0xa0>)
 800906e:	4a21      	ldr	r2, [pc, #132]	; (80090f4 <MX_TIM3_Init+0xa4>)
 8009070:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8009072:	4b1f      	ldr	r3, [pc, #124]	; (80090f0 <MX_TIM3_Init+0xa0>)
 8009074:	2200      	movs	r2, #0
 8009076:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009078:	4b1d      	ldr	r3, [pc, #116]	; (80090f0 <MX_TIM3_Init+0xa0>)
 800907a:	2200      	movs	r2, #0
 800907c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800907e:	4b1c      	ldr	r3, [pc, #112]	; (80090f0 <MX_TIM3_Init+0xa0>)
 8009080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009084:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009086:	4b1a      	ldr	r3, [pc, #104]	; (80090f0 <MX_TIM3_Init+0xa0>)
 8009088:	2200      	movs	r2, #0
 800908a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800908c:	4b18      	ldr	r3, [pc, #96]	; (80090f0 <MX_TIM3_Init+0xa0>)
 800908e:	2200      	movs	r2, #0
 8009090:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009092:	2303      	movs	r3, #3
 8009094:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8009096:	2302      	movs	r3, #2
 8009098:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800909a:	2301      	movs	r3, #1
 800909c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV8;
 800909e:	230c      	movs	r3, #12
 80090a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 80090a2:	2308      	movs	r3, #8
 80090a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80090a6:	2302      	movs	r3, #2
 80090a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80090aa:	2301      	movs	r3, #1
 80090ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV8;
 80090ae:	230c      	movs	r3, #12
 80090b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 8;
 80090b2:	2308      	movs	r3, #8
 80090b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80090b6:	f107 030c 	add.w	r3, r7, #12
 80090ba:	4619      	mov	r1, r3
 80090bc:	480c      	ldr	r0, [pc, #48]	; (80090f0 <MX_TIM3_Init+0xa0>)
 80090be:	f006 ffd3 	bl	8010068 <HAL_TIM_Encoder_Init>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80090c8:	f000 fc64 	bl	8009994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80090cc:	2300      	movs	r3, #0
 80090ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80090d0:	2300      	movs	r3, #0
 80090d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80090d4:	1d3b      	adds	r3, r7, #4
 80090d6:	4619      	mov	r1, r3
 80090d8:	4805      	ldr	r0, [pc, #20]	; (80090f0 <MX_TIM3_Init+0xa0>)
 80090da:	f008 f803 	bl	80110e4 <HAL_TIMEx_MasterConfigSynchronization>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80090e4:	f000 fc56 	bl	8009994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80090e8:	bf00      	nop
 80090ea:	3730      	adds	r7, #48	; 0x30
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	20002384 	.word	0x20002384
 80090f4:	40000400 	.word	0x40000400

080090f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b08c      	sub	sp, #48	; 0x30
 80090fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80090fe:	f107 030c 	add.w	r3, r7, #12
 8009102:	2224      	movs	r2, #36	; 0x24
 8009104:	2100      	movs	r1, #0
 8009106:	4618      	mov	r0, r3
 8009108:	f009 ffdc 	bl	80130c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800910c:	1d3b      	adds	r3, r7, #4
 800910e:	2200      	movs	r2, #0
 8009110:	601a      	str	r2, [r3, #0]
 8009112:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8009114:	4b20      	ldr	r3, [pc, #128]	; (8009198 <MX_TIM4_Init+0xa0>)
 8009116:	4a21      	ldr	r2, [pc, #132]	; (800919c <MX_TIM4_Init+0xa4>)
 8009118:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800911a:	4b1f      	ldr	r3, [pc, #124]	; (8009198 <MX_TIM4_Init+0xa0>)
 800911c:	2200      	movs	r2, #0
 800911e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009120:	4b1d      	ldr	r3, [pc, #116]	; (8009198 <MX_TIM4_Init+0xa0>)
 8009122:	2200      	movs	r2, #0
 8009124:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8009126:	4b1c      	ldr	r3, [pc, #112]	; (8009198 <MX_TIM4_Init+0xa0>)
 8009128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800912c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800912e:	4b1a      	ldr	r3, [pc, #104]	; (8009198 <MX_TIM4_Init+0xa0>)
 8009130:	2200      	movs	r2, #0
 8009132:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009134:	4b18      	ldr	r3, [pc, #96]	; (8009198 <MX_TIM4_Init+0xa0>)
 8009136:	2200      	movs	r2, #0
 8009138:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800913a:	2303      	movs	r3, #3
 800913c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800913e:	2302      	movs	r3, #2
 8009140:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009142:	2301      	movs	r3, #1
 8009144:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV8;
 8009146:	230c      	movs	r3, #12
 8009148:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 800914a:	2308      	movs	r3, #8
 800914c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800914e:	2302      	movs	r3, #2
 8009150:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009152:	2301      	movs	r3, #1
 8009154:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV8;
 8009156:	230c      	movs	r3, #12
 8009158:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 8;
 800915a:	2308      	movs	r3, #8
 800915c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800915e:	f107 030c 	add.w	r3, r7, #12
 8009162:	4619      	mov	r1, r3
 8009164:	480c      	ldr	r0, [pc, #48]	; (8009198 <MX_TIM4_Init+0xa0>)
 8009166:	f006 ff7f 	bl	8010068 <HAL_TIM_Encoder_Init>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d001      	beq.n	8009174 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8009170:	f000 fc10 	bl	8009994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009174:	2300      	movs	r3, #0
 8009176:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009178:	2300      	movs	r3, #0
 800917a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800917c:	1d3b      	adds	r3, r7, #4
 800917e:	4619      	mov	r1, r3
 8009180:	4805      	ldr	r0, [pc, #20]	; (8009198 <MX_TIM4_Init+0xa0>)
 8009182:	f007 ffaf 	bl	80110e4 <HAL_TIMEx_MasterConfigSynchronization>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800918c:	f000 fc02 	bl	8009994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8009190:	bf00      	nop
 8009192:	3730      	adds	r7, #48	; 0x30
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	200023cc 	.word	0x200023cc
 800919c:	40000800 	.word	0x40000800

080091a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80091a6:	f107 0308 	add.w	r3, r7, #8
 80091aa:	2200      	movs	r2, #0
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	605a      	str	r2, [r3, #4]
 80091b0:	609a      	str	r2, [r3, #8]
 80091b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80091b4:	463b      	mov	r3, r7
 80091b6:	2200      	movs	r2, #0
 80091b8:	601a      	str	r2, [r3, #0]
 80091ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80091bc:	4b1d      	ldr	r3, [pc, #116]	; (8009234 <MX_TIM5_Init+0x94>)
 80091be:	4a1e      	ldr	r2, [pc, #120]	; (8009238 <MX_TIM5_Init+0x98>)
 80091c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 89;
 80091c2:	4b1c      	ldr	r3, [pc, #112]	; (8009234 <MX_TIM5_Init+0x94>)
 80091c4:	2259      	movs	r2, #89	; 0x59
 80091c6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80091c8:	4b1a      	ldr	r3, [pc, #104]	; (8009234 <MX_TIM5_Init+0x94>)
 80091ca:	2200      	movs	r2, #0
 80091cc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80091ce:	4b19      	ldr	r3, [pc, #100]	; (8009234 <MX_TIM5_Init+0x94>)
 80091d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091d4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80091d6:	4b17      	ldr	r3, [pc, #92]	; (8009234 <MX_TIM5_Init+0x94>)
 80091d8:	2200      	movs	r2, #0
 80091da:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80091dc:	4b15      	ldr	r3, [pc, #84]	; (8009234 <MX_TIM5_Init+0x94>)
 80091de:	2200      	movs	r2, #0
 80091e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80091e2:	4814      	ldr	r0, [pc, #80]	; (8009234 <MX_TIM5_Init+0x94>)
 80091e4:	f006 f93a 	bl	800f45c <HAL_TIM_Base_Init>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80091ee:	f000 fbd1 	bl	8009994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80091f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80091f8:	f107 0308 	add.w	r3, r7, #8
 80091fc:	4619      	mov	r1, r3
 80091fe:	480d      	ldr	r0, [pc, #52]	; (8009234 <MX_TIM5_Init+0x94>)
 8009200:	f007 fa8c 	bl	801071c <HAL_TIM_ConfigClockSource>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d001      	beq.n	800920e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800920a:	f000 fbc3 	bl	8009994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800920e:	2300      	movs	r3, #0
 8009210:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009212:	2300      	movs	r3, #0
 8009214:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8009216:	463b      	mov	r3, r7
 8009218:	4619      	mov	r1, r3
 800921a:	4806      	ldr	r0, [pc, #24]	; (8009234 <MX_TIM5_Init+0x94>)
 800921c:	f007 ff62 	bl	80110e4 <HAL_TIMEx_MasterConfigSynchronization>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d001      	beq.n	800922a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8009226:	f000 fbb5 	bl	8009994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800922a:	bf00      	nop
 800922c:	3718      	adds	r7, #24
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	20002414 	.word	0x20002414
 8009238:	40000c00 	.word	0x40000c00

0800923c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b096      	sub	sp, #88	; 0x58
 8009240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009242:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009246:	2200      	movs	r2, #0
 8009248:	601a      	str	r2, [r3, #0]
 800924a:	605a      	str	r2, [r3, #4]
 800924c:	609a      	str	r2, [r3, #8]
 800924e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009250:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009254:	2200      	movs	r2, #0
 8009256:	601a      	str	r2, [r3, #0]
 8009258:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800925a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800925e:	2200      	movs	r2, #0
 8009260:	601a      	str	r2, [r3, #0]
 8009262:	605a      	str	r2, [r3, #4]
 8009264:	609a      	str	r2, [r3, #8]
 8009266:	60da      	str	r2, [r3, #12]
 8009268:	611a      	str	r2, [r3, #16]
 800926a:	615a      	str	r2, [r3, #20]
 800926c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800926e:	1d3b      	adds	r3, r7, #4
 8009270:	2220      	movs	r2, #32
 8009272:	2100      	movs	r1, #0
 8009274:	4618      	mov	r0, r3
 8009276:	f009 ff25 	bl	80130c4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800927a:	4b3f      	ldr	r3, [pc, #252]	; (8009378 <MX_TIM8_Init+0x13c>)
 800927c:	4a3f      	ldr	r2, [pc, #252]	; (800937c <MX_TIM8_Init+0x140>)
 800927e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8009280:	4b3d      	ldr	r3, [pc, #244]	; (8009378 <MX_TIM8_Init+0x13c>)
 8009282:	2200      	movs	r2, #0
 8009284:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009286:	4b3c      	ldr	r3, [pc, #240]	; (8009378 <MX_TIM8_Init+0x13c>)
 8009288:	2200      	movs	r2, #0
 800928a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3213;
 800928c:	4b3a      	ldr	r3, [pc, #232]	; (8009378 <MX_TIM8_Init+0x13c>)
 800928e:	f640 428d 	movw	r2, #3213	; 0xc8d
 8009292:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009294:	4b38      	ldr	r3, [pc, #224]	; (8009378 <MX_TIM8_Init+0x13c>)
 8009296:	2200      	movs	r2, #0
 8009298:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800929a:	4b37      	ldr	r3, [pc, #220]	; (8009378 <MX_TIM8_Init+0x13c>)
 800929c:	2200      	movs	r2, #0
 800929e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80092a0:	4b35      	ldr	r3, [pc, #212]	; (8009378 <MX_TIM8_Init+0x13c>)
 80092a2:	2200      	movs	r2, #0
 80092a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80092a6:	4834      	ldr	r0, [pc, #208]	; (8009378 <MX_TIM8_Init+0x13c>)
 80092a8:	f006 f8d8 	bl	800f45c <HAL_TIM_Base_Init>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80092b2:	f000 fb6f 	bl	8009994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80092b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80092bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80092c0:	4619      	mov	r1, r3
 80092c2:	482d      	ldr	r0, [pc, #180]	; (8009378 <MX_TIM8_Init+0x13c>)
 80092c4:	f007 fa2a 	bl	801071c <HAL_TIM_ConfigClockSource>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80092ce:	f000 fb61 	bl	8009994 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80092d2:	4829      	ldr	r0, [pc, #164]	; (8009378 <MX_TIM8_Init+0x13c>)
 80092d4:	f006 f9ea 	bl	800f6ac <HAL_TIM_OC_Init>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d001      	beq.n	80092e2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80092de:	f000 fb59 	bl	8009994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80092e2:	2300      	movs	r3, #0
 80092e4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80092e6:	2300      	movs	r3, #0
 80092e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80092ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80092ee:	4619      	mov	r1, r3
 80092f0:	4821      	ldr	r0, [pc, #132]	; (8009378 <MX_TIM8_Init+0x13c>)
 80092f2:	f007 fef7 	bl	80110e4 <HAL_TIMEx_MasterConfigSynchronization>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d001      	beq.n	8009300 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80092fc:	f000 fb4a 	bl	8009994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8009300:	2330      	movs	r3, #48	; 0x30
 8009302:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1607;
 8009304:	f240 6347 	movw	r3, #1607	; 0x647
 8009308:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800930a:	2300      	movs	r3, #0
 800930c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800930e:	2300      	movs	r3, #0
 8009310:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009312:	2300      	movs	r3, #0
 8009314:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009316:	2300      	movs	r3, #0
 8009318:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800931a:	2300      	movs	r3, #0
 800931c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800931e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009322:	2208      	movs	r2, #8
 8009324:	4619      	mov	r1, r3
 8009326:	4814      	ldr	r0, [pc, #80]	; (8009378 <MX_TIM8_Init+0x13c>)
 8009328:	f007 f8da 	bl	80104e0 <HAL_TIM_OC_ConfigChannel>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d001      	beq.n	8009336 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8009332:	f000 fb2f 	bl	8009994 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009336:	2300      	movs	r3, #0
 8009338:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800933a:	2300      	movs	r3, #0
 800933c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800933e:	2300      	movs	r3, #0
 8009340:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009342:	2300      	movs	r3, #0
 8009344:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009346:	2300      	movs	r3, #0
 8009348:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800934a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800934e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009350:	2300      	movs	r3, #0
 8009352:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009354:	1d3b      	adds	r3, r7, #4
 8009356:	4619      	mov	r1, r3
 8009358:	4807      	ldr	r0, [pc, #28]	; (8009378 <MX_TIM8_Init+0x13c>)
 800935a:	f007 ff3f 	bl	80111dc <HAL_TIMEx_ConfigBreakDeadTime>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d001      	beq.n	8009368 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8009364:	f000 fb16 	bl	8009994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8009368:	4803      	ldr	r0, [pc, #12]	; (8009378 <MX_TIM8_Init+0x13c>)
 800936a:	f000 fe8b 	bl	800a084 <HAL_TIM_MspPostInit>

}
 800936e:	bf00      	nop
 8009370:	3758      	adds	r7, #88	; 0x58
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	2000245c 	.word	0x2000245c
 800937c:	40010400 	.word	0x40010400

08009380 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b08c      	sub	sp, #48	; 0x30
 8009384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009386:	f107 0320 	add.w	r3, r7, #32
 800938a:	2200      	movs	r2, #0
 800938c:	601a      	str	r2, [r3, #0]
 800938e:	605a      	str	r2, [r3, #4]
 8009390:	609a      	str	r2, [r3, #8]
 8009392:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009394:	1d3b      	adds	r3, r7, #4
 8009396:	2200      	movs	r2, #0
 8009398:	601a      	str	r2, [r3, #0]
 800939a:	605a      	str	r2, [r3, #4]
 800939c:	609a      	str	r2, [r3, #8]
 800939e:	60da      	str	r2, [r3, #12]
 80093a0:	611a      	str	r2, [r3, #16]
 80093a2:	615a      	str	r2, [r3, #20]
 80093a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80093a6:	4b2a      	ldr	r3, [pc, #168]	; (8009450 <MX_TIM9_Init+0xd0>)
 80093a8:	4a2a      	ldr	r2, [pc, #168]	; (8009454 <MX_TIM9_Init+0xd4>)
 80093aa:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 44;
 80093ac:	4b28      	ldr	r3, [pc, #160]	; (8009450 <MX_TIM9_Init+0xd0>)
 80093ae:	222c      	movs	r2, #44	; 0x2c
 80093b0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80093b2:	4b27      	ldr	r3, [pc, #156]	; (8009450 <MX_TIM9_Init+0xd0>)
 80093b4:	2200      	movs	r2, #0
 80093b6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 99;
 80093b8:	4b25      	ldr	r3, [pc, #148]	; (8009450 <MX_TIM9_Init+0xd0>)
 80093ba:	2263      	movs	r2, #99	; 0x63
 80093bc:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80093be:	4b24      	ldr	r3, [pc, #144]	; (8009450 <MX_TIM9_Init+0xd0>)
 80093c0:	2200      	movs	r2, #0
 80093c2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80093c4:	4b22      	ldr	r3, [pc, #136]	; (8009450 <MX_TIM9_Init+0xd0>)
 80093c6:	2200      	movs	r2, #0
 80093c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80093ca:	4821      	ldr	r0, [pc, #132]	; (8009450 <MX_TIM9_Init+0xd0>)
 80093cc:	f006 f846 	bl	800f45c <HAL_TIM_Base_Init>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d001      	beq.n	80093da <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 80093d6:	f000 fadd 	bl	8009994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80093da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093de:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80093e0:	f107 0320 	add.w	r3, r7, #32
 80093e4:	4619      	mov	r1, r3
 80093e6:	481a      	ldr	r0, [pc, #104]	; (8009450 <MX_TIM9_Init+0xd0>)
 80093e8:	f007 f998 	bl	801071c <HAL_TIM_ConfigClockSource>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 80093f2:	f000 facf 	bl	8009994 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80093f6:	4816      	ldr	r0, [pc, #88]	; (8009450 <MX_TIM9_Init+0xd0>)
 80093f8:	f006 fa7a 	bl	800f8f0 <HAL_TIM_PWM_Init>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 8009402:	f000 fac7 	bl	8009994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009406:	2360      	movs	r3, #96	; 0x60
 8009408:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800940a:	2300      	movs	r3, #0
 800940c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800940e:	2300      	movs	r3, #0
 8009410:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009412:	2300      	movs	r3, #0
 8009414:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009416:	1d3b      	adds	r3, r7, #4
 8009418:	2200      	movs	r2, #0
 800941a:	4619      	mov	r1, r3
 800941c:	480c      	ldr	r0, [pc, #48]	; (8009450 <MX_TIM9_Init+0xd0>)
 800941e:	f007 f8bb 	bl	8010598 <HAL_TIM_PWM_ConfigChannel>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d001      	beq.n	800942c <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 8009428:	f000 fab4 	bl	8009994 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800942c:	1d3b      	adds	r3, r7, #4
 800942e:	2204      	movs	r2, #4
 8009430:	4619      	mov	r1, r3
 8009432:	4807      	ldr	r0, [pc, #28]	; (8009450 <MX_TIM9_Init+0xd0>)
 8009434:	f007 f8b0 	bl	8010598 <HAL_TIM_PWM_ConfigChannel>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <MX_TIM9_Init+0xc2>
  {
    Error_Handler();
 800943e:	f000 faa9 	bl	8009994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8009442:	4803      	ldr	r0, [pc, #12]	; (8009450 <MX_TIM9_Init+0xd0>)
 8009444:	f000 fe1e 	bl	800a084 <HAL_TIM_MspPostInit>

}
 8009448:	bf00      	nop
 800944a:	3730      	adds	r7, #48	; 0x30
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	200024a4 	.word	0x200024a4
 8009454:	40014000 	.word	0x40014000

08009458 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b08c      	sub	sp, #48	; 0x30
 800945c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800945e:	f107 0320 	add.w	r3, r7, #32
 8009462:	2200      	movs	r2, #0
 8009464:	601a      	str	r2, [r3, #0]
 8009466:	605a      	str	r2, [r3, #4]
 8009468:	609a      	str	r2, [r3, #8]
 800946a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800946c:	1d3b      	adds	r3, r7, #4
 800946e:	2200      	movs	r2, #0
 8009470:	601a      	str	r2, [r3, #0]
 8009472:	605a      	str	r2, [r3, #4]
 8009474:	609a      	str	r2, [r3, #8]
 8009476:	60da      	str	r2, [r3, #12]
 8009478:	611a      	str	r2, [r3, #16]
 800947a:	615a      	str	r2, [r3, #20]
 800947c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800947e:	4b25      	ldr	r3, [pc, #148]	; (8009514 <MX_TIM12_Init+0xbc>)
 8009480:	4a25      	ldr	r2, [pc, #148]	; (8009518 <MX_TIM12_Init+0xc0>)
 8009482:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 9;
 8009484:	4b23      	ldr	r3, [pc, #140]	; (8009514 <MX_TIM12_Init+0xbc>)
 8009486:	2209      	movs	r2, #9
 8009488:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800948a:	4b22      	ldr	r3, [pc, #136]	; (8009514 <MX_TIM12_Init+0xbc>)
 800948c:	2200      	movs	r2, #0
 800948e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8009490:	4b20      	ldr	r3, [pc, #128]	; (8009514 <MX_TIM12_Init+0xbc>)
 8009492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009496:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009498:	4b1e      	ldr	r3, [pc, #120]	; (8009514 <MX_TIM12_Init+0xbc>)
 800949a:	2200      	movs	r2, #0
 800949c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800949e:	4b1d      	ldr	r3, [pc, #116]	; (8009514 <MX_TIM12_Init+0xbc>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80094a4:	481b      	ldr	r0, [pc, #108]	; (8009514 <MX_TIM12_Init+0xbc>)
 80094a6:	f005 ffd9 	bl	800f45c <HAL_TIM_Base_Init>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d001      	beq.n	80094b4 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80094b0:	f000 fa70 	bl	8009994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80094b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094b8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80094ba:	f107 0320 	add.w	r3, r7, #32
 80094be:	4619      	mov	r1, r3
 80094c0:	4814      	ldr	r0, [pc, #80]	; (8009514 <MX_TIM12_Init+0xbc>)
 80094c2:	f007 f92b 	bl	801071c <HAL_TIM_ConfigClockSource>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d001      	beq.n	80094d0 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80094cc:	f000 fa62 	bl	8009994 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 80094d0:	4810      	ldr	r0, [pc, #64]	; (8009514 <MX_TIM12_Init+0xbc>)
 80094d2:	f006 f8eb 	bl	800f6ac <HAL_TIM_OC_Init>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d001      	beq.n	80094e0 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80094dc:	f000 fa5a 	bl	8009994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80094e0:	2330      	movs	r3, #48	; 0x30
 80094e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80094e4:	2300      	movs	r3, #0
 80094e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80094e8:	2300      	movs	r3, #0
 80094ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80094ec:	2300      	movs	r3, #0
 80094ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80094f0:	1d3b      	adds	r3, r7, #4
 80094f2:	2200      	movs	r2, #0
 80094f4:	4619      	mov	r1, r3
 80094f6:	4807      	ldr	r0, [pc, #28]	; (8009514 <MX_TIM12_Init+0xbc>)
 80094f8:	f006 fff2 	bl	80104e0 <HAL_TIM_OC_ConfigChannel>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d001      	beq.n	8009506 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8009502:	f000 fa47 	bl	8009994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8009506:	4803      	ldr	r0, [pc, #12]	; (8009514 <MX_TIM12_Init+0xbc>)
 8009508:	f000 fdbc 	bl	800a084 <HAL_TIM_MspPostInit>

}
 800950c:	bf00      	nop
 800950e:	3730      	adds	r7, #48	; 0x30
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	200024ec 	.word	0x200024ec
 8009518:	40001800 	.word	0x40001800

0800951c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009520:	4b11      	ldr	r3, [pc, #68]	; (8009568 <MX_USART2_UART_Init+0x4c>)
 8009522:	4a12      	ldr	r2, [pc, #72]	; (800956c <MX_USART2_UART_Init+0x50>)
 8009524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8009526:	4b10      	ldr	r3, [pc, #64]	; (8009568 <MX_USART2_UART_Init+0x4c>)
 8009528:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800952c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800952e:	4b0e      	ldr	r3, [pc, #56]	; (8009568 <MX_USART2_UART_Init+0x4c>)
 8009530:	2200      	movs	r2, #0
 8009532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009534:	4b0c      	ldr	r3, [pc, #48]	; (8009568 <MX_USART2_UART_Init+0x4c>)
 8009536:	2200      	movs	r2, #0
 8009538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800953a:	4b0b      	ldr	r3, [pc, #44]	; (8009568 <MX_USART2_UART_Init+0x4c>)
 800953c:	2200      	movs	r2, #0
 800953e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009540:	4b09      	ldr	r3, [pc, #36]	; (8009568 <MX_USART2_UART_Init+0x4c>)
 8009542:	220c      	movs	r2, #12
 8009544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009546:	4b08      	ldr	r3, [pc, #32]	; (8009568 <MX_USART2_UART_Init+0x4c>)
 8009548:	2200      	movs	r2, #0
 800954a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800954c:	4b06      	ldr	r3, [pc, #24]	; (8009568 <MX_USART2_UART_Init+0x4c>)
 800954e:	2200      	movs	r2, #0
 8009550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009552:	4805      	ldr	r0, [pc, #20]	; (8009568 <MX_USART2_UART_Init+0x4c>)
 8009554:	f007 fea8 	bl	80112a8 <HAL_UART_Init>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800955e:	f000 fa19 	bl	8009994 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009562:	bf00      	nop
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	20002594 	.word	0x20002594
 800956c:	40004400 	.word	0x40004400

08009570 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8009574:	4b11      	ldr	r3, [pc, #68]	; (80095bc <MX_USART3_UART_Init+0x4c>)
 8009576:	4a12      	ldr	r2, [pc, #72]	; (80095c0 <MX_USART3_UART_Init+0x50>)
 8009578:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800957a:	4b10      	ldr	r3, [pc, #64]	; (80095bc <MX_USART3_UART_Init+0x4c>)
 800957c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009580:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009582:	4b0e      	ldr	r3, [pc, #56]	; (80095bc <MX_USART3_UART_Init+0x4c>)
 8009584:	2200      	movs	r2, #0
 8009586:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009588:	4b0c      	ldr	r3, [pc, #48]	; (80095bc <MX_USART3_UART_Init+0x4c>)
 800958a:	2200      	movs	r2, #0
 800958c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800958e:	4b0b      	ldr	r3, [pc, #44]	; (80095bc <MX_USART3_UART_Init+0x4c>)
 8009590:	2200      	movs	r2, #0
 8009592:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009594:	4b09      	ldr	r3, [pc, #36]	; (80095bc <MX_USART3_UART_Init+0x4c>)
 8009596:	220c      	movs	r2, #12
 8009598:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800959a:	4b08      	ldr	r3, [pc, #32]	; (80095bc <MX_USART3_UART_Init+0x4c>)
 800959c:	2200      	movs	r2, #0
 800959e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80095a0:	4b06      	ldr	r3, [pc, #24]	; (80095bc <MX_USART3_UART_Init+0x4c>)
 80095a2:	2200      	movs	r2, #0
 80095a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80095a6:	4805      	ldr	r0, [pc, #20]	; (80095bc <MX_USART3_UART_Init+0x4c>)
 80095a8:	f007 fe7e 	bl	80112a8 <HAL_UART_Init>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d001      	beq.n	80095b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80095b2:	f000 f9ef 	bl	8009994 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80095b6:	bf00      	nop
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	200025d8 	.word	0x200025d8
 80095c0:	40004800 	.word	0x40004800

080095c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80095ca:	2300      	movs	r3, #0
 80095cc:	607b      	str	r3, [r7, #4]
 80095ce:	4b1f      	ldr	r3, [pc, #124]	; (800964c <MX_DMA_Init+0x88>)
 80095d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d2:	4a1e      	ldr	r2, [pc, #120]	; (800964c <MX_DMA_Init+0x88>)
 80095d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80095d8:	6313      	str	r3, [r2, #48]	; 0x30
 80095da:	4b1c      	ldr	r3, [pc, #112]	; (800964c <MX_DMA_Init+0x88>)
 80095dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095e2:	607b      	str	r3, [r7, #4]
 80095e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80095e6:	2300      	movs	r3, #0
 80095e8:	603b      	str	r3, [r7, #0]
 80095ea:	4b18      	ldr	r3, [pc, #96]	; (800964c <MX_DMA_Init+0x88>)
 80095ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ee:	4a17      	ldr	r2, [pc, #92]	; (800964c <MX_DMA_Init+0x88>)
 80095f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80095f4:	6313      	str	r3, [r2, #48]	; 0x30
 80095f6:	4b15      	ldr	r3, [pc, #84]	; (800964c <MX_DMA_Init+0x88>)
 80095f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095fe:	603b      	str	r3, [r7, #0]
 8009600:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 15, 0);
 8009602:	2200      	movs	r2, #0
 8009604:	210f      	movs	r1, #15
 8009606:	2011      	movs	r0, #17
 8009608:	f001 fe0d 	bl	800b226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800960c:	2011      	movs	r0, #17
 800960e:	f001 fe26 	bl	800b25e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 11, 0);
 8009612:	2200      	movs	r2, #0
 8009614:	210b      	movs	r1, #11
 8009616:	2038      	movs	r0, #56	; 0x38
 8009618:	f001 fe05 	bl	800b226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800961c:	2038      	movs	r0, #56	; 0x38
 800961e:	f001 fe1e 	bl	800b25e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 15, 0);
 8009622:	2200      	movs	r2, #0
 8009624:	210f      	movs	r1, #15
 8009626:	203a      	movs	r0, #58	; 0x3a
 8009628:	f001 fdfd 	bl	800b226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800962c:	203a      	movs	r0, #58	; 0x3a
 800962e:	f001 fe16 	bl	800b25e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 15, 0);
 8009632:	2200      	movs	r2, #0
 8009634:	210f      	movs	r1, #15
 8009636:	203c      	movs	r0, #60	; 0x3c
 8009638:	f001 fdf5 	bl	800b226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800963c:	203c      	movs	r0, #60	; 0x3c
 800963e:	f001 fe0e 	bl	800b25e <HAL_NVIC_EnableIRQ>

}
 8009642:	bf00      	nop
 8009644:	3708      	adds	r7, #8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	40023800 	.word	0x40023800

08009650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b08c      	sub	sp, #48	; 0x30
 8009654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009656:	f107 031c 	add.w	r3, r7, #28
 800965a:	2200      	movs	r2, #0
 800965c:	601a      	str	r2, [r3, #0]
 800965e:	605a      	str	r2, [r3, #4]
 8009660:	609a      	str	r2, [r3, #8]
 8009662:	60da      	str	r2, [r3, #12]
 8009664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009666:	2300      	movs	r3, #0
 8009668:	61bb      	str	r3, [r7, #24]
 800966a:	4ba4      	ldr	r3, [pc, #656]	; (80098fc <MX_GPIO_Init+0x2ac>)
 800966c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800966e:	4aa3      	ldr	r2, [pc, #652]	; (80098fc <MX_GPIO_Init+0x2ac>)
 8009670:	f043 0310 	orr.w	r3, r3, #16
 8009674:	6313      	str	r3, [r2, #48]	; 0x30
 8009676:	4ba1      	ldr	r3, [pc, #644]	; (80098fc <MX_GPIO_Init+0x2ac>)
 8009678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800967a:	f003 0310 	and.w	r3, r3, #16
 800967e:	61bb      	str	r3, [r7, #24]
 8009680:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009682:	2300      	movs	r3, #0
 8009684:	617b      	str	r3, [r7, #20]
 8009686:	4b9d      	ldr	r3, [pc, #628]	; (80098fc <MX_GPIO_Init+0x2ac>)
 8009688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800968a:	4a9c      	ldr	r2, [pc, #624]	; (80098fc <MX_GPIO_Init+0x2ac>)
 800968c:	f043 0304 	orr.w	r3, r3, #4
 8009690:	6313      	str	r3, [r2, #48]	; 0x30
 8009692:	4b9a      	ldr	r3, [pc, #616]	; (80098fc <MX_GPIO_Init+0x2ac>)
 8009694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009696:	f003 0304 	and.w	r3, r3, #4
 800969a:	617b      	str	r3, [r7, #20]
 800969c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800969e:	2300      	movs	r3, #0
 80096a0:	613b      	str	r3, [r7, #16]
 80096a2:	4b96      	ldr	r3, [pc, #600]	; (80098fc <MX_GPIO_Init+0x2ac>)
 80096a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a6:	4a95      	ldr	r2, [pc, #596]	; (80098fc <MX_GPIO_Init+0x2ac>)
 80096a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096ac:	6313      	str	r3, [r2, #48]	; 0x30
 80096ae:	4b93      	ldr	r3, [pc, #588]	; (80098fc <MX_GPIO_Init+0x2ac>)
 80096b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096b6:	613b      	str	r3, [r7, #16]
 80096b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80096ba:	2300      	movs	r3, #0
 80096bc:	60fb      	str	r3, [r7, #12]
 80096be:	4b8f      	ldr	r3, [pc, #572]	; (80098fc <MX_GPIO_Init+0x2ac>)
 80096c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c2:	4a8e      	ldr	r2, [pc, #568]	; (80098fc <MX_GPIO_Init+0x2ac>)
 80096c4:	f043 0301 	orr.w	r3, r3, #1
 80096c8:	6313      	str	r3, [r2, #48]	; 0x30
 80096ca:	4b8c      	ldr	r3, [pc, #560]	; (80098fc <MX_GPIO_Init+0x2ac>)
 80096cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ce:	f003 0301 	and.w	r3, r3, #1
 80096d2:	60fb      	str	r3, [r7, #12]
 80096d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80096d6:	2300      	movs	r3, #0
 80096d8:	60bb      	str	r3, [r7, #8]
 80096da:	4b88      	ldr	r3, [pc, #544]	; (80098fc <MX_GPIO_Init+0x2ac>)
 80096dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096de:	4a87      	ldr	r2, [pc, #540]	; (80098fc <MX_GPIO_Init+0x2ac>)
 80096e0:	f043 0302 	orr.w	r3, r3, #2
 80096e4:	6313      	str	r3, [r2, #48]	; 0x30
 80096e6:	4b85      	ldr	r3, [pc, #532]	; (80098fc <MX_GPIO_Init+0x2ac>)
 80096e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ea:	f003 0302 	and.w	r3, r3, #2
 80096ee:	60bb      	str	r3, [r7, #8]
 80096f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80096f2:	2300      	movs	r3, #0
 80096f4:	607b      	str	r3, [r7, #4]
 80096f6:	4b81      	ldr	r3, [pc, #516]	; (80098fc <MX_GPIO_Init+0x2ac>)
 80096f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fa:	4a80      	ldr	r2, [pc, #512]	; (80098fc <MX_GPIO_Init+0x2ac>)
 80096fc:	f043 0308 	orr.w	r3, r3, #8
 8009700:	6313      	str	r3, [r2, #48]	; 0x30
 8009702:	4b7e      	ldr	r3, [pc, #504]	; (80098fc <MX_GPIO_Init+0x2ac>)
 8009704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009706:	f003 0308 	and.w	r3, r3, #8
 800970a:	607b      	str	r3, [r7, #4]
 800970c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DebugOut_Pin|IR_EN_3_Pin|IR_EN_1_Pin|IR_EN_2_Pin
 800970e:	2200      	movs	r2, #0
 8009710:	f44f 413c 	mov.w	r1, #48128	; 0xbc00
 8009714:	487a      	ldr	r0, [pc, #488]	; (8009900 <MX_GPIO_Init+0x2b0>)
 8009716:	f002 fb79 	bl	800be0c <HAL_GPIO_WritePin>
                          |Q0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RIN1_Pin|RIN2_Pin|LIN1_Pin|LIN2_Pin, GPIO_PIN_RESET);
 800971a:	2200      	movs	r2, #0
 800971c:	f44f 414c 	mov.w	r1, #52224	; 0xcc00
 8009720:	4878      	ldr	r0, [pc, #480]	; (8009904 <MX_GPIO_Init+0x2b4>)
 8009722:	f002 fb73 	bl	800be0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IR_EN_0_GPIO_Port, IR_EN_0_Pin, GPIO_PIN_RESET);
 8009726:	2200      	movs	r2, #0
 8009728:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800972c:	4876      	ldr	r0, [pc, #472]	; (8009908 <MX_GPIO_Init+0x2b8>)
 800972e:	f002 fb6d 	bl	800be0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IR_PWM_GPIO_Port, IR_PWM_Pin, GPIO_PIN_SET);
 8009732:	2201      	movs	r2, #1
 8009734:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009738:	4873      	ldr	r0, [pc, #460]	; (8009908 <MX_GPIO_Init+0x2b8>)
 800973a:	f002 fb67 	bl	800be0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IR_EN_5_Pin|IR_EN_4_Pin, GPIO_PIN_RESET);
 800973e:	2200      	movs	r2, #0
 8009740:	f44f 7140 	mov.w	r1, #768	; 0x300
 8009744:	4871      	ldr	r0, [pc, #452]	; (800990c <MX_GPIO_Init+0x2bc>)
 8009746:	f002 fb61 	bl	800be0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TSOP_Pin INT_CH_4_Pin INT_CH_3_Pin */
  GPIO_InitStruct.Pin = TSOP_Pin|INT_CH_4_Pin|INT_CH_3_Pin;
 800974a:	230b      	movs	r3, #11
 800974c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800974e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8009752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009754:	2300      	movs	r3, #0
 8009756:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009758:	f107 031c 	add.w	r3, r7, #28
 800975c:	4619      	mov	r1, r3
 800975e:	486c      	ldr	r0, [pc, #432]	; (8009910 <MX_GPIO_Init+0x2c0>)
 8009760:	f002 f9a8 	bl	800bab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PW_OFF_Pin */
  GPIO_InitStruct.Pin = PW_OFF_Pin;
 8009764:	2310      	movs	r3, #16
 8009766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009768:	2300      	movs	r3, #0
 800976a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800976c:	2300      	movs	r3, #0
 800976e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PW_OFF_GPIO_Port, &GPIO_InitStruct);
 8009770:	f107 031c 	add.w	r3, r7, #28
 8009774:	4619      	mov	r1, r3
 8009776:	4866      	ldr	r0, [pc, #408]	; (8009910 <MX_GPIO_Init+0x2c0>)
 8009778:	f002 f99c 	bl	800bab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DebugOut_Pin IR_EN_3_Pin IR_EN_1_Pin IR_EN_2_Pin
                           Q0_Pin */
  GPIO_InitStruct.Pin = DebugOut_Pin|IR_EN_3_Pin|IR_EN_1_Pin|IR_EN_2_Pin
 800977c:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
 8009780:	61fb      	str	r3, [r7, #28]
                          |Q0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009782:	2301      	movs	r3, #1
 8009784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009786:	2300      	movs	r3, #0
 8009788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800978a:	2300      	movs	r3, #0
 800978c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800978e:	f107 031c 	add.w	r3, r7, #28
 8009792:	4619      	mov	r1, r3
 8009794:	485a      	ldr	r0, [pc, #360]	; (8009900 <MX_GPIO_Init+0x2b0>)
 8009796:	f002 f98d 	bl	800bab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_CH_2_Pin */
  GPIO_InitStruct.Pin = INT_CH_2_Pin;
 800979a:	2304      	movs	r3, #4
 800979c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800979e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80097a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097a4:	2300      	movs	r3, #0
 80097a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(INT_CH_2_GPIO_Port, &GPIO_InitStruct);
 80097a8:	f107 031c 	add.w	r3, r7, #28
 80097ac:	4619      	mov	r1, r3
 80097ae:	4857      	ldr	r0, [pc, #348]	; (800990c <MX_GPIO_Init+0x2bc>)
 80097b0:	f002 f980 	bl	800bab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_CH_1_Pin */
  GPIO_InitStruct.Pin = INT_CH_1_Pin;
 80097b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80097ba:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80097be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097c0:	2300      	movs	r3, #0
 80097c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(INT_CH_1_GPIO_Port, &GPIO_InitStruct);
 80097c4:	f107 031c 	add.w	r3, r7, #28
 80097c8:	4619      	mov	r1, r3
 80097ca:	484e      	ldr	r0, [pc, #312]	; (8009904 <MX_GPIO_Init+0x2b4>)
 80097cc:	f002 f972 	bl	800bab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIN1_Pin RIN2_Pin LIN1_Pin LIN2_Pin */
  GPIO_InitStruct.Pin = RIN1_Pin|RIN2_Pin|LIN1_Pin|LIN2_Pin;
 80097d0:	f44f 434c 	mov.w	r3, #52224	; 0xcc00
 80097d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097d6:	2301      	movs	r3, #1
 80097d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097da:	2300      	movs	r3, #0
 80097dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097de:	2300      	movs	r3, #0
 80097e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80097e2:	f107 031c 	add.w	r3, r7, #28
 80097e6:	4619      	mov	r1, r3
 80097e8:	4846      	ldr	r0, [pc, #280]	; (8009904 <MX_GPIO_Init+0x2b4>)
 80097ea:	f002 f963 	bl	800bab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_CH_0_Pin INT_CH_5_Pin */
  GPIO_InitStruct.Pin = INT_CH_0_Pin|INT_CH_5_Pin;
 80097ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80097f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80097f4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80097f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097fa:	2300      	movs	r3, #0
 80097fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097fe:	f107 031c 	add.w	r3, r7, #28
 8009802:	4619      	mov	r1, r3
 8009804:	4840      	ldr	r0, [pc, #256]	; (8009908 <MX_GPIO_Init+0x2b8>)
 8009806:	f002 f955 	bl	800bab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_EN_0_Pin */
  GPIO_InitStruct.Pin = IR_EN_0_Pin;
 800980a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800980e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009810:	2301      	movs	r3, #1
 8009812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009814:	2300      	movs	r3, #0
 8009816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009818:	2300      	movs	r3, #0
 800981a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IR_EN_0_GPIO_Port, &GPIO_InitStruct);
 800981c:	f107 031c 	add.w	r3, r7, #28
 8009820:	4619      	mov	r1, r3
 8009822:	4839      	ldr	r0, [pc, #228]	; (8009908 <MX_GPIO_Init+0x2b8>)
 8009824:	f002 f946 	bl	800bab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_PWM_Pin */
  GPIO_InitStruct.Pin = IR_PWM_Pin;
 8009828:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800982c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800982e:	2301      	movs	r3, #1
 8009830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009832:	2300      	movs	r3, #0
 8009834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009836:	2303      	movs	r3, #3
 8009838:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IR_PWM_GPIO_Port, &GPIO_InitStruct);
 800983a:	f107 031c 	add.w	r3, r7, #28
 800983e:	4619      	mov	r1, r3
 8009840:	4831      	ldr	r0, [pc, #196]	; (8009908 <MX_GPIO_Init+0x2b8>)
 8009842:	f002 f937 	bl	800bab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADD0_Pin ADD1_Pin ADD2_Pin ADD3_Pin
                           ADD4_Pin ADD5_Pin */
  GPIO_InitStruct.Pin = ADD0_Pin|ADD1_Pin|ADD2_Pin|ADD3_Pin
 8009846:	239f      	movs	r3, #159	; 0x9f
 8009848:	61fb      	str	r3, [r7, #28]
                          |ADD4_Pin|ADD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800984a:	2300      	movs	r3, #0
 800984c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800984e:	2301      	movs	r3, #1
 8009850:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009852:	f107 031c 	add.w	r3, r7, #28
 8009856:	4619      	mov	r1, r3
 8009858:	482a      	ldr	r0, [pc, #168]	; (8009904 <MX_GPIO_Init+0x2b4>)
 800985a:	f002 f92b 	bl	800bab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADD6_Pin ADD7_Pin */
  GPIO_InitStruct.Pin = ADD6_Pin|ADD7_Pin;
 800985e:	2330      	movs	r3, #48	; 0x30
 8009860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009862:	2300      	movs	r3, #0
 8009864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009866:	2301      	movs	r3, #1
 8009868:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800986a:	f107 031c 	add.w	r3, r7, #28
 800986e:	4619      	mov	r1, r3
 8009870:	4826      	ldr	r0, [pc, #152]	; (800990c <MX_GPIO_Init+0x2bc>)
 8009872:	f002 f91f 	bl	800bab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_EN_5_Pin IR_EN_4_Pin */
  GPIO_InitStruct.Pin = IR_EN_5_Pin|IR_EN_4_Pin;
 8009876:	f44f 7340 	mov.w	r3, #768	; 0x300
 800987a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800987c:	2301      	movs	r3, #1
 800987e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009880:	2300      	movs	r3, #0
 8009882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009884:	2300      	movs	r3, #0
 8009886:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009888:	f107 031c 	add.w	r3, r7, #28
 800988c:	4619      	mov	r1, r3
 800988e:	481f      	ldr	r0, [pc, #124]	; (800990c <MX_GPIO_Init+0x2bc>)
 8009890:	f002 f910 	bl	800bab4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 10, 0);
 8009894:	2200      	movs	r2, #0
 8009896:	210a      	movs	r1, #10
 8009898:	2006      	movs	r0, #6
 800989a:	f001 fcc4 	bl	800b226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800989e:	2006      	movs	r0, #6
 80098a0:	f001 fcdd 	bl	800b25e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 10, 0);
 80098a4:	2200      	movs	r2, #0
 80098a6:	210a      	movs	r1, #10
 80098a8:	2007      	movs	r0, #7
 80098aa:	f001 fcbc 	bl	800b226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80098ae:	2007      	movs	r0, #7
 80098b0:	f001 fcd5 	bl	800b25e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 10, 0);
 80098b4:	2200      	movs	r2, #0
 80098b6:	210a      	movs	r1, #10
 80098b8:	2008      	movs	r0, #8
 80098ba:	f001 fcb4 	bl	800b226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80098be:	2008      	movs	r0, #8
 80098c0:	f001 fccd 	bl	800b25e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 8, 0);
 80098c4:	2200      	movs	r2, #0
 80098c6:	2108      	movs	r1, #8
 80098c8:	2009      	movs	r0, #9
 80098ca:	f001 fcac 	bl	800b226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80098ce:	2009      	movs	r0, #9
 80098d0:	f001 fcc5 	bl	800b25e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 10, 0);
 80098d4:	2200      	movs	r2, #0
 80098d6:	210a      	movs	r1, #10
 80098d8:	2017      	movs	r0, #23
 80098da:	f001 fca4 	bl	800b226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80098de:	2017      	movs	r0, #23
 80098e0:	f001 fcbd 	bl	800b25e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 80098e4:	2200      	movs	r2, #0
 80098e6:	210a      	movs	r1, #10
 80098e8:	2028      	movs	r0, #40	; 0x28
 80098ea:	f001 fc9c 	bl	800b226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80098ee:	2028      	movs	r0, #40	; 0x28
 80098f0:	f001 fcb5 	bl	800b25e <HAL_NVIC_EnableIRQ>

}
 80098f4:	bf00      	nop
 80098f6:	3730      	adds	r7, #48	; 0x30
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	40023800 	.word	0x40023800
 8009900:	40020800 	.word	0x40020800
 8009904:	40020c00 	.word	0x40020c00
 8009908:	40020000 	.word	0x40020000
 800990c:	40020400 	.word	0x40020400
 8009910:	40021000 	.word	0x40021000

08009914 <Error_Handler2>:

/* USER CODE BEGIN 4 */
void Error_Handler2(uint16_t ui16ErrorCode)
{
 8009914:	b480      	push	{r7}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
 800991a:	4603      	mov	r3, r0
 800991c:	80fb      	strh	r3, [r7, #6]
	uint16_t LocalErrorVariable = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	81fb      	strh	r3, [r7, #14]
	LocalErrorVariable ++;		// dummy
 8009922:	89fb      	ldrh	r3, [r7, #14]
 8009924:	3301      	adds	r3, #1
 8009926:	81fb      	strh	r3, [r7, #14]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009928:	b672      	cpsid	i
}
 800992a:	bf00      	nop
	__disable_irq();
	while(1)
	{
		LocalErrorVariable = ui16ErrorCode;	// to be able to see on expression watch after error occurred
 800992c:	88fb      	ldrh	r3, [r7, #6]
 800992e:	81fb      	strh	r3, [r7, #14]
 8009930:	e7fc      	b.n	800992c <Error_Handler2+0x18>

08009932 <HAL_GPIO_EXTI_Callback>:
	}
}
//----------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{	//UNUSED(GPIO_Pin);
 8009932:	b580      	push	{r7, lr}
 8009934:	b082      	sub	sp, #8
 8009936:	af00      	add	r7, sp, #0
 8009938:	4603      	mov	r3, r0
 800993a:	80fb      	strh	r3, [r7, #6]

  if( (GPIO_Pin == INT_CH_0_Pin) )		//Interaction.h INT_CH_0 on PA9
 800993c:	88fb      	ldrh	r3, [r7, #6]
 800993e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009942:	d102      	bne.n	800994a <HAL_GPIO_EXTI_Callback+0x18>
  {
	  InteractionCH0Callback();
 8009944:	f7f9 fc3c 	bl	80031c0 <InteractionCH0Callback>
	  return;
 8009948:	e00e      	b.n	8009968 <HAL_GPIO_EXTI_Callback+0x36>
  }
  if( (GPIO_Pin == INT_CH_1_Pin) )		//Interaction.h INT_CH_1 on PD8
 800994a:	88fb      	ldrh	r3, [r7, #6]
 800994c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009950:	d102      	bne.n	8009958 <HAL_GPIO_EXTI_Callback+0x26>
  {
	  InteractionCH1Callback();
 8009952:	f7f9 fc3c 	bl	80031ce <InteractionCH1Callback>
	  return;
 8009956:	e007      	b.n	8009968 <HAL_GPIO_EXTI_Callback+0x36>
  }
  if( (GPIO_Pin == INT_CH_5_Pin) )		//Interaction.h INT_CH_5 on PA10
 8009958:	88fb      	ldrh	r3, [r7, #6]
 800995a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800995e:	d102      	bne.n	8009966 <HAL_GPIO_EXTI_Callback+0x34>
  {
	  InteractionCH5Callback();
 8009960:	f7f9 fc51 	bl	8003206 <InteractionCH5Callback>
	  return;
 8009964:	e000      	b.n	8009968 <HAL_GPIO_EXTI_Callback+0x36>
  }

  return;
 8009966:	bf00      	nop
}
 8009968:	3708      	adds	r7, #8
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
	...

08009970 <HAL_ADC_ConvCpltCallback>:
//----------------------------------------------------------------------------------

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{	//UNUSED(hadc);
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
		//InteractionADC1DMACallback();
		//return;
	//}

	// QRE section
	if(hadc->Instance == ADC2)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a04      	ldr	r2, [pc, #16]	; (8009990 <HAL_ADC_ConvCpltCallback+0x20>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d102      	bne.n	8009988 <HAL_ADC_ConvCpltCallback+0x18>
	{
		QREADC2DMACallback();
 8009982:	f7fc fa47 	bl	8005e14 <QREADC2DMACallback>

		//i = 129;
		//i++;
		//if(i) i=123;
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  //	debug on PC13 LOW
		return;
 8009986:	e000      	b.n	800998a <HAL_ADC_ConvCpltCallback+0x1a>
	}

	return;
 8009988:	bf00      	nop

}
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	40012100 	.word	0x40012100

08009994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009994:	b480      	push	{r7}
 8009996:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009998:	b672      	cpsid	i
}
 800999a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800999c:	e7fe      	b.n	800999c <Error_Handler+0x8>
	...

080099a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80099a6:	2300      	movs	r3, #0
 80099a8:	607b      	str	r3, [r7, #4]
 80099aa:	4b10      	ldr	r3, [pc, #64]	; (80099ec <HAL_MspInit+0x4c>)
 80099ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ae:	4a0f      	ldr	r2, [pc, #60]	; (80099ec <HAL_MspInit+0x4c>)
 80099b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80099b4:	6453      	str	r3, [r2, #68]	; 0x44
 80099b6:	4b0d      	ldr	r3, [pc, #52]	; (80099ec <HAL_MspInit+0x4c>)
 80099b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099be:	607b      	str	r3, [r7, #4]
 80099c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80099c2:	2300      	movs	r3, #0
 80099c4:	603b      	str	r3, [r7, #0]
 80099c6:	4b09      	ldr	r3, [pc, #36]	; (80099ec <HAL_MspInit+0x4c>)
 80099c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ca:	4a08      	ldr	r2, [pc, #32]	; (80099ec <HAL_MspInit+0x4c>)
 80099cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099d0:	6413      	str	r3, [r2, #64]	; 0x40
 80099d2:	4b06      	ldr	r3, [pc, #24]	; (80099ec <HAL_MspInit+0x4c>)
 80099d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099da:	603b      	str	r3, [r7, #0]
 80099dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80099de:	bf00      	nop
 80099e0:	370c      	adds	r7, #12
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	40023800 	.word	0x40023800

080099f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b090      	sub	sp, #64	; 0x40
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80099fc:	2200      	movs	r2, #0
 80099fe:	601a      	str	r2, [r3, #0]
 8009a00:	605a      	str	r2, [r3, #4]
 8009a02:	609a      	str	r2, [r3, #8]
 8009a04:	60da      	str	r2, [r3, #12]
 8009a06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a92      	ldr	r2, [pc, #584]	; (8009c58 <HAL_ADC_MspInit+0x268>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	f040 808c 	bne.w	8009b2c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009a14:	2300      	movs	r3, #0
 8009a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a18:	4b90      	ldr	r3, [pc, #576]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a1c:	4a8f      	ldr	r2, [pc, #572]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a22:	6453      	str	r3, [r2, #68]	; 0x44
 8009a24:	4b8d      	ldr	r3, [pc, #564]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009a30:	2300      	movs	r3, #0
 8009a32:	627b      	str	r3, [r7, #36]	; 0x24
 8009a34:	4b89      	ldr	r3, [pc, #548]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a38:	4a88      	ldr	r2, [pc, #544]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009a3a:	f043 0304 	orr.w	r3, r3, #4
 8009a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8009a40:	4b86      	ldr	r3, [pc, #536]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a44:	f003 0304 	and.w	r3, r3, #4
 8009a48:	627b      	str	r3, [r7, #36]	; 0x24
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	623b      	str	r3, [r7, #32]
 8009a50:	4b82      	ldr	r3, [pc, #520]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a54:	4a81      	ldr	r2, [pc, #516]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009a56:	f043 0301 	orr.w	r3, r3, #1
 8009a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8009a5c:	4b7f      	ldr	r3, [pc, #508]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a60:	f003 0301 	and.w	r3, r3, #1
 8009a64:	623b      	str	r3, [r7, #32]
 8009a66:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a68:	2300      	movs	r3, #0
 8009a6a:	61fb      	str	r3, [r7, #28]
 8009a6c:	4b7b      	ldr	r3, [pc, #492]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a70:	4a7a      	ldr	r2, [pc, #488]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009a72:	f043 0302 	orr.w	r3, r3, #2
 8009a76:	6313      	str	r3, [r2, #48]	; 0x30
 8009a78:	4b78      	ldr	r3, [pc, #480]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a7c:	f003 0302 	and.w	r3, r3, #2
 8009a80:	61fb      	str	r3, [r7, #28]
 8009a82:	69fb      	ldr	r3, [r7, #28]
    PC3     ------> ADC1_IN13
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_CH_5_Pin|ADC_CH_4_Pin|ADC_CH_3_Pin;
 8009a84:	230e      	movs	r3, #14
 8009a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009a90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a94:	4619      	mov	r1, r3
 8009a96:	4872      	ldr	r0, [pc, #456]	; (8009c60 <HAL_ADC_MspInit+0x270>)
 8009a98:	f002 f80c 	bl	800bab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_CH_1_Pin|ADC_CH_2_Pin;
 8009a9c:	2330      	movs	r3, #48	; 0x30
 8009a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009aa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009aac:	4619      	mov	r1, r3
 8009aae:	486d      	ldr	r0, [pc, #436]	; (8009c64 <HAL_ADC_MspInit+0x274>)
 8009ab0:	f002 f800 	bl	800bab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_CH_0_Pin;
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009abc:	2300      	movs	r3, #0
 8009abe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ADC_CH_0_GPIO_Port, &GPIO_InitStruct);
 8009ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4868      	ldr	r0, [pc, #416]	; (8009c68 <HAL_ADC_MspInit+0x278>)
 8009ac8:	f001 fff4 	bl	800bab4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8009acc:	4b67      	ldr	r3, [pc, #412]	; (8009c6c <HAL_ADC_MspInit+0x27c>)
 8009ace:	4a68      	ldr	r2, [pc, #416]	; (8009c70 <HAL_ADC_MspInit+0x280>)
 8009ad0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8009ad2:	4b66      	ldr	r3, [pc, #408]	; (8009c6c <HAL_ADC_MspInit+0x27c>)
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009ad8:	4b64      	ldr	r3, [pc, #400]	; (8009c6c <HAL_ADC_MspInit+0x27c>)
 8009ada:	2200      	movs	r2, #0
 8009adc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009ade:	4b63      	ldr	r3, [pc, #396]	; (8009c6c <HAL_ADC_MspInit+0x27c>)
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8009ae4:	4b61      	ldr	r3, [pc, #388]	; (8009c6c <HAL_ADC_MspInit+0x27c>)
 8009ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009aea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009aec:	4b5f      	ldr	r3, [pc, #380]	; (8009c6c <HAL_ADC_MspInit+0x27c>)
 8009aee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009af2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009af4:	4b5d      	ldr	r3, [pc, #372]	; (8009c6c <HAL_ADC_MspInit+0x27c>)
 8009af6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009afa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8009afc:	4b5b      	ldr	r3, [pc, #364]	; (8009c6c <HAL_ADC_MspInit+0x27c>)
 8009afe:	2200      	movs	r2, #0
 8009b00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8009b02:	4b5a      	ldr	r3, [pc, #360]	; (8009c6c <HAL_ADC_MspInit+0x27c>)
 8009b04:	2200      	movs	r2, #0
 8009b06:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009b08:	4b58      	ldr	r3, [pc, #352]	; (8009c6c <HAL_ADC_MspInit+0x27c>)
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8009b0e:	4857      	ldr	r0, [pc, #348]	; (8009c6c <HAL_ADC_MspInit+0x27c>)
 8009b10:	f001 fbc0 	bl	800b294 <HAL_DMA_Init>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d001      	beq.n	8009b1e <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8009b1a:	f7ff ff3b 	bl	8009994 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a52      	ldr	r2, [pc, #328]	; (8009c6c <HAL_ADC_MspInit+0x27c>)
 8009b22:	639a      	str	r2, [r3, #56]	; 0x38
 8009b24:	4a51      	ldr	r2, [pc, #324]	; (8009c6c <HAL_ADC_MspInit+0x27c>)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8009b2a:	e091      	b.n	8009c50 <HAL_ADC_MspInit+0x260>
  else if(hadc->Instance==ADC2)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a50      	ldr	r2, [pc, #320]	; (8009c74 <HAL_ADC_MspInit+0x284>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	f040 808c 	bne.w	8009c50 <HAL_ADC_MspInit+0x260>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8009b38:	2300      	movs	r3, #0
 8009b3a:	61bb      	str	r3, [r7, #24]
 8009b3c:	4b47      	ldr	r3, [pc, #284]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b40:	4a46      	ldr	r2, [pc, #280]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009b46:	6453      	str	r3, [r2, #68]	; 0x44
 8009b48:	4b44      	ldr	r3, [pc, #272]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b50:	61bb      	str	r3, [r7, #24]
 8009b52:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009b54:	2300      	movs	r3, #0
 8009b56:	617b      	str	r3, [r7, #20]
 8009b58:	4b40      	ldr	r3, [pc, #256]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b5c:	4a3f      	ldr	r2, [pc, #252]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009b5e:	f043 0304 	orr.w	r3, r3, #4
 8009b62:	6313      	str	r3, [r2, #48]	; 0x30
 8009b64:	4b3d      	ldr	r3, [pc, #244]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b68:	f003 0304 	and.w	r3, r3, #4
 8009b6c:	617b      	str	r3, [r7, #20]
 8009b6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b70:	2300      	movs	r3, #0
 8009b72:	613b      	str	r3, [r7, #16]
 8009b74:	4b39      	ldr	r3, [pc, #228]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b78:	4a38      	ldr	r2, [pc, #224]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009b7a:	f043 0301 	orr.w	r3, r3, #1
 8009b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8009b80:	4b36      	ldr	r3, [pc, #216]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b84:	f003 0301 	and.w	r3, r3, #1
 8009b88:	613b      	str	r3, [r7, #16]
 8009b8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	60fb      	str	r3, [r7, #12]
 8009b90:	4b32      	ldr	r3, [pc, #200]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b94:	4a31      	ldr	r2, [pc, #196]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009b96:	f043 0302 	orr.w	r3, r3, #2
 8009b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8009b9c:	4b2f      	ldr	r3, [pc, #188]	; (8009c5c <HAL_ADC_MspInit+0x26c>)
 8009b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ba0:	f003 0302 	and.w	r3, r3, #2
 8009ba4:	60fb      	str	r3, [r7, #12]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC2_QA5_Pin|ADC2_QA2_Pin|ADC2_QA1_Pin;
 8009ba8:	2331      	movs	r3, #49	; 0x31
 8009baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009bac:	2303      	movs	r3, #3
 8009bae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009bb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009bb8:	4619      	mov	r1, r3
 8009bba:	4829      	ldr	r0, [pc, #164]	; (8009c60 <HAL_ADC_MspInit+0x270>)
 8009bbc:	f001 ff7a 	bl	800bab4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_QA6_Pin|ADC2_QA7_Pin|ADC2_QA8_Pin|ADC2_QA4_Pin;
 8009bc0:	2387      	movs	r3, #135	; 0x87
 8009bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	4824      	ldr	r0, [pc, #144]	; (8009c64 <HAL_ADC_MspInit+0x274>)
 8009bd4:	f001 ff6e 	bl	800bab4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_QA3_Pin;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009be0:	2300      	movs	r3, #0
 8009be2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ADC2_QA3_GPIO_Port, &GPIO_InitStruct);
 8009be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009be8:	4619      	mov	r1, r3
 8009bea:	481f      	ldr	r0, [pc, #124]	; (8009c68 <HAL_ADC_MspInit+0x278>)
 8009bec:	f001 ff62 	bl	800bab4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8009bf0:	4b21      	ldr	r3, [pc, #132]	; (8009c78 <HAL_ADC_MspInit+0x288>)
 8009bf2:	4a22      	ldr	r2, [pc, #136]	; (8009c7c <HAL_ADC_MspInit+0x28c>)
 8009bf4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8009bf6:	4b20      	ldr	r3, [pc, #128]	; (8009c78 <HAL_ADC_MspInit+0x288>)
 8009bf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009bfc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009bfe:	4b1e      	ldr	r3, [pc, #120]	; (8009c78 <HAL_ADC_MspInit+0x288>)
 8009c00:	2200      	movs	r2, #0
 8009c02:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8009c04:	4b1c      	ldr	r3, [pc, #112]	; (8009c78 <HAL_ADC_MspInit+0x288>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8009c0a:	4b1b      	ldr	r3, [pc, #108]	; (8009c78 <HAL_ADC_MspInit+0x288>)
 8009c0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c10:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009c12:	4b19      	ldr	r3, [pc, #100]	; (8009c78 <HAL_ADC_MspInit+0x288>)
 8009c14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009c18:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009c1a:	4b17      	ldr	r3, [pc, #92]	; (8009c78 <HAL_ADC_MspInit+0x288>)
 8009c1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009c20:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8009c22:	4b15      	ldr	r3, [pc, #84]	; (8009c78 <HAL_ADC_MspInit+0x288>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8009c28:	4b13      	ldr	r3, [pc, #76]	; (8009c78 <HAL_ADC_MspInit+0x288>)
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009c2e:	4b12      	ldr	r3, [pc, #72]	; (8009c78 <HAL_ADC_MspInit+0x288>)
 8009c30:	2200      	movs	r2, #0
 8009c32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8009c34:	4810      	ldr	r0, [pc, #64]	; (8009c78 <HAL_ADC_MspInit+0x288>)
 8009c36:	f001 fb2d 	bl	800b294 <HAL_DMA_Init>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d001      	beq.n	8009c44 <HAL_ADC_MspInit+0x254>
      Error_Handler();
 8009c40:	f7ff fea8 	bl	8009994 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	4a0c      	ldr	r2, [pc, #48]	; (8009c78 <HAL_ADC_MspInit+0x288>)
 8009c48:	639a      	str	r2, [r3, #56]	; 0x38
 8009c4a:	4a0b      	ldr	r2, [pc, #44]	; (8009c78 <HAL_ADC_MspInit+0x288>)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009c50:	bf00      	nop
 8009c52:	3740      	adds	r7, #64	; 0x40
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	40012000 	.word	0x40012000
 8009c5c:	40023800 	.word	0x40023800
 8009c60:	40020800 	.word	0x40020800
 8009c64:	40020000 	.word	0x40020000
 8009c68:	40020400 	.word	0x40020400
 8009c6c:	2000218c 	.word	0x2000218c
 8009c70:	40026410 	.word	0x40026410
 8009c74:	40012100 	.word	0x40012100
 8009c78:	200021ec 	.word	0x200021ec
 8009c7c:	40026440 	.word	0x40026440

08009c80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b08c      	sub	sp, #48	; 0x30
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c88:	f107 031c 	add.w	r3, r7, #28
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	601a      	str	r2, [r3, #0]
 8009c90:	605a      	str	r2, [r3, #4]
 8009c92:	609a      	str	r2, [r3, #8]
 8009c94:	60da      	str	r2, [r3, #12]
 8009c96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a4a      	ldr	r2, [pc, #296]	; (8009dc8 <HAL_I2C_MspInit+0x148>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d134      	bne.n	8009d0c <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	61bb      	str	r3, [r7, #24]
 8009ca6:	4b49      	ldr	r3, [pc, #292]	; (8009dcc <HAL_I2C_MspInit+0x14c>)
 8009ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009caa:	4a48      	ldr	r2, [pc, #288]	; (8009dcc <HAL_I2C_MspInit+0x14c>)
 8009cac:	f043 0302 	orr.w	r3, r3, #2
 8009cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8009cb2:	4b46      	ldr	r3, [pc, #280]	; (8009dcc <HAL_I2C_MspInit+0x14c>)
 8009cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb6:	f003 0302 	and.w	r3, r3, #2
 8009cba:	61bb      	str	r3, [r7, #24]
 8009cbc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009cbe:	23c0      	movs	r3, #192	; 0xc0
 8009cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009cc2:	2312      	movs	r3, #18
 8009cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009cce:	2304      	movs	r3, #4
 8009cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009cd2:	f107 031c 	add.w	r3, r7, #28
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	483d      	ldr	r0, [pc, #244]	; (8009dd0 <HAL_I2C_MspInit+0x150>)
 8009cda:	f001 feeb 	bl	800bab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009cde:	2300      	movs	r3, #0
 8009ce0:	617b      	str	r3, [r7, #20]
 8009ce2:	4b3a      	ldr	r3, [pc, #232]	; (8009dcc <HAL_I2C_MspInit+0x14c>)
 8009ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce6:	4a39      	ldr	r2, [pc, #228]	; (8009dcc <HAL_I2C_MspInit+0x14c>)
 8009ce8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009cec:	6413      	str	r3, [r2, #64]	; 0x40
 8009cee:	4b37      	ldr	r3, [pc, #220]	; (8009dcc <HAL_I2C_MspInit+0x14c>)
 8009cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009cf6:	617b      	str	r3, [r7, #20]
 8009cf8:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 15, 0);
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	210f      	movs	r1, #15
 8009cfe:	201f      	movs	r0, #31
 8009d00:	f001 fa91 	bl	800b226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8009d04:	201f      	movs	r0, #31
 8009d06:	f001 faaa 	bl	800b25e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8009d0a:	e058      	b.n	8009dbe <HAL_I2C_MspInit+0x13e>
  else if(hi2c->Instance==I2C3)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a30      	ldr	r2, [pc, #192]	; (8009dd4 <HAL_I2C_MspInit+0x154>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d153      	bne.n	8009dbe <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009d16:	2300      	movs	r3, #0
 8009d18:	613b      	str	r3, [r7, #16]
 8009d1a:	4b2c      	ldr	r3, [pc, #176]	; (8009dcc <HAL_I2C_MspInit+0x14c>)
 8009d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d1e:	4a2b      	ldr	r2, [pc, #172]	; (8009dcc <HAL_I2C_MspInit+0x14c>)
 8009d20:	f043 0304 	orr.w	r3, r3, #4
 8009d24:	6313      	str	r3, [r2, #48]	; 0x30
 8009d26:	4b29      	ldr	r3, [pc, #164]	; (8009dcc <HAL_I2C_MspInit+0x14c>)
 8009d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d2a:	f003 0304 	and.w	r3, r3, #4
 8009d2e:	613b      	str	r3, [r7, #16]
 8009d30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d32:	2300      	movs	r3, #0
 8009d34:	60fb      	str	r3, [r7, #12]
 8009d36:	4b25      	ldr	r3, [pc, #148]	; (8009dcc <HAL_I2C_MspInit+0x14c>)
 8009d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d3a:	4a24      	ldr	r2, [pc, #144]	; (8009dcc <HAL_I2C_MspInit+0x14c>)
 8009d3c:	f043 0301 	orr.w	r3, r3, #1
 8009d40:	6313      	str	r3, [r2, #48]	; 0x30
 8009d42:	4b22      	ldr	r3, [pc, #136]	; (8009dcc <HAL_I2C_MspInit+0x14c>)
 8009d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d46:	f003 0301 	and.w	r3, r3, #1
 8009d4a:	60fb      	str	r3, [r7, #12]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009d54:	2312      	movs	r3, #18
 8009d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8009d60:	2304      	movs	r3, #4
 8009d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009d64:	f107 031c 	add.w	r3, r7, #28
 8009d68:	4619      	mov	r1, r3
 8009d6a:	481b      	ldr	r0, [pc, #108]	; (8009dd8 <HAL_I2C_MspInit+0x158>)
 8009d6c:	f001 fea2 	bl	800bab4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8009d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009d76:	2312      	movs	r3, #18
 8009d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d7e:	2303      	movs	r3, #3
 8009d80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8009d82:	2304      	movs	r3, #4
 8009d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d86:	f107 031c 	add.w	r3, r7, #28
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	4813      	ldr	r0, [pc, #76]	; (8009ddc <HAL_I2C_MspInit+0x15c>)
 8009d8e:	f001 fe91 	bl	800bab4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8009d92:	2300      	movs	r3, #0
 8009d94:	60bb      	str	r3, [r7, #8]
 8009d96:	4b0d      	ldr	r3, [pc, #52]	; (8009dcc <HAL_I2C_MspInit+0x14c>)
 8009d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9a:	4a0c      	ldr	r2, [pc, #48]	; (8009dcc <HAL_I2C_MspInit+0x14c>)
 8009d9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009da0:	6413      	str	r3, [r2, #64]	; 0x40
 8009da2:	4b0a      	ldr	r3, [pc, #40]	; (8009dcc <HAL_I2C_MspInit+0x14c>)
 8009da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009daa:	60bb      	str	r3, [r7, #8]
 8009dac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 15, 0);
 8009dae:	2200      	movs	r2, #0
 8009db0:	210f      	movs	r1, #15
 8009db2:	2048      	movs	r0, #72	; 0x48
 8009db4:	f001 fa37 	bl	800b226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8009db8:	2048      	movs	r0, #72	; 0x48
 8009dba:	f001 fa50 	bl	800b25e <HAL_NVIC_EnableIRQ>
}
 8009dbe:	bf00      	nop
 8009dc0:	3730      	adds	r7, #48	; 0x30
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	40005400 	.word	0x40005400
 8009dcc:	40023800 	.word	0x40023800
 8009dd0:	40020400 	.word	0x40020400
 8009dd4:	40005c00 	.word	0x40005c00
 8009dd8:	40020800 	.word	0x40020800
 8009ddc:	40020000 	.word	0x40020000

08009de0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b088      	sub	sp, #32
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a5e      	ldr	r2, [pc, #376]	; (8009f68 <HAL_TIM_Base_MspInit+0x188>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d14a      	bne.n	8009e88 <HAL_TIM_Base_MspInit+0xa8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009df2:	2300      	movs	r3, #0
 8009df4:	61fb      	str	r3, [r7, #28]
 8009df6:	4b5d      	ldr	r3, [pc, #372]	; (8009f6c <HAL_TIM_Base_MspInit+0x18c>)
 8009df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dfa:	4a5c      	ldr	r2, [pc, #368]	; (8009f6c <HAL_TIM_Base_MspInit+0x18c>)
 8009dfc:	f043 0301 	orr.w	r3, r3, #1
 8009e00:	6453      	str	r3, [r2, #68]	; 0x44
 8009e02:	4b5a      	ldr	r3, [pc, #360]	; (8009f6c <HAL_TIM_Base_MspInit+0x18c>)
 8009e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e06:	f003 0301 	and.w	r3, r3, #1
 8009e0a:	61fb      	str	r3, [r7, #28]
 8009e0c:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 8009e0e:	4b58      	ldr	r3, [pc, #352]	; (8009f70 <HAL_TIM_Base_MspInit+0x190>)
 8009e10:	4a58      	ldr	r2, [pc, #352]	; (8009f74 <HAL_TIM_Base_MspInit+0x194>)
 8009e12:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 8009e14:	4b56      	ldr	r3, [pc, #344]	; (8009f70 <HAL_TIM_Base_MspInit+0x190>)
 8009e16:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8009e1a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009e1c:	4b54      	ldr	r3, [pc, #336]	; (8009f70 <HAL_TIM_Base_MspInit+0x190>)
 8009e1e:	2240      	movs	r2, #64	; 0x40
 8009e20:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8009e22:	4b53      	ldr	r3, [pc, #332]	; (8009f70 <HAL_TIM_Base_MspInit+0x190>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8009e28:	4b51      	ldr	r3, [pc, #324]	; (8009f70 <HAL_TIM_Base_MspInit+0x190>)
 8009e2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e2e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009e30:	4b4f      	ldr	r3, [pc, #316]	; (8009f70 <HAL_TIM_Base_MspInit+0x190>)
 8009e32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e36:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009e38:	4b4d      	ldr	r3, [pc, #308]	; (8009f70 <HAL_TIM_Base_MspInit+0x190>)
 8009e3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009e3e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 8009e40:	4b4b      	ldr	r3, [pc, #300]	; (8009f70 <HAL_TIM_Base_MspInit+0x190>)
 8009e42:	2200      	movs	r2, #0
 8009e44:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8009e46:	4b4a      	ldr	r3, [pc, #296]	; (8009f70 <HAL_TIM_Base_MspInit+0x190>)
 8009e48:	2200      	movs	r2, #0
 8009e4a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009e4c:	4b48      	ldr	r3, [pc, #288]	; (8009f70 <HAL_TIM_Base_MspInit+0x190>)
 8009e4e:	2200      	movs	r2, #0
 8009e50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8009e52:	4847      	ldr	r0, [pc, #284]	; (8009f70 <HAL_TIM_Base_MspInit+0x190>)
 8009e54:	f001 fa1e 	bl	800b294 <HAL_DMA_Init>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8009e5e:	f7ff fd99 	bl	8009994 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a42      	ldr	r2, [pc, #264]	; (8009f70 <HAL_TIM_Base_MspInit+0x190>)
 8009e66:	631a      	str	r2, [r3, #48]	; 0x30
 8009e68:	4a41      	ldr	r2, [pc, #260]	; (8009f70 <HAL_TIM_Base_MspInit+0x190>)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4a3f      	ldr	r2, [pc, #252]	; (8009f70 <HAL_TIM_Base_MspInit+0x190>)
 8009e72:	639a      	str	r2, [r3, #56]	; 0x38
 8009e74:	4a3e      	ldr	r2, [pc, #248]	; (8009f70 <HAL_TIM_Base_MspInit+0x190>)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a3c      	ldr	r2, [pc, #240]	; (8009f70 <HAL_TIM_Base_MspInit+0x190>)
 8009e7e:	635a      	str	r2, [r3, #52]	; 0x34
 8009e80:	4a3b      	ldr	r2, [pc, #236]	; (8009f70 <HAL_TIM_Base_MspInit+0x190>)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8009e86:	e06a      	b.n	8009f5e <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM2)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e90:	d116      	bne.n	8009ec0 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009e92:	2300      	movs	r3, #0
 8009e94:	61bb      	str	r3, [r7, #24]
 8009e96:	4b35      	ldr	r3, [pc, #212]	; (8009f6c <HAL_TIM_Base_MspInit+0x18c>)
 8009e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e9a:	4a34      	ldr	r2, [pc, #208]	; (8009f6c <HAL_TIM_Base_MspInit+0x18c>)
 8009e9c:	f043 0301 	orr.w	r3, r3, #1
 8009ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8009ea2:	4b32      	ldr	r3, [pc, #200]	; (8009f6c <HAL_TIM_Base_MspInit+0x18c>)
 8009ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	61bb      	str	r3, [r7, #24]
 8009eac:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 12, 0);
 8009eae:	2200      	movs	r2, #0
 8009eb0:	210c      	movs	r1, #12
 8009eb2:	201c      	movs	r0, #28
 8009eb4:	f001 f9b7 	bl	800b226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009eb8:	201c      	movs	r0, #28
 8009eba:	f001 f9d0 	bl	800b25e <HAL_NVIC_EnableIRQ>
}
 8009ebe:	e04e      	b.n	8009f5e <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM5)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a2c      	ldr	r2, [pc, #176]	; (8009f78 <HAL_TIM_Base_MspInit+0x198>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d10e      	bne.n	8009ee8 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8009eca:	2300      	movs	r3, #0
 8009ecc:	617b      	str	r3, [r7, #20]
 8009ece:	4b27      	ldr	r3, [pc, #156]	; (8009f6c <HAL_TIM_Base_MspInit+0x18c>)
 8009ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed2:	4a26      	ldr	r2, [pc, #152]	; (8009f6c <HAL_TIM_Base_MspInit+0x18c>)
 8009ed4:	f043 0308 	orr.w	r3, r3, #8
 8009ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8009eda:	4b24      	ldr	r3, [pc, #144]	; (8009f6c <HAL_TIM_Base_MspInit+0x18c>)
 8009edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ede:	f003 0308 	and.w	r3, r3, #8
 8009ee2:	617b      	str	r3, [r7, #20]
 8009ee4:	697b      	ldr	r3, [r7, #20]
}
 8009ee6:	e03a      	b.n	8009f5e <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM8)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a23      	ldr	r2, [pc, #140]	; (8009f7c <HAL_TIM_Base_MspInit+0x19c>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d10e      	bne.n	8009f10 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	613b      	str	r3, [r7, #16]
 8009ef6:	4b1d      	ldr	r3, [pc, #116]	; (8009f6c <HAL_TIM_Base_MspInit+0x18c>)
 8009ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009efa:	4a1c      	ldr	r2, [pc, #112]	; (8009f6c <HAL_TIM_Base_MspInit+0x18c>)
 8009efc:	f043 0302 	orr.w	r3, r3, #2
 8009f00:	6453      	str	r3, [r2, #68]	; 0x44
 8009f02:	4b1a      	ldr	r3, [pc, #104]	; (8009f6c <HAL_TIM_Base_MspInit+0x18c>)
 8009f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f06:	f003 0302 	and.w	r3, r3, #2
 8009f0a:	613b      	str	r3, [r7, #16]
 8009f0c:	693b      	ldr	r3, [r7, #16]
}
 8009f0e:	e026      	b.n	8009f5e <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM9)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a1a      	ldr	r2, [pc, #104]	; (8009f80 <HAL_TIM_Base_MspInit+0x1a0>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d10e      	bne.n	8009f38 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	60fb      	str	r3, [r7, #12]
 8009f1e:	4b13      	ldr	r3, [pc, #76]	; (8009f6c <HAL_TIM_Base_MspInit+0x18c>)
 8009f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f22:	4a12      	ldr	r2, [pc, #72]	; (8009f6c <HAL_TIM_Base_MspInit+0x18c>)
 8009f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f28:	6453      	str	r3, [r2, #68]	; 0x44
 8009f2a:	4b10      	ldr	r3, [pc, #64]	; (8009f6c <HAL_TIM_Base_MspInit+0x18c>)
 8009f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f32:	60fb      	str	r3, [r7, #12]
 8009f34:	68fb      	ldr	r3, [r7, #12]
}
 8009f36:	e012      	b.n	8009f5e <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM12)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a11      	ldr	r2, [pc, #68]	; (8009f84 <HAL_TIM_Base_MspInit+0x1a4>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d10d      	bne.n	8009f5e <HAL_TIM_Base_MspInit+0x17e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8009f42:	2300      	movs	r3, #0
 8009f44:	60bb      	str	r3, [r7, #8]
 8009f46:	4b09      	ldr	r3, [pc, #36]	; (8009f6c <HAL_TIM_Base_MspInit+0x18c>)
 8009f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4a:	4a08      	ldr	r2, [pc, #32]	; (8009f6c <HAL_TIM_Base_MspInit+0x18c>)
 8009f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f50:	6413      	str	r3, [r2, #64]	; 0x40
 8009f52:	4b06      	ldr	r3, [pc, #24]	; (8009f6c <HAL_TIM_Base_MspInit+0x18c>)
 8009f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f5a:	60bb      	str	r3, [r7, #8]
 8009f5c:	68bb      	ldr	r3, [r7, #8]
}
 8009f5e:	bf00      	nop
 8009f60:	3720      	adds	r7, #32
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	40010000 	.word	0x40010000
 8009f6c:	40023800 	.word	0x40023800
 8009f70:	20002534 	.word	0x20002534
 8009f74:	40026470 	.word	0x40026470
 8009f78:	40000c00 	.word	0x40000c00
 8009f7c:	40010400 	.word	0x40010400
 8009f80:	40014000 	.word	0x40014000
 8009f84:	40001800 	.word	0x40001800

08009f88 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b08c      	sub	sp, #48	; 0x30
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f90:	f107 031c 	add.w	r3, r7, #28
 8009f94:	2200      	movs	r2, #0
 8009f96:	601a      	str	r2, [r3, #0]
 8009f98:	605a      	str	r2, [r3, #4]
 8009f9a:	609a      	str	r2, [r3, #8]
 8009f9c:	60da      	str	r2, [r3, #12]
 8009f9e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a32      	ldr	r2, [pc, #200]	; (800a070 <HAL_TIM_Encoder_MspInit+0xe8>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d12c      	bne.n	800a004 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009faa:	2300      	movs	r3, #0
 8009fac:	61bb      	str	r3, [r7, #24]
 8009fae:	4b31      	ldr	r3, [pc, #196]	; (800a074 <HAL_TIM_Encoder_MspInit+0xec>)
 8009fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb2:	4a30      	ldr	r2, [pc, #192]	; (800a074 <HAL_TIM_Encoder_MspInit+0xec>)
 8009fb4:	f043 0302 	orr.w	r3, r3, #2
 8009fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8009fba:	4b2e      	ldr	r3, [pc, #184]	; (800a074 <HAL_TIM_Encoder_MspInit+0xec>)
 8009fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fbe:	f003 0302 	and.w	r3, r3, #2
 8009fc2:	61bb      	str	r3, [r7, #24]
 8009fc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	617b      	str	r3, [r7, #20]
 8009fca:	4b2a      	ldr	r3, [pc, #168]	; (800a074 <HAL_TIM_Encoder_MspInit+0xec>)
 8009fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fce:	4a29      	ldr	r2, [pc, #164]	; (800a074 <HAL_TIM_Encoder_MspInit+0xec>)
 8009fd0:	f043 0304 	orr.w	r3, r3, #4
 8009fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8009fd6:	4b27      	ldr	r3, [pc, #156]	; (800a074 <HAL_TIM_Encoder_MspInit+0xec>)
 8009fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fda:	f003 0304 	and.w	r3, r3, #4
 8009fde:	617b      	str	r3, [r7, #20]
 8009fe0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = RC1_Pin|RC2_Pin;
 8009fe2:	23c0      	movs	r3, #192	; 0xc0
 8009fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009fea:	2301      	movs	r3, #1
 8009fec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009ff2:	2302      	movs	r3, #2
 8009ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009ff6:	f107 031c 	add.w	r3, r7, #28
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	481e      	ldr	r0, [pc, #120]	; (800a078 <HAL_TIM_Encoder_MspInit+0xf0>)
 8009ffe:	f001 fd59 	bl	800bab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800a002:	e031      	b.n	800a068 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a1c      	ldr	r2, [pc, #112]	; (800a07c <HAL_TIM_Encoder_MspInit+0xf4>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d12c      	bne.n	800a068 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a00e:	2300      	movs	r3, #0
 800a010:	613b      	str	r3, [r7, #16]
 800a012:	4b18      	ldr	r3, [pc, #96]	; (800a074 <HAL_TIM_Encoder_MspInit+0xec>)
 800a014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a016:	4a17      	ldr	r2, [pc, #92]	; (800a074 <HAL_TIM_Encoder_MspInit+0xec>)
 800a018:	f043 0304 	orr.w	r3, r3, #4
 800a01c:	6413      	str	r3, [r2, #64]	; 0x40
 800a01e:	4b15      	ldr	r3, [pc, #84]	; (800a074 <HAL_TIM_Encoder_MspInit+0xec>)
 800a020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a022:	f003 0304 	and.w	r3, r3, #4
 800a026:	613b      	str	r3, [r7, #16]
 800a028:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a02a:	2300      	movs	r3, #0
 800a02c:	60fb      	str	r3, [r7, #12]
 800a02e:	4b11      	ldr	r3, [pc, #68]	; (800a074 <HAL_TIM_Encoder_MspInit+0xec>)
 800a030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a032:	4a10      	ldr	r2, [pc, #64]	; (800a074 <HAL_TIM_Encoder_MspInit+0xec>)
 800a034:	f043 0308 	orr.w	r3, r3, #8
 800a038:	6313      	str	r3, [r2, #48]	; 0x30
 800a03a:	4b0e      	ldr	r3, [pc, #56]	; (800a074 <HAL_TIM_Encoder_MspInit+0xec>)
 800a03c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a03e:	f003 0308 	and.w	r3, r3, #8
 800a042:	60fb      	str	r3, [r7, #12]
 800a044:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LC1_Pin|LC2_Pin;
 800a046:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800a04a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a04c:	2302      	movs	r3, #2
 800a04e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a050:	2301      	movs	r3, #1
 800a052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a054:	2300      	movs	r3, #0
 800a056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a058:	2302      	movs	r3, #2
 800a05a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a05c:	f107 031c 	add.w	r3, r7, #28
 800a060:	4619      	mov	r1, r3
 800a062:	4807      	ldr	r0, [pc, #28]	; (800a080 <HAL_TIM_Encoder_MspInit+0xf8>)
 800a064:	f001 fd26 	bl	800bab4 <HAL_GPIO_Init>
}
 800a068:	bf00      	nop
 800a06a:	3730      	adds	r7, #48	; 0x30
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	40000400 	.word	0x40000400
 800a074:	40023800 	.word	0x40023800
 800a078:	40020800 	.word	0x40020800
 800a07c:	40000800 	.word	0x40000800
 800a080:	40020c00 	.word	0x40020c00

0800a084 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b08c      	sub	sp, #48	; 0x30
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a08c:	f107 031c 	add.w	r3, r7, #28
 800a090:	2200      	movs	r2, #0
 800a092:	601a      	str	r2, [r3, #0]
 800a094:	605a      	str	r2, [r3, #4]
 800a096:	609a      	str	r2, [r3, #8]
 800a098:	60da      	str	r2, [r3, #12]
 800a09a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a49      	ldr	r2, [pc, #292]	; (800a1c8 <HAL_TIM_MspPostInit+0x144>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d11f      	bne.n	800a0e6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	61bb      	str	r3, [r7, #24]
 800a0aa:	4b48      	ldr	r3, [pc, #288]	; (800a1cc <HAL_TIM_MspPostInit+0x148>)
 800a0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ae:	4a47      	ldr	r2, [pc, #284]	; (800a1cc <HAL_TIM_MspPostInit+0x148>)
 800a0b0:	f043 0301 	orr.w	r3, r3, #1
 800a0b4:	6313      	str	r3, [r2, #48]	; 0x30
 800a0b6:	4b45      	ldr	r3, [pc, #276]	; (800a1cc <HAL_TIM_MspPostInit+0x148>)
 800a0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ba:	f003 0301 	and.w	r3, r3, #1
 800a0be:	61bb      	str	r3, [r7, #24]
 800a0c0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800a0c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0c8:	2302      	movs	r3, #2
 800a0ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0d8:	f107 031c 	add.w	r3, r7, #28
 800a0dc:	4619      	mov	r1, r3
 800a0de:	483c      	ldr	r0, [pc, #240]	; (800a1d0 <HAL_TIM_MspPostInit+0x14c>)
 800a0e0:	f001 fce8 	bl	800bab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800a0e4:	e06c      	b.n	800a1c0 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM8)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a3a      	ldr	r2, [pc, #232]	; (800a1d4 <HAL_TIM_MspPostInit+0x150>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d11f      	bne.n	800a130 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	617b      	str	r3, [r7, #20]
 800a0f4:	4b35      	ldr	r3, [pc, #212]	; (800a1cc <HAL_TIM_MspPostInit+0x148>)
 800a0f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f8:	4a34      	ldr	r2, [pc, #208]	; (800a1cc <HAL_TIM_MspPostInit+0x148>)
 800a0fa:	f043 0304 	orr.w	r3, r3, #4
 800a0fe:	6313      	str	r3, [r2, #48]	; 0x30
 800a100:	4b32      	ldr	r3, [pc, #200]	; (800a1cc <HAL_TIM_MspPostInit+0x148>)
 800a102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a104:	f003 0304 	and.w	r3, r3, #4
 800a108:	617b      	str	r3, [r7, #20]
 800a10a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = IR_TSOP_Pin;
 800a10c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a112:	2302      	movs	r3, #2
 800a114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a116:	2300      	movs	r3, #0
 800a118:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a11a:	2303      	movs	r3, #3
 800a11c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800a11e:	2303      	movs	r3, #3
 800a120:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IR_TSOP_GPIO_Port, &GPIO_InitStruct);
 800a122:	f107 031c 	add.w	r3, r7, #28
 800a126:	4619      	mov	r1, r3
 800a128:	482b      	ldr	r0, [pc, #172]	; (800a1d8 <HAL_TIM_MspPostInit+0x154>)
 800a12a:	f001 fcc3 	bl	800bab4 <HAL_GPIO_Init>
}
 800a12e:	e047      	b.n	800a1c0 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM9)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a29      	ldr	r2, [pc, #164]	; (800a1dc <HAL_TIM_MspPostInit+0x158>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d11e      	bne.n	800a178 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a13a:	2300      	movs	r3, #0
 800a13c:	613b      	str	r3, [r7, #16]
 800a13e:	4b23      	ldr	r3, [pc, #140]	; (800a1cc <HAL_TIM_MspPostInit+0x148>)
 800a140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a142:	4a22      	ldr	r2, [pc, #136]	; (800a1cc <HAL_TIM_MspPostInit+0x148>)
 800a144:	f043 0310 	orr.w	r3, r3, #16
 800a148:	6313      	str	r3, [r2, #48]	; 0x30
 800a14a:	4b20      	ldr	r3, [pc, #128]	; (800a1cc <HAL_TIM_MspPostInit+0x148>)
 800a14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a14e:	f003 0310 	and.w	r3, r3, #16
 800a152:	613b      	str	r3, [r7, #16]
 800a154:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RPWM_Pin|LPWM_Pin;
 800a156:	2360      	movs	r3, #96	; 0x60
 800a158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a15a:	2302      	movs	r3, #2
 800a15c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a15e:	2300      	movs	r3, #0
 800a160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a162:	2303      	movs	r3, #3
 800a164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800a166:	2303      	movs	r3, #3
 800a168:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a16a:	f107 031c 	add.w	r3, r7, #28
 800a16e:	4619      	mov	r1, r3
 800a170:	481b      	ldr	r0, [pc, #108]	; (800a1e0 <HAL_TIM_MspPostInit+0x15c>)
 800a172:	f001 fc9f 	bl	800bab4 <HAL_GPIO_Init>
}
 800a176:	e023      	b.n	800a1c0 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM12)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a19      	ldr	r2, [pc, #100]	; (800a1e4 <HAL_TIM_MspPostInit+0x160>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d11e      	bne.n	800a1c0 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a182:	2300      	movs	r3, #0
 800a184:	60fb      	str	r3, [r7, #12]
 800a186:	4b11      	ldr	r3, [pc, #68]	; (800a1cc <HAL_TIM_MspPostInit+0x148>)
 800a188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18a:	4a10      	ldr	r2, [pc, #64]	; (800a1cc <HAL_TIM_MspPostInit+0x148>)
 800a18c:	f043 0302 	orr.w	r3, r3, #2
 800a190:	6313      	str	r3, [r2, #48]	; 0x30
 800a192:	4b0e      	ldr	r3, [pc, #56]	; (800a1cc <HAL_TIM_MspPostInit+0x148>)
 800a194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a196:	f003 0302 	and.w	r3, r3, #2
 800a19a:	60fb      	str	r3, [r7, #12]
 800a19c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800a19e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a1a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1a4:	2302      	movs	r3, #2
 800a1a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800a1b0:	2309      	movs	r3, #9
 800a1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800a1b4:	f107 031c 	add.w	r3, r7, #28
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	480b      	ldr	r0, [pc, #44]	; (800a1e8 <HAL_TIM_MspPostInit+0x164>)
 800a1bc:	f001 fc7a 	bl	800bab4 <HAL_GPIO_Init>
}
 800a1c0:	bf00      	nop
 800a1c2:	3730      	adds	r7, #48	; 0x30
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	40010000 	.word	0x40010000
 800a1cc:	40023800 	.word	0x40023800
 800a1d0:	40020000 	.word	0x40020000
 800a1d4:	40010400 	.word	0x40010400
 800a1d8:	40020800 	.word	0x40020800
 800a1dc:	40014000 	.word	0x40014000
 800a1e0:	40021000 	.word	0x40021000
 800a1e4:	40001800 	.word	0x40001800
 800a1e8:	40020400 	.word	0x40020400

0800a1ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b08c      	sub	sp, #48	; 0x30
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1f4:	f107 031c 	add.w	r3, r7, #28
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	601a      	str	r2, [r3, #0]
 800a1fc:	605a      	str	r2, [r3, #4]
 800a1fe:	609a      	str	r2, [r3, #8]
 800a200:	60da      	str	r2, [r3, #12]
 800a202:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a61      	ldr	r2, [pc, #388]	; (800a390 <HAL_UART_MspInit+0x1a4>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d162      	bne.n	800a2d4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800a20e:	2300      	movs	r3, #0
 800a210:	61bb      	str	r3, [r7, #24]
 800a212:	4b60      	ldr	r3, [pc, #384]	; (800a394 <HAL_UART_MspInit+0x1a8>)
 800a214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a216:	4a5f      	ldr	r2, [pc, #380]	; (800a394 <HAL_UART_MspInit+0x1a8>)
 800a218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a21c:	6413      	str	r3, [r2, #64]	; 0x40
 800a21e:	4b5d      	ldr	r3, [pc, #372]	; (800a394 <HAL_UART_MspInit+0x1a8>)
 800a220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a226:	61bb      	str	r3, [r7, #24]
 800a228:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a22a:	2300      	movs	r3, #0
 800a22c:	617b      	str	r3, [r7, #20]
 800a22e:	4b59      	ldr	r3, [pc, #356]	; (800a394 <HAL_UART_MspInit+0x1a8>)
 800a230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a232:	4a58      	ldr	r2, [pc, #352]	; (800a394 <HAL_UART_MspInit+0x1a8>)
 800a234:	f043 0308 	orr.w	r3, r3, #8
 800a238:	6313      	str	r3, [r2, #48]	; 0x30
 800a23a:	4b56      	ldr	r3, [pc, #344]	; (800a394 <HAL_UART_MspInit+0x1a8>)
 800a23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a23e:	f003 0308 	and.w	r3, r3, #8
 800a242:	617b      	str	r3, [r7, #20]
 800a244:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800a246:	2360      	movs	r3, #96	; 0x60
 800a248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a24a:	2302      	movs	r3, #2
 800a24c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a24e:	2300      	movs	r3, #0
 800a250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a252:	2303      	movs	r3, #3
 800a254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a256:	2307      	movs	r3, #7
 800a258:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a25a:	f107 031c 	add.w	r3, r7, #28
 800a25e:	4619      	mov	r1, r3
 800a260:	484d      	ldr	r0, [pc, #308]	; (800a398 <HAL_UART_MspInit+0x1ac>)
 800a262:	f001 fc27 	bl	800bab4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800a266:	4b4d      	ldr	r3, [pc, #308]	; (800a39c <HAL_UART_MspInit+0x1b0>)
 800a268:	4a4d      	ldr	r2, [pc, #308]	; (800a3a0 <HAL_UART_MspInit+0x1b4>)
 800a26a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800a26c:	4b4b      	ldr	r3, [pc, #300]	; (800a39c <HAL_UART_MspInit+0x1b0>)
 800a26e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a272:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a274:	4b49      	ldr	r3, [pc, #292]	; (800a39c <HAL_UART_MspInit+0x1b0>)
 800a276:	2240      	movs	r2, #64	; 0x40
 800a278:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a27a:	4b48      	ldr	r3, [pc, #288]	; (800a39c <HAL_UART_MspInit+0x1b0>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a280:	4b46      	ldr	r3, [pc, #280]	; (800a39c <HAL_UART_MspInit+0x1b0>)
 800a282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a286:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a288:	4b44      	ldr	r3, [pc, #272]	; (800a39c <HAL_UART_MspInit+0x1b0>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a28e:	4b43      	ldr	r3, [pc, #268]	; (800a39c <HAL_UART_MspInit+0x1b0>)
 800a290:	2200      	movs	r2, #0
 800a292:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800a294:	4b41      	ldr	r3, [pc, #260]	; (800a39c <HAL_UART_MspInit+0x1b0>)
 800a296:	2200      	movs	r2, #0
 800a298:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a29a:	4b40      	ldr	r3, [pc, #256]	; (800a39c <HAL_UART_MspInit+0x1b0>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a2a0:	4b3e      	ldr	r3, [pc, #248]	; (800a39c <HAL_UART_MspInit+0x1b0>)
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800a2a6:	483d      	ldr	r0, [pc, #244]	; (800a39c <HAL_UART_MspInit+0x1b0>)
 800a2a8:	f000 fff4 	bl	800b294 <HAL_DMA_Init>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d001      	beq.n	800a2b6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800a2b2:	f7ff fb6f 	bl	8009994 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a38      	ldr	r2, [pc, #224]	; (800a39c <HAL_UART_MspInit+0x1b0>)
 800a2ba:	635a      	str	r2, [r3, #52]	; 0x34
 800a2bc:	4a37      	ldr	r2, [pc, #220]	; (800a39c <HAL_UART_MspInit+0x1b0>)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	210f      	movs	r1, #15
 800a2c6:	2026      	movs	r0, #38	; 0x26
 800a2c8:	f000 ffad 	bl	800b226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a2cc:	2026      	movs	r0, #38	; 0x26
 800a2ce:	f000 ffc6 	bl	800b25e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800a2d2:	e058      	b.n	800a386 <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART3)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a32      	ldr	r2, [pc, #200]	; (800a3a4 <HAL_UART_MspInit+0x1b8>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d153      	bne.n	800a386 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a2de:	2300      	movs	r3, #0
 800a2e0:	613b      	str	r3, [r7, #16]
 800a2e2:	4b2c      	ldr	r3, [pc, #176]	; (800a394 <HAL_UART_MspInit+0x1a8>)
 800a2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e6:	4a2b      	ldr	r2, [pc, #172]	; (800a394 <HAL_UART_MspInit+0x1a8>)
 800a2e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a2ec:	6413      	str	r3, [r2, #64]	; 0x40
 800a2ee:	4b29      	ldr	r3, [pc, #164]	; (800a394 <HAL_UART_MspInit+0x1a8>)
 800a2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2f6:	613b      	str	r3, [r7, #16]
 800a2f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	60fb      	str	r3, [r7, #12]
 800a2fe:	4b25      	ldr	r3, [pc, #148]	; (800a394 <HAL_UART_MspInit+0x1a8>)
 800a300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a302:	4a24      	ldr	r2, [pc, #144]	; (800a394 <HAL_UART_MspInit+0x1a8>)
 800a304:	f043 0302 	orr.w	r3, r3, #2
 800a308:	6313      	str	r3, [r2, #48]	; 0x30
 800a30a:	4b22      	ldr	r3, [pc, #136]	; (800a394 <HAL_UART_MspInit+0x1a8>)
 800a30c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a30e:	f003 0302 	and.w	r3, r3, #2
 800a312:	60fb      	str	r3, [r7, #12]
 800a314:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a316:	2300      	movs	r3, #0
 800a318:	60bb      	str	r3, [r7, #8]
 800a31a:	4b1e      	ldr	r3, [pc, #120]	; (800a394 <HAL_UART_MspInit+0x1a8>)
 800a31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a31e:	4a1d      	ldr	r2, [pc, #116]	; (800a394 <HAL_UART_MspInit+0x1a8>)
 800a320:	f043 0308 	orr.w	r3, r3, #8
 800a324:	6313      	str	r3, [r2, #48]	; 0x30
 800a326:	4b1b      	ldr	r3, [pc, #108]	; (800a394 <HAL_UART_MspInit+0x1a8>)
 800a328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a32a:	f003 0308 	and.w	r3, r3, #8
 800a32e:	60bb      	str	r3, [r7, #8]
 800a330:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TX3_XGP_Pin;
 800a332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a338:	2302      	movs	r3, #2
 800a33a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a33c:	2300      	movs	r3, #0
 800a33e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a340:	2303      	movs	r3, #3
 800a342:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a344:	2307      	movs	r3, #7
 800a346:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TX3_XGP_GPIO_Port, &GPIO_InitStruct);
 800a348:	f107 031c 	add.w	r3, r7, #28
 800a34c:	4619      	mov	r1, r3
 800a34e:	4816      	ldr	r0, [pc, #88]	; (800a3a8 <HAL_UART_MspInit+0x1bc>)
 800a350:	f001 fbb0 	bl	800bab4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RX3_XSHUT_Pin;
 800a354:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a35a:	2302      	movs	r3, #2
 800a35c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a35e:	2300      	movs	r3, #0
 800a360:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a362:	2303      	movs	r3, #3
 800a364:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a366:	2307      	movs	r3, #7
 800a368:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RX3_XSHUT_GPIO_Port, &GPIO_InitStruct);
 800a36a:	f107 031c 	add.w	r3, r7, #28
 800a36e:	4619      	mov	r1, r3
 800a370:	4809      	ldr	r0, [pc, #36]	; (800a398 <HAL_UART_MspInit+0x1ac>)
 800a372:	f001 fb9f 	bl	800bab4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 15, 0);
 800a376:	2200      	movs	r2, #0
 800a378:	210f      	movs	r1, #15
 800a37a:	2027      	movs	r0, #39	; 0x27
 800a37c:	f000 ff53 	bl	800b226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800a380:	2027      	movs	r0, #39	; 0x27
 800a382:	f000 ff6c 	bl	800b25e <HAL_NVIC_EnableIRQ>
}
 800a386:	bf00      	nop
 800a388:	3730      	adds	r7, #48	; 0x30
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	40004400 	.word	0x40004400
 800a394:	40023800 	.word	0x40023800
 800a398:	40020c00 	.word	0x40020c00
 800a39c:	2000261c 	.word	0x2000261c
 800a3a0:	400260a0 	.word	0x400260a0
 800a3a4:	40004800 	.word	0x40004800
 800a3a8:	40020400 	.word	0x40020400

0800a3ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a3b0:	e7fe      	b.n	800a3b0 <NMI_Handler+0x4>

0800a3b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a3b2:	b480      	push	{r7}
 800a3b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a3b6:	e7fe      	b.n	800a3b6 <HardFault_Handler+0x4>

0800a3b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a3bc:	e7fe      	b.n	800a3bc <MemManage_Handler+0x4>

0800a3be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a3be:	b480      	push	{r7}
 800a3c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a3c2:	e7fe      	b.n	800a3c2 <BusFault_Handler+0x4>

0800a3c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a3c8:	e7fe      	b.n	800a3c8 <UsageFault_Handler+0x4>

0800a3ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a3ca:	b480      	push	{r7}
 800a3cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a3ce:	bf00      	nop
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a3dc:	bf00      	nop
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a3e6:	b480      	push	{r7}
 800a3e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a3ea:	bf00      	nop
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH
	// 1mS
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a3f8:	f000 fa02 	bl	800a800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  WS2812Timer1KHZISR();			// max 2.4 uS
 800a3fc:	f7fc fa2c 	bl	8006858 <WS2812Timer1KHZISR>
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH
  WheelTimer1KHZISR();			// max 4.1uS
 800a400:	f7fd fc22 	bl	8007c48 <WheelTimer1KHZISR>
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  //	debug on PC13 LOW
  InteractionTimer1KHZISR();	//
 800a404:	f7f8 fec8 	bl	8003198 <InteractionTimer1KHZISR>
  QRETimer1KHZISR();			//
 800a408:	f7fb fcfc 	bl	8005e04 <QRETimer1KHZISR>
  IrTsopTimer1KHZISR();			//
 800a40c:	f7fb f97c 	bl	8005708 <IrTsopTimer1KHZISR>
  AudioTimer1KHZISR();			//
 800a410:	f7f7 fb5a 	bl	8001ac8 <AudioTimer1KHZISR>
  I2CDevicesTimer1KHZISR();		//
 800a414:	f7f7 fe3a 	bl	800208c <I2CDevicesTimer1KHZISR>
  AddressTimer1KHZISR();		// - Most likely it is not used
 800a418:	f7f6 fe10 	bl	800103c <AddressTimer1KHZISR>
  VL53l0xTimer1KHZISR();
 800a41c:	f7fb ff58 	bl	80062d0 <VL53l0xTimer1KHZISR>


  ApplicationTimer1KHZISR();
 800a420:	f7f7 fad2 	bl	80019c8 <ApplicationTimer1KHZISR>

  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  //	debug on PC13 LOW

  /* USER CODE END SysTick_IRQn 1 */
}
 800a424:	bf00      	nop
 800a426:	bd80      	pop	{r7, pc}

0800a428 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */


	//HAL_GPIO_EXTI_IRQHandler(ADC2_QA5_Pin);	// EXTI0 ->INT_CH_4=EXTI_0=PE0 ==> Interaction.h --> ADC2_QA5_Pin = INT_CH_4_Pin = GPIO_PIN_0
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_CH_4_Pin);
 800a42c:	2001      	movs	r0, #1
 800a42e:	f001 fd07 	bl	800be40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  InteractionCH4Callback();
 800a432:	f7f8 fee1 	bl	80031f8 <InteractionCH4Callback>

  /* USER CODE END EXTI0_IRQn 1 */
}
 800a436:	bf00      	nop
 800a438:	bd80      	pop	{r7, pc}

0800a43a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */


	//HAL_GPIO_EXTI_IRQHandler(ADC_CH_5_Pin);	// EXTI1 ->INT_CH_3=EXTI_1=PE1 ==> Interaction.h --> ADC_CH_5_Pin = INT_CH_3_Pin = GPIO_PIN_1
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_CH_3_Pin);
 800a43e:	2002      	movs	r0, #2
 800a440:	f001 fcfe 	bl	800be40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  InteractionCH3Callback();
 800a444:	f7f8 fed1 	bl	80031ea <InteractionCH3Callback>

  /* USER CODE END EXTI1_IRQn 1 */
}
 800a448:	bf00      	nop
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


	//HAL_GPIO_EXTI_IRQHandler(ADC_CH_4_Pin);	// EXTI2 ->INT_CH_2=EXTI_2=PB2 ==> Interaction.h --> ADC_CH_4_Pin = INT_CH_2_Pin = GPIO_PIN_2
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_CH_2_Pin);
 800a450:	2004      	movs	r0, #4
 800a452:	f001 fcf5 	bl	800be40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  InteractionCH2Callback();
 800a456:	f7f8 fec1 	bl	80031dc <InteractionCH2Callback>

  /* USER CODE END EXTI2_IRQn 1 */
}
 800a45a:	bf00      	nop
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */


	//HAL_GPIO_EXTI_IRQHandler(TSOP_Pin);	// EXTI3 -> TSOP_Pin = PE3 = GPIO_PIN_3	 // used in IrTsop.c
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TSOP_Pin);
 800a462:	2008      	movs	r0, #8
 800a464:	f001 fcec 	bl	800be40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  IrTsopCallback();
 800a468:	f7fb f97e 	bl	8005768 <IrTsopCallback>

  /* USER CODE END EXTI3_IRQn 1 */
}
 800a46c:	bf00      	nop
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
	// used in main as debug serial
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800a474:	4802      	ldr	r0, [pc, #8]	; (800a480 <DMA1_Stream6_IRQHandler+0x10>)
 800a476:	f001 f8a5 	bl	800b5c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800a47a:	bf00      	nop
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	2000261c 	.word	0x2000261c

0800a484 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	af00      	add	r7, sp, #0


	// HAL_GPIO_EXTI_IRQHandler(INT_CH_1_Pin);  => INT_CH_1_Pin = PD8 = EXTI_9...5 => CH8. used in Interaction.c
	// HAL_GPIO_EXTI_IRQHandler(INT_CH_0_Pin);  => INT_CH_0_Pin = PA9 = EXTI_9...5 => CH9. used in Interaction.c
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_CH_1_Pin);
 800a488:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a48c:	f001 fcd8 	bl	800be40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_CH_0_Pin);
 800a490:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a494:	f001 fcd4 	bl	800be40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800a498:	bf00      	nop
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH
	// 10 KHZ
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//  debug on PC13 HIGH
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a4a0:	4804      	ldr	r0, [pc, #16]	; (800a4b4 <TIM2_IRQHandler+0x18>)
 800a4a2:	f005 ff15 	bl	80102d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  //	debug on PC13 LOW
  IrTsopTimer10KHZISR();	// IR Sending
 800a4a6:	f7fb f937 	bl	8005718 <IrTsopTimer10KHZISR>
  InteractionTimer10KHZISR();		// interaction
 800a4aa:	f7f8 fe7d 	bl	80031a8 <InteractionTimer10KHZISR>

  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  //	debug on PC13 LOW
  /* USER CODE END TIM2_IRQn 1 */
}
 800a4ae:	bf00      	nop
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	2000233c 	.word	0x2000233c

0800a4b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	// used in I2CDevices.c
  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800a4bc:	4802      	ldr	r0, [pc, #8]	; (800a4c8 <I2C1_EV_IRQHandler+0x10>)
 800a4be:	f002 faab 	bl	800ca18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800a4c2:	bf00      	nop
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	2000224c 	.word	0x2000224c

0800a4cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	// used in main as debug serial
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a4d0:	4802      	ldr	r0, [pc, #8]	; (800a4dc <USART2_IRQHandler+0x10>)
 800a4d2:	f007 f829 	bl	8011528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a4d6:	bf00      	nop
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	20002594 	.word	0x20002594

0800a4e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800a4e4:	4802      	ldr	r0, [pc, #8]	; (800a4f0 <USART3_IRQHandler+0x10>)
 800a4e6:	f007 f81f 	bl	8011528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800a4ea:	bf00      	nop
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	200025d8 	.word	0x200025d8

0800a4f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


	//HAL_GPIO_EXTI_IRQHandler(RIN1_Pin);	// EXTI15__10 ->INT_CH_5=EXTI_15__10=PA10 ==> Interaction.h --> RIN1_Pin = INT_CH_5_Pin = GPIO_PIN_10
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_CH_5_Pin);
 800a4f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a4fc:	f001 fca0 	bl	800be40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a500:	bf00      	nop
 800a502:	bd80      	pop	{r7, pc}

0800a504 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	// used in Interaction.c to read the ADC1 values from the IR photodetectors
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800a508:	4803      	ldr	r0, [pc, #12]	; (800a518 <DMA2_Stream0_IRQHandler+0x14>)
 800a50a:	f001 f85b 	bl	800b5c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  InteractionADC1DMACallback();	// called from the HAL_ADC_ConvCpltCallback() in main but not working. called from here is called also @ half complete
 800a50e:	f7f8 fe51 	bl	80031b4 <InteractionADC1DMACallback>

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800a512:	bf00      	nop
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	2000218c 	.word	0x2000218c

0800a51c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	// used in QRE.c to read the Analog levels from the QRE sensors
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800a520:	4802      	ldr	r0, [pc, #8]	; (800a52c <DMA2_Stream2_IRQHandler+0x10>)
 800a522:	f001 f84f 	bl	800b5c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  //QREADC2DMACallback();	// call the QRE.c function, called from main, like above, not working, always read as 0

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800a526:	bf00      	nop
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	200021ec 	.word	0x200021ec

0800a530 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */
	// used in WS2812.c to transfer data into ws2812 LEDs
  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 800a534:	4802      	ldr	r0, [pc, #8]	; (800a540 <DMA2_Stream4_IRQHandler+0x10>)
 800a536:	f001 f845 	bl	800b5c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800a53a:	bf00      	nop
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	20002534 	.word	0x20002534

0800a544 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */
	// used in I2CDevices.c
  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 800a548:	4802      	ldr	r0, [pc, #8]	; (800a554 <I2C3_EV_IRQHandler+0x10>)
 800a54a:	f002 fa65 	bl	800ca18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800a54e:	bf00      	nop
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	200022a0 	.word	0x200022a0

0800a558 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a558:	b480      	push	{r7}
 800a55a:	af00      	add	r7, sp, #0
	return 1;
 800a55c:	2301      	movs	r3, #1
}
 800a55e:	4618      	mov	r0, r3
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <_kill>:

int _kill(int pid, int sig)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a572:	f008 fdb3 	bl	80130dc <__errno>
 800a576:	4603      	mov	r3, r0
 800a578:	2216      	movs	r2, #22
 800a57a:	601a      	str	r2, [r3, #0]
	return -1;
 800a57c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a580:	4618      	mov	r0, r3
 800a582:	3708      	adds	r7, #8
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <_exit>:

void _exit (int status)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a590:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f7ff ffe7 	bl	800a568 <_kill>
	while (1) {}		/* Make sure we hang here */
 800a59a:	e7fe      	b.n	800a59a <_exit+0x12>

0800a59c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b086      	sub	sp, #24
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	617b      	str	r3, [r7, #20]
 800a5ac:	e00a      	b.n	800a5c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a5ae:	f3af 8000 	nop.w
 800a5b2:	4601      	mov	r1, r0
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	1c5a      	adds	r2, r3, #1
 800a5b8:	60ba      	str	r2, [r7, #8]
 800a5ba:	b2ca      	uxtb	r2, r1
 800a5bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	617b      	str	r3, [r7, #20]
 800a5c4:	697a      	ldr	r2, [r7, #20]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	dbf0      	blt.n	800a5ae <_read+0x12>
	}

return len;
 800a5cc:	687b      	ldr	r3, [r7, #4]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3718      	adds	r7, #24
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	b086      	sub	sp, #24
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	60f8      	str	r0, [r7, #12]
 800a5de:	60b9      	str	r1, [r7, #8]
 800a5e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	617b      	str	r3, [r7, #20]
 800a5e6:	e009      	b.n	800a5fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	1c5a      	adds	r2, r3, #1
 800a5ec:	60ba      	str	r2, [r7, #8]
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	617b      	str	r3, [r7, #20]
 800a5fc:	697a      	ldr	r2, [r7, #20]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	429a      	cmp	r2, r3
 800a602:	dbf1      	blt.n	800a5e8 <_write+0x12>
	}
	return len;
 800a604:	687b      	ldr	r3, [r7, #4]
}
 800a606:	4618      	mov	r0, r3
 800a608:	3718      	adds	r7, #24
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <_close>:

int _close(int file)
{
 800a60e:	b480      	push	{r7}
 800a610:	b083      	sub	sp, #12
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
	return -1;
 800a616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	370c      	adds	r7, #12
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a626:	b480      	push	{r7}
 800a628:	b083      	sub	sp, #12
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
 800a62e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a636:	605a      	str	r2, [r3, #4]
	return 0;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	370c      	adds	r7, #12
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr

0800a646 <_isatty>:

int _isatty(int file)
{
 800a646:	b480      	push	{r7}
 800a648:	b083      	sub	sp, #12
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
	return 1;
 800a64e:	2301      	movs	r3, #1
}
 800a650:	4618      	mov	r0, r3
 800a652:	370c      	adds	r7, #12
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	607a      	str	r2, [r7, #4]
	return 0;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3714      	adds	r7, #20
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
	...

0800a678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a680:	4a14      	ldr	r2, [pc, #80]	; (800a6d4 <_sbrk+0x5c>)
 800a682:	4b15      	ldr	r3, [pc, #84]	; (800a6d8 <_sbrk+0x60>)
 800a684:	1ad3      	subs	r3, r2, r3
 800a686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a68c:	4b13      	ldr	r3, [pc, #76]	; (800a6dc <_sbrk+0x64>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d102      	bne.n	800a69a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a694:	4b11      	ldr	r3, [pc, #68]	; (800a6dc <_sbrk+0x64>)
 800a696:	4a12      	ldr	r2, [pc, #72]	; (800a6e0 <_sbrk+0x68>)
 800a698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a69a:	4b10      	ldr	r3, [pc, #64]	; (800a6dc <_sbrk+0x64>)
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	693a      	ldr	r2, [r7, #16]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d207      	bcs.n	800a6b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a6a8:	f008 fd18 	bl	80130dc <__errno>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	220c      	movs	r2, #12
 800a6b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a6b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6b6:	e009      	b.n	800a6cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a6b8:	4b08      	ldr	r3, [pc, #32]	; (800a6dc <_sbrk+0x64>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a6be:	4b07      	ldr	r3, [pc, #28]	; (800a6dc <_sbrk+0x64>)
 800a6c0:	681a      	ldr	r2, [r3, #0]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	4a05      	ldr	r2, [pc, #20]	; (800a6dc <_sbrk+0x64>)
 800a6c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3718      	adds	r7, #24
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	20020000 	.word	0x20020000
 800a6d8:	00000400 	.word	0x00000400
 800a6dc:	200028dc 	.word	0x200028dc
 800a6e0:	20002a30 	.word	0x20002a30

0800a6e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a6e8:	4b06      	ldr	r3, [pc, #24]	; (800a704 <SystemInit+0x20>)
 800a6ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ee:	4a05      	ldr	r2, [pc, #20]	; (800a704 <SystemInit+0x20>)
 800a6f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a6f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a6f8:	bf00      	nop
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr
 800a702:	bf00      	nop
 800a704:	e000ed00 	.word	0xe000ed00

0800a708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a708:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a740 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a70c:	480d      	ldr	r0, [pc, #52]	; (800a744 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a70e:	490e      	ldr	r1, [pc, #56]	; (800a748 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a710:	4a0e      	ldr	r2, [pc, #56]	; (800a74c <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a714:	e002      	b.n	800a71c <LoopCopyDataInit>

0800a716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a71a:	3304      	adds	r3, #4

0800a71c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a71c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a71e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a720:	d3f9      	bcc.n	800a716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a722:	4a0b      	ldr	r2, [pc, #44]	; (800a750 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a724:	4c0b      	ldr	r4, [pc, #44]	; (800a754 <LoopFillZerobss+0x26>)
  movs r3, #0
 800a726:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a728:	e001      	b.n	800a72e <LoopFillZerobss>

0800a72a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a72a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a72c:	3204      	adds	r2, #4

0800a72e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a72e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a730:	d3fb      	bcc.n	800a72a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a732:	f7ff ffd7 	bl	800a6e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a736:	f008 fcd7 	bl	80130e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a73a:	f7fe f923 	bl	8008984 <main>
  bx  lr    
 800a73e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a740:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a748:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800a74c:	08015cd0 	.word	0x08015cd0
  ldr r2, =_sbss
 800a750:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800a754:	20002a30 	.word	0x20002a30

0800a758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a758:	e7fe      	b.n	800a758 <ADC_IRQHandler>
	...

0800a75c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a760:	4b0e      	ldr	r3, [pc, #56]	; (800a79c <HAL_Init+0x40>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a0d      	ldr	r2, [pc, #52]	; (800a79c <HAL_Init+0x40>)
 800a766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a76a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a76c:	4b0b      	ldr	r3, [pc, #44]	; (800a79c <HAL_Init+0x40>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a0a      	ldr	r2, [pc, #40]	; (800a79c <HAL_Init+0x40>)
 800a772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a776:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a778:	4b08      	ldr	r3, [pc, #32]	; (800a79c <HAL_Init+0x40>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a07      	ldr	r2, [pc, #28]	; (800a79c <HAL_Init+0x40>)
 800a77e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a782:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a784:	2003      	movs	r0, #3
 800a786:	f000 fd43 	bl	800b210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a78a:	200f      	movs	r0, #15
 800a78c:	f000 f808 	bl	800a7a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a790:	f7ff f906 	bl	80099a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	40023c00 	.word	0x40023c00

0800a7a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a7a8:	4b12      	ldr	r3, [pc, #72]	; (800a7f4 <HAL_InitTick+0x54>)
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	4b12      	ldr	r3, [pc, #72]	; (800a7f8 <HAL_InitTick+0x58>)
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a7b6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a7ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f000 fd5b 	bl	800b27a <HAL_SYSTICK_Config>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d001      	beq.n	800a7ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e00e      	b.n	800a7ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2b0f      	cmp	r3, #15
 800a7d2:	d80a      	bhi.n	800a7ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	6879      	ldr	r1, [r7, #4]
 800a7d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7dc:	f000 fd23 	bl	800b226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a7e0:	4a06      	ldr	r2, [pc, #24]	; (800a7fc <HAL_InitTick+0x5c>)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	e000      	b.n	800a7ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a7ea:	2301      	movs	r3, #1
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	20000004 	.word	0x20000004
 800a7f8:	2000000c 	.word	0x2000000c
 800a7fc:	20000008 	.word	0x20000008

0800a800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a800:	b480      	push	{r7}
 800a802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a804:	4b06      	ldr	r3, [pc, #24]	; (800a820 <HAL_IncTick+0x20>)
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	461a      	mov	r2, r3
 800a80a:	4b06      	ldr	r3, [pc, #24]	; (800a824 <HAL_IncTick+0x24>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4413      	add	r3, r2
 800a810:	4a04      	ldr	r2, [pc, #16]	; (800a824 <HAL_IncTick+0x24>)
 800a812:	6013      	str	r3, [r2, #0]
}
 800a814:	bf00      	nop
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	2000000c 	.word	0x2000000c
 800a824:	200028e0 	.word	0x200028e0

0800a828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a828:	b480      	push	{r7}
 800a82a:	af00      	add	r7, sp, #0
  return uwTick;
 800a82c:	4b03      	ldr	r3, [pc, #12]	; (800a83c <HAL_GetTick+0x14>)
 800a82e:	681b      	ldr	r3, [r3, #0]
}
 800a830:	4618      	mov	r0, r3
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	200028e0 	.word	0x200028e0

0800a840 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a848:	2300      	movs	r3, #0
 800a84a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d101      	bne.n	800a856 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a852:	2301      	movs	r3, #1
 800a854:	e033      	b.n	800a8be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d109      	bne.n	800a872 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f7ff f8c6 	bl	80099f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a876:	f003 0310 	and.w	r3, r3, #16
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d118      	bne.n	800a8b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a882:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800a886:	f023 0302 	bic.w	r3, r3, #2
 800a88a:	f043 0202 	orr.w	r2, r3, #2
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 fa6e 	bl	800ad74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a2:	f023 0303 	bic.w	r3, r3, #3
 800a8a6:	f043 0201 	orr.w	r2, r3, #1
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	641a      	str	r2, [r3, #64]	; 0x40
 800a8ae:	e001      	b.n	800a8b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
	...

0800a8c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d101      	bne.n	800a8e6 <HAL_ADC_Start_DMA+0x1e>
 800a8e2:	2302      	movs	r3, #2
 800a8e4:	e0e9      	b.n	800aaba <HAL_ADC_Start_DMA+0x1f2>
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	f003 0301 	and.w	r3, r3, #1
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d018      	beq.n	800a92e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	689a      	ldr	r2, [r3, #8]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f042 0201 	orr.w	r2, r2, #1
 800a90a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800a90c:	4b6d      	ldr	r3, [pc, #436]	; (800aac4 <HAL_ADC_Start_DMA+0x1fc>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a6d      	ldr	r2, [pc, #436]	; (800aac8 <HAL_ADC_Start_DMA+0x200>)
 800a912:	fba2 2303 	umull	r2, r3, r2, r3
 800a916:	0c9a      	lsrs	r2, r3, #18
 800a918:	4613      	mov	r3, r2
 800a91a:	005b      	lsls	r3, r3, #1
 800a91c:	4413      	add	r3, r2
 800a91e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a920:	e002      	b.n	800a928 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	3b01      	subs	r3, #1
 800a926:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d1f9      	bne.n	800a922 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a93c:	d107      	bne.n	800a94e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	689a      	ldr	r2, [r3, #8]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a94c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	f003 0301 	and.w	r3, r3, #1
 800a958:	2b01      	cmp	r3, #1
 800a95a:	f040 80a1 	bne.w	800aaa0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a962:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a966:	f023 0301 	bic.w	r3, r3, #1
 800a96a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d007      	beq.n	800a990 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a984:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a988:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a99c:	d106      	bne.n	800a9ac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9a2:	f023 0206 	bic.w	r2, r3, #6
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	645a      	str	r2, [r3, #68]	; 0x44
 800a9aa:	e002      	b.n	800a9b2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a9ba:	4b44      	ldr	r3, [pc, #272]	; (800aacc <HAL_ADC_Start_DMA+0x204>)
 800a9bc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c2:	4a43      	ldr	r2, [pc, #268]	; (800aad0 <HAL_ADC_Start_DMA+0x208>)
 800a9c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ca:	4a42      	ldr	r2, [pc, #264]	; (800aad4 <HAL_ADC_Start_DMA+0x20c>)
 800a9cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d2:	4a41      	ldr	r2, [pc, #260]	; (800aad8 <HAL_ADC_Start_DMA+0x210>)
 800a9d4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800a9de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a9ee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	689a      	ldr	r2, [r3, #8]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9fe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	334c      	adds	r3, #76	; 0x4c
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	68ba      	ldr	r2, [r7, #8]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f000 fcee 	bl	800b3f0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	f003 031f 	and.w	r3, r3, #31
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d12a      	bne.n	800aa76 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4a2d      	ldr	r2, [pc, #180]	; (800aadc <HAL_ADC_Start_DMA+0x214>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d015      	beq.n	800aa56 <HAL_ADC_Start_DMA+0x18e>
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a2c      	ldr	r2, [pc, #176]	; (800aae0 <HAL_ADC_Start_DMA+0x218>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d105      	bne.n	800aa40 <HAL_ADC_Start_DMA+0x178>
 800aa34:	4b25      	ldr	r3, [pc, #148]	; (800aacc <HAL_ADC_Start_DMA+0x204>)
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	f003 031f 	and.w	r3, r3, #31
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00a      	beq.n	800aa56 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a27      	ldr	r2, [pc, #156]	; (800aae4 <HAL_ADC_Start_DMA+0x21c>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d136      	bne.n	800aab8 <HAL_ADC_Start_DMA+0x1f0>
 800aa4a:	4b20      	ldr	r3, [pc, #128]	; (800aacc <HAL_ADC_Start_DMA+0x204>)
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	f003 0310 	and.w	r3, r3, #16
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d130      	bne.n	800aab8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d129      	bne.n	800aab8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	689a      	ldr	r2, [r3, #8]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800aa72:	609a      	str	r2, [r3, #8]
 800aa74:	e020      	b.n	800aab8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a18      	ldr	r2, [pc, #96]	; (800aadc <HAL_ADC_Start_DMA+0x214>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d11b      	bne.n	800aab8 <HAL_ADC_Start_DMA+0x1f0>
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d114      	bne.n	800aab8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	689a      	ldr	r2, [r3, #8]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800aa9c:	609a      	str	r2, [r3, #8]
 800aa9e:	e00b      	b.n	800aab8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa4:	f043 0210 	orr.w	r2, r3, #16
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aab0:	f043 0201 	orr.w	r2, r3, #1
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3718      	adds	r7, #24
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	20000004 	.word	0x20000004
 800aac8:	431bde83 	.word	0x431bde83
 800aacc:	40012300 	.word	0x40012300
 800aad0:	0800af6d 	.word	0x0800af6d
 800aad4:	0800b027 	.word	0x0800b027
 800aad8:	0800b043 	.word	0x0800b043
 800aadc:	40012000 	.word	0x40012000
 800aae0:	40012100 	.word	0x40012100
 800aae4:	40012200 	.word	0x40012200

0800aae8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800ab04:	bf00      	nop
 800ab06:	370c      	adds	r7, #12
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d101      	bne.n	800ab2c <HAL_ADC_ConfigChannel+0x1c>
 800ab28:	2302      	movs	r3, #2
 800ab2a:	e113      	b.n	800ad54 <HAL_ADC_ConfigChannel+0x244>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	2b09      	cmp	r3, #9
 800ab3a:	d925      	bls.n	800ab88 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	68d9      	ldr	r1, [r3, #12]
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	461a      	mov	r2, r3
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	005b      	lsls	r3, r3, #1
 800ab4e:	4413      	add	r3, r2
 800ab50:	3b1e      	subs	r3, #30
 800ab52:	2207      	movs	r2, #7
 800ab54:	fa02 f303 	lsl.w	r3, r2, r3
 800ab58:	43da      	mvns	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	400a      	ands	r2, r1
 800ab60:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	68d9      	ldr	r1, [r3, #12]
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	689a      	ldr	r2, [r3, #8]
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	4618      	mov	r0, r3
 800ab74:	4603      	mov	r3, r0
 800ab76:	005b      	lsls	r3, r3, #1
 800ab78:	4403      	add	r3, r0
 800ab7a:	3b1e      	subs	r3, #30
 800ab7c:	409a      	lsls	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	430a      	orrs	r2, r1
 800ab84:	60da      	str	r2, [r3, #12]
 800ab86:	e022      	b.n	800abce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	6919      	ldr	r1, [r3, #16]
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	461a      	mov	r2, r3
 800ab96:	4613      	mov	r3, r2
 800ab98:	005b      	lsls	r3, r3, #1
 800ab9a:	4413      	add	r3, r2
 800ab9c:	2207      	movs	r2, #7
 800ab9e:	fa02 f303 	lsl.w	r3, r2, r3
 800aba2:	43da      	mvns	r2, r3
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	400a      	ands	r2, r1
 800abaa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	6919      	ldr	r1, [r3, #16]
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	689a      	ldr	r2, [r3, #8]
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	b29b      	uxth	r3, r3
 800abbc:	4618      	mov	r0, r3
 800abbe:	4603      	mov	r3, r0
 800abc0:	005b      	lsls	r3, r3, #1
 800abc2:	4403      	add	r3, r0
 800abc4:	409a      	lsls	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	430a      	orrs	r2, r1
 800abcc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	2b06      	cmp	r3, #6
 800abd4:	d824      	bhi.n	800ac20 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	685a      	ldr	r2, [r3, #4]
 800abe0:	4613      	mov	r3, r2
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	4413      	add	r3, r2
 800abe6:	3b05      	subs	r3, #5
 800abe8:	221f      	movs	r2, #31
 800abea:	fa02 f303 	lsl.w	r3, r2, r3
 800abee:	43da      	mvns	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	400a      	ands	r2, r1
 800abf6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	4618      	mov	r0, r3
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	685a      	ldr	r2, [r3, #4]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	4413      	add	r3, r2
 800ac10:	3b05      	subs	r3, #5
 800ac12:	fa00 f203 	lsl.w	r2, r0, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	430a      	orrs	r2, r1
 800ac1c:	635a      	str	r2, [r3, #52]	; 0x34
 800ac1e:	e04c      	b.n	800acba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	2b0c      	cmp	r3, #12
 800ac26:	d824      	bhi.n	800ac72 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	685a      	ldr	r2, [r3, #4]
 800ac32:	4613      	mov	r3, r2
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	4413      	add	r3, r2
 800ac38:	3b23      	subs	r3, #35	; 0x23
 800ac3a:	221f      	movs	r2, #31
 800ac3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac40:	43da      	mvns	r2, r3
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	400a      	ands	r2, r1
 800ac48:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	4618      	mov	r0, r3
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	685a      	ldr	r2, [r3, #4]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	3b23      	subs	r3, #35	; 0x23
 800ac64:	fa00 f203 	lsl.w	r2, r0, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	430a      	orrs	r2, r1
 800ac6e:	631a      	str	r2, [r3, #48]	; 0x30
 800ac70:	e023      	b.n	800acba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	685a      	ldr	r2, [r3, #4]
 800ac7c:	4613      	mov	r3, r2
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	4413      	add	r3, r2
 800ac82:	3b41      	subs	r3, #65	; 0x41
 800ac84:	221f      	movs	r2, #31
 800ac86:	fa02 f303 	lsl.w	r3, r2, r3
 800ac8a:	43da      	mvns	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	400a      	ands	r2, r1
 800ac92:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	4618      	mov	r0, r3
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	685a      	ldr	r2, [r3, #4]
 800aca6:	4613      	mov	r3, r2
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	4413      	add	r3, r2
 800acac:	3b41      	subs	r3, #65	; 0x41
 800acae:	fa00 f203 	lsl.w	r2, r0, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	430a      	orrs	r2, r1
 800acb8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800acba:	4b29      	ldr	r3, [pc, #164]	; (800ad60 <HAL_ADC_ConfigChannel+0x250>)
 800acbc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a28      	ldr	r2, [pc, #160]	; (800ad64 <HAL_ADC_ConfigChannel+0x254>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d10f      	bne.n	800ace8 <HAL_ADC_ConfigChannel+0x1d8>
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2b12      	cmp	r3, #18
 800acce:	d10b      	bne.n	800ace8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a1d      	ldr	r2, [pc, #116]	; (800ad64 <HAL_ADC_ConfigChannel+0x254>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d12b      	bne.n	800ad4a <HAL_ADC_ConfigChannel+0x23a>
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a1c      	ldr	r2, [pc, #112]	; (800ad68 <HAL_ADC_ConfigChannel+0x258>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d003      	beq.n	800ad04 <HAL_ADC_ConfigChannel+0x1f4>
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2b11      	cmp	r3, #17
 800ad02:	d122      	bne.n	800ad4a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a11      	ldr	r2, [pc, #68]	; (800ad68 <HAL_ADC_ConfigChannel+0x258>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d111      	bne.n	800ad4a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800ad26:	4b11      	ldr	r3, [pc, #68]	; (800ad6c <HAL_ADC_ConfigChannel+0x25c>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a11      	ldr	r2, [pc, #68]	; (800ad70 <HAL_ADC_ConfigChannel+0x260>)
 800ad2c:	fba2 2303 	umull	r2, r3, r2, r3
 800ad30:	0c9a      	lsrs	r2, r3, #18
 800ad32:	4613      	mov	r3, r2
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	4413      	add	r3, r2
 800ad38:	005b      	lsls	r3, r3, #1
 800ad3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ad3c:	e002      	b.n	800ad44 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	3b01      	subs	r3, #1
 800ad42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d1f9      	bne.n	800ad3e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3714      	adds	r7, #20
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr
 800ad60:	40012300 	.word	0x40012300
 800ad64:	40012000 	.word	0x40012000
 800ad68:	10000012 	.word	0x10000012
 800ad6c:	20000004 	.word	0x20000004
 800ad70:	431bde83 	.word	0x431bde83

0800ad74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ad7c:	4b79      	ldr	r3, [pc, #484]	; (800af64 <ADC_Init+0x1f0>)
 800ad7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	685a      	ldr	r2, [r3, #4]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	431a      	orrs	r2, r3
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ada8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	6859      	ldr	r1, [r3, #4]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	691b      	ldr	r3, [r3, #16]
 800adb4:	021a      	lsls	r2, r3, #8
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	430a      	orrs	r2, r1
 800adbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	685a      	ldr	r2, [r3, #4]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800adcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	6859      	ldr	r1, [r3, #4]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	689a      	ldr	r2, [r3, #8]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	430a      	orrs	r2, r1
 800adde:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	689a      	ldr	r2, [r3, #8]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800adee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	6899      	ldr	r1, [r3, #8]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	68da      	ldr	r2, [r3, #12]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	430a      	orrs	r2, r1
 800ae00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae06:	4a58      	ldr	r2, [pc, #352]	; (800af68 <ADC_Init+0x1f4>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d022      	beq.n	800ae52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	689a      	ldr	r2, [r3, #8]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ae1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	6899      	ldr	r1, [r3, #8]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	430a      	orrs	r2, r1
 800ae2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	689a      	ldr	r2, [r3, #8]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ae3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	6899      	ldr	r1, [r3, #8]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	430a      	orrs	r2, r1
 800ae4e:	609a      	str	r2, [r3, #8]
 800ae50:	e00f      	b.n	800ae72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	689a      	ldr	r2, [r3, #8]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ae60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	689a      	ldr	r2, [r3, #8]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ae70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	689a      	ldr	r2, [r3, #8]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f022 0202 	bic.w	r2, r2, #2
 800ae80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	6899      	ldr	r1, [r3, #8]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	7e1b      	ldrb	r3, [r3, #24]
 800ae8c:	005a      	lsls	r2, r3, #1
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	430a      	orrs	r2, r1
 800ae94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d01b      	beq.n	800aed8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	685a      	ldr	r2, [r3, #4]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aeae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	685a      	ldr	r2, [r3, #4]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800aebe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	6859      	ldr	r1, [r3, #4]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeca:	3b01      	subs	r3, #1
 800aecc:	035a      	lsls	r2, r3, #13
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	430a      	orrs	r2, r1
 800aed4:	605a      	str	r2, [r3, #4]
 800aed6:	e007      	b.n	800aee8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	685a      	ldr	r2, [r3, #4]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aee6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800aef6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	69db      	ldr	r3, [r3, #28]
 800af02:	3b01      	subs	r3, #1
 800af04:	051a      	lsls	r2, r3, #20
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	430a      	orrs	r2, r1
 800af0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	689a      	ldr	r2, [r3, #8]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800af1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	6899      	ldr	r1, [r3, #8]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af2a:	025a      	lsls	r2, r3, #9
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	430a      	orrs	r2, r1
 800af32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	689a      	ldr	r2, [r3, #8]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	6899      	ldr	r1, [r3, #8]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	695b      	ldr	r3, [r3, #20]
 800af4e:	029a      	lsls	r2, r3, #10
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	430a      	orrs	r2, r1
 800af56:	609a      	str	r2, [r3, #8]
}
 800af58:	bf00      	nop
 800af5a:	3714      	adds	r7, #20
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr
 800af64:	40012300 	.word	0x40012300
 800af68:	0f000001 	.word	0x0f000001

0800af6c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af78:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800af82:	2b00      	cmp	r3, #0
 800af84:	d13c      	bne.n	800b000 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d12b      	bne.n	800aff8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d127      	bne.n	800aff8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d006      	beq.n	800afc4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d119      	bne.n	800aff8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	685a      	ldr	r2, [r3, #4]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f022 0220 	bic.w	r2, r2, #32
 800afd2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d105      	bne.n	800aff8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff0:	f043 0201 	orr.w	r2, r3, #1
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800aff8:	68f8      	ldr	r0, [r7, #12]
 800affa:	f7fe fcb9 	bl	8009970 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800affe:	e00e      	b.n	800b01e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b004:	f003 0310 	and.w	r3, r3, #16
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d003      	beq.n	800b014 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f7ff fd75 	bl	800aafc <HAL_ADC_ErrorCallback>
}
 800b012:	e004      	b.n	800b01e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	4798      	blx	r3
}
 800b01e:	bf00      	nop
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800b026:	b580      	push	{r7, lr}
 800b028:	b084      	sub	sp, #16
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b032:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	f7ff fd57 	bl	800aae8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b03a:	bf00      	nop
 800b03c:	3710      	adds	r7, #16
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}

0800b042 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800b042:	b580      	push	{r7, lr}
 800b044:	b084      	sub	sp, #16
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b04e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2240      	movs	r2, #64	; 0x40
 800b054:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b05a:	f043 0204 	orr.w	r2, r3, #4
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f7ff fd4a 	bl	800aafc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b068:	bf00      	nop
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b070:	b480      	push	{r7}
 800b072:	b085      	sub	sp, #20
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f003 0307 	and.w	r3, r3, #7
 800b07e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b080:	4b0c      	ldr	r3, [pc, #48]	; (800b0b4 <__NVIC_SetPriorityGrouping+0x44>)
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b086:	68ba      	ldr	r2, [r7, #8]
 800b088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b08c:	4013      	ands	r3, r2
 800b08e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b09c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b0a2:	4a04      	ldr	r2, [pc, #16]	; (800b0b4 <__NVIC_SetPriorityGrouping+0x44>)
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	60d3      	str	r3, [r2, #12]
}
 800b0a8:	bf00      	nop
 800b0aa:	3714      	adds	r7, #20
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr
 800b0b4:	e000ed00 	.word	0xe000ed00

0800b0b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b0bc:	4b04      	ldr	r3, [pc, #16]	; (800b0d0 <__NVIC_GetPriorityGrouping+0x18>)
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	0a1b      	lsrs	r3, r3, #8
 800b0c2:	f003 0307 	and.w	r3, r3, #7
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr
 800b0d0:	e000ed00 	.word	0xe000ed00

0800b0d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	4603      	mov	r3, r0
 800b0dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b0de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	db0b      	blt.n	800b0fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b0e6:	79fb      	ldrb	r3, [r7, #7]
 800b0e8:	f003 021f 	and.w	r2, r3, #31
 800b0ec:	4907      	ldr	r1, [pc, #28]	; (800b10c <__NVIC_EnableIRQ+0x38>)
 800b0ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0f2:	095b      	lsrs	r3, r3, #5
 800b0f4:	2001      	movs	r0, #1
 800b0f6:	fa00 f202 	lsl.w	r2, r0, r2
 800b0fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b0fe:	bf00      	nop
 800b100:	370c      	adds	r7, #12
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	e000e100 	.word	0xe000e100

0800b110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	4603      	mov	r3, r0
 800b118:	6039      	str	r1, [r7, #0]
 800b11a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b11c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b120:	2b00      	cmp	r3, #0
 800b122:	db0a      	blt.n	800b13a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	b2da      	uxtb	r2, r3
 800b128:	490c      	ldr	r1, [pc, #48]	; (800b15c <__NVIC_SetPriority+0x4c>)
 800b12a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b12e:	0112      	lsls	r2, r2, #4
 800b130:	b2d2      	uxtb	r2, r2
 800b132:	440b      	add	r3, r1
 800b134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b138:	e00a      	b.n	800b150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	b2da      	uxtb	r2, r3
 800b13e:	4908      	ldr	r1, [pc, #32]	; (800b160 <__NVIC_SetPriority+0x50>)
 800b140:	79fb      	ldrb	r3, [r7, #7]
 800b142:	f003 030f 	and.w	r3, r3, #15
 800b146:	3b04      	subs	r3, #4
 800b148:	0112      	lsls	r2, r2, #4
 800b14a:	b2d2      	uxtb	r2, r2
 800b14c:	440b      	add	r3, r1
 800b14e:	761a      	strb	r2, [r3, #24]
}
 800b150:	bf00      	nop
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr
 800b15c:	e000e100 	.word	0xe000e100
 800b160:	e000ed00 	.word	0xe000ed00

0800b164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b164:	b480      	push	{r7}
 800b166:	b089      	sub	sp, #36	; 0x24
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f003 0307 	and.w	r3, r3, #7
 800b176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	f1c3 0307 	rsb	r3, r3, #7
 800b17e:	2b04      	cmp	r3, #4
 800b180:	bf28      	it	cs
 800b182:	2304      	movcs	r3, #4
 800b184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	3304      	adds	r3, #4
 800b18a:	2b06      	cmp	r3, #6
 800b18c:	d902      	bls.n	800b194 <NVIC_EncodePriority+0x30>
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	3b03      	subs	r3, #3
 800b192:	e000      	b.n	800b196 <NVIC_EncodePriority+0x32>
 800b194:	2300      	movs	r3, #0
 800b196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	fa02 f303 	lsl.w	r3, r2, r3
 800b1a2:	43da      	mvns	r2, r3
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	401a      	ands	r2, r3
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b1ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	fa01 f303 	lsl.w	r3, r1, r3
 800b1b6:	43d9      	mvns	r1, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b1bc:	4313      	orrs	r3, r2
         );
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3724      	adds	r7, #36	; 0x24
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr
	...

0800b1cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b1dc:	d301      	bcc.n	800b1e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e00f      	b.n	800b202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b1e2:	4a0a      	ldr	r2, [pc, #40]	; (800b20c <SysTick_Config+0x40>)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b1ea:	210f      	movs	r1, #15
 800b1ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1f0:	f7ff ff8e 	bl	800b110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b1f4:	4b05      	ldr	r3, [pc, #20]	; (800b20c <SysTick_Config+0x40>)
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b1fa:	4b04      	ldr	r3, [pc, #16]	; (800b20c <SysTick_Config+0x40>)
 800b1fc:	2207      	movs	r2, #7
 800b1fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b200:	2300      	movs	r3, #0
}
 800b202:	4618      	mov	r0, r3
 800b204:	3708      	adds	r7, #8
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}
 800b20a:	bf00      	nop
 800b20c:	e000e010 	.word	0xe000e010

0800b210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f7ff ff29 	bl	800b070 <__NVIC_SetPriorityGrouping>
}
 800b21e:	bf00      	nop
 800b220:	3708      	adds	r7, #8
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}

0800b226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b226:	b580      	push	{r7, lr}
 800b228:	b086      	sub	sp, #24
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	4603      	mov	r3, r0
 800b22e:	60b9      	str	r1, [r7, #8]
 800b230:	607a      	str	r2, [r7, #4]
 800b232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b234:	2300      	movs	r3, #0
 800b236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b238:	f7ff ff3e 	bl	800b0b8 <__NVIC_GetPriorityGrouping>
 800b23c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	68b9      	ldr	r1, [r7, #8]
 800b242:	6978      	ldr	r0, [r7, #20]
 800b244:	f7ff ff8e 	bl	800b164 <NVIC_EncodePriority>
 800b248:	4602      	mov	r2, r0
 800b24a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b24e:	4611      	mov	r1, r2
 800b250:	4618      	mov	r0, r3
 800b252:	f7ff ff5d 	bl	800b110 <__NVIC_SetPriority>
}
 800b256:	bf00      	nop
 800b258:	3718      	adds	r7, #24
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b25e:	b580      	push	{r7, lr}
 800b260:	b082      	sub	sp, #8
 800b262:	af00      	add	r7, sp, #0
 800b264:	4603      	mov	r3, r0
 800b266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7ff ff31 	bl	800b0d4 <__NVIC_EnableIRQ>
}
 800b272:	bf00      	nop
 800b274:	3708      	adds	r7, #8
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b082      	sub	sp, #8
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f7ff ffa2 	bl	800b1cc <SysTick_Config>
 800b288:	4603      	mov	r3, r0
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3708      	adds	r7, #8
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
	...

0800b294 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b086      	sub	sp, #24
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b29c:	2300      	movs	r3, #0
 800b29e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b2a0:	f7ff fac2 	bl	800a828 <HAL_GetTick>
 800b2a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d101      	bne.n	800b2b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	e099      	b.n	800b3e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f022 0201 	bic.w	r2, r2, #1
 800b2ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b2d0:	e00f      	b.n	800b2f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b2d2:	f7ff faa9 	bl	800a828 <HAL_GetTick>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	1ad3      	subs	r3, r2, r3
 800b2dc:	2b05      	cmp	r3, #5
 800b2de:	d908      	bls.n	800b2f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2220      	movs	r2, #32
 800b2e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2203      	movs	r2, #3
 800b2ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	e078      	b.n	800b3e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f003 0301 	and.w	r3, r3, #1
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d1e8      	bne.n	800b2d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b308:	697a      	ldr	r2, [r7, #20]
 800b30a:	4b38      	ldr	r3, [pc, #224]	; (800b3ec <HAL_DMA_Init+0x158>)
 800b30c:	4013      	ands	r3, r2
 800b30e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	685a      	ldr	r2, [r3, #4]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b31e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b32a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	699b      	ldr	r3, [r3, #24]
 800b330:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b336:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6a1b      	ldr	r3, [r3, #32]
 800b33c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b33e:	697a      	ldr	r2, [r7, #20]
 800b340:	4313      	orrs	r3, r2
 800b342:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b348:	2b04      	cmp	r3, #4
 800b34a:	d107      	bne.n	800b35c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b354:	4313      	orrs	r3, r2
 800b356:	697a      	ldr	r2, [r7, #20]
 800b358:	4313      	orrs	r3, r2
 800b35a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	697a      	ldr	r2, [r7, #20]
 800b362:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	695b      	ldr	r3, [r3, #20]
 800b36a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	f023 0307 	bic.w	r3, r3, #7
 800b372:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b378:	697a      	ldr	r2, [r7, #20]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b382:	2b04      	cmp	r3, #4
 800b384:	d117      	bne.n	800b3b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b38a:	697a      	ldr	r2, [r7, #20]
 800b38c:	4313      	orrs	r3, r2
 800b38e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b394:	2b00      	cmp	r3, #0
 800b396:	d00e      	beq.n	800b3b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 fb0f 	bl	800b9bc <DMA_CheckFifoParam>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d008      	beq.n	800b3b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2240      	movs	r2, #64	; 0x40
 800b3a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e016      	b.n	800b3e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	697a      	ldr	r2, [r7, #20]
 800b3bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 fac6 	bl	800b950 <DMA_CalcBaseAndBitshift>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3cc:	223f      	movs	r2, #63	; 0x3f
 800b3ce:	409a      	lsls	r2, r3
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2201      	movs	r2, #1
 800b3de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3718      	adds	r7, #24
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	f010803f 	.word	0xf010803f

0800b3f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	607a      	str	r2, [r7, #4]
 800b3fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b3fe:	2300      	movs	r3, #0
 800b400:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b406:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d101      	bne.n	800b416 <HAL_DMA_Start_IT+0x26>
 800b412:	2302      	movs	r3, #2
 800b414:	e040      	b.n	800b498 <HAL_DMA_Start_IT+0xa8>
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2201      	movs	r2, #1
 800b41a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b424:	b2db      	uxtb	r3, r3
 800b426:	2b01      	cmp	r3, #1
 800b428:	d12f      	bne.n	800b48a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2202      	movs	r2, #2
 800b42e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2200      	movs	r2, #0
 800b436:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	68b9      	ldr	r1, [r7, #8]
 800b43e:	68f8      	ldr	r0, [r7, #12]
 800b440:	f000 fa58 	bl	800b8f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b448:	223f      	movs	r2, #63	; 0x3f
 800b44a:	409a      	lsls	r2, r3
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f042 0216 	orr.w	r2, r2, #22
 800b45e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b464:	2b00      	cmp	r3, #0
 800b466:	d007      	beq.n	800b478 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f042 0208 	orr.w	r2, r2, #8
 800b476:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f042 0201 	orr.w	r2, r2, #1
 800b486:	601a      	str	r2, [r3, #0]
 800b488:	e005      	b.n	800b496 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b492:	2302      	movs	r3, #2
 800b494:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b496:	7dfb      	ldrb	r3, [r7, #23]
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3718      	adds	r7, #24
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800b4ae:	f7ff f9bb 	bl	800a828 <HAL_GetTick>
 800b4b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	d008      	beq.n	800b4d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2280      	movs	r2, #128	; 0x80
 800b4c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e052      	b.n	800b578 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f022 0216 	bic.w	r2, r2, #22
 800b4e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	695a      	ldr	r2, [r3, #20]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b4f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d103      	bne.n	800b502 <HAL_DMA_Abort+0x62>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d007      	beq.n	800b512 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	681a      	ldr	r2, [r3, #0]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f022 0208 	bic.w	r2, r2, #8
 800b510:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f022 0201 	bic.w	r2, r2, #1
 800b520:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b522:	e013      	b.n	800b54c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b524:	f7ff f980 	bl	800a828 <HAL_GetTick>
 800b528:	4602      	mov	r2, r0
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	1ad3      	subs	r3, r2, r3
 800b52e:	2b05      	cmp	r3, #5
 800b530:	d90c      	bls.n	800b54c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2220      	movs	r2, #32
 800b536:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2203      	movs	r2, #3
 800b53c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800b548:	2303      	movs	r3, #3
 800b54a:	e015      	b.n	800b578 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f003 0301 	and.w	r3, r3, #1
 800b556:	2b00      	cmp	r3, #0
 800b558:	d1e4      	bne.n	800b524 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b55e:	223f      	movs	r2, #63	; 0x3f
 800b560:	409a      	lsls	r2, r3
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2201      	movs	r2, #1
 800b56a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800b576:	2300      	movs	r3, #0
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3710      	adds	r7, #16
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	2b02      	cmp	r3, #2
 800b592:	d004      	beq.n	800b59e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2280      	movs	r2, #128	; 0x80
 800b598:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	e00c      	b.n	800b5b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2205      	movs	r2, #5
 800b5a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f022 0201 	bic.w	r2, r2, #1
 800b5b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b5b6:	2300      	movs	r3, #0
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b086      	sub	sp, #24
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b5d0:	4b8e      	ldr	r3, [pc, #568]	; (800b80c <HAL_DMA_IRQHandler+0x248>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4a8e      	ldr	r2, [pc, #568]	; (800b810 <HAL_DMA_IRQHandler+0x24c>)
 800b5d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b5da:	0a9b      	lsrs	r3, r3, #10
 800b5dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5ee:	2208      	movs	r2, #8
 800b5f0:	409a      	lsls	r2, r3
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d01a      	beq.n	800b630 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f003 0304 	and.w	r3, r3, #4
 800b604:	2b00      	cmp	r3, #0
 800b606:	d013      	beq.n	800b630 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f022 0204 	bic.w	r2, r2, #4
 800b616:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b61c:	2208      	movs	r2, #8
 800b61e:	409a      	lsls	r2, r3
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b628:	f043 0201 	orr.w	r2, r3, #1
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b634:	2201      	movs	r2, #1
 800b636:	409a      	lsls	r2, r3
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	4013      	ands	r3, r2
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d012      	beq.n	800b666 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	695b      	ldr	r3, [r3, #20]
 800b646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00b      	beq.n	800b666 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b652:	2201      	movs	r2, #1
 800b654:	409a      	lsls	r2, r3
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b65e:	f043 0202 	orr.w	r2, r3, #2
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b66a:	2204      	movs	r2, #4
 800b66c:	409a      	lsls	r2, r3
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	4013      	ands	r3, r2
 800b672:	2b00      	cmp	r3, #0
 800b674:	d012      	beq.n	800b69c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f003 0302 	and.w	r3, r3, #2
 800b680:	2b00      	cmp	r3, #0
 800b682:	d00b      	beq.n	800b69c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b688:	2204      	movs	r2, #4
 800b68a:	409a      	lsls	r2, r3
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b694:	f043 0204 	orr.w	r2, r3, #4
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6a0:	2210      	movs	r2, #16
 800b6a2:	409a      	lsls	r2, r3
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	4013      	ands	r3, r2
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d043      	beq.n	800b734 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f003 0308 	and.w	r3, r3, #8
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d03c      	beq.n	800b734 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6be:	2210      	movs	r2, #16
 800b6c0:	409a      	lsls	r2, r3
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d018      	beq.n	800b706 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d108      	bne.n	800b6f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d024      	beq.n	800b734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	4798      	blx	r3
 800b6f2:	e01f      	b.n	800b734 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d01b      	beq.n	800b734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	4798      	blx	r3
 800b704:	e016      	b.n	800b734 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b710:	2b00      	cmp	r3, #0
 800b712:	d107      	bne.n	800b724 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f022 0208 	bic.w	r2, r2, #8
 800b722:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d003      	beq.n	800b734 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b738:	2220      	movs	r2, #32
 800b73a:	409a      	lsls	r2, r3
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	4013      	ands	r3, r2
 800b740:	2b00      	cmp	r3, #0
 800b742:	f000 808f 	beq.w	800b864 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f003 0310 	and.w	r3, r3, #16
 800b750:	2b00      	cmp	r3, #0
 800b752:	f000 8087 	beq.w	800b864 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b75a:	2220      	movs	r2, #32
 800b75c:	409a      	lsls	r2, r3
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	2b05      	cmp	r3, #5
 800b76c:	d136      	bne.n	800b7dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f022 0216 	bic.w	r2, r2, #22
 800b77c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	695a      	ldr	r2, [r3, #20]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b78c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b792:	2b00      	cmp	r3, #0
 800b794:	d103      	bne.n	800b79e <HAL_DMA_IRQHandler+0x1da>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d007      	beq.n	800b7ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f022 0208 	bic.w	r2, r2, #8
 800b7ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7b2:	223f      	movs	r2, #63	; 0x3f
 800b7b4:	409a      	lsls	r2, r3
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d07e      	beq.n	800b8d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	4798      	blx	r3
        }
        return;
 800b7da:	e079      	b.n	800b8d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d01d      	beq.n	800b826 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d10d      	bne.n	800b814 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d031      	beq.n	800b864 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	4798      	blx	r3
 800b808:	e02c      	b.n	800b864 <HAL_DMA_IRQHandler+0x2a0>
 800b80a:	bf00      	nop
 800b80c:	20000004 	.word	0x20000004
 800b810:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d023      	beq.n	800b864 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	4798      	blx	r3
 800b824:	e01e      	b.n	800b864 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b830:	2b00      	cmp	r3, #0
 800b832:	d10f      	bne.n	800b854 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f022 0210 	bic.w	r2, r2, #16
 800b842:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2200      	movs	r2, #0
 800b850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d003      	beq.n	800b864 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d032      	beq.n	800b8d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b870:	f003 0301 	and.w	r3, r3, #1
 800b874:	2b00      	cmp	r3, #0
 800b876:	d022      	beq.n	800b8be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2205      	movs	r2, #5
 800b87c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f022 0201 	bic.w	r2, r2, #1
 800b88e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	3301      	adds	r3, #1
 800b894:	60bb      	str	r3, [r7, #8]
 800b896:	697a      	ldr	r2, [r7, #20]
 800b898:	429a      	cmp	r2, r3
 800b89a:	d307      	bcc.n	800b8ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f003 0301 	and.w	r3, r3, #1
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1f2      	bne.n	800b890 <HAL_DMA_IRQHandler+0x2cc>
 800b8aa:	e000      	b.n	800b8ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 800b8ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d005      	beq.n	800b8d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	4798      	blx	r3
 800b8ce:	e000      	b.n	800b8d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 800b8d0:	bf00      	nop
    }
  }
}
 800b8d2:	3718      	adds	r7, #24
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b8e6:	b2db      	uxtb	r3, r3
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	370c      	adds	r7, #12
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr

0800b8f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b085      	sub	sp, #20
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	607a      	str	r2, [r7, #4]
 800b900:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b910:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	683a      	ldr	r2, [r7, #0]
 800b918:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	2b40      	cmp	r3, #64	; 0x40
 800b920:	d108      	bne.n	800b934 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	68ba      	ldr	r2, [r7, #8]
 800b930:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b932:	e007      	b.n	800b944 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	68ba      	ldr	r2, [r7, #8]
 800b93a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	60da      	str	r2, [r3, #12]
}
 800b944:	bf00      	nop
 800b946:	3714      	adds	r7, #20
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	3b10      	subs	r3, #16
 800b960:	4a14      	ldr	r2, [pc, #80]	; (800b9b4 <DMA_CalcBaseAndBitshift+0x64>)
 800b962:	fba2 2303 	umull	r2, r3, r2, r3
 800b966:	091b      	lsrs	r3, r3, #4
 800b968:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b96a:	4a13      	ldr	r2, [pc, #76]	; (800b9b8 <DMA_CalcBaseAndBitshift+0x68>)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	4413      	add	r3, r2
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	461a      	mov	r2, r3
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2b03      	cmp	r3, #3
 800b97c:	d909      	bls.n	800b992 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b986:	f023 0303 	bic.w	r3, r3, #3
 800b98a:	1d1a      	adds	r2, r3, #4
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	659a      	str	r2, [r3, #88]	; 0x58
 800b990:	e007      	b.n	800b9a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b99a:	f023 0303 	bic.w	r3, r3, #3
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3714      	adds	r7, #20
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop
 800b9b4:	aaaaaaab 	.word	0xaaaaaaab
 800b9b8:	0801587c 	.word	0x0801587c

0800b9bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b085      	sub	sp, #20
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	699b      	ldr	r3, [r3, #24]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d11f      	bne.n	800ba16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	2b03      	cmp	r3, #3
 800b9da:	d856      	bhi.n	800ba8a <DMA_CheckFifoParam+0xce>
 800b9dc:	a201      	add	r2, pc, #4	; (adr r2, 800b9e4 <DMA_CheckFifoParam+0x28>)
 800b9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9e2:	bf00      	nop
 800b9e4:	0800b9f5 	.word	0x0800b9f5
 800b9e8:	0800ba07 	.word	0x0800ba07
 800b9ec:	0800b9f5 	.word	0x0800b9f5
 800b9f0:	0800ba8b 	.word	0x0800ba8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d046      	beq.n	800ba8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800ba00:	2301      	movs	r3, #1
 800ba02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ba04:	e043      	b.n	800ba8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ba0e:	d140      	bne.n	800ba92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800ba10:	2301      	movs	r3, #1
 800ba12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ba14:	e03d      	b.n	800ba92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	699b      	ldr	r3, [r3, #24]
 800ba1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba1e:	d121      	bne.n	800ba64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	2b03      	cmp	r3, #3
 800ba24:	d837      	bhi.n	800ba96 <DMA_CheckFifoParam+0xda>
 800ba26:	a201      	add	r2, pc, #4	; (adr r2, 800ba2c <DMA_CheckFifoParam+0x70>)
 800ba28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba2c:	0800ba3d 	.word	0x0800ba3d
 800ba30:	0800ba43 	.word	0x0800ba43
 800ba34:	0800ba3d 	.word	0x0800ba3d
 800ba38:	0800ba55 	.word	0x0800ba55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ba40:	e030      	b.n	800baa4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d025      	beq.n	800ba9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ba52:	e022      	b.n	800ba9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ba5c:	d11f      	bne.n	800ba9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ba62:	e01c      	b.n	800ba9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	2b02      	cmp	r3, #2
 800ba68:	d903      	bls.n	800ba72 <DMA_CheckFifoParam+0xb6>
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	2b03      	cmp	r3, #3
 800ba6e:	d003      	beq.n	800ba78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ba70:	e018      	b.n	800baa4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800ba72:	2301      	movs	r3, #1
 800ba74:	73fb      	strb	r3, [r7, #15]
      break;
 800ba76:	e015      	b.n	800baa4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d00e      	beq.n	800baa2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800ba84:	2301      	movs	r3, #1
 800ba86:	73fb      	strb	r3, [r7, #15]
      break;
 800ba88:	e00b      	b.n	800baa2 <DMA_CheckFifoParam+0xe6>
      break;
 800ba8a:	bf00      	nop
 800ba8c:	e00a      	b.n	800baa4 <DMA_CheckFifoParam+0xe8>
      break;
 800ba8e:	bf00      	nop
 800ba90:	e008      	b.n	800baa4 <DMA_CheckFifoParam+0xe8>
      break;
 800ba92:	bf00      	nop
 800ba94:	e006      	b.n	800baa4 <DMA_CheckFifoParam+0xe8>
      break;
 800ba96:	bf00      	nop
 800ba98:	e004      	b.n	800baa4 <DMA_CheckFifoParam+0xe8>
      break;
 800ba9a:	bf00      	nop
 800ba9c:	e002      	b.n	800baa4 <DMA_CheckFifoParam+0xe8>
      break;   
 800ba9e:	bf00      	nop
 800baa0:	e000      	b.n	800baa4 <DMA_CheckFifoParam+0xe8>
      break;
 800baa2:	bf00      	nop
    }
  } 
  
  return status; 
 800baa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3714      	adds	r7, #20
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop

0800bab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b089      	sub	sp, #36	; 0x24
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800babe:	2300      	movs	r3, #0
 800bac0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bac2:	2300      	movs	r3, #0
 800bac4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bac6:	2300      	movs	r3, #0
 800bac8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800baca:	2300      	movs	r3, #0
 800bacc:	61fb      	str	r3, [r7, #28]
 800bace:	e165      	b.n	800bd9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bad0:	2201      	movs	r2, #1
 800bad2:	69fb      	ldr	r3, [r7, #28]
 800bad4:	fa02 f303 	lsl.w	r3, r2, r3
 800bad8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	697a      	ldr	r2, [r7, #20]
 800bae0:	4013      	ands	r3, r2
 800bae2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bae4:	693a      	ldr	r2, [r7, #16]
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	429a      	cmp	r2, r3
 800baea:	f040 8154 	bne.w	800bd96 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	f003 0303 	and.w	r3, r3, #3
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d005      	beq.n	800bb06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800bb02:	2b02      	cmp	r3, #2
 800bb04:	d130      	bne.n	800bb68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	005b      	lsls	r3, r3, #1
 800bb10:	2203      	movs	r2, #3
 800bb12:	fa02 f303 	lsl.w	r3, r2, r3
 800bb16:	43db      	mvns	r3, r3
 800bb18:	69ba      	ldr	r2, [r7, #24]
 800bb1a:	4013      	ands	r3, r2
 800bb1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	68da      	ldr	r2, [r3, #12]
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	005b      	lsls	r3, r3, #1
 800bb26:	fa02 f303 	lsl.w	r3, r2, r3
 800bb2a:	69ba      	ldr	r2, [r7, #24]
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	69ba      	ldr	r2, [r7, #24]
 800bb34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	fa02 f303 	lsl.w	r3, r2, r3
 800bb44:	43db      	mvns	r3, r3
 800bb46:	69ba      	ldr	r2, [r7, #24]
 800bb48:	4013      	ands	r3, r2
 800bb4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	091b      	lsrs	r3, r3, #4
 800bb52:	f003 0201 	and.w	r2, r3, #1
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	fa02 f303 	lsl.w	r3, r2, r3
 800bb5c:	69ba      	ldr	r2, [r7, #24]
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	69ba      	ldr	r2, [r7, #24]
 800bb66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	f003 0303 	and.w	r3, r3, #3
 800bb70:	2b03      	cmp	r3, #3
 800bb72:	d017      	beq.n	800bba4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	005b      	lsls	r3, r3, #1
 800bb7e:	2203      	movs	r2, #3
 800bb80:	fa02 f303 	lsl.w	r3, r2, r3
 800bb84:	43db      	mvns	r3, r3
 800bb86:	69ba      	ldr	r2, [r7, #24]
 800bb88:	4013      	ands	r3, r2
 800bb8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	689a      	ldr	r2, [r3, #8]
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	005b      	lsls	r3, r3, #1
 800bb94:	fa02 f303 	lsl.w	r3, r2, r3
 800bb98:	69ba      	ldr	r2, [r7, #24]
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	69ba      	ldr	r2, [r7, #24]
 800bba2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	f003 0303 	and.w	r3, r3, #3
 800bbac:	2b02      	cmp	r3, #2
 800bbae:	d123      	bne.n	800bbf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	08da      	lsrs	r2, r3, #3
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	3208      	adds	r2, #8
 800bbb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800bbbe:	69fb      	ldr	r3, [r7, #28]
 800bbc0:	f003 0307 	and.w	r3, r3, #7
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	220f      	movs	r2, #15
 800bbc8:	fa02 f303 	lsl.w	r3, r2, r3
 800bbcc:	43db      	mvns	r3, r3
 800bbce:	69ba      	ldr	r2, [r7, #24]
 800bbd0:	4013      	ands	r3, r2
 800bbd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	691a      	ldr	r2, [r3, #16]
 800bbd8:	69fb      	ldr	r3, [r7, #28]
 800bbda:	f003 0307 	and.w	r3, r3, #7
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	fa02 f303 	lsl.w	r3, r2, r3
 800bbe4:	69ba      	ldr	r2, [r7, #24]
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	08da      	lsrs	r2, r3, #3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	3208      	adds	r2, #8
 800bbf2:	69b9      	ldr	r1, [r7, #24]
 800bbf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	005b      	lsls	r3, r3, #1
 800bc02:	2203      	movs	r2, #3
 800bc04:	fa02 f303 	lsl.w	r3, r2, r3
 800bc08:	43db      	mvns	r3, r3
 800bc0a:	69ba      	ldr	r2, [r7, #24]
 800bc0c:	4013      	ands	r3, r2
 800bc0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	f003 0203 	and.w	r2, r3, #3
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	005b      	lsls	r3, r3, #1
 800bc1c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc20:	69ba      	ldr	r2, [r7, #24]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	69ba      	ldr	r2, [r7, #24]
 800bc2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	f000 80ae 	beq.w	800bd96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	60fb      	str	r3, [r7, #12]
 800bc3e:	4b5d      	ldr	r3, [pc, #372]	; (800bdb4 <HAL_GPIO_Init+0x300>)
 800bc40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc42:	4a5c      	ldr	r2, [pc, #368]	; (800bdb4 <HAL_GPIO_Init+0x300>)
 800bc44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bc48:	6453      	str	r3, [r2, #68]	; 0x44
 800bc4a:	4b5a      	ldr	r3, [pc, #360]	; (800bdb4 <HAL_GPIO_Init+0x300>)
 800bc4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc52:	60fb      	str	r3, [r7, #12]
 800bc54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bc56:	4a58      	ldr	r2, [pc, #352]	; (800bdb8 <HAL_GPIO_Init+0x304>)
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	089b      	lsrs	r3, r3, #2
 800bc5c:	3302      	adds	r3, #2
 800bc5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	f003 0303 	and.w	r3, r3, #3
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	220f      	movs	r2, #15
 800bc6e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc72:	43db      	mvns	r3, r3
 800bc74:	69ba      	ldr	r2, [r7, #24]
 800bc76:	4013      	ands	r3, r2
 800bc78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4a4f      	ldr	r2, [pc, #316]	; (800bdbc <HAL_GPIO_Init+0x308>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d025      	beq.n	800bcce <HAL_GPIO_Init+0x21a>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4a4e      	ldr	r2, [pc, #312]	; (800bdc0 <HAL_GPIO_Init+0x30c>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d01f      	beq.n	800bcca <HAL_GPIO_Init+0x216>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4a4d      	ldr	r2, [pc, #308]	; (800bdc4 <HAL_GPIO_Init+0x310>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d019      	beq.n	800bcc6 <HAL_GPIO_Init+0x212>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	4a4c      	ldr	r2, [pc, #304]	; (800bdc8 <HAL_GPIO_Init+0x314>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d013      	beq.n	800bcc2 <HAL_GPIO_Init+0x20e>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4a4b      	ldr	r2, [pc, #300]	; (800bdcc <HAL_GPIO_Init+0x318>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d00d      	beq.n	800bcbe <HAL_GPIO_Init+0x20a>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	4a4a      	ldr	r2, [pc, #296]	; (800bdd0 <HAL_GPIO_Init+0x31c>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d007      	beq.n	800bcba <HAL_GPIO_Init+0x206>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	4a49      	ldr	r2, [pc, #292]	; (800bdd4 <HAL_GPIO_Init+0x320>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d101      	bne.n	800bcb6 <HAL_GPIO_Init+0x202>
 800bcb2:	2306      	movs	r3, #6
 800bcb4:	e00c      	b.n	800bcd0 <HAL_GPIO_Init+0x21c>
 800bcb6:	2307      	movs	r3, #7
 800bcb8:	e00a      	b.n	800bcd0 <HAL_GPIO_Init+0x21c>
 800bcba:	2305      	movs	r3, #5
 800bcbc:	e008      	b.n	800bcd0 <HAL_GPIO_Init+0x21c>
 800bcbe:	2304      	movs	r3, #4
 800bcc0:	e006      	b.n	800bcd0 <HAL_GPIO_Init+0x21c>
 800bcc2:	2303      	movs	r3, #3
 800bcc4:	e004      	b.n	800bcd0 <HAL_GPIO_Init+0x21c>
 800bcc6:	2302      	movs	r3, #2
 800bcc8:	e002      	b.n	800bcd0 <HAL_GPIO_Init+0x21c>
 800bcca:	2301      	movs	r3, #1
 800bccc:	e000      	b.n	800bcd0 <HAL_GPIO_Init+0x21c>
 800bcce:	2300      	movs	r3, #0
 800bcd0:	69fa      	ldr	r2, [r7, #28]
 800bcd2:	f002 0203 	and.w	r2, r2, #3
 800bcd6:	0092      	lsls	r2, r2, #2
 800bcd8:	4093      	lsls	r3, r2
 800bcda:	69ba      	ldr	r2, [r7, #24]
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bce0:	4935      	ldr	r1, [pc, #212]	; (800bdb8 <HAL_GPIO_Init+0x304>)
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	089b      	lsrs	r3, r3, #2
 800bce6:	3302      	adds	r3, #2
 800bce8:	69ba      	ldr	r2, [r7, #24]
 800bcea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800bcee:	4b3a      	ldr	r3, [pc, #232]	; (800bdd8 <HAL_GPIO_Init+0x324>)
 800bcf0:	689b      	ldr	r3, [r3, #8]
 800bcf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	43db      	mvns	r3, r3
 800bcf8:	69ba      	ldr	r2, [r7, #24]
 800bcfa:	4013      	ands	r3, r2
 800bcfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d003      	beq.n	800bd12 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800bd0a:	69ba      	ldr	r2, [r7, #24]
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800bd12:	4a31      	ldr	r2, [pc, #196]	; (800bdd8 <HAL_GPIO_Init+0x324>)
 800bd14:	69bb      	ldr	r3, [r7, #24]
 800bd16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800bd18:	4b2f      	ldr	r3, [pc, #188]	; (800bdd8 <HAL_GPIO_Init+0x324>)
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	43db      	mvns	r3, r3
 800bd22:	69ba      	ldr	r2, [r7, #24]
 800bd24:	4013      	ands	r3, r2
 800bd26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d003      	beq.n	800bd3c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800bd34:	69ba      	ldr	r2, [r7, #24]
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800bd3c:	4a26      	ldr	r2, [pc, #152]	; (800bdd8 <HAL_GPIO_Init+0x324>)
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800bd42:	4b25      	ldr	r3, [pc, #148]	; (800bdd8 <HAL_GPIO_Init+0x324>)
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	43db      	mvns	r3, r3
 800bd4c:	69ba      	ldr	r2, [r7, #24]
 800bd4e:	4013      	ands	r3, r2
 800bd50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d003      	beq.n	800bd66 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800bd5e:	69ba      	ldr	r2, [r7, #24]
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	4313      	orrs	r3, r2
 800bd64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bd66:	4a1c      	ldr	r2, [pc, #112]	; (800bdd8 <HAL_GPIO_Init+0x324>)
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bd6c:	4b1a      	ldr	r3, [pc, #104]	; (800bdd8 <HAL_GPIO_Init+0x324>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	43db      	mvns	r3, r3
 800bd76:	69ba      	ldr	r2, [r7, #24]
 800bd78:	4013      	ands	r3, r2
 800bd7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d003      	beq.n	800bd90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800bd88:	69ba      	ldr	r2, [r7, #24]
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bd90:	4a11      	ldr	r2, [pc, #68]	; (800bdd8 <HAL_GPIO_Init+0x324>)
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bd96:	69fb      	ldr	r3, [r7, #28]
 800bd98:	3301      	adds	r3, #1
 800bd9a:	61fb      	str	r3, [r7, #28]
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	2b0f      	cmp	r3, #15
 800bda0:	f67f ae96 	bls.w	800bad0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800bda4:	bf00      	nop
 800bda6:	bf00      	nop
 800bda8:	3724      	adds	r7, #36	; 0x24
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop
 800bdb4:	40023800 	.word	0x40023800
 800bdb8:	40013800 	.word	0x40013800
 800bdbc:	40020000 	.word	0x40020000
 800bdc0:	40020400 	.word	0x40020400
 800bdc4:	40020800 	.word	0x40020800
 800bdc8:	40020c00 	.word	0x40020c00
 800bdcc:	40021000 	.word	0x40021000
 800bdd0:	40021400 	.word	0x40021400
 800bdd4:	40021800 	.word	0x40021800
 800bdd8:	40013c00 	.word	0x40013c00

0800bddc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b085      	sub	sp, #20
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	460b      	mov	r3, r1
 800bde6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	691a      	ldr	r2, [r3, #16]
 800bdec:	887b      	ldrh	r3, [r7, #2]
 800bdee:	4013      	ands	r3, r2
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d002      	beq.n	800bdfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	73fb      	strb	r3, [r7, #15]
 800bdf8:	e001      	b.n	800bdfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bdfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800be00:	4618      	mov	r0, r3
 800be02:	3714      	adds	r7, #20
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	460b      	mov	r3, r1
 800be16:	807b      	strh	r3, [r7, #2]
 800be18:	4613      	mov	r3, r2
 800be1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800be1c:	787b      	ldrb	r3, [r7, #1]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d003      	beq.n	800be2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800be22:	887a      	ldrh	r2, [r7, #2]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800be28:	e003      	b.n	800be32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800be2a:	887b      	ldrh	r3, [r7, #2]
 800be2c:	041a      	lsls	r2, r3, #16
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	619a      	str	r2, [r3, #24]
}
 800be32:	bf00      	nop
 800be34:	370c      	adds	r7, #12
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr
	...

0800be40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	4603      	mov	r3, r0
 800be48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800be4a:	4b08      	ldr	r3, [pc, #32]	; (800be6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800be4c:	695a      	ldr	r2, [r3, #20]
 800be4e:	88fb      	ldrh	r3, [r7, #6]
 800be50:	4013      	ands	r3, r2
 800be52:	2b00      	cmp	r3, #0
 800be54:	d006      	beq.n	800be64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800be56:	4a05      	ldr	r2, [pc, #20]	; (800be6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800be58:	88fb      	ldrh	r3, [r7, #6]
 800be5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800be5c:	88fb      	ldrh	r3, [r7, #6]
 800be5e:	4618      	mov	r0, r3
 800be60:	f7fd fd67 	bl	8009932 <HAL_GPIO_EXTI_Callback>
  }
}
 800be64:	bf00      	nop
 800be66:	3708      	adds	r7, #8
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	40013c00 	.word	0x40013c00

0800be70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d101      	bne.n	800be82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800be7e:	2301      	movs	r3, #1
 800be80:	e12b      	b.n	800c0da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d106      	bne.n	800be9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2200      	movs	r2, #0
 800be92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f7fd fef2 	bl	8009c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2224      	movs	r2, #36	; 0x24
 800bea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f022 0201 	bic.w	r2, r2, #1
 800beb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bec2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bed2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800bed4:	f002 fdce 	bl	800ea74 <HAL_RCC_GetPCLK1Freq>
 800bed8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	4a81      	ldr	r2, [pc, #516]	; (800c0e4 <HAL_I2C_Init+0x274>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d807      	bhi.n	800bef4 <HAL_I2C_Init+0x84>
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	4a80      	ldr	r2, [pc, #512]	; (800c0e8 <HAL_I2C_Init+0x278>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	bf94      	ite	ls
 800beec:	2301      	movls	r3, #1
 800beee:	2300      	movhi	r3, #0
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	e006      	b.n	800bf02 <HAL_I2C_Init+0x92>
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	4a7d      	ldr	r2, [pc, #500]	; (800c0ec <HAL_I2C_Init+0x27c>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	bf94      	ite	ls
 800befc:	2301      	movls	r3, #1
 800befe:	2300      	movhi	r3, #0
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d001      	beq.n	800bf0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800bf06:	2301      	movs	r3, #1
 800bf08:	e0e7      	b.n	800c0da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	4a78      	ldr	r2, [pc, #480]	; (800c0f0 <HAL_I2C_Init+0x280>)
 800bf0e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf12:	0c9b      	lsrs	r3, r3, #18
 800bf14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	430a      	orrs	r2, r1
 800bf28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	6a1b      	ldr	r3, [r3, #32]
 800bf30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	4a6a      	ldr	r2, [pc, #424]	; (800c0e4 <HAL_I2C_Init+0x274>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d802      	bhi.n	800bf44 <HAL_I2C_Init+0xd4>
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	3301      	adds	r3, #1
 800bf42:	e009      	b.n	800bf58 <HAL_I2C_Init+0xe8>
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800bf4a:	fb02 f303 	mul.w	r3, r2, r3
 800bf4e:	4a69      	ldr	r2, [pc, #420]	; (800c0f4 <HAL_I2C_Init+0x284>)
 800bf50:	fba2 2303 	umull	r2, r3, r2, r3
 800bf54:	099b      	lsrs	r3, r3, #6
 800bf56:	3301      	adds	r3, #1
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	6812      	ldr	r2, [r2, #0]
 800bf5c:	430b      	orrs	r3, r1
 800bf5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	69db      	ldr	r3, [r3, #28]
 800bf66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800bf6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	495c      	ldr	r1, [pc, #368]	; (800c0e4 <HAL_I2C_Init+0x274>)
 800bf74:	428b      	cmp	r3, r1
 800bf76:	d819      	bhi.n	800bfac <HAL_I2C_Init+0x13c>
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	1e59      	subs	r1, r3, #1
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	005b      	lsls	r3, r3, #1
 800bf82:	fbb1 f3f3 	udiv	r3, r1, r3
 800bf86:	1c59      	adds	r1, r3, #1
 800bf88:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bf8c:	400b      	ands	r3, r1
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d00a      	beq.n	800bfa8 <HAL_I2C_Init+0x138>
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	1e59      	subs	r1, r3, #1
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	005b      	lsls	r3, r3, #1
 800bf9c:	fbb1 f3f3 	udiv	r3, r1, r3
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bfa6:	e051      	b.n	800c04c <HAL_I2C_Init+0x1dc>
 800bfa8:	2304      	movs	r3, #4
 800bfaa:	e04f      	b.n	800c04c <HAL_I2C_Init+0x1dc>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	689b      	ldr	r3, [r3, #8]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d111      	bne.n	800bfd8 <HAL_I2C_Init+0x168>
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	1e58      	subs	r0, r3, #1
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6859      	ldr	r1, [r3, #4]
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	005b      	lsls	r3, r3, #1
 800bfc0:	440b      	add	r3, r1
 800bfc2:	fbb0 f3f3 	udiv	r3, r0, r3
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	bf0c      	ite	eq
 800bfd0:	2301      	moveq	r3, #1
 800bfd2:	2300      	movne	r3, #0
 800bfd4:	b2db      	uxtb	r3, r3
 800bfd6:	e012      	b.n	800bffe <HAL_I2C_Init+0x18e>
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	1e58      	subs	r0, r3, #1
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6859      	ldr	r1, [r3, #4]
 800bfe0:	460b      	mov	r3, r1
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	440b      	add	r3, r1
 800bfe6:	0099      	lsls	r1, r3, #2
 800bfe8:	440b      	add	r3, r1
 800bfea:	fbb0 f3f3 	udiv	r3, r0, r3
 800bfee:	3301      	adds	r3, #1
 800bff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	bf0c      	ite	eq
 800bff8:	2301      	moveq	r3, #1
 800bffa:	2300      	movne	r3, #0
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d001      	beq.n	800c006 <HAL_I2C_Init+0x196>
 800c002:	2301      	movs	r3, #1
 800c004:	e022      	b.n	800c04c <HAL_I2C_Init+0x1dc>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	689b      	ldr	r3, [r3, #8]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d10e      	bne.n	800c02c <HAL_I2C_Init+0x1bc>
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	1e58      	subs	r0, r3, #1
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6859      	ldr	r1, [r3, #4]
 800c016:	460b      	mov	r3, r1
 800c018:	005b      	lsls	r3, r3, #1
 800c01a:	440b      	add	r3, r1
 800c01c:	fbb0 f3f3 	udiv	r3, r0, r3
 800c020:	3301      	adds	r3, #1
 800c022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c02a:	e00f      	b.n	800c04c <HAL_I2C_Init+0x1dc>
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	1e58      	subs	r0, r3, #1
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6859      	ldr	r1, [r3, #4]
 800c034:	460b      	mov	r3, r1
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	440b      	add	r3, r1
 800c03a:	0099      	lsls	r1, r3, #2
 800c03c:	440b      	add	r3, r1
 800c03e:	fbb0 f3f3 	udiv	r3, r0, r3
 800c042:	3301      	adds	r3, #1
 800c044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c048:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c04c:	6879      	ldr	r1, [r7, #4]
 800c04e:	6809      	ldr	r1, [r1, #0]
 800c050:	4313      	orrs	r3, r2
 800c052:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	69da      	ldr	r2, [r3, #28]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6a1b      	ldr	r3, [r3, #32]
 800c066:	431a      	orrs	r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	430a      	orrs	r2, r1
 800c06e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	689b      	ldr	r3, [r3, #8]
 800c076:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800c07a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	6911      	ldr	r1, [r2, #16]
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	68d2      	ldr	r2, [r2, #12]
 800c086:	4311      	orrs	r1, r2
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	6812      	ldr	r2, [r2, #0]
 800c08c:	430b      	orrs	r3, r1
 800c08e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	68db      	ldr	r3, [r3, #12]
 800c096:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	695a      	ldr	r2, [r3, #20]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	699b      	ldr	r3, [r3, #24]
 800c0a2:	431a      	orrs	r2, r3
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	430a      	orrs	r2, r1
 800c0aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f042 0201 	orr.w	r2, r2, #1
 800c0ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2220      	movs	r2, #32
 800c0c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c0d8:	2300      	movs	r3, #0
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3710      	adds	r7, #16
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	000186a0 	.word	0x000186a0
 800c0e8:	001e847f 	.word	0x001e847f
 800c0ec:	003d08ff 	.word	0x003d08ff
 800c0f0:	431bde83 	.word	0x431bde83
 800c0f4:	10624dd3 	.word	0x10624dd3

0800c0f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b088      	sub	sp, #32
 800c0fc:	af02      	add	r7, sp, #8
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	4608      	mov	r0, r1
 800c102:	4611      	mov	r1, r2
 800c104:	461a      	mov	r2, r3
 800c106:	4603      	mov	r3, r0
 800c108:	817b      	strh	r3, [r7, #10]
 800c10a:	460b      	mov	r3, r1
 800c10c:	813b      	strh	r3, [r7, #8]
 800c10e:	4613      	mov	r3, r2
 800c110:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c112:	f7fe fb89 	bl	800a828 <HAL_GetTick>
 800c116:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	2b20      	cmp	r3, #32
 800c122:	f040 80d9 	bne.w	800c2d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	2319      	movs	r3, #25
 800c12c:	2201      	movs	r2, #1
 800c12e:	496d      	ldr	r1, [pc, #436]	; (800c2e4 <HAL_I2C_Mem_Write+0x1ec>)
 800c130:	68f8      	ldr	r0, [r7, #12]
 800c132:	f002 f933 	bl	800e39c <I2C_WaitOnFlagUntilTimeout>
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d001      	beq.n	800c140 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800c13c:	2302      	movs	r3, #2
 800c13e:	e0cc      	b.n	800c2da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c146:	2b01      	cmp	r3, #1
 800c148:	d101      	bne.n	800c14e <HAL_I2C_Mem_Write+0x56>
 800c14a:	2302      	movs	r3, #2
 800c14c:	e0c5      	b.n	800c2da <HAL_I2C_Mem_Write+0x1e2>
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2201      	movs	r2, #1
 800c152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f003 0301 	and.w	r3, r3, #1
 800c160:	2b01      	cmp	r3, #1
 800c162:	d007      	beq.n	800c174 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f042 0201 	orr.w	r2, r2, #1
 800c172:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	681a      	ldr	r2, [r3, #0]
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c182:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2221      	movs	r2, #33	; 0x21
 800c188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2240      	movs	r2, #64	; 0x40
 800c190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2200      	movs	r2, #0
 800c198:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	6a3a      	ldr	r2, [r7, #32]
 800c19e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c1a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1aa:	b29a      	uxth	r2, r3
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	4a4d      	ldr	r2, [pc, #308]	; (800c2e8 <HAL_I2C_Mem_Write+0x1f0>)
 800c1b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c1b6:	88f8      	ldrh	r0, [r7, #6]
 800c1b8:	893a      	ldrh	r2, [r7, #8]
 800c1ba:	8979      	ldrh	r1, [r7, #10]
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	9301      	str	r3, [sp, #4]
 800c1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c2:	9300      	str	r3, [sp, #0]
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	68f8      	ldr	r0, [r7, #12]
 800c1c8:	f001 fec2 	bl	800df50 <I2C_RequestMemoryWrite>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d052      	beq.n	800c278 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e081      	b.n	800c2da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c1d6:	697a      	ldr	r2, [r7, #20]
 800c1d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c1da:	68f8      	ldr	r0, [r7, #12]
 800c1dc:	f002 f9b4 	bl	800e548 <I2C_WaitOnTXEFlagUntilTimeout>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d00d      	beq.n	800c202 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ea:	2b04      	cmp	r3, #4
 800c1ec:	d107      	bne.n	800c1fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c1fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c1fe:	2301      	movs	r3, #1
 800c200:	e06b      	b.n	800c2da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c206:	781a      	ldrb	r2, [r3, #0]
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c212:	1c5a      	adds	r2, r3, #1
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c21c:	3b01      	subs	r3, #1
 800c21e:	b29a      	uxth	r2, r3
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c228:	b29b      	uxth	r3, r3
 800c22a:	3b01      	subs	r3, #1
 800c22c:	b29a      	uxth	r2, r3
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	695b      	ldr	r3, [r3, #20]
 800c238:	f003 0304 	and.w	r3, r3, #4
 800c23c:	2b04      	cmp	r3, #4
 800c23e:	d11b      	bne.n	800c278 <HAL_I2C_Mem_Write+0x180>
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c244:	2b00      	cmp	r3, #0
 800c246:	d017      	beq.n	800c278 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c24c:	781a      	ldrb	r2, [r3, #0]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c258:	1c5a      	adds	r2, r3, #1
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c262:	3b01      	subs	r3, #1
 800c264:	b29a      	uxth	r2, r3
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c26e:	b29b      	uxth	r3, r3
 800c270:	3b01      	subs	r3, #1
 800c272:	b29a      	uxth	r2, r3
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d1aa      	bne.n	800c1d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c280:	697a      	ldr	r2, [r7, #20]
 800c282:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f002 f9a0 	bl	800e5ca <I2C_WaitOnBTFFlagUntilTimeout>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d00d      	beq.n	800c2ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c294:	2b04      	cmp	r3, #4
 800c296:	d107      	bne.n	800c2a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	e016      	b.n	800c2da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2220      	movs	r2, #32
 800c2c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	e000      	b.n	800c2da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800c2d8:	2302      	movs	r3, #2
  }
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3718      	adds	r7, #24
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	00100002 	.word	0x00100002
 800c2e8:	ffff0000 	.word	0xffff0000

0800c2ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b08c      	sub	sp, #48	; 0x30
 800c2f0:	af02      	add	r7, sp, #8
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	4608      	mov	r0, r1
 800c2f6:	4611      	mov	r1, r2
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	817b      	strh	r3, [r7, #10]
 800c2fe:	460b      	mov	r3, r1
 800c300:	813b      	strh	r3, [r7, #8]
 800c302:	4613      	mov	r3, r2
 800c304:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c306:	f7fe fa8f 	bl	800a828 <HAL_GetTick>
 800c30a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c312:	b2db      	uxtb	r3, r3
 800c314:	2b20      	cmp	r3, #32
 800c316:	f040 8208 	bne.w	800c72a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31c:	9300      	str	r3, [sp, #0]
 800c31e:	2319      	movs	r3, #25
 800c320:	2201      	movs	r2, #1
 800c322:	497b      	ldr	r1, [pc, #492]	; (800c510 <HAL_I2C_Mem_Read+0x224>)
 800c324:	68f8      	ldr	r0, [r7, #12]
 800c326:	f002 f839 	bl	800e39c <I2C_WaitOnFlagUntilTimeout>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d001      	beq.n	800c334 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800c330:	2302      	movs	r3, #2
 800c332:	e1fb      	b.n	800c72c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	d101      	bne.n	800c342 <HAL_I2C_Mem_Read+0x56>
 800c33e:	2302      	movs	r3, #2
 800c340:	e1f4      	b.n	800c72c <HAL_I2C_Mem_Read+0x440>
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2201      	movs	r2, #1
 800c346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f003 0301 	and.w	r3, r3, #1
 800c354:	2b01      	cmp	r3, #1
 800c356:	d007      	beq.n	800c368 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f042 0201 	orr.w	r2, r2, #1
 800c366:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c376:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2222      	movs	r2, #34	; 0x22
 800c37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2240      	movs	r2, #64	; 0x40
 800c384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2200      	movs	r2, #0
 800c38c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c392:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800c398:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c39e:	b29a      	uxth	r2, r3
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	4a5b      	ldr	r2, [pc, #364]	; (800c514 <HAL_I2C_Mem_Read+0x228>)
 800c3a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c3aa:	88f8      	ldrh	r0, [r7, #6]
 800c3ac:	893a      	ldrh	r2, [r7, #8]
 800c3ae:	8979      	ldrh	r1, [r7, #10]
 800c3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b2:	9301      	str	r3, [sp, #4]
 800c3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b6:	9300      	str	r3, [sp, #0]
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f001 fe5e 	bl	800e07c <I2C_RequestMemoryRead>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d001      	beq.n	800c3ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	e1b0      	b.n	800c72c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d113      	bne.n	800c3fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	623b      	str	r3, [r7, #32]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	695b      	ldr	r3, [r3, #20]
 800c3dc:	623b      	str	r3, [r7, #32]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	699b      	ldr	r3, [r3, #24]
 800c3e4:	623b      	str	r3, [r7, #32]
 800c3e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c3f6:	601a      	str	r2, [r3, #0]
 800c3f8:	e184      	b.n	800c704 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d11b      	bne.n	800c43a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c410:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c412:	2300      	movs	r3, #0
 800c414:	61fb      	str	r3, [r7, #28]
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	695b      	ldr	r3, [r3, #20]
 800c41c:	61fb      	str	r3, [r7, #28]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	699b      	ldr	r3, [r3, #24]
 800c424:	61fb      	str	r3, [r7, #28]
 800c426:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c436:	601a      	str	r2, [r3, #0]
 800c438:	e164      	b.n	800c704 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c43e:	2b02      	cmp	r3, #2
 800c440:	d11b      	bne.n	800c47a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c450:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c460:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c462:	2300      	movs	r3, #0
 800c464:	61bb      	str	r3, [r7, #24]
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	695b      	ldr	r3, [r3, #20]
 800c46c:	61bb      	str	r3, [r7, #24]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	699b      	ldr	r3, [r3, #24]
 800c474:	61bb      	str	r3, [r7, #24]
 800c476:	69bb      	ldr	r3, [r7, #24]
 800c478:	e144      	b.n	800c704 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c47a:	2300      	movs	r3, #0
 800c47c:	617b      	str	r3, [r7, #20]
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	695b      	ldr	r3, [r3, #20]
 800c484:	617b      	str	r3, [r7, #20]
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	699b      	ldr	r3, [r3, #24]
 800c48c:	617b      	str	r3, [r7, #20]
 800c48e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800c490:	e138      	b.n	800c704 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c496:	2b03      	cmp	r3, #3
 800c498:	f200 80f1 	bhi.w	800c67e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d123      	bne.n	800c4ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c4a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c4a8:	68f8      	ldr	r0, [r7, #12]
 800c4aa:	f002 f901 	bl	800e6b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d001      	beq.n	800c4b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	e139      	b.n	800c72c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	691a      	ldr	r2, [r3, #16]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c2:	b2d2      	uxtb	r2, r2
 800c4c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ca:	1c5a      	adds	r2, r3, #1
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	b29a      	uxth	r2, r3
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	3b01      	subs	r3, #1
 800c4e4:	b29a      	uxth	r2, r3
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c4ea:	e10b      	b.n	800c704 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	d14e      	bne.n	800c592 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f6:	9300      	str	r3, [sp, #0]
 800c4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	4906      	ldr	r1, [pc, #24]	; (800c518 <HAL_I2C_Mem_Read+0x22c>)
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f001 ff4c 	bl	800e39c <I2C_WaitOnFlagUntilTimeout>
 800c504:	4603      	mov	r3, r0
 800c506:	2b00      	cmp	r3, #0
 800c508:	d008      	beq.n	800c51c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800c50a:	2301      	movs	r3, #1
 800c50c:	e10e      	b.n	800c72c <HAL_I2C_Mem_Read+0x440>
 800c50e:	bf00      	nop
 800c510:	00100002 	.word	0x00100002
 800c514:	ffff0000 	.word	0xffff0000
 800c518:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c52a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	691a      	ldr	r2, [r3, #16]
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c536:	b2d2      	uxtb	r2, r2
 800c538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c53e:	1c5a      	adds	r2, r3, #1
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c548:	3b01      	subs	r3, #1
 800c54a:	b29a      	uxth	r2, r3
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c554:	b29b      	uxth	r3, r3
 800c556:	3b01      	subs	r3, #1
 800c558:	b29a      	uxth	r2, r3
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	691a      	ldr	r2, [r3, #16]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c568:	b2d2      	uxtb	r2, r2
 800c56a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c570:	1c5a      	adds	r2, r3, #1
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c57a:	3b01      	subs	r3, #1
 800c57c:	b29a      	uxth	r2, r3
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c586:	b29b      	uxth	r3, r3
 800c588:	3b01      	subs	r3, #1
 800c58a:	b29a      	uxth	r2, r3
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c590:	e0b8      	b.n	800c704 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c594:	9300      	str	r3, [sp, #0]
 800c596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c598:	2200      	movs	r2, #0
 800c59a:	4966      	ldr	r1, [pc, #408]	; (800c734 <HAL_I2C_Mem_Read+0x448>)
 800c59c:	68f8      	ldr	r0, [r7, #12]
 800c59e:	f001 fefd 	bl	800e39c <I2C_WaitOnFlagUntilTimeout>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d001      	beq.n	800c5ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	e0bf      	b.n	800c72c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c5ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	691a      	ldr	r2, [r3, #16]
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c6:	b2d2      	uxtb	r2, r2
 800c5c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ce:	1c5a      	adds	r2, r3, #1
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5d8:	3b01      	subs	r3, #1
 800c5da:	b29a      	uxth	r2, r3
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	3b01      	subs	r3, #1
 800c5e8:	b29a      	uxth	r2, r3
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f0:	9300      	str	r3, [sp, #0]
 800c5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	494f      	ldr	r1, [pc, #316]	; (800c734 <HAL_I2C_Mem_Read+0x448>)
 800c5f8:	68f8      	ldr	r0, [r7, #12]
 800c5fa:	f001 fecf 	bl	800e39c <I2C_WaitOnFlagUntilTimeout>
 800c5fe:	4603      	mov	r3, r0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d001      	beq.n	800c608 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800c604:	2301      	movs	r3, #1
 800c606:	e091      	b.n	800c72c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	681a      	ldr	r2, [r3, #0]
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c616:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	691a      	ldr	r2, [r3, #16]
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c622:	b2d2      	uxtb	r2, r2
 800c624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c62a:	1c5a      	adds	r2, r3, #1
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c634:	3b01      	subs	r3, #1
 800c636:	b29a      	uxth	r2, r3
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c640:	b29b      	uxth	r3, r3
 800c642:	3b01      	subs	r3, #1
 800c644:	b29a      	uxth	r2, r3
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	691a      	ldr	r2, [r3, #16]
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c654:	b2d2      	uxtb	r2, r2
 800c656:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c65c:	1c5a      	adds	r2, r3, #1
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c666:	3b01      	subs	r3, #1
 800c668:	b29a      	uxth	r2, r3
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c672:	b29b      	uxth	r3, r3
 800c674:	3b01      	subs	r3, #1
 800c676:	b29a      	uxth	r2, r3
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c67c:	e042      	b.n	800c704 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c67e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c680:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c682:	68f8      	ldr	r0, [r7, #12]
 800c684:	f002 f814 	bl	800e6b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c688:	4603      	mov	r3, r0
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d001      	beq.n	800c692 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800c68e:	2301      	movs	r3, #1
 800c690:	e04c      	b.n	800c72c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	691a      	ldr	r2, [r3, #16]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c69c:	b2d2      	uxtb	r2, r2
 800c69e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a4:	1c5a      	adds	r2, r3, #1
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6ae:	3b01      	subs	r3, #1
 800c6b0:	b29a      	uxth	r2, r3
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	3b01      	subs	r3, #1
 800c6be:	b29a      	uxth	r2, r3
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	695b      	ldr	r3, [r3, #20]
 800c6ca:	f003 0304 	and.w	r3, r3, #4
 800c6ce:	2b04      	cmp	r3, #4
 800c6d0:	d118      	bne.n	800c704 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	691a      	ldr	r2, [r3, #16]
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6dc:	b2d2      	uxtb	r2, r2
 800c6de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6e4:	1c5a      	adds	r2, r3, #1
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6ee:	3b01      	subs	r3, #1
 800c6f0:	b29a      	uxth	r2, r3
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	3b01      	subs	r3, #1
 800c6fe:	b29a      	uxth	r2, r3
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c708:	2b00      	cmp	r3, #0
 800c70a:	f47f aec2 	bne.w	800c492 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2220      	movs	r2, #32
 800c712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2200      	movs	r2, #0
 800c71a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2200      	movs	r2, #0
 800c722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c726:	2300      	movs	r3, #0
 800c728:	e000      	b.n	800c72c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800c72a:	2302      	movs	r3, #2
  }
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3728      	adds	r7, #40	; 0x28
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	00010004 	.word	0x00010004

0800c738 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800c738:	b480      	push	{r7}
 800c73a:	b087      	sub	sp, #28
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	60f8      	str	r0, [r7, #12]
 800c740:	4608      	mov	r0, r1
 800c742:	4611      	mov	r1, r2
 800c744:	461a      	mov	r2, r3
 800c746:	4603      	mov	r3, r0
 800c748:	817b      	strh	r3, [r7, #10]
 800c74a:	460b      	mov	r3, r1
 800c74c:	813b      	strh	r3, [r7, #8]
 800c74e:	4613      	mov	r3, r2
 800c750:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800c752:	2300      	movs	r3, #0
 800c754:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	2b20      	cmp	r3, #32
 800c760:	f040 808e 	bne.w	800c880 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c764:	4b4a      	ldr	r3, [pc, #296]	; (800c890 <HAL_I2C_Mem_Write_IT+0x158>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	08db      	lsrs	r3, r3, #3
 800c76a:	4a4a      	ldr	r2, [pc, #296]	; (800c894 <HAL_I2C_Mem_Write_IT+0x15c>)
 800c76c:	fba2 2303 	umull	r2, r3, r2, r3
 800c770:	0a1a      	lsrs	r2, r3, #8
 800c772:	4613      	mov	r3, r2
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	4413      	add	r3, r2
 800c778:	009a      	lsls	r2, r3, #2
 800c77a:	4413      	add	r3, r2
 800c77c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	3b01      	subs	r3, #1
 800c782:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d116      	bne.n	800c7b8 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2200      	movs	r2, #0
 800c78e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2220      	movs	r2, #32
 800c794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2200      	movs	r2, #0
 800c79c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a4:	f043 0220 	orr.w	r2, r3, #32
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	e064      	b.n	800c882 <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	699b      	ldr	r3, [r3, #24]
 800c7be:	f003 0302 	and.w	r3, r3, #2
 800c7c2:	2b02      	cmp	r3, #2
 800c7c4:	d0db      	beq.n	800c77e <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d101      	bne.n	800c7d4 <HAL_I2C_Mem_Write_IT+0x9c>
 800c7d0:	2302      	movs	r3, #2
 800c7d2:	e056      	b.n	800c882 <HAL_I2C_Mem_Write_IT+0x14a>
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f003 0301 	and.w	r3, r3, #1
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d007      	beq.n	800c7fa <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f042 0201 	orr.w	r2, r2, #1
 800c7f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	681a      	ldr	r2, [r3, #0]
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c808:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2221      	movs	r2, #33	; 0x21
 800c80e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	2240      	movs	r2, #64	; 0x40
 800c816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2200      	movs	r2, #0
 800c81e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	6a3a      	ldr	r2, [r7, #32]
 800c824:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c82a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c830:	b29a      	uxth	r2, r3
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	4a17      	ldr	r2, [pc, #92]	; (800c898 <HAL_I2C_Mem_Write_IT+0x160>)
 800c83a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c83c:	897a      	ldrh	r2, [r7, #10]
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800c842:	893a      	ldrh	r2, [r7, #8]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800c848:	88fa      	ldrh	r2, [r7, #6]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2200      	movs	r2, #0
 800c852:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c862:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2200      	movs	r2, #0
 800c868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	685a      	ldr	r2, [r3, #4]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c87a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800c87c:	2300      	movs	r3, #0
 800c87e:	e000      	b.n	800c882 <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800c880:	2302      	movs	r3, #2
  }
}
 800c882:	4618      	mov	r0, r3
 800c884:	371c      	adds	r7, #28
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop
 800c890:	20000004 	.word	0x20000004
 800c894:	14f8b589 	.word	0x14f8b589
 800c898:	ffff0000 	.word	0xffff0000

0800c89c <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b087      	sub	sp, #28
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	4608      	mov	r0, r1
 800c8a6:	4611      	mov	r1, r2
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	817b      	strh	r3, [r7, #10]
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	813b      	strh	r3, [r7, #8]
 800c8b2:	4613      	mov	r3, r2
 800c8b4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	2b20      	cmp	r3, #32
 800c8c4:	f040 809a 	bne.w	800c9fc <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c8c8:	4b50      	ldr	r3, [pc, #320]	; (800ca0c <HAL_I2C_Mem_Read_IT+0x170>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	08db      	lsrs	r3, r3, #3
 800c8ce:	4a50      	ldr	r2, [pc, #320]	; (800ca10 <HAL_I2C_Mem_Read_IT+0x174>)
 800c8d0:	fba2 2303 	umull	r2, r3, r2, r3
 800c8d4:	0a1a      	lsrs	r2, r3, #8
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	4413      	add	r3, r2
 800c8dc:	009a      	lsls	r2, r3, #2
 800c8de:	4413      	add	r3, r2
 800c8e0:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	3b01      	subs	r3, #1
 800c8e6:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d116      	bne.n	800c91c <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2220      	movs	r2, #32
 800c8f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2200      	movs	r2, #0
 800c900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c908:	f043 0220 	orr.w	r2, r3, #32
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2200      	movs	r2, #0
 800c914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c918:	2301      	movs	r3, #1
 800c91a:	e070      	b.n	800c9fe <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	699b      	ldr	r3, [r3, #24]
 800c922:	f003 0302 	and.w	r3, r3, #2
 800c926:	2b02      	cmp	r3, #2
 800c928:	d0db      	beq.n	800c8e2 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c930:	2b01      	cmp	r3, #1
 800c932:	d101      	bne.n	800c938 <HAL_I2C_Mem_Read_IT+0x9c>
 800c934:	2302      	movs	r3, #2
 800c936:	e062      	b.n	800c9fe <HAL_I2C_Mem_Read_IT+0x162>
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2201      	movs	r2, #1
 800c93c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f003 0301 	and.w	r3, r3, #1
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d007      	beq.n	800c95e <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f042 0201 	orr.w	r2, r2, #1
 800c95c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	681a      	ldr	r2, [r3, #0]
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c96c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2222      	movs	r2, #34	; 0x22
 800c972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2240      	movs	r2, #64	; 0x40
 800c97a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2200      	movs	r2, #0
 800c982:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	6a3a      	ldr	r2, [r7, #32]
 800c988:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c98e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c994:	b29a      	uxth	r2, r3
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	4a1d      	ldr	r2, [pc, #116]	; (800ca14 <HAL_I2C_Mem_Read_IT+0x178>)
 800c99e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c9a0:	897a      	ldrh	r2, [r7, #10]
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800c9a6:	893a      	ldrh	r2, [r7, #8]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800c9ac:	88fa      	ldrh	r2, [r7, #6]
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c9c6:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	681a      	ldr	r2, [r3, #0]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c9d6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d007      	beq.n	800c9f8 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	685a      	ldr	r2, [r3, #4]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c9f6:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	e000      	b.n	800c9fe <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 800c9fc:	2302      	movs	r3, #2
  }
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	371c      	adds	r7, #28
 800ca02:	46bd      	mov	sp, r7
 800ca04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca08:	4770      	bx	lr
 800ca0a:	bf00      	nop
 800ca0c:	20000004 	.word	0x20000004
 800ca10:	14f8b589 	.word	0x14f8b589
 800ca14:	ffff0000 	.word	0xffff0000

0800ca18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b088      	sub	sp, #32
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800ca20:	2300      	movs	r3, #0
 800ca22:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	685b      	ldr	r3, [r3, #4]
 800ca2a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca30:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca38:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca40:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800ca42:	7bfb      	ldrb	r3, [r7, #15]
 800ca44:	2b10      	cmp	r3, #16
 800ca46:	d003      	beq.n	800ca50 <HAL_I2C_EV_IRQHandler+0x38>
 800ca48:	7bfb      	ldrb	r3, [r7, #15]
 800ca4a:	2b40      	cmp	r3, #64	; 0x40
 800ca4c:	f040 80b1 	bne.w	800cbb2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	699b      	ldr	r3, [r3, #24]
 800ca56:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	695b      	ldr	r3, [r3, #20]
 800ca5e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	f003 0301 	and.w	r3, r3, #1
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d10d      	bne.n	800ca86 <HAL_I2C_EV_IRQHandler+0x6e>
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ca70:	d003      	beq.n	800ca7a <HAL_I2C_EV_IRQHandler+0x62>
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ca78:	d101      	bne.n	800ca7e <HAL_I2C_EV_IRQHandler+0x66>
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	e000      	b.n	800ca80 <HAL_I2C_EV_IRQHandler+0x68>
 800ca7e:	2300      	movs	r3, #0
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	f000 8114 	beq.w	800ccae <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	f003 0301 	and.w	r3, r3, #1
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d00b      	beq.n	800caa8 <HAL_I2C_EV_IRQHandler+0x90>
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d006      	beq.n	800caa8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f001 fe8d 	bl	800e7ba <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f000 fcab 	bl	800d3fc <I2C_Master_SB>
 800caa6:	e083      	b.n	800cbb0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800caa8:	69fb      	ldr	r3, [r7, #28]
 800caaa:	f003 0308 	and.w	r3, r3, #8
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d008      	beq.n	800cac4 <HAL_I2C_EV_IRQHandler+0xac>
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d003      	beq.n	800cac4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f000 fd23 	bl	800d508 <I2C_Master_ADD10>
 800cac2:	e075      	b.n	800cbb0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cac4:	69fb      	ldr	r3, [r7, #28]
 800cac6:	f003 0302 	and.w	r3, r3, #2
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d008      	beq.n	800cae0 <HAL_I2C_EV_IRQHandler+0xc8>
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d003      	beq.n	800cae0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 fd3f 	bl	800d55c <I2C_Master_ADDR>
 800cade:	e067      	b.n	800cbb0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800cae0:	69bb      	ldr	r3, [r7, #24]
 800cae2:	f003 0304 	and.w	r3, r3, #4
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d036      	beq.n	800cb58 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800caf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800caf8:	f000 80db 	beq.w	800ccb2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d00d      	beq.n	800cb22 <HAL_I2C_EV_IRQHandler+0x10a>
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d008      	beq.n	800cb22 <HAL_I2C_EV_IRQHandler+0x10a>
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	f003 0304 	and.w	r3, r3, #4
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d103      	bne.n	800cb22 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 f923 	bl	800cd66 <I2C_MasterTransmit_TXE>
 800cb20:	e046      	b.n	800cbb0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cb22:	69fb      	ldr	r3, [r7, #28]
 800cb24:	f003 0304 	and.w	r3, r3, #4
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	f000 80c2 	beq.w	800ccb2 <HAL_I2C_EV_IRQHandler+0x29a>
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	f000 80bc 	beq.w	800ccb2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800cb3a:	7bbb      	ldrb	r3, [r7, #14]
 800cb3c:	2b21      	cmp	r3, #33	; 0x21
 800cb3e:	d103      	bne.n	800cb48 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 f9ac 	bl	800ce9e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cb46:	e0b4      	b.n	800ccb2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800cb48:	7bfb      	ldrb	r3, [r7, #15]
 800cb4a:	2b40      	cmp	r3, #64	; 0x40
 800cb4c:	f040 80b1 	bne.w	800ccb2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 fa1a 	bl	800cf8a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cb56:	e0ac      	b.n	800ccb2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb66:	f000 80a4 	beq.w	800ccb2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cb6a:	69fb      	ldr	r3, [r7, #28]
 800cb6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d00d      	beq.n	800cb90 <HAL_I2C_EV_IRQHandler+0x178>
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d008      	beq.n	800cb90 <HAL_I2C_EV_IRQHandler+0x178>
 800cb7e:	69fb      	ldr	r3, [r7, #28]
 800cb80:	f003 0304 	and.w	r3, r3, #4
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d103      	bne.n	800cb90 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 fa92 	bl	800d0b2 <I2C_MasterReceive_RXNE>
 800cb8e:	e00f      	b.n	800cbb0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cb90:	69fb      	ldr	r3, [r7, #28]
 800cb92:	f003 0304 	and.w	r3, r3, #4
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	f000 808b 	beq.w	800ccb2 <HAL_I2C_EV_IRQHandler+0x29a>
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	f000 8085 	beq.w	800ccb2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f000 fb3d 	bl	800d228 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cbae:	e080      	b.n	800ccb2 <HAL_I2C_EV_IRQHandler+0x29a>
 800cbb0:	e07f      	b.n	800ccb2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d004      	beq.n	800cbc4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	695b      	ldr	r3, [r3, #20]
 800cbc0:	61fb      	str	r3, [r7, #28]
 800cbc2:	e007      	b.n	800cbd4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	699b      	ldr	r3, [r3, #24]
 800cbca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	695b      	ldr	r3, [r3, #20]
 800cbd2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cbd4:	69fb      	ldr	r3, [r7, #28]
 800cbd6:	f003 0302 	and.w	r3, r3, #2
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d011      	beq.n	800cc02 <HAL_I2C_EV_IRQHandler+0x1ea>
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d00c      	beq.n	800cc02 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d003      	beq.n	800cbf8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	699b      	ldr	r3, [r3, #24]
 800cbf6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800cbf8:	69b9      	ldr	r1, [r7, #24]
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f000 fefd 	bl	800d9fa <I2C_Slave_ADDR>
 800cc00:	e05a      	b.n	800ccb8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	f003 0310 	and.w	r3, r3, #16
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d008      	beq.n	800cc1e <HAL_I2C_EV_IRQHandler+0x206>
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d003      	beq.n	800cc1e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 ff38 	bl	800da8c <I2C_Slave_STOPF>
 800cc1c:	e04c      	b.n	800ccb8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cc1e:	7bbb      	ldrb	r3, [r7, #14]
 800cc20:	2b21      	cmp	r3, #33	; 0x21
 800cc22:	d002      	beq.n	800cc2a <HAL_I2C_EV_IRQHandler+0x212>
 800cc24:	7bbb      	ldrb	r3, [r7, #14]
 800cc26:	2b29      	cmp	r3, #41	; 0x29
 800cc28:	d120      	bne.n	800cc6c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d00d      	beq.n	800cc50 <HAL_I2C_EV_IRQHandler+0x238>
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d008      	beq.n	800cc50 <HAL_I2C_EV_IRQHandler+0x238>
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	f003 0304 	and.w	r3, r3, #4
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d103      	bne.n	800cc50 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 fe18 	bl	800d87e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cc4e:	e032      	b.n	800ccb6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cc50:	69fb      	ldr	r3, [r7, #28]
 800cc52:	f003 0304 	and.w	r3, r3, #4
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d02d      	beq.n	800ccb6 <HAL_I2C_EV_IRQHandler+0x29e>
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d028      	beq.n	800ccb6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f000 fe47 	bl	800d8f8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cc6a:	e024      	b.n	800ccb6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cc6c:	69fb      	ldr	r3, [r7, #28]
 800cc6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d00d      	beq.n	800cc92 <HAL_I2C_EV_IRQHandler+0x27a>
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d008      	beq.n	800cc92 <HAL_I2C_EV_IRQHandler+0x27a>
 800cc80:	69fb      	ldr	r3, [r7, #28]
 800cc82:	f003 0304 	and.w	r3, r3, #4
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d103      	bne.n	800cc92 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 fe55 	bl	800d93a <I2C_SlaveReceive_RXNE>
 800cc90:	e012      	b.n	800ccb8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	f003 0304 	and.w	r3, r3, #4
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d00d      	beq.n	800ccb8 <HAL_I2C_EV_IRQHandler+0x2a0>
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d008      	beq.n	800ccb8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f000 fe85 	bl	800d9b6 <I2C_SlaveReceive_BTF>
 800ccac:	e004      	b.n	800ccb8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800ccae:	bf00      	nop
 800ccb0:	e002      	b.n	800ccb8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ccb2:	bf00      	nop
 800ccb4:	e000      	b.n	800ccb8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ccb6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800ccb8:	3720      	adds	r7, #32
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ccbe:	b480      	push	{r7}
 800ccc0:	b083      	sub	sp, #12
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800ccc6:	bf00      	nop
 800ccc8:	370c      	adds	r7, #12
 800ccca:	46bd      	mov	sp, r7
 800cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd0:	4770      	bx	lr

0800ccd2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ccd2:	b480      	push	{r7}
 800ccd4:	b083      	sub	sp, #12
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800ccda:	bf00      	nop
 800ccdc:	370c      	adds	r7, #12
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr

0800cce6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cce6:	b480      	push	{r7}
 800cce8:	b083      	sub	sp, #12
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ccee:	bf00      	nop
 800ccf0:	370c      	adds	r7, #12
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf8:	4770      	bx	lr

0800ccfa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ccfa:	b480      	push	{r7}
 800ccfc:	b083      	sub	sp, #12
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800cd02:	bf00      	nop
 800cd04:	370c      	adds	r7, #12
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr

0800cd0e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800cd0e:	b480      	push	{r7}
 800cd10:	b083      	sub	sp, #12
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	6078      	str	r0, [r7, #4]
 800cd16:	460b      	mov	r3, r1
 800cd18:	70fb      	strb	r3, [r7, #3]
 800cd1a:	4613      	mov	r3, r2
 800cd1c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800cd1e:	bf00      	nop
 800cd20:	370c      	adds	r7, #12
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr

0800cd2a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cd2a:	b480      	push	{r7}
 800cd2c:	b083      	sub	sp, #12
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800cd32:	bf00      	nop
 800cd34:	370c      	adds	r7, #12
 800cd36:	46bd      	mov	sp, r7
 800cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3c:	4770      	bx	lr

0800cd3e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800cd3e:	b480      	push	{r7}
 800cd40:	b083      	sub	sp, #12
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800cd46:	bf00      	nop
 800cd48:	370c      	adds	r7, #12
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr

0800cd52 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cd52:	b480      	push	{r7}
 800cd54:	b083      	sub	sp, #12
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800cd5a:	bf00      	nop
 800cd5c:	370c      	adds	r7, #12
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr

0800cd66 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800cd66:	b580      	push	{r7, lr}
 800cd68:	b084      	sub	sp, #16
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd74:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cd7c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd82:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d150      	bne.n	800ce2e <I2C_MasterTransmit_TXE+0xc8>
 800cd8c:	7bfb      	ldrb	r3, [r7, #15]
 800cd8e:	2b21      	cmp	r3, #33	; 0x21
 800cd90:	d14d      	bne.n	800ce2e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	2b08      	cmp	r3, #8
 800cd96:	d01d      	beq.n	800cdd4 <I2C_MasterTransmit_TXE+0x6e>
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	2b20      	cmp	r3, #32
 800cd9c:	d01a      	beq.n	800cdd4 <I2C_MasterTransmit_TXE+0x6e>
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cda4:	d016      	beq.n	800cdd4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	685a      	ldr	r2, [r3, #4]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cdb4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2211      	movs	r2, #17
 800cdba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2220      	movs	r2, #32
 800cdc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f7ff ff76 	bl	800ccbe <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800cdd2:	e060      	b.n	800ce96 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	685a      	ldr	r2, [r3, #4]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cde2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cdf2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2220      	movs	r2, #32
 800cdfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	2b40      	cmp	r3, #64	; 0x40
 800ce0c:	d107      	bne.n	800ce1e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2200      	movs	r2, #0
 800ce12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f7f5 f984 	bl	8002124 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ce1c:	e03b      	b.n	800ce96 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2200      	movs	r2, #0
 800ce22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f7ff ff49 	bl	800ccbe <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ce2c:	e033      	b.n	800ce96 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800ce2e:	7bfb      	ldrb	r3, [r7, #15]
 800ce30:	2b21      	cmp	r3, #33	; 0x21
 800ce32:	d005      	beq.n	800ce40 <I2C_MasterTransmit_TXE+0xda>
 800ce34:	7bbb      	ldrb	r3, [r7, #14]
 800ce36:	2b40      	cmp	r3, #64	; 0x40
 800ce38:	d12d      	bne.n	800ce96 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800ce3a:	7bfb      	ldrb	r3, [r7, #15]
 800ce3c:	2b22      	cmp	r3, #34	; 0x22
 800ce3e:	d12a      	bne.n	800ce96 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce44:	b29b      	uxth	r3, r3
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d108      	bne.n	800ce5c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	685a      	ldr	r2, [r3, #4]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce58:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800ce5a:	e01c      	b.n	800ce96 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	2b40      	cmp	r3, #64	; 0x40
 800ce66:	d103      	bne.n	800ce70 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f000 f88e 	bl	800cf8a <I2C_MemoryTransmit_TXE_BTF>
}
 800ce6e:	e012      	b.n	800ce96 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce74:	781a      	ldrb	r2, [r3, #0]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce80:	1c5a      	adds	r2, r3, #1
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce8a:	b29b      	uxth	r3, r3
 800ce8c:	3b01      	subs	r3, #1
 800ce8e:	b29a      	uxth	r2, r3
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800ce94:	e7ff      	b.n	800ce96 <I2C_MasterTransmit_TXE+0x130>
 800ce96:	bf00      	nop
 800ce98:	3710      	adds	r7, #16
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}

0800ce9e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b084      	sub	sp, #16
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceaa:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	2b21      	cmp	r3, #33	; 0x21
 800ceb6:	d164      	bne.n	800cf82 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d012      	beq.n	800cee8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cec6:	781a      	ldrb	r2, [r3, #0]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced2:	1c5a      	adds	r2, r3, #1
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cedc:	b29b      	uxth	r3, r3
 800cede:	3b01      	subs	r3, #1
 800cee0:	b29a      	uxth	r2, r3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800cee6:	e04c      	b.n	800cf82 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	2b08      	cmp	r3, #8
 800ceec:	d01d      	beq.n	800cf2a <I2C_MasterTransmit_BTF+0x8c>
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2b20      	cmp	r3, #32
 800cef2:	d01a      	beq.n	800cf2a <I2C_MasterTransmit_BTF+0x8c>
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cefa:	d016      	beq.n	800cf2a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	685a      	ldr	r2, [r3, #4]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cf0a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2211      	movs	r2, #17
 800cf10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2200      	movs	r2, #0
 800cf16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2220      	movs	r2, #32
 800cf1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f7ff fecb 	bl	800ccbe <HAL_I2C_MasterTxCpltCallback>
}
 800cf28:	e02b      	b.n	800cf82 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	685a      	ldr	r2, [r3, #4]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cf38:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf48:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2220      	movs	r2, #32
 800cf54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	2b40      	cmp	r3, #64	; 0x40
 800cf62:	d107      	bne.n	800cf74 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2200      	movs	r2, #0
 800cf68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f7f5 f8d9 	bl	8002124 <HAL_I2C_MemTxCpltCallback>
}
 800cf72:	e006      	b.n	800cf82 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2200      	movs	r2, #0
 800cf78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f7ff fe9e 	bl	800ccbe <HAL_I2C_MasterTxCpltCallback>
}
 800cf82:	bf00      	nop
 800cf84:	3710      	adds	r7, #16
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}

0800cf8a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800cf8a:	b580      	push	{r7, lr}
 800cf8c:	b084      	sub	sp, #16
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf98:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d11d      	bne.n	800cfde <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfa6:	2b01      	cmp	r3, #1
 800cfa8:	d10b      	bne.n	800cfc2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfae:	b2da      	uxtb	r2, r3
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfba:	1c9a      	adds	r2, r3, #2
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800cfc0:	e073      	b.n	800d0aa <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	121b      	asrs	r3, r3, #8
 800cfca:	b2da      	uxtb	r2, r3
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfd6:	1c5a      	adds	r2, r3, #1
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	651a      	str	r2, [r3, #80]	; 0x50
}
 800cfdc:	e065      	b.n	800d0aa <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	d10b      	bne.n	800cffe <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfea:	b2da      	uxtb	r2, r3
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cff6:	1c5a      	adds	r2, r3, #1
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	651a      	str	r2, [r3, #80]	; 0x50
}
 800cffc:	e055      	b.n	800d0aa <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d002:	2b02      	cmp	r3, #2
 800d004:	d151      	bne.n	800d0aa <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800d006:	7bfb      	ldrb	r3, [r7, #15]
 800d008:	2b22      	cmp	r3, #34	; 0x22
 800d00a:	d10d      	bne.n	800d028 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	681a      	ldr	r2, [r3, #0]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d01a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d020:	1c5a      	adds	r2, r3, #1
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d026:	e040      	b.n	800d0aa <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d02c:	b29b      	uxth	r3, r3
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d015      	beq.n	800d05e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800d032:	7bfb      	ldrb	r3, [r7, #15]
 800d034:	2b21      	cmp	r3, #33	; 0x21
 800d036:	d112      	bne.n	800d05e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d03c:	781a      	ldrb	r2, [r3, #0]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d048:	1c5a      	adds	r2, r3, #1
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d052:	b29b      	uxth	r3, r3
 800d054:	3b01      	subs	r3, #1
 800d056:	b29a      	uxth	r2, r3
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d05c:	e025      	b.n	800d0aa <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d062:	b29b      	uxth	r3, r3
 800d064:	2b00      	cmp	r3, #0
 800d066:	d120      	bne.n	800d0aa <I2C_MemoryTransmit_TXE_BTF+0x120>
 800d068:	7bfb      	ldrb	r3, [r7, #15]
 800d06a:	2b21      	cmp	r3, #33	; 0x21
 800d06c:	d11d      	bne.n	800d0aa <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	685a      	ldr	r2, [r3, #4]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d07c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d08c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2200      	movs	r2, #0
 800d092:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2220      	movs	r2, #32
 800d098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f7f5 f83d 	bl	8002124 <HAL_I2C_MemTxCpltCallback>
}
 800d0aa:	bf00      	nop
 800d0ac:	3710      	adds	r7, #16
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}

0800d0b2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800d0b2:	b580      	push	{r7, lr}
 800d0b4:	b084      	sub	sp, #16
 800d0b6:	af00      	add	r7, sp, #0
 800d0b8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0c0:	b2db      	uxtb	r3, r3
 800d0c2:	2b22      	cmp	r3, #34	; 0x22
 800d0c4:	f040 80ac 	bne.w	800d220 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0cc:	b29b      	uxth	r3, r3
 800d0ce:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2b03      	cmp	r3, #3
 800d0d4:	d921      	bls.n	800d11a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	691a      	ldr	r2, [r3, #16]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e0:	b2d2      	uxtb	r2, r2
 800d0e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e8:	1c5a      	adds	r2, r3, #1
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	3b01      	subs	r3, #1
 800d0f6:	b29a      	uxth	r2, r3
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d100:	b29b      	uxth	r3, r3
 800d102:	2b03      	cmp	r3, #3
 800d104:	f040 808c 	bne.w	800d220 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	685a      	ldr	r2, [r3, #4]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d116:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800d118:	e082      	b.n	800d220 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d11e:	2b02      	cmp	r3, #2
 800d120:	d075      	beq.n	800d20e <I2C_MasterReceive_RXNE+0x15c>
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2b01      	cmp	r3, #1
 800d126:	d002      	beq.n	800d12e <I2C_MasterReceive_RXNE+0x7c>
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d16f      	bne.n	800d20e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f001 fa8c 	bl	800e64c <I2C_WaitOnSTOPRequestThroughIT>
 800d134:	4603      	mov	r3, r0
 800d136:	2b00      	cmp	r3, #0
 800d138:	d142      	bne.n	800d1c0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	681a      	ldr	r2, [r3, #0]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d148:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	685a      	ldr	r2, [r3, #4]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d158:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	691a      	ldr	r2, [r3, #16]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d164:	b2d2      	uxtb	r2, r2
 800d166:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d16c:	1c5a      	adds	r2, r3, #1
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d176:	b29b      	uxth	r3, r3
 800d178:	3b01      	subs	r3, #1
 800d17a:	b29a      	uxth	r2, r3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2220      	movs	r2, #32
 800d184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d18e:	b2db      	uxtb	r3, r3
 800d190:	2b40      	cmp	r3, #64	; 0x40
 800d192:	d10a      	bne.n	800d1aa <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2200      	movs	r2, #0
 800d198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f7f4 ffee 	bl	8002184 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800d1a8:	e03a      	b.n	800d220 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2212      	movs	r2, #18
 800d1b6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f7ff fd8a 	bl	800ccd2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800d1be:	e02f      	b.n	800d220 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	685a      	ldr	r2, [r3, #4]
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d1ce:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	691a      	ldr	r2, [r3, #16]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1da:	b2d2      	uxtb	r2, r2
 800d1dc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e2:	1c5a      	adds	r2, r3, #1
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	3b01      	subs	r3, #1
 800d1f0:	b29a      	uxth	r2, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2220      	movs	r2, #32
 800d1fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2200      	movs	r2, #0
 800d202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f7ff fd99 	bl	800cd3e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800d20c:	e008      	b.n	800d220 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	685a      	ldr	r2, [r3, #4]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d21c:	605a      	str	r2, [r3, #4]
}
 800d21e:	e7ff      	b.n	800d220 <I2C_MasterReceive_RXNE+0x16e>
 800d220:	bf00      	nop
 800d222:	3710      	adds	r7, #16
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d234:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	2b04      	cmp	r3, #4
 800d23e:	d11b      	bne.n	800d278 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	685a      	ldr	r2, [r3, #4]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d24e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	691a      	ldr	r2, [r3, #16]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d25a:	b2d2      	uxtb	r2, r2
 800d25c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d262:	1c5a      	adds	r2, r3, #1
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	3b01      	subs	r3, #1
 800d270:	b29a      	uxth	r2, r3
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800d276:	e0bd      	b.n	800d3f4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	2b03      	cmp	r3, #3
 800d280:	d129      	bne.n	800d2d6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	685a      	ldr	r2, [r3, #4]
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d290:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2b04      	cmp	r3, #4
 800d296:	d00a      	beq.n	800d2ae <I2C_MasterReceive_BTF+0x86>
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	2b02      	cmp	r3, #2
 800d29c:	d007      	beq.n	800d2ae <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d2ac:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	691a      	ldr	r2, [r3, #16]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b8:	b2d2      	uxtb	r2, r2
 800d2ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c0:	1c5a      	adds	r2, r3, #1
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	3b01      	subs	r3, #1
 800d2ce:	b29a      	uxth	r2, r3
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d2d4:	e08e      	b.n	800d3f4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	2b02      	cmp	r3, #2
 800d2de:	d176      	bne.n	800d3ce <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d002      	beq.n	800d2ec <I2C_MasterReceive_BTF+0xc4>
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2b10      	cmp	r3, #16
 800d2ea:	d108      	bne.n	800d2fe <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	681a      	ldr	r2, [r3, #0]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d2fa:	601a      	str	r2, [r3, #0]
 800d2fc:	e019      	b.n	800d332 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2b04      	cmp	r3, #4
 800d302:	d002      	beq.n	800d30a <I2C_MasterReceive_BTF+0xe2>
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2b02      	cmp	r3, #2
 800d308:	d108      	bne.n	800d31c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d318:	601a      	str	r2, [r3, #0]
 800d31a:	e00a      	b.n	800d332 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2b10      	cmp	r3, #16
 800d320:	d007      	beq.n	800d332 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	681a      	ldr	r2, [r3, #0]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d330:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	691a      	ldr	r2, [r3, #16]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33c:	b2d2      	uxtb	r2, r2
 800d33e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d344:	1c5a      	adds	r2, r3, #1
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d34e:	b29b      	uxth	r3, r3
 800d350:	3b01      	subs	r3, #1
 800d352:	b29a      	uxth	r2, r3
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	691a      	ldr	r2, [r3, #16]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d362:	b2d2      	uxtb	r2, r2
 800d364:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d36a:	1c5a      	adds	r2, r3, #1
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d374:	b29b      	uxth	r3, r3
 800d376:	3b01      	subs	r3, #1
 800d378:	b29a      	uxth	r2, r3
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	685a      	ldr	r2, [r3, #4]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d38c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2220      	movs	r2, #32
 800d392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	2b40      	cmp	r3, #64	; 0x40
 800d3a0:	d10a      	bne.n	800d3b8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f7f4 fee7 	bl	8002184 <HAL_I2C_MemRxCpltCallback>
}
 800d3b6:	e01d      	b.n	800d3f4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2212      	movs	r2, #18
 800d3c4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f7ff fc83 	bl	800ccd2 <HAL_I2C_MasterRxCpltCallback>
}
 800d3cc:	e012      	b.n	800d3f4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	691a      	ldr	r2, [r3, #16]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3d8:	b2d2      	uxtb	r2, r2
 800d3da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e0:	1c5a      	adds	r2, r3, #1
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3ea:	b29b      	uxth	r3, r3
 800d3ec:	3b01      	subs	r3, #1
 800d3ee:	b29a      	uxth	r2, r3
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d3f4:	bf00      	nop
 800d3f6:	3710      	adds	r7, #16
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b083      	sub	sp, #12
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d40a:	b2db      	uxtb	r3, r3
 800d40c:	2b40      	cmp	r3, #64	; 0x40
 800d40e:	d117      	bne.n	800d440 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d414:	2b00      	cmp	r3, #0
 800d416:	d109      	bne.n	800d42c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d41c:	b2db      	uxtb	r3, r3
 800d41e:	461a      	mov	r2, r3
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d428:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800d42a:	e067      	b.n	800d4fc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d430:	b2db      	uxtb	r3, r3
 800d432:	f043 0301 	orr.w	r3, r3, #1
 800d436:	b2da      	uxtb	r2, r3
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	611a      	str	r2, [r3, #16]
}
 800d43e:	e05d      	b.n	800d4fc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	691b      	ldr	r3, [r3, #16]
 800d444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d448:	d133      	bne.n	800d4b2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d450:	b2db      	uxtb	r3, r3
 800d452:	2b21      	cmp	r3, #33	; 0x21
 800d454:	d109      	bne.n	800d46a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d45a:	b2db      	uxtb	r3, r3
 800d45c:	461a      	mov	r2, r3
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d466:	611a      	str	r2, [r3, #16]
 800d468:	e008      	b.n	800d47c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	f043 0301 	orr.w	r3, r3, #1
 800d474:	b2da      	uxtb	r2, r3
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d480:	2b00      	cmp	r3, #0
 800d482:	d004      	beq.n	800d48e <I2C_Master_SB+0x92>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d108      	bne.n	800d4a0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d492:	2b00      	cmp	r3, #0
 800d494:	d032      	beq.n	800d4fc <I2C_Master_SB+0x100>
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d49a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d02d      	beq.n	800d4fc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	685a      	ldr	r2, [r3, #4]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4ae:	605a      	str	r2, [r3, #4]
}
 800d4b0:	e024      	b.n	800d4fc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d10e      	bne.n	800d4d8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	11db      	asrs	r3, r3, #7
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	f003 0306 	and.w	r3, r3, #6
 800d4c8:	b2db      	uxtb	r3, r3
 800d4ca:	f063 030f 	orn	r3, r3, #15
 800d4ce:	b2da      	uxtb	r2, r3
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	611a      	str	r2, [r3, #16]
}
 800d4d6:	e011      	b.n	800d4fc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d10d      	bne.n	800d4fc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4e4:	b29b      	uxth	r3, r3
 800d4e6:	11db      	asrs	r3, r3, #7
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	f003 0306 	and.w	r3, r3, #6
 800d4ee:	b2db      	uxtb	r3, r3
 800d4f0:	f063 030e 	orn	r3, r3, #14
 800d4f4:	b2da      	uxtb	r2, r3
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	611a      	str	r2, [r3, #16]
}
 800d4fc:	bf00      	nop
 800d4fe:	370c      	adds	r7, #12
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800d508:	b480      	push	{r7}
 800d50a:	b083      	sub	sp, #12
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d514:	b2da      	uxtb	r2, r3
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d520:	2b00      	cmp	r3, #0
 800d522:	d004      	beq.n	800d52e <I2C_Master_ADD10+0x26>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d108      	bne.n	800d540 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d532:	2b00      	cmp	r3, #0
 800d534:	d00c      	beq.n	800d550 <I2C_Master_ADD10+0x48>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d53a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d007      	beq.n	800d550 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	685a      	ldr	r2, [r3, #4]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d54e:	605a      	str	r2, [r3, #4]
  }
}
 800d550:	bf00      	nop
 800d552:	370c      	adds	r7, #12
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr

0800d55c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b091      	sub	sp, #68	; 0x44
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d56a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d572:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d578:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d580:	b2db      	uxtb	r3, r3
 800d582:	2b22      	cmp	r3, #34	; 0x22
 800d584:	f040 8169 	bne.w	800d85a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d10f      	bne.n	800d5b0 <I2C_Master_ADDR+0x54>
 800d590:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d594:	2b40      	cmp	r3, #64	; 0x40
 800d596:	d10b      	bne.n	800d5b0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d598:	2300      	movs	r3, #0
 800d59a:	633b      	str	r3, [r7, #48]	; 0x30
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	695b      	ldr	r3, [r3, #20]
 800d5a2:	633b      	str	r3, [r7, #48]	; 0x30
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	699b      	ldr	r3, [r3, #24]
 800d5aa:	633b      	str	r3, [r7, #48]	; 0x30
 800d5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ae:	e160      	b.n	800d872 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d11d      	bne.n	800d5f4 <I2C_Master_ADDR+0x98>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	691b      	ldr	r3, [r3, #16]
 800d5bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d5c0:	d118      	bne.n	800d5f4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	695b      	ldr	r3, [r3, #20]
 800d5cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	699b      	ldr	r3, [r3, #24]
 800d5d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	681a      	ldr	r2, [r3, #0]
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d5e6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5ec:	1c5a      	adds	r2, r3, #1
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	651a      	str	r2, [r3, #80]	; 0x50
 800d5f2:	e13e      	b.n	800d872 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5f8:	b29b      	uxth	r3, r3
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d113      	bne.n	800d626 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d5fe:	2300      	movs	r3, #0
 800d600:	62bb      	str	r3, [r7, #40]	; 0x28
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	695b      	ldr	r3, [r3, #20]
 800d608:	62bb      	str	r3, [r7, #40]	; 0x28
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	699b      	ldr	r3, [r3, #24]
 800d610:	62bb      	str	r3, [r7, #40]	; 0x28
 800d612:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d622:	601a      	str	r2, [r3, #0]
 800d624:	e115      	b.n	800d852 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	f040 808a 	bne.w	800d746 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800d632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d634:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d638:	d137      	bne.n	800d6aa <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	681a      	ldr	r2, [r3, #0]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d648:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d658:	d113      	bne.n	800d682 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	681a      	ldr	r2, [r3, #0]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d668:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d66a:	2300      	movs	r3, #0
 800d66c:	627b      	str	r3, [r7, #36]	; 0x24
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	695b      	ldr	r3, [r3, #20]
 800d674:	627b      	str	r3, [r7, #36]	; 0x24
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	699b      	ldr	r3, [r3, #24]
 800d67c:	627b      	str	r3, [r7, #36]	; 0x24
 800d67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d680:	e0e7      	b.n	800d852 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d682:	2300      	movs	r3, #0
 800d684:	623b      	str	r3, [r7, #32]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	695b      	ldr	r3, [r3, #20]
 800d68c:	623b      	str	r3, [r7, #32]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	699b      	ldr	r3, [r3, #24]
 800d694:	623b      	str	r3, [r7, #32]
 800d696:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d6a6:	601a      	str	r2, [r3, #0]
 800d6a8:	e0d3      	b.n	800d852 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800d6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ac:	2b08      	cmp	r3, #8
 800d6ae:	d02e      	beq.n	800d70e <I2C_Master_ADDR+0x1b2>
 800d6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b2:	2b20      	cmp	r3, #32
 800d6b4:	d02b      	beq.n	800d70e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800d6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6b8:	2b12      	cmp	r3, #18
 800d6ba:	d102      	bne.n	800d6c2 <I2C_Master_ADDR+0x166>
 800d6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	d125      	bne.n	800d70e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800d6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c4:	2b04      	cmp	r3, #4
 800d6c6:	d00e      	beq.n	800d6e6 <I2C_Master_ADDR+0x18a>
 800d6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ca:	2b02      	cmp	r3, #2
 800d6cc:	d00b      	beq.n	800d6e6 <I2C_Master_ADDR+0x18a>
 800d6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d0:	2b10      	cmp	r3, #16
 800d6d2:	d008      	beq.n	800d6e6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	681a      	ldr	r2, [r3, #0]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d6e2:	601a      	str	r2, [r3, #0]
 800d6e4:	e007      	b.n	800d6f6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d6f4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	61fb      	str	r3, [r7, #28]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	695b      	ldr	r3, [r3, #20]
 800d700:	61fb      	str	r3, [r7, #28]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	699b      	ldr	r3, [r3, #24]
 800d708:	61fb      	str	r3, [r7, #28]
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	e0a1      	b.n	800d852 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	681a      	ldr	r2, [r3, #0]
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d71c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d71e:	2300      	movs	r3, #0
 800d720:	61bb      	str	r3, [r7, #24]
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	695b      	ldr	r3, [r3, #20]
 800d728:	61bb      	str	r3, [r7, #24]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	699b      	ldr	r3, [r3, #24]
 800d730:	61bb      	str	r3, [r7, #24]
 800d732:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	681a      	ldr	r2, [r3, #0]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d742:	601a      	str	r2, [r3, #0]
 800d744:	e085      	b.n	800d852 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	2b02      	cmp	r3, #2
 800d74e:	d14d      	bne.n	800d7ec <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800d750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d752:	2b04      	cmp	r3, #4
 800d754:	d016      	beq.n	800d784 <I2C_Master_ADDR+0x228>
 800d756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d758:	2b02      	cmp	r3, #2
 800d75a:	d013      	beq.n	800d784 <I2C_Master_ADDR+0x228>
 800d75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75e:	2b10      	cmp	r3, #16
 800d760:	d010      	beq.n	800d784 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	681a      	ldr	r2, [r3, #0]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d770:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	681a      	ldr	r2, [r3, #0]
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d780:	601a      	str	r2, [r3, #0]
 800d782:	e007      	b.n	800d794 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d792:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	685b      	ldr	r3, [r3, #4]
 800d79a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d79e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d7a2:	d117      	bne.n	800d7d4 <I2C_Master_ADDR+0x278>
 800d7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d7aa:	d00b      	beq.n	800d7c4 <I2C_Master_ADDR+0x268>
 800d7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	d008      	beq.n	800d7c4 <I2C_Master_ADDR+0x268>
 800d7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b4:	2b08      	cmp	r3, #8
 800d7b6:	d005      	beq.n	800d7c4 <I2C_Master_ADDR+0x268>
 800d7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ba:	2b10      	cmp	r3, #16
 800d7bc:	d002      	beq.n	800d7c4 <I2C_Master_ADDR+0x268>
 800d7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c0:	2b20      	cmp	r3, #32
 800d7c2:	d107      	bne.n	800d7d4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	685a      	ldr	r2, [r3, #4]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d7d2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	617b      	str	r3, [r7, #20]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	695b      	ldr	r3, [r3, #20]
 800d7de:	617b      	str	r3, [r7, #20]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	699b      	ldr	r3, [r3, #24]
 800d7e6:	617b      	str	r3, [r7, #20]
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	e032      	b.n	800d852 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	681a      	ldr	r2, [r3, #0]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d7fa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d80a:	d117      	bne.n	800d83c <I2C_Master_ADDR+0x2e0>
 800d80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d80e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d812:	d00b      	beq.n	800d82c <I2C_Master_ADDR+0x2d0>
 800d814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d816:	2b01      	cmp	r3, #1
 800d818:	d008      	beq.n	800d82c <I2C_Master_ADDR+0x2d0>
 800d81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d81c:	2b08      	cmp	r3, #8
 800d81e:	d005      	beq.n	800d82c <I2C_Master_ADDR+0x2d0>
 800d820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d822:	2b10      	cmp	r3, #16
 800d824:	d002      	beq.n	800d82c <I2C_Master_ADDR+0x2d0>
 800d826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d828:	2b20      	cmp	r3, #32
 800d82a:	d107      	bne.n	800d83c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	685a      	ldr	r2, [r3, #4]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d83a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d83c:	2300      	movs	r3, #0
 800d83e:	613b      	str	r3, [r7, #16]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	695b      	ldr	r3, [r3, #20]
 800d846:	613b      	str	r3, [r7, #16]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	699b      	ldr	r3, [r3, #24]
 800d84e:	613b      	str	r3, [r7, #16]
 800d850:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2200      	movs	r2, #0
 800d856:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800d858:	e00b      	b.n	800d872 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d85a:	2300      	movs	r3, #0
 800d85c:	60fb      	str	r3, [r7, #12]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	695b      	ldr	r3, [r3, #20]
 800d864:	60fb      	str	r3, [r7, #12]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	699b      	ldr	r3, [r3, #24]
 800d86c:	60fb      	str	r3, [r7, #12]
 800d86e:	68fb      	ldr	r3, [r7, #12]
}
 800d870:	e7ff      	b.n	800d872 <I2C_Master_ADDR+0x316>
 800d872:	bf00      	nop
 800d874:	3744      	adds	r7, #68	; 0x44
 800d876:	46bd      	mov	sp, r7
 800d878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87c:	4770      	bx	lr

0800d87e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800d87e:	b580      	push	{r7, lr}
 800d880:	b084      	sub	sp, #16
 800d882:	af00      	add	r7, sp, #0
 800d884:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d88c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d892:	b29b      	uxth	r3, r3
 800d894:	2b00      	cmp	r3, #0
 800d896:	d02b      	beq.n	800d8f0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d89c:	781a      	ldrb	r2, [r3, #0]
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8a8:	1c5a      	adds	r2, r3, #1
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	3b01      	subs	r3, #1
 800d8b6:	b29a      	uxth	r2, r3
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d114      	bne.n	800d8f0 <I2C_SlaveTransmit_TXE+0x72>
 800d8c6:	7bfb      	ldrb	r3, [r7, #15]
 800d8c8:	2b29      	cmp	r3, #41	; 0x29
 800d8ca:	d111      	bne.n	800d8f0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	685a      	ldr	r2, [r3, #4]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d8da:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2221      	movs	r2, #33	; 0x21
 800d8e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2228      	movs	r2, #40	; 0x28
 800d8e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f7ff f9fb 	bl	800cce6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800d8f0:	bf00      	nop
 800d8f2:	3710      	adds	r7, #16
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b083      	sub	sp, #12
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d904:	b29b      	uxth	r3, r3
 800d906:	2b00      	cmp	r3, #0
 800d908:	d011      	beq.n	800d92e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d90e:	781a      	ldrb	r2, [r3, #0]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d91a:	1c5a      	adds	r2, r3, #1
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d924:	b29b      	uxth	r3, r3
 800d926:	3b01      	subs	r3, #1
 800d928:	b29a      	uxth	r2, r3
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800d92e:	bf00      	nop
 800d930:	370c      	adds	r7, #12
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr

0800d93a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800d93a:	b580      	push	{r7, lr}
 800d93c:	b084      	sub	sp, #16
 800d93e:	af00      	add	r7, sp, #0
 800d940:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d948:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d94e:	b29b      	uxth	r3, r3
 800d950:	2b00      	cmp	r3, #0
 800d952:	d02c      	beq.n	800d9ae <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	691a      	ldr	r2, [r3, #16]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d95e:	b2d2      	uxtb	r2, r2
 800d960:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d966:	1c5a      	adds	r2, r3, #1
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d970:	b29b      	uxth	r3, r3
 800d972:	3b01      	subs	r3, #1
 800d974:	b29a      	uxth	r2, r3
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d97e:	b29b      	uxth	r3, r3
 800d980:	2b00      	cmp	r3, #0
 800d982:	d114      	bne.n	800d9ae <I2C_SlaveReceive_RXNE+0x74>
 800d984:	7bfb      	ldrb	r3, [r7, #15]
 800d986:	2b2a      	cmp	r3, #42	; 0x2a
 800d988:	d111      	bne.n	800d9ae <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	685a      	ldr	r2, [r3, #4]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d998:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2222      	movs	r2, #34	; 0x22
 800d99e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2228      	movs	r2, #40	; 0x28
 800d9a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f7ff f9a6 	bl	800ccfa <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800d9ae:	bf00      	nop
 800d9b0:	3710      	adds	r7, #16
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}

0800d9b6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800d9b6:	b480      	push	{r7}
 800d9b8:	b083      	sub	sp, #12
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d012      	beq.n	800d9ee <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	691a      	ldr	r2, [r3, #16]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9d2:	b2d2      	uxtb	r2, r2
 800d9d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9da:	1c5a      	adds	r2, r3, #1
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	3b01      	subs	r3, #1
 800d9e8:	b29a      	uxth	r2, r3
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800d9ee:	bf00      	nop
 800d9f0:	370c      	adds	r7, #12
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f8:	4770      	bx	lr

0800d9fa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800d9fa:	b580      	push	{r7, lr}
 800d9fc:	b084      	sub	sp, #16
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	6078      	str	r0, [r7, #4]
 800da02:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800da04:	2300      	movs	r3, #0
 800da06:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800da14:	2b28      	cmp	r3, #40	; 0x28
 800da16:	d125      	bne.n	800da64 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	685a      	ldr	r2, [r3, #4]
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da26:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	f003 0304 	and.w	r3, r3, #4
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d101      	bne.n	800da36 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800da32:	2301      	movs	r3, #1
 800da34:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d103      	bne.n	800da48 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	81bb      	strh	r3, [r7, #12]
 800da46:	e002      	b.n	800da4e <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	699b      	ldr	r3, [r3, #24]
 800da4c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2200      	movs	r2, #0
 800da52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800da56:	89ba      	ldrh	r2, [r7, #12]
 800da58:	7bfb      	ldrb	r3, [r7, #15]
 800da5a:	4619      	mov	r1, r3
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f7ff f956 	bl	800cd0e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800da62:	e00e      	b.n	800da82 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800da64:	2300      	movs	r3, #0
 800da66:	60bb      	str	r3, [r7, #8]
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	695b      	ldr	r3, [r3, #20]
 800da6e:	60bb      	str	r3, [r7, #8]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	699b      	ldr	r3, [r3, #24]
 800da76:	60bb      	str	r3, [r7, #8]
 800da78:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2200      	movs	r2, #0
 800da7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800da82:	bf00      	nop
 800da84:	3710      	adds	r7, #16
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
	...

0800da8c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da9a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	685a      	ldr	r2, [r3, #4]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800daaa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800daac:	2300      	movs	r3, #0
 800daae:	60bb      	str	r3, [r7, #8]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	695b      	ldr	r3, [r3, #20]
 800dab6:	60bb      	str	r3, [r7, #8]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	681a      	ldr	r2, [r3, #0]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f042 0201 	orr.w	r2, r2, #1
 800dac6:	601a      	str	r2, [r3, #0]
 800dac8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	681a      	ldr	r2, [r3, #0]
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dad8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dae4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dae8:	d172      	bne.n	800dbd0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800daea:	7bfb      	ldrb	r3, [r7, #15]
 800daec:	2b22      	cmp	r3, #34	; 0x22
 800daee:	d002      	beq.n	800daf6 <I2C_Slave_STOPF+0x6a>
 800daf0:	7bfb      	ldrb	r3, [r7, #15]
 800daf2:	2b2a      	cmp	r3, #42	; 0x2a
 800daf4:	d135      	bne.n	800db62 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	685b      	ldr	r3, [r3, #4]
 800dafe:	b29a      	uxth	r2, r3
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db08:	b29b      	uxth	r3, r3
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d005      	beq.n	800db1a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db12:	f043 0204 	orr.w	r2, r3, #4
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	685a      	ldr	r2, [r3, #4]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800db28:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db2e:	4618      	mov	r0, r3
 800db30:	f7fd fed2 	bl	800b8d8 <HAL_DMA_GetState>
 800db34:	4603      	mov	r3, r0
 800db36:	2b01      	cmp	r3, #1
 800db38:	d049      	beq.n	800dbce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db3e:	4a69      	ldr	r2, [pc, #420]	; (800dce4 <I2C_Slave_STOPF+0x258>)
 800db40:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db46:	4618      	mov	r0, r3
 800db48:	f7fd fd1a 	bl	800b580 <HAL_DMA_Abort_IT>
 800db4c:	4603      	mov	r3, r0
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d03d      	beq.n	800dbce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db58:	687a      	ldr	r2, [r7, #4]
 800db5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800db5c:	4610      	mov	r0, r2
 800db5e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800db60:	e035      	b.n	800dbce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	b29a      	uxth	r2, r3
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db74:	b29b      	uxth	r3, r3
 800db76:	2b00      	cmp	r3, #0
 800db78:	d005      	beq.n	800db86 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db7e:	f043 0204 	orr.w	r2, r3, #4
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	685a      	ldr	r2, [r3, #4]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800db94:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7fd fe9c 	bl	800b8d8 <HAL_DMA_GetState>
 800dba0:	4603      	mov	r3, r0
 800dba2:	2b01      	cmp	r3, #1
 800dba4:	d014      	beq.n	800dbd0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbaa:	4a4e      	ldr	r2, [pc, #312]	; (800dce4 <I2C_Slave_STOPF+0x258>)
 800dbac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7fd fce4 	bl	800b580 <HAL_DMA_Abort_IT>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d008      	beq.n	800dbd0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800dbc8:	4610      	mov	r0, r2
 800dbca:	4798      	blx	r3
 800dbcc:	e000      	b.n	800dbd0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800dbce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d03e      	beq.n	800dc58 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	695b      	ldr	r3, [r3, #20]
 800dbe0:	f003 0304 	and.w	r3, r3, #4
 800dbe4:	2b04      	cmp	r3, #4
 800dbe6:	d112      	bne.n	800dc0e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	691a      	ldr	r2, [r3, #16]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf2:	b2d2      	uxtb	r2, r2
 800dbf4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbfa:	1c5a      	adds	r2, r3, #1
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc04:	b29b      	uxth	r3, r3
 800dc06:	3b01      	subs	r3, #1
 800dc08:	b29a      	uxth	r2, r3
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	695b      	ldr	r3, [r3, #20]
 800dc14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc18:	2b40      	cmp	r3, #64	; 0x40
 800dc1a:	d112      	bne.n	800dc42 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	691a      	ldr	r2, [r3, #16]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc26:	b2d2      	uxtb	r2, r2
 800dc28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc2e:	1c5a      	adds	r2, r3, #1
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc38:	b29b      	uxth	r3, r3
 800dc3a:	3b01      	subs	r3, #1
 800dc3c:	b29a      	uxth	r2, r3
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d005      	beq.n	800dc58 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc50:	f043 0204 	orr.w	r2, r3, #4
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d003      	beq.n	800dc68 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f000 f843 	bl	800dcec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800dc66:	e039      	b.n	800dcdc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800dc68:	7bfb      	ldrb	r3, [r7, #15]
 800dc6a:	2b2a      	cmp	r3, #42	; 0x2a
 800dc6c:	d109      	bne.n	800dc82 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2200      	movs	r2, #0
 800dc72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2228      	movs	r2, #40	; 0x28
 800dc78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f7ff f83c 	bl	800ccfa <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc88:	b2db      	uxtb	r3, r3
 800dc8a:	2b28      	cmp	r3, #40	; 0x28
 800dc8c:	d111      	bne.n	800dcb2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	4a15      	ldr	r2, [pc, #84]	; (800dce8 <I2C_Slave_STOPF+0x25c>)
 800dc92:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2200      	movs	r2, #0
 800dc98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2220      	movs	r2, #32
 800dc9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2200      	movs	r2, #0
 800dca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f7ff f83d 	bl	800cd2a <HAL_I2C_ListenCpltCallback>
}
 800dcb0:	e014      	b.n	800dcdc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcb6:	2b22      	cmp	r3, #34	; 0x22
 800dcb8:	d002      	beq.n	800dcc0 <I2C_Slave_STOPF+0x234>
 800dcba:	7bfb      	ldrb	r3, [r7, #15]
 800dcbc:	2b22      	cmp	r3, #34	; 0x22
 800dcbe:	d10d      	bne.n	800dcdc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2220      	movs	r2, #32
 800dcca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f7ff f80f 	bl	800ccfa <HAL_I2C_SlaveRxCpltCallback>
}
 800dcdc:	bf00      	nop
 800dcde:	3710      	adds	r7, #16
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	0800e24d 	.word	0x0800e24d
 800dce8:	ffff0000 	.word	0xffff0000

0800dcec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b084      	sub	sp, #16
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dcfa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dd02:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800dd04:	7bbb      	ldrb	r3, [r7, #14]
 800dd06:	2b10      	cmp	r3, #16
 800dd08:	d002      	beq.n	800dd10 <I2C_ITError+0x24>
 800dd0a:	7bbb      	ldrb	r3, [r7, #14]
 800dd0c:	2b40      	cmp	r3, #64	; 0x40
 800dd0e:	d10a      	bne.n	800dd26 <I2C_ITError+0x3a>
 800dd10:	7bfb      	ldrb	r3, [r7, #15]
 800dd12:	2b22      	cmp	r3, #34	; 0x22
 800dd14:	d107      	bne.n	800dd26 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dd24:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800dd26:	7bfb      	ldrb	r3, [r7, #15]
 800dd28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800dd2c:	2b28      	cmp	r3, #40	; 0x28
 800dd2e:	d107      	bne.n	800dd40 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2200      	movs	r2, #0
 800dd34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2228      	movs	r2, #40	; 0x28
 800dd3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800dd3e:	e015      	b.n	800dd6c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	685b      	ldr	r3, [r3, #4]
 800dd46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd4e:	d00a      	beq.n	800dd66 <I2C_ITError+0x7a>
 800dd50:	7bfb      	ldrb	r3, [r7, #15]
 800dd52:	2b60      	cmp	r3, #96	; 0x60
 800dd54:	d007      	beq.n	800dd66 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2220      	movs	r2, #32
 800dd5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2200      	movs	r2, #0
 800dd62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd7a:	d162      	bne.n	800de42 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	685a      	ldr	r2, [r3, #4]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dd8a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	d020      	beq.n	800dddc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd9e:	4a6a      	ldr	r2, [pc, #424]	; (800df48 <I2C_ITError+0x25c>)
 800dda0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7fd fbea 	bl	800b580 <HAL_DMA_Abort_IT>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	f000 8089 	beq.w	800dec6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	681a      	ldr	r2, [r3, #0]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f022 0201 	bic.w	r2, r2, #1
 800ddc2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2220      	movs	r2, #32
 800ddc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ddd6:	4610      	mov	r0, r2
 800ddd8:	4798      	blx	r3
 800ddda:	e074      	b.n	800dec6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dde0:	4a59      	ldr	r2, [pc, #356]	; (800df48 <I2C_ITError+0x25c>)
 800dde2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7fd fbc9 	bl	800b580 <HAL_DMA_Abort_IT>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d068      	beq.n	800dec6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	695b      	ldr	r3, [r3, #20]
 800ddfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddfe:	2b40      	cmp	r3, #64	; 0x40
 800de00:	d10b      	bne.n	800de1a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	691a      	ldr	r2, [r3, #16]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de0c:	b2d2      	uxtb	r2, r2
 800de0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de14:	1c5a      	adds	r2, r3, #1
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	681a      	ldr	r2, [r3, #0]
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	f022 0201 	bic.w	r2, r2, #1
 800de28:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2220      	movs	r2, #32
 800de2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de38:	687a      	ldr	r2, [r7, #4]
 800de3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800de3c:	4610      	mov	r0, r2
 800de3e:	4798      	blx	r3
 800de40:	e041      	b.n	800dec6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de48:	b2db      	uxtb	r3, r3
 800de4a:	2b60      	cmp	r3, #96	; 0x60
 800de4c:	d125      	bne.n	800de9a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2220      	movs	r2, #32
 800de52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2200      	movs	r2, #0
 800de5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	695b      	ldr	r3, [r3, #20]
 800de62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de66:	2b40      	cmp	r3, #64	; 0x40
 800de68:	d10b      	bne.n	800de82 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	691a      	ldr	r2, [r3, #16]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de74:	b2d2      	uxtb	r2, r2
 800de76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de7c:	1c5a      	adds	r2, r3, #1
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	681a      	ldr	r2, [r3, #0]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f022 0201 	bic.w	r2, r2, #1
 800de90:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f7fe ff5d 	bl	800cd52 <HAL_I2C_AbortCpltCallback>
 800de98:	e015      	b.n	800dec6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	695b      	ldr	r3, [r3, #20]
 800dea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dea4:	2b40      	cmp	r3, #64	; 0x40
 800dea6:	d10b      	bne.n	800dec0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	691a      	ldr	r2, [r3, #16]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb2:	b2d2      	uxtb	r2, r2
 800deb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deba:	1c5a      	adds	r2, r3, #1
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f7fe ff3c 	bl	800cd3e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	f003 0301 	and.w	r3, r3, #1
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d10e      	bne.n	800def4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d109      	bne.n	800def4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d104      	bne.n	800def4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800def0:	2b00      	cmp	r3, #0
 800def2:	d007      	beq.n	800df04 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	685a      	ldr	r2, [r3, #4]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800df02:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df0a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df10:	f003 0304 	and.w	r3, r3, #4
 800df14:	2b04      	cmp	r3, #4
 800df16:	d113      	bne.n	800df40 <I2C_ITError+0x254>
 800df18:	7bfb      	ldrb	r3, [r7, #15]
 800df1a:	2b28      	cmp	r3, #40	; 0x28
 800df1c:	d110      	bne.n	800df40 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	4a0a      	ldr	r2, [pc, #40]	; (800df4c <I2C_ITError+0x260>)
 800df22:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2200      	movs	r2, #0
 800df28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2220      	movs	r2, #32
 800df2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2200      	movs	r2, #0
 800df36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f7fe fef5 	bl	800cd2a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800df40:	bf00      	nop
 800df42:	3710      	adds	r7, #16
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	0800e24d 	.word	0x0800e24d
 800df4c:	ffff0000 	.word	0xffff0000

0800df50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b088      	sub	sp, #32
 800df54:	af02      	add	r7, sp, #8
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	4608      	mov	r0, r1
 800df5a:	4611      	mov	r1, r2
 800df5c:	461a      	mov	r2, r3
 800df5e:	4603      	mov	r3, r0
 800df60:	817b      	strh	r3, [r7, #10]
 800df62:	460b      	mov	r3, r1
 800df64:	813b      	strh	r3, [r7, #8]
 800df66:	4613      	mov	r3, r2
 800df68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	681a      	ldr	r2, [r3, #0]
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800df78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800df7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7c:	9300      	str	r3, [sp, #0]
 800df7e:	6a3b      	ldr	r3, [r7, #32]
 800df80:	2200      	movs	r2, #0
 800df82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800df86:	68f8      	ldr	r0, [r7, #12]
 800df88:	f000 fa08 	bl	800e39c <I2C_WaitOnFlagUntilTimeout>
 800df8c:	4603      	mov	r3, r0
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d00d      	beq.n	800dfae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfa0:	d103      	bne.n	800dfaa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dfa8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800dfaa:	2303      	movs	r3, #3
 800dfac:	e05f      	b.n	800e06e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800dfae:	897b      	ldrh	r3, [r7, #10]
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800dfbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800dfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc0:	6a3a      	ldr	r2, [r7, #32]
 800dfc2:	492d      	ldr	r1, [pc, #180]	; (800e078 <I2C_RequestMemoryWrite+0x128>)
 800dfc4:	68f8      	ldr	r0, [r7, #12]
 800dfc6:	f000 fa40 	bl	800e44a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d001      	beq.n	800dfd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	e04c      	b.n	800e06e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	617b      	str	r3, [r7, #20]
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	695b      	ldr	r3, [r3, #20]
 800dfde:	617b      	str	r3, [r7, #20]
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	699b      	ldr	r3, [r3, #24]
 800dfe6:	617b      	str	r3, [r7, #20]
 800dfe8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800dfea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfec:	6a39      	ldr	r1, [r7, #32]
 800dfee:	68f8      	ldr	r0, [r7, #12]
 800dff0:	f000 faaa 	bl	800e548 <I2C_WaitOnTXEFlagUntilTimeout>
 800dff4:	4603      	mov	r3, r0
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d00d      	beq.n	800e016 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dffe:	2b04      	cmp	r3, #4
 800e000:	d107      	bne.n	800e012 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e010:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e012:	2301      	movs	r3, #1
 800e014:	e02b      	b.n	800e06e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e016:	88fb      	ldrh	r3, [r7, #6]
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d105      	bne.n	800e028 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e01c:	893b      	ldrh	r3, [r7, #8]
 800e01e:	b2da      	uxtb	r2, r3
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	611a      	str	r2, [r3, #16]
 800e026:	e021      	b.n	800e06c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e028:	893b      	ldrh	r3, [r7, #8]
 800e02a:	0a1b      	lsrs	r3, r3, #8
 800e02c:	b29b      	uxth	r3, r3
 800e02e:	b2da      	uxtb	r2, r3
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e038:	6a39      	ldr	r1, [r7, #32]
 800e03a:	68f8      	ldr	r0, [r7, #12]
 800e03c:	f000 fa84 	bl	800e548 <I2C_WaitOnTXEFlagUntilTimeout>
 800e040:	4603      	mov	r3, r0
 800e042:	2b00      	cmp	r3, #0
 800e044:	d00d      	beq.n	800e062 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e04a:	2b04      	cmp	r3, #4
 800e04c:	d107      	bne.n	800e05e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	681a      	ldr	r2, [r3, #0]
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e05c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e05e:	2301      	movs	r3, #1
 800e060:	e005      	b.n	800e06e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e062:	893b      	ldrh	r3, [r7, #8]
 800e064:	b2da      	uxtb	r2, r3
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800e06c:	2300      	movs	r3, #0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3718      	adds	r7, #24
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	00010002 	.word	0x00010002

0800e07c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b088      	sub	sp, #32
 800e080:	af02      	add	r7, sp, #8
 800e082:	60f8      	str	r0, [r7, #12]
 800e084:	4608      	mov	r0, r1
 800e086:	4611      	mov	r1, r2
 800e088:	461a      	mov	r2, r3
 800e08a:	4603      	mov	r3, r0
 800e08c:	817b      	strh	r3, [r7, #10]
 800e08e:	460b      	mov	r3, r1
 800e090:	813b      	strh	r3, [r7, #8]
 800e092:	4613      	mov	r3, r2
 800e094:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e0a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e0b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b8:	9300      	str	r3, [sp, #0]
 800e0ba:	6a3b      	ldr	r3, [r7, #32]
 800e0bc:	2200      	movs	r2, #0
 800e0be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e0c2:	68f8      	ldr	r0, [r7, #12]
 800e0c4:	f000 f96a 	bl	800e39c <I2C_WaitOnFlagUntilTimeout>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d00d      	beq.n	800e0ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0dc:	d103      	bne.n	800e0e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e0e6:	2303      	movs	r3, #3
 800e0e8:	e0aa      	b.n	800e240 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e0ea:	897b      	ldrh	r3, [r7, #10]
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e0f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fc:	6a3a      	ldr	r2, [r7, #32]
 800e0fe:	4952      	ldr	r1, [pc, #328]	; (800e248 <I2C_RequestMemoryRead+0x1cc>)
 800e100:	68f8      	ldr	r0, [r7, #12]
 800e102:	f000 f9a2 	bl	800e44a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e106:	4603      	mov	r3, r0
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d001      	beq.n	800e110 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800e10c:	2301      	movs	r3, #1
 800e10e:	e097      	b.n	800e240 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e110:	2300      	movs	r3, #0
 800e112:	617b      	str	r3, [r7, #20]
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	695b      	ldr	r3, [r3, #20]
 800e11a:	617b      	str	r3, [r7, #20]
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	699b      	ldr	r3, [r3, #24]
 800e122:	617b      	str	r3, [r7, #20]
 800e124:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e128:	6a39      	ldr	r1, [r7, #32]
 800e12a:	68f8      	ldr	r0, [r7, #12]
 800e12c:	f000 fa0c 	bl	800e548 <I2C_WaitOnTXEFlagUntilTimeout>
 800e130:	4603      	mov	r3, r0
 800e132:	2b00      	cmp	r3, #0
 800e134:	d00d      	beq.n	800e152 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e13a:	2b04      	cmp	r3, #4
 800e13c:	d107      	bne.n	800e14e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	681a      	ldr	r2, [r3, #0]
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e14c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e14e:	2301      	movs	r3, #1
 800e150:	e076      	b.n	800e240 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e152:	88fb      	ldrh	r3, [r7, #6]
 800e154:	2b01      	cmp	r3, #1
 800e156:	d105      	bne.n	800e164 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e158:	893b      	ldrh	r3, [r7, #8]
 800e15a:	b2da      	uxtb	r2, r3
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	611a      	str	r2, [r3, #16]
 800e162:	e021      	b.n	800e1a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e164:	893b      	ldrh	r3, [r7, #8]
 800e166:	0a1b      	lsrs	r3, r3, #8
 800e168:	b29b      	uxth	r3, r3
 800e16a:	b2da      	uxtb	r2, r3
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e174:	6a39      	ldr	r1, [r7, #32]
 800e176:	68f8      	ldr	r0, [r7, #12]
 800e178:	f000 f9e6 	bl	800e548 <I2C_WaitOnTXEFlagUntilTimeout>
 800e17c:	4603      	mov	r3, r0
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d00d      	beq.n	800e19e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e186:	2b04      	cmp	r3, #4
 800e188:	d107      	bne.n	800e19a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	681a      	ldr	r2, [r3, #0]
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e198:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e19a:	2301      	movs	r3, #1
 800e19c:	e050      	b.n	800e240 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e19e:	893b      	ldrh	r3, [r7, #8]
 800e1a0:	b2da      	uxtb	r2, r3
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e1a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1aa:	6a39      	ldr	r1, [r7, #32]
 800e1ac:	68f8      	ldr	r0, [r7, #12]
 800e1ae:	f000 f9cb 	bl	800e548 <I2C_WaitOnTXEFlagUntilTimeout>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d00d      	beq.n	800e1d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1bc:	2b04      	cmp	r3, #4
 800e1be:	d107      	bne.n	800e1d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	681a      	ldr	r2, [r3, #0]
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e1ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	e035      	b.n	800e240 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e1e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e6:	9300      	str	r3, [sp, #0]
 800e1e8:	6a3b      	ldr	r3, [r7, #32]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	f000 f8d3 	bl	800e39c <I2C_WaitOnFlagUntilTimeout>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d00d      	beq.n	800e218 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e20a:	d103      	bne.n	800e214 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e212:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e214:	2303      	movs	r3, #3
 800e216:	e013      	b.n	800e240 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e218:	897b      	ldrh	r3, [r7, #10]
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	f043 0301 	orr.w	r3, r3, #1
 800e220:	b2da      	uxtb	r2, r3
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22a:	6a3a      	ldr	r2, [r7, #32]
 800e22c:	4906      	ldr	r1, [pc, #24]	; (800e248 <I2C_RequestMemoryRead+0x1cc>)
 800e22e:	68f8      	ldr	r0, [r7, #12]
 800e230:	f000 f90b 	bl	800e44a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e234:	4603      	mov	r3, r0
 800e236:	2b00      	cmp	r3, #0
 800e238:	d001      	beq.n	800e23e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800e23a:	2301      	movs	r3, #1
 800e23c:	e000      	b.n	800e240 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800e23e:	2300      	movs	r3, #0
}
 800e240:	4618      	mov	r0, r3
 800e242:	3718      	adds	r7, #24
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}
 800e248:	00010002 	.word	0x00010002

0800e24c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b086      	sub	sp, #24
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e254:	2300      	movs	r3, #0
 800e256:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e25c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e264:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800e266:	4b4b      	ldr	r3, [pc, #300]	; (800e394 <I2C_DMAAbort+0x148>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	08db      	lsrs	r3, r3, #3
 800e26c:	4a4a      	ldr	r2, [pc, #296]	; (800e398 <I2C_DMAAbort+0x14c>)
 800e26e:	fba2 2303 	umull	r2, r3, r2, r3
 800e272:	0a1a      	lsrs	r2, r3, #8
 800e274:	4613      	mov	r3, r2
 800e276:	009b      	lsls	r3, r3, #2
 800e278:	4413      	add	r3, r2
 800e27a:	00da      	lsls	r2, r3, #3
 800e27c:	1ad3      	subs	r3, r2, r3
 800e27e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d106      	bne.n	800e294 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e28a:	f043 0220 	orr.w	r2, r3, #32
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800e292:	e00a      	b.n	800e2aa <I2C_DMAAbort+0x5e>
    }
    count--;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	3b01      	subs	r3, #1
 800e298:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e2a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2a8:	d0ea      	beq.n	800e280 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d003      	beq.n	800e2ba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d003      	beq.n	800e2ca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	681a      	ldr	r2, [r3, #0]
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e2d8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d003      	beq.n	800e2f0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d003      	beq.n	800e300 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	681a      	ldr	r2, [r3, #0]
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f022 0201 	bic.w	r2, r2, #1
 800e30e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e316:	b2db      	uxtb	r3, r3
 800e318:	2b60      	cmp	r3, #96	; 0x60
 800e31a:	d10e      	bne.n	800e33a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	2220      	movs	r2, #32
 800e320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	2200      	movs	r2, #0
 800e328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	2200      	movs	r2, #0
 800e330:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e332:	6978      	ldr	r0, [r7, #20]
 800e334:	f7fe fd0d 	bl	800cd52 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e338:	e027      	b.n	800e38a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e33a:	7cfb      	ldrb	r3, [r7, #19]
 800e33c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e340:	2b28      	cmp	r3, #40	; 0x28
 800e342:	d117      	bne.n	800e374 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f042 0201 	orr.w	r2, r2, #1
 800e352:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	681a      	ldr	r2, [r3, #0]
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e362:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	2200      	movs	r2, #0
 800e368:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	2228      	movs	r2, #40	; 0x28
 800e36e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e372:	e007      	b.n	800e384 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	2220      	movs	r2, #32
 800e378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	2200      	movs	r2, #0
 800e380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800e384:	6978      	ldr	r0, [r7, #20]
 800e386:	f7fe fcda 	bl	800cd3e <HAL_I2C_ErrorCallback>
}
 800e38a:	bf00      	nop
 800e38c:	3718      	adds	r7, #24
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	20000004 	.word	0x20000004
 800e398:	14f8b589 	.word	0x14f8b589

0800e39c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	603b      	str	r3, [r7, #0]
 800e3a8:	4613      	mov	r3, r2
 800e3aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e3ac:	e025      	b.n	800e3fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3b4:	d021      	beq.n	800e3fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e3b6:	f7fc fa37 	bl	800a828 <HAL_GetTick>
 800e3ba:	4602      	mov	r2, r0
 800e3bc:	69bb      	ldr	r3, [r7, #24]
 800e3be:	1ad3      	subs	r3, r2, r3
 800e3c0:	683a      	ldr	r2, [r7, #0]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d302      	bcc.n	800e3cc <I2C_WaitOnFlagUntilTimeout+0x30>
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d116      	bne.n	800e3fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2220      	movs	r2, #32
 800e3d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	2200      	movs	r2, #0
 800e3de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3e6:	f043 0220 	orr.w	r2, r3, #32
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e023      	b.n	800e442 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	0c1b      	lsrs	r3, r3, #16
 800e3fe:	b2db      	uxtb	r3, r3
 800e400:	2b01      	cmp	r3, #1
 800e402:	d10d      	bne.n	800e420 <I2C_WaitOnFlagUntilTimeout+0x84>
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	695b      	ldr	r3, [r3, #20]
 800e40a:	43da      	mvns	r2, r3
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	4013      	ands	r3, r2
 800e410:	b29b      	uxth	r3, r3
 800e412:	2b00      	cmp	r3, #0
 800e414:	bf0c      	ite	eq
 800e416:	2301      	moveq	r3, #1
 800e418:	2300      	movne	r3, #0
 800e41a:	b2db      	uxtb	r3, r3
 800e41c:	461a      	mov	r2, r3
 800e41e:	e00c      	b.n	800e43a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	699b      	ldr	r3, [r3, #24]
 800e426:	43da      	mvns	r2, r3
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	4013      	ands	r3, r2
 800e42c:	b29b      	uxth	r3, r3
 800e42e:	2b00      	cmp	r3, #0
 800e430:	bf0c      	ite	eq
 800e432:	2301      	moveq	r3, #1
 800e434:	2300      	movne	r3, #0
 800e436:	b2db      	uxtb	r3, r3
 800e438:	461a      	mov	r2, r3
 800e43a:	79fb      	ldrb	r3, [r7, #7]
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d0b6      	beq.n	800e3ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e440:	2300      	movs	r3, #0
}
 800e442:	4618      	mov	r0, r3
 800e444:	3710      	adds	r7, #16
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}

0800e44a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b084      	sub	sp, #16
 800e44e:	af00      	add	r7, sp, #0
 800e450:	60f8      	str	r0, [r7, #12]
 800e452:	60b9      	str	r1, [r7, #8]
 800e454:	607a      	str	r2, [r7, #4]
 800e456:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e458:	e051      	b.n	800e4fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	695b      	ldr	r3, [r3, #20]
 800e460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e468:	d123      	bne.n	800e4b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e478:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e482:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	2200      	movs	r2, #0
 800e488:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2220      	movs	r2, #32
 800e48e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	2200      	movs	r2, #0
 800e496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e49e:	f043 0204 	orr.w	r2, r3, #4
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	e046      	b.n	800e540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4b8:	d021      	beq.n	800e4fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e4ba:	f7fc f9b5 	bl	800a828 <HAL_GetTick>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	1ad3      	subs	r3, r2, r3
 800e4c4:	687a      	ldr	r2, [r7, #4]
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d302      	bcc.n	800e4d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d116      	bne.n	800e4fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	2220      	movs	r2, #32
 800e4da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4ea:	f043 0220 	orr.w	r2, r3, #32
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	e020      	b.n	800e540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	0c1b      	lsrs	r3, r3, #16
 800e502:	b2db      	uxtb	r3, r3
 800e504:	2b01      	cmp	r3, #1
 800e506:	d10c      	bne.n	800e522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	695b      	ldr	r3, [r3, #20]
 800e50e:	43da      	mvns	r2, r3
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	4013      	ands	r3, r2
 800e514:	b29b      	uxth	r3, r3
 800e516:	2b00      	cmp	r3, #0
 800e518:	bf14      	ite	ne
 800e51a:	2301      	movne	r3, #1
 800e51c:	2300      	moveq	r3, #0
 800e51e:	b2db      	uxtb	r3, r3
 800e520:	e00b      	b.n	800e53a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	699b      	ldr	r3, [r3, #24]
 800e528:	43da      	mvns	r2, r3
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	4013      	ands	r3, r2
 800e52e:	b29b      	uxth	r3, r3
 800e530:	2b00      	cmp	r3, #0
 800e532:	bf14      	ite	ne
 800e534:	2301      	movne	r3, #1
 800e536:	2300      	moveq	r3, #0
 800e538:	b2db      	uxtb	r3, r3
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d18d      	bne.n	800e45a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800e53e:	2300      	movs	r3, #0
}
 800e540:	4618      	mov	r0, r3
 800e542:	3710      	adds	r7, #16
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}

0800e548 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b084      	sub	sp, #16
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	60f8      	str	r0, [r7, #12]
 800e550:	60b9      	str	r1, [r7, #8]
 800e552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e554:	e02d      	b.n	800e5b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e556:	68f8      	ldr	r0, [r7, #12]
 800e558:	f000 f900 	bl	800e75c <I2C_IsAcknowledgeFailed>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d001      	beq.n	800e566 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e562:	2301      	movs	r3, #1
 800e564:	e02d      	b.n	800e5c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e56c:	d021      	beq.n	800e5b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e56e:	f7fc f95b 	bl	800a828 <HAL_GetTick>
 800e572:	4602      	mov	r2, r0
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	1ad3      	subs	r3, r2, r3
 800e578:	68ba      	ldr	r2, [r7, #8]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d302      	bcc.n	800e584 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d116      	bne.n	800e5b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2200      	movs	r2, #0
 800e588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2220      	movs	r2, #32
 800e58e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	2200      	movs	r2, #0
 800e596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e59e:	f043 0220 	orr.w	r2, r3, #32
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	e007      	b.n	800e5c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	695b      	ldr	r3, [r3, #20]
 800e5b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5bc:	2b80      	cmp	r3, #128	; 0x80
 800e5be:	d1ca      	bne.n	800e556 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e5c0:	2300      	movs	r3, #0
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3710      	adds	r7, #16
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}

0800e5ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e5ca:	b580      	push	{r7, lr}
 800e5cc:	b084      	sub	sp, #16
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	60f8      	str	r0, [r7, #12]
 800e5d2:	60b9      	str	r1, [r7, #8]
 800e5d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e5d6:	e02d      	b.n	800e634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e5d8:	68f8      	ldr	r0, [r7, #12]
 800e5da:	f000 f8bf 	bl	800e75c <I2C_IsAcknowledgeFailed>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d001      	beq.n	800e5e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	e02d      	b.n	800e644 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5ee:	d021      	beq.n	800e634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e5f0:	f7fc f91a 	bl	800a828 <HAL_GetTick>
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	1ad3      	subs	r3, r2, r3
 800e5fa:	68ba      	ldr	r2, [r7, #8]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d302      	bcc.n	800e606 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d116      	bne.n	800e634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	2200      	movs	r2, #0
 800e60a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2220      	movs	r2, #32
 800e610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2200      	movs	r2, #0
 800e618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e620:	f043 0220 	orr.w	r2, r3, #32
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	2200      	movs	r2, #0
 800e62c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e630:	2301      	movs	r3, #1
 800e632:	e007      	b.n	800e644 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	695b      	ldr	r3, [r3, #20]
 800e63a:	f003 0304 	and.w	r3, r3, #4
 800e63e:	2b04      	cmp	r3, #4
 800e640:	d1ca      	bne.n	800e5d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e642:	2300      	movs	r3, #0
}
 800e644:	4618      	mov	r0, r3
 800e646:	3710      	adds	r7, #16
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800e64c:	b480      	push	{r7}
 800e64e:	b085      	sub	sp, #20
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e654:	2300      	movs	r3, #0
 800e656:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800e658:	4b13      	ldr	r3, [pc, #76]	; (800e6a8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	08db      	lsrs	r3, r3, #3
 800e65e:	4a13      	ldr	r2, [pc, #76]	; (800e6ac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800e660:	fba2 2303 	umull	r2, r3, r2, r3
 800e664:	0a1a      	lsrs	r2, r3, #8
 800e666:	4613      	mov	r3, r2
 800e668:	009b      	lsls	r3, r3, #2
 800e66a:	4413      	add	r3, r2
 800e66c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	3b01      	subs	r3, #1
 800e672:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d107      	bne.n	800e68a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e67e:	f043 0220 	orr.w	r2, r3, #32
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e686:	2301      	movs	r3, #1
 800e688:	e008      	b.n	800e69c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e698:	d0e9      	beq.n	800e66e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800e69a:	2300      	movs	r3, #0
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3714      	adds	r7, #20
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr
 800e6a8:	20000004 	.word	0x20000004
 800e6ac:	14f8b589 	.word	0x14f8b589

0800e6b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b084      	sub	sp, #16
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	60f8      	str	r0, [r7, #12]
 800e6b8:	60b9      	str	r1, [r7, #8]
 800e6ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e6bc:	e042      	b.n	800e744 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	695b      	ldr	r3, [r3, #20]
 800e6c4:	f003 0310 	and.w	r3, r3, #16
 800e6c8:	2b10      	cmp	r3, #16
 800e6ca:	d119      	bne.n	800e700 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f06f 0210 	mvn.w	r2, #16
 800e6d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2220      	movs	r2, #32
 800e6e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	e029      	b.n	800e754 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e700:	f7fc f892 	bl	800a828 <HAL_GetTick>
 800e704:	4602      	mov	r2, r0
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	1ad3      	subs	r3, r2, r3
 800e70a:	68ba      	ldr	r2, [r7, #8]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d302      	bcc.n	800e716 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d116      	bne.n	800e744 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	2200      	movs	r2, #0
 800e71a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	2220      	movs	r2, #32
 800e720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2200      	movs	r2, #0
 800e728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e730:	f043 0220 	orr.w	r2, r3, #32
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	2200      	movs	r2, #0
 800e73c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e740:	2301      	movs	r3, #1
 800e742:	e007      	b.n	800e754 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	695b      	ldr	r3, [r3, #20]
 800e74a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e74e:	2b40      	cmp	r3, #64	; 0x40
 800e750:	d1b5      	bne.n	800e6be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e752:	2300      	movs	r3, #0
}
 800e754:	4618      	mov	r0, r3
 800e756:	3710      	adds	r7, #16
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b083      	sub	sp, #12
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	695b      	ldr	r3, [r3, #20]
 800e76a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e76e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e772:	d11b      	bne.n	800e7ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e77c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2200      	movs	r2, #0
 800e782:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2220      	movs	r2, #32
 800e788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2200      	movs	r2, #0
 800e790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e798:	f043 0204 	orr.w	r2, r3, #4
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	e000      	b.n	800e7ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e7ac:	2300      	movs	r3, #0
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	370c      	adds	r7, #12
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr

0800e7ba <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800e7ba:	b480      	push	{r7}
 800e7bc:	b083      	sub	sp, #12
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7c6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e7ca:	d103      	bne.n	800e7d4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800e7d2:	e007      	b.n	800e7e4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7d8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e7dc:	d102      	bne.n	800e7e4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2208      	movs	r2, #8
 800e7e2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e7e4:	bf00      	nop
 800e7e6:	370c      	adds	r7, #12
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr

0800e7f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	603b      	str	r3, [r7, #0]
 800e7fe:	4b20      	ldr	r3, [pc, #128]	; (800e880 <HAL_PWREx_EnableOverDrive+0x90>)
 800e800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e802:	4a1f      	ldr	r2, [pc, #124]	; (800e880 <HAL_PWREx_EnableOverDrive+0x90>)
 800e804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e808:	6413      	str	r3, [r2, #64]	; 0x40
 800e80a:	4b1d      	ldr	r3, [pc, #116]	; (800e880 <HAL_PWREx_EnableOverDrive+0x90>)
 800e80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e80e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e812:	603b      	str	r3, [r7, #0]
 800e814:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800e816:	4b1b      	ldr	r3, [pc, #108]	; (800e884 <HAL_PWREx_EnableOverDrive+0x94>)
 800e818:	2201      	movs	r2, #1
 800e81a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e81c:	f7fc f804 	bl	800a828 <HAL_GetTick>
 800e820:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e822:	e009      	b.n	800e838 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e824:	f7fc f800 	bl	800a828 <HAL_GetTick>
 800e828:	4602      	mov	r2, r0
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	1ad3      	subs	r3, r2, r3
 800e82e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e832:	d901      	bls.n	800e838 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800e834:	2303      	movs	r3, #3
 800e836:	e01f      	b.n	800e878 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e838:	4b13      	ldr	r3, [pc, #76]	; (800e888 <HAL_PWREx_EnableOverDrive+0x98>)
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e844:	d1ee      	bne.n	800e824 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800e846:	4b11      	ldr	r3, [pc, #68]	; (800e88c <HAL_PWREx_EnableOverDrive+0x9c>)
 800e848:	2201      	movs	r2, #1
 800e84a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e84c:	f7fb ffec 	bl	800a828 <HAL_GetTick>
 800e850:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e852:	e009      	b.n	800e868 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e854:	f7fb ffe8 	bl	800a828 <HAL_GetTick>
 800e858:	4602      	mov	r2, r0
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	1ad3      	subs	r3, r2, r3
 800e85e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e862:	d901      	bls.n	800e868 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800e864:	2303      	movs	r3, #3
 800e866:	e007      	b.n	800e878 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e868:	4b07      	ldr	r3, [pc, #28]	; (800e888 <HAL_PWREx_EnableOverDrive+0x98>)
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e870:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e874:	d1ee      	bne.n	800e854 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800e876:	2300      	movs	r3, #0
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3708      	adds	r7, #8
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}
 800e880:	40023800 	.word	0x40023800
 800e884:	420e0040 	.word	0x420e0040
 800e888:	40007000 	.word	0x40007000
 800e88c:	420e0044 	.word	0x420e0044

0800e890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b084      	sub	sp, #16
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d101      	bne.n	800e8a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	e0cc      	b.n	800ea3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e8a4:	4b68      	ldr	r3, [pc, #416]	; (800ea48 <HAL_RCC_ClockConfig+0x1b8>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f003 030f 	and.w	r3, r3, #15
 800e8ac:	683a      	ldr	r2, [r7, #0]
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d90c      	bls.n	800e8cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e8b2:	4b65      	ldr	r3, [pc, #404]	; (800ea48 <HAL_RCC_ClockConfig+0x1b8>)
 800e8b4:	683a      	ldr	r2, [r7, #0]
 800e8b6:	b2d2      	uxtb	r2, r2
 800e8b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e8ba:	4b63      	ldr	r3, [pc, #396]	; (800ea48 <HAL_RCC_ClockConfig+0x1b8>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f003 030f 	and.w	r3, r3, #15
 800e8c2:	683a      	ldr	r2, [r7, #0]
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d001      	beq.n	800e8cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	e0b8      	b.n	800ea3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	f003 0302 	and.w	r3, r3, #2
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d020      	beq.n	800e91a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	f003 0304 	and.w	r3, r3, #4
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d005      	beq.n	800e8f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e8e4:	4b59      	ldr	r3, [pc, #356]	; (800ea4c <HAL_RCC_ClockConfig+0x1bc>)
 800e8e6:	689b      	ldr	r3, [r3, #8]
 800e8e8:	4a58      	ldr	r2, [pc, #352]	; (800ea4c <HAL_RCC_ClockConfig+0x1bc>)
 800e8ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e8ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	f003 0308 	and.w	r3, r3, #8
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d005      	beq.n	800e908 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e8fc:	4b53      	ldr	r3, [pc, #332]	; (800ea4c <HAL_RCC_ClockConfig+0x1bc>)
 800e8fe:	689b      	ldr	r3, [r3, #8]
 800e900:	4a52      	ldr	r2, [pc, #328]	; (800ea4c <HAL_RCC_ClockConfig+0x1bc>)
 800e902:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e906:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e908:	4b50      	ldr	r3, [pc, #320]	; (800ea4c <HAL_RCC_ClockConfig+0x1bc>)
 800e90a:	689b      	ldr	r3, [r3, #8]
 800e90c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	689b      	ldr	r3, [r3, #8]
 800e914:	494d      	ldr	r1, [pc, #308]	; (800ea4c <HAL_RCC_ClockConfig+0x1bc>)
 800e916:	4313      	orrs	r3, r2
 800e918:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	f003 0301 	and.w	r3, r3, #1
 800e922:	2b00      	cmp	r3, #0
 800e924:	d044      	beq.n	800e9b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	685b      	ldr	r3, [r3, #4]
 800e92a:	2b01      	cmp	r3, #1
 800e92c:	d107      	bne.n	800e93e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e92e:	4b47      	ldr	r3, [pc, #284]	; (800ea4c <HAL_RCC_ClockConfig+0x1bc>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e936:	2b00      	cmp	r3, #0
 800e938:	d119      	bne.n	800e96e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e93a:	2301      	movs	r3, #1
 800e93c:	e07f      	b.n	800ea3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	685b      	ldr	r3, [r3, #4]
 800e942:	2b02      	cmp	r3, #2
 800e944:	d003      	beq.n	800e94e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e94a:	2b03      	cmp	r3, #3
 800e94c:	d107      	bne.n	800e95e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e94e:	4b3f      	ldr	r3, [pc, #252]	; (800ea4c <HAL_RCC_ClockConfig+0x1bc>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e956:	2b00      	cmp	r3, #0
 800e958:	d109      	bne.n	800e96e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e95a:	2301      	movs	r3, #1
 800e95c:	e06f      	b.n	800ea3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e95e:	4b3b      	ldr	r3, [pc, #236]	; (800ea4c <HAL_RCC_ClockConfig+0x1bc>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f003 0302 	and.w	r3, r3, #2
 800e966:	2b00      	cmp	r3, #0
 800e968:	d101      	bne.n	800e96e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e96a:	2301      	movs	r3, #1
 800e96c:	e067      	b.n	800ea3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e96e:	4b37      	ldr	r3, [pc, #220]	; (800ea4c <HAL_RCC_ClockConfig+0x1bc>)
 800e970:	689b      	ldr	r3, [r3, #8]
 800e972:	f023 0203 	bic.w	r2, r3, #3
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	685b      	ldr	r3, [r3, #4]
 800e97a:	4934      	ldr	r1, [pc, #208]	; (800ea4c <HAL_RCC_ClockConfig+0x1bc>)
 800e97c:	4313      	orrs	r3, r2
 800e97e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e980:	f7fb ff52 	bl	800a828 <HAL_GetTick>
 800e984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e986:	e00a      	b.n	800e99e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e988:	f7fb ff4e 	bl	800a828 <HAL_GetTick>
 800e98c:	4602      	mov	r2, r0
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	1ad3      	subs	r3, r2, r3
 800e992:	f241 3288 	movw	r2, #5000	; 0x1388
 800e996:	4293      	cmp	r3, r2
 800e998:	d901      	bls.n	800e99e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e99a:	2303      	movs	r3, #3
 800e99c:	e04f      	b.n	800ea3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e99e:	4b2b      	ldr	r3, [pc, #172]	; (800ea4c <HAL_RCC_ClockConfig+0x1bc>)
 800e9a0:	689b      	ldr	r3, [r3, #8]
 800e9a2:	f003 020c 	and.w	r2, r3, #12
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	009b      	lsls	r3, r3, #2
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	d1eb      	bne.n	800e988 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e9b0:	4b25      	ldr	r3, [pc, #148]	; (800ea48 <HAL_RCC_ClockConfig+0x1b8>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	f003 030f 	and.w	r3, r3, #15
 800e9b8:	683a      	ldr	r2, [r7, #0]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d20c      	bcs.n	800e9d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e9be:	4b22      	ldr	r3, [pc, #136]	; (800ea48 <HAL_RCC_ClockConfig+0x1b8>)
 800e9c0:	683a      	ldr	r2, [r7, #0]
 800e9c2:	b2d2      	uxtb	r2, r2
 800e9c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e9c6:	4b20      	ldr	r3, [pc, #128]	; (800ea48 <HAL_RCC_ClockConfig+0x1b8>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	f003 030f 	and.w	r3, r3, #15
 800e9ce:	683a      	ldr	r2, [r7, #0]
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d001      	beq.n	800e9d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	e032      	b.n	800ea3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	f003 0304 	and.w	r3, r3, #4
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d008      	beq.n	800e9f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e9e4:	4b19      	ldr	r3, [pc, #100]	; (800ea4c <HAL_RCC_ClockConfig+0x1bc>)
 800e9e6:	689b      	ldr	r3, [r3, #8]
 800e9e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	68db      	ldr	r3, [r3, #12]
 800e9f0:	4916      	ldr	r1, [pc, #88]	; (800ea4c <HAL_RCC_ClockConfig+0x1bc>)
 800e9f2:	4313      	orrs	r3, r2
 800e9f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f003 0308 	and.w	r3, r3, #8
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d009      	beq.n	800ea16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ea02:	4b12      	ldr	r3, [pc, #72]	; (800ea4c <HAL_RCC_ClockConfig+0x1bc>)
 800ea04:	689b      	ldr	r3, [r3, #8]
 800ea06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	691b      	ldr	r3, [r3, #16]
 800ea0e:	00db      	lsls	r3, r3, #3
 800ea10:	490e      	ldr	r1, [pc, #56]	; (800ea4c <HAL_RCC_ClockConfig+0x1bc>)
 800ea12:	4313      	orrs	r3, r2
 800ea14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ea16:	f000 f855 	bl	800eac4 <HAL_RCC_GetSysClockFreq>
 800ea1a:	4602      	mov	r2, r0
 800ea1c:	4b0b      	ldr	r3, [pc, #44]	; (800ea4c <HAL_RCC_ClockConfig+0x1bc>)
 800ea1e:	689b      	ldr	r3, [r3, #8]
 800ea20:	091b      	lsrs	r3, r3, #4
 800ea22:	f003 030f 	and.w	r3, r3, #15
 800ea26:	490a      	ldr	r1, [pc, #40]	; (800ea50 <HAL_RCC_ClockConfig+0x1c0>)
 800ea28:	5ccb      	ldrb	r3, [r1, r3]
 800ea2a:	fa22 f303 	lsr.w	r3, r2, r3
 800ea2e:	4a09      	ldr	r2, [pc, #36]	; (800ea54 <HAL_RCC_ClockConfig+0x1c4>)
 800ea30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ea32:	4b09      	ldr	r3, [pc, #36]	; (800ea58 <HAL_RCC_ClockConfig+0x1c8>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	4618      	mov	r0, r3
 800ea38:	f7fb feb2 	bl	800a7a0 <HAL_InitTick>

  return HAL_OK;
 800ea3c:	2300      	movs	r3, #0
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	3710      	adds	r7, #16
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}
 800ea46:	bf00      	nop
 800ea48:	40023c00 	.word	0x40023c00
 800ea4c:	40023800 	.word	0x40023800
 800ea50:	08015864 	.word	0x08015864
 800ea54:	20000004 	.word	0x20000004
 800ea58:	20000008 	.word	0x20000008

0800ea5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ea60:	4b03      	ldr	r3, [pc, #12]	; (800ea70 <HAL_RCC_GetHCLKFreq+0x14>)
 800ea62:	681b      	ldr	r3, [r3, #0]
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	46bd      	mov	sp, r7
 800ea68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6c:	4770      	bx	lr
 800ea6e:	bf00      	nop
 800ea70:	20000004 	.word	0x20000004

0800ea74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ea78:	f7ff fff0 	bl	800ea5c <HAL_RCC_GetHCLKFreq>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	4b05      	ldr	r3, [pc, #20]	; (800ea94 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ea80:	689b      	ldr	r3, [r3, #8]
 800ea82:	0a9b      	lsrs	r3, r3, #10
 800ea84:	f003 0307 	and.w	r3, r3, #7
 800ea88:	4903      	ldr	r1, [pc, #12]	; (800ea98 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ea8a:	5ccb      	ldrb	r3, [r1, r3]
 800ea8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	bd80      	pop	{r7, pc}
 800ea94:	40023800 	.word	0x40023800
 800ea98:	08015874 	.word	0x08015874

0800ea9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800eaa0:	f7ff ffdc 	bl	800ea5c <HAL_RCC_GetHCLKFreq>
 800eaa4:	4602      	mov	r2, r0
 800eaa6:	4b05      	ldr	r3, [pc, #20]	; (800eabc <HAL_RCC_GetPCLK2Freq+0x20>)
 800eaa8:	689b      	ldr	r3, [r3, #8]
 800eaaa:	0b5b      	lsrs	r3, r3, #13
 800eaac:	f003 0307 	and.w	r3, r3, #7
 800eab0:	4903      	ldr	r1, [pc, #12]	; (800eac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800eab2:	5ccb      	ldrb	r3, [r1, r3]
 800eab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	bd80      	pop	{r7, pc}
 800eabc:	40023800 	.word	0x40023800
 800eac0:	08015874 	.word	0x08015874

0800eac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800eac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eac8:	b0ae      	sub	sp, #184	; 0xb8
 800eaca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800eacc:	2300      	movs	r3, #0
 800eace:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800ead2:	2300      	movs	r3, #0
 800ead4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800ead8:	2300      	movs	r3, #0
 800eada:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800eade:	2300      	movs	r3, #0
 800eae0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800eae4:	2300      	movs	r3, #0
 800eae6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800eaea:	4bcb      	ldr	r3, [pc, #812]	; (800ee18 <HAL_RCC_GetSysClockFreq+0x354>)
 800eaec:	689b      	ldr	r3, [r3, #8]
 800eaee:	f003 030c 	and.w	r3, r3, #12
 800eaf2:	2b0c      	cmp	r3, #12
 800eaf4:	f200 8204 	bhi.w	800ef00 <HAL_RCC_GetSysClockFreq+0x43c>
 800eaf8:	a201      	add	r2, pc, #4	; (adr r2, 800eb00 <HAL_RCC_GetSysClockFreq+0x3c>)
 800eafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eafe:	bf00      	nop
 800eb00:	0800eb35 	.word	0x0800eb35
 800eb04:	0800ef01 	.word	0x0800ef01
 800eb08:	0800ef01 	.word	0x0800ef01
 800eb0c:	0800ef01 	.word	0x0800ef01
 800eb10:	0800eb3d 	.word	0x0800eb3d
 800eb14:	0800ef01 	.word	0x0800ef01
 800eb18:	0800ef01 	.word	0x0800ef01
 800eb1c:	0800ef01 	.word	0x0800ef01
 800eb20:	0800eb45 	.word	0x0800eb45
 800eb24:	0800ef01 	.word	0x0800ef01
 800eb28:	0800ef01 	.word	0x0800ef01
 800eb2c:	0800ef01 	.word	0x0800ef01
 800eb30:	0800ed35 	.word	0x0800ed35
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800eb34:	4bb9      	ldr	r3, [pc, #740]	; (800ee1c <HAL_RCC_GetSysClockFreq+0x358>)
 800eb36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800eb3a:	e1e5      	b.n	800ef08 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800eb3c:	4bb7      	ldr	r3, [pc, #732]	; (800ee1c <HAL_RCC_GetSysClockFreq+0x358>)
 800eb3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800eb42:	e1e1      	b.n	800ef08 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800eb44:	4bb4      	ldr	r3, [pc, #720]	; (800ee18 <HAL_RCC_GetSysClockFreq+0x354>)
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800eb50:	4bb1      	ldr	r3, [pc, #708]	; (800ee18 <HAL_RCC_GetSysClockFreq+0x354>)
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d071      	beq.n	800ec40 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800eb5c:	4bae      	ldr	r3, [pc, #696]	; (800ee18 <HAL_RCC_GetSysClockFreq+0x354>)
 800eb5e:	685b      	ldr	r3, [r3, #4]
 800eb60:	099b      	lsrs	r3, r3, #6
 800eb62:	2200      	movs	r2, #0
 800eb64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800eb68:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800eb6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800eb70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800eb78:	2300      	movs	r3, #0
 800eb7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800eb7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800eb82:	4622      	mov	r2, r4
 800eb84:	462b      	mov	r3, r5
 800eb86:	f04f 0000 	mov.w	r0, #0
 800eb8a:	f04f 0100 	mov.w	r1, #0
 800eb8e:	0159      	lsls	r1, r3, #5
 800eb90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800eb94:	0150      	lsls	r0, r2, #5
 800eb96:	4602      	mov	r2, r0
 800eb98:	460b      	mov	r3, r1
 800eb9a:	4621      	mov	r1, r4
 800eb9c:	1a51      	subs	r1, r2, r1
 800eb9e:	6439      	str	r1, [r7, #64]	; 0x40
 800eba0:	4629      	mov	r1, r5
 800eba2:	eb63 0301 	sbc.w	r3, r3, r1
 800eba6:	647b      	str	r3, [r7, #68]	; 0x44
 800eba8:	f04f 0200 	mov.w	r2, #0
 800ebac:	f04f 0300 	mov.w	r3, #0
 800ebb0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800ebb4:	4649      	mov	r1, r9
 800ebb6:	018b      	lsls	r3, r1, #6
 800ebb8:	4641      	mov	r1, r8
 800ebba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ebbe:	4641      	mov	r1, r8
 800ebc0:	018a      	lsls	r2, r1, #6
 800ebc2:	4641      	mov	r1, r8
 800ebc4:	1a51      	subs	r1, r2, r1
 800ebc6:	63b9      	str	r1, [r7, #56]	; 0x38
 800ebc8:	4649      	mov	r1, r9
 800ebca:	eb63 0301 	sbc.w	r3, r3, r1
 800ebce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ebd0:	f04f 0200 	mov.w	r2, #0
 800ebd4:	f04f 0300 	mov.w	r3, #0
 800ebd8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800ebdc:	4649      	mov	r1, r9
 800ebde:	00cb      	lsls	r3, r1, #3
 800ebe0:	4641      	mov	r1, r8
 800ebe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ebe6:	4641      	mov	r1, r8
 800ebe8:	00ca      	lsls	r2, r1, #3
 800ebea:	4610      	mov	r0, r2
 800ebec:	4619      	mov	r1, r3
 800ebee:	4603      	mov	r3, r0
 800ebf0:	4622      	mov	r2, r4
 800ebf2:	189b      	adds	r3, r3, r2
 800ebf4:	633b      	str	r3, [r7, #48]	; 0x30
 800ebf6:	462b      	mov	r3, r5
 800ebf8:	460a      	mov	r2, r1
 800ebfa:	eb42 0303 	adc.w	r3, r2, r3
 800ebfe:	637b      	str	r3, [r7, #52]	; 0x34
 800ec00:	f04f 0200 	mov.w	r2, #0
 800ec04:	f04f 0300 	mov.w	r3, #0
 800ec08:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800ec0c:	4629      	mov	r1, r5
 800ec0e:	028b      	lsls	r3, r1, #10
 800ec10:	4621      	mov	r1, r4
 800ec12:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ec16:	4621      	mov	r1, r4
 800ec18:	028a      	lsls	r2, r1, #10
 800ec1a:	4610      	mov	r0, r2
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ec22:	2200      	movs	r2, #0
 800ec24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ec28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ec2c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800ec30:	f7f1 fffa 	bl	8000c28 <__aeabi_uldivmod>
 800ec34:	4602      	mov	r2, r0
 800ec36:	460b      	mov	r3, r1
 800ec38:	4613      	mov	r3, r2
 800ec3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ec3e:	e067      	b.n	800ed10 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ec40:	4b75      	ldr	r3, [pc, #468]	; (800ee18 <HAL_RCC_GetSysClockFreq+0x354>)
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	099b      	lsrs	r3, r3, #6
 800ec46:	2200      	movs	r2, #0
 800ec48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ec4c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800ec50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ec54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec58:	67bb      	str	r3, [r7, #120]	; 0x78
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ec5e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800ec62:	4622      	mov	r2, r4
 800ec64:	462b      	mov	r3, r5
 800ec66:	f04f 0000 	mov.w	r0, #0
 800ec6a:	f04f 0100 	mov.w	r1, #0
 800ec6e:	0159      	lsls	r1, r3, #5
 800ec70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ec74:	0150      	lsls	r0, r2, #5
 800ec76:	4602      	mov	r2, r0
 800ec78:	460b      	mov	r3, r1
 800ec7a:	4621      	mov	r1, r4
 800ec7c:	1a51      	subs	r1, r2, r1
 800ec7e:	62b9      	str	r1, [r7, #40]	; 0x28
 800ec80:	4629      	mov	r1, r5
 800ec82:	eb63 0301 	sbc.w	r3, r3, r1
 800ec86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec88:	f04f 0200 	mov.w	r2, #0
 800ec8c:	f04f 0300 	mov.w	r3, #0
 800ec90:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800ec94:	4649      	mov	r1, r9
 800ec96:	018b      	lsls	r3, r1, #6
 800ec98:	4641      	mov	r1, r8
 800ec9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ec9e:	4641      	mov	r1, r8
 800eca0:	018a      	lsls	r2, r1, #6
 800eca2:	4641      	mov	r1, r8
 800eca4:	ebb2 0a01 	subs.w	sl, r2, r1
 800eca8:	4649      	mov	r1, r9
 800ecaa:	eb63 0b01 	sbc.w	fp, r3, r1
 800ecae:	f04f 0200 	mov.w	r2, #0
 800ecb2:	f04f 0300 	mov.w	r3, #0
 800ecb6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ecba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ecbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ecc2:	4692      	mov	sl, r2
 800ecc4:	469b      	mov	fp, r3
 800ecc6:	4623      	mov	r3, r4
 800ecc8:	eb1a 0303 	adds.w	r3, sl, r3
 800eccc:	623b      	str	r3, [r7, #32]
 800ecce:	462b      	mov	r3, r5
 800ecd0:	eb4b 0303 	adc.w	r3, fp, r3
 800ecd4:	627b      	str	r3, [r7, #36]	; 0x24
 800ecd6:	f04f 0200 	mov.w	r2, #0
 800ecda:	f04f 0300 	mov.w	r3, #0
 800ecde:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800ece2:	4629      	mov	r1, r5
 800ece4:	028b      	lsls	r3, r1, #10
 800ece6:	4621      	mov	r1, r4
 800ece8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ecec:	4621      	mov	r1, r4
 800ecee:	028a      	lsls	r2, r1, #10
 800ecf0:	4610      	mov	r0, r2
 800ecf2:	4619      	mov	r1, r3
 800ecf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	673b      	str	r3, [r7, #112]	; 0x70
 800ecfc:	677a      	str	r2, [r7, #116]	; 0x74
 800ecfe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800ed02:	f7f1 ff91 	bl	8000c28 <__aeabi_uldivmod>
 800ed06:	4602      	mov	r2, r0
 800ed08:	460b      	mov	r3, r1
 800ed0a:	4613      	mov	r3, r2
 800ed0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ed10:	4b41      	ldr	r3, [pc, #260]	; (800ee18 <HAL_RCC_GetSysClockFreq+0x354>)
 800ed12:	685b      	ldr	r3, [r3, #4]
 800ed14:	0c1b      	lsrs	r3, r3, #16
 800ed16:	f003 0303 	and.w	r3, r3, #3
 800ed1a:	3301      	adds	r3, #1
 800ed1c:	005b      	lsls	r3, r3, #1
 800ed1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800ed22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ed26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ed2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800ed32:	e0e9      	b.n	800ef08 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ed34:	4b38      	ldr	r3, [pc, #224]	; (800ee18 <HAL_RCC_GetSysClockFreq+0x354>)
 800ed36:	685b      	ldr	r3, [r3, #4]
 800ed38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ed40:	4b35      	ldr	r3, [pc, #212]	; (800ee18 <HAL_RCC_GetSysClockFreq+0x354>)
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d069      	beq.n	800ee20 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ed4c:	4b32      	ldr	r3, [pc, #200]	; (800ee18 <HAL_RCC_GetSysClockFreq+0x354>)
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	099b      	lsrs	r3, r3, #6
 800ed52:	2200      	movs	r2, #0
 800ed54:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed56:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ed58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed5e:	663b      	str	r3, [r7, #96]	; 0x60
 800ed60:	2300      	movs	r3, #0
 800ed62:	667b      	str	r3, [r7, #100]	; 0x64
 800ed64:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800ed68:	4622      	mov	r2, r4
 800ed6a:	462b      	mov	r3, r5
 800ed6c:	f04f 0000 	mov.w	r0, #0
 800ed70:	f04f 0100 	mov.w	r1, #0
 800ed74:	0159      	lsls	r1, r3, #5
 800ed76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ed7a:	0150      	lsls	r0, r2, #5
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	460b      	mov	r3, r1
 800ed80:	4621      	mov	r1, r4
 800ed82:	1a51      	subs	r1, r2, r1
 800ed84:	61b9      	str	r1, [r7, #24]
 800ed86:	4629      	mov	r1, r5
 800ed88:	eb63 0301 	sbc.w	r3, r3, r1
 800ed8c:	61fb      	str	r3, [r7, #28]
 800ed8e:	f04f 0200 	mov.w	r2, #0
 800ed92:	f04f 0300 	mov.w	r3, #0
 800ed96:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800ed9a:	4659      	mov	r1, fp
 800ed9c:	018b      	lsls	r3, r1, #6
 800ed9e:	4651      	mov	r1, sl
 800eda0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800eda4:	4651      	mov	r1, sl
 800eda6:	018a      	lsls	r2, r1, #6
 800eda8:	4651      	mov	r1, sl
 800edaa:	ebb2 0801 	subs.w	r8, r2, r1
 800edae:	4659      	mov	r1, fp
 800edb0:	eb63 0901 	sbc.w	r9, r3, r1
 800edb4:	f04f 0200 	mov.w	r2, #0
 800edb8:	f04f 0300 	mov.w	r3, #0
 800edbc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800edc0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800edc4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800edc8:	4690      	mov	r8, r2
 800edca:	4699      	mov	r9, r3
 800edcc:	4623      	mov	r3, r4
 800edce:	eb18 0303 	adds.w	r3, r8, r3
 800edd2:	613b      	str	r3, [r7, #16]
 800edd4:	462b      	mov	r3, r5
 800edd6:	eb49 0303 	adc.w	r3, r9, r3
 800edda:	617b      	str	r3, [r7, #20]
 800eddc:	f04f 0200 	mov.w	r2, #0
 800ede0:	f04f 0300 	mov.w	r3, #0
 800ede4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800ede8:	4629      	mov	r1, r5
 800edea:	028b      	lsls	r3, r1, #10
 800edec:	4621      	mov	r1, r4
 800edee:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800edf2:	4621      	mov	r1, r4
 800edf4:	028a      	lsls	r2, r1, #10
 800edf6:	4610      	mov	r0, r2
 800edf8:	4619      	mov	r1, r3
 800edfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800edfe:	2200      	movs	r2, #0
 800ee00:	65bb      	str	r3, [r7, #88]	; 0x58
 800ee02:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ee04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ee08:	f7f1 ff0e 	bl	8000c28 <__aeabi_uldivmod>
 800ee0c:	4602      	mov	r2, r0
 800ee0e:	460b      	mov	r3, r1
 800ee10:	4613      	mov	r3, r2
 800ee12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ee16:	e063      	b.n	800eee0 <HAL_RCC_GetSysClockFreq+0x41c>
 800ee18:	40023800 	.word	0x40023800
 800ee1c:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ee20:	4b3d      	ldr	r3, [pc, #244]	; (800ef18 <HAL_RCC_GetSysClockFreq+0x454>)
 800ee22:	685b      	ldr	r3, [r3, #4]
 800ee24:	099b      	lsrs	r3, r3, #6
 800ee26:	2200      	movs	r2, #0
 800ee28:	4618      	mov	r0, r3
 800ee2a:	4611      	mov	r1, r2
 800ee2c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ee30:	653b      	str	r3, [r7, #80]	; 0x50
 800ee32:	2300      	movs	r3, #0
 800ee34:	657b      	str	r3, [r7, #84]	; 0x54
 800ee36:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800ee3a:	4642      	mov	r2, r8
 800ee3c:	464b      	mov	r3, r9
 800ee3e:	f04f 0000 	mov.w	r0, #0
 800ee42:	f04f 0100 	mov.w	r1, #0
 800ee46:	0159      	lsls	r1, r3, #5
 800ee48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ee4c:	0150      	lsls	r0, r2, #5
 800ee4e:	4602      	mov	r2, r0
 800ee50:	460b      	mov	r3, r1
 800ee52:	4641      	mov	r1, r8
 800ee54:	1a51      	subs	r1, r2, r1
 800ee56:	60b9      	str	r1, [r7, #8]
 800ee58:	4649      	mov	r1, r9
 800ee5a:	eb63 0301 	sbc.w	r3, r3, r1
 800ee5e:	60fb      	str	r3, [r7, #12]
 800ee60:	f04f 0200 	mov.w	r2, #0
 800ee64:	f04f 0300 	mov.w	r3, #0
 800ee68:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800ee6c:	4659      	mov	r1, fp
 800ee6e:	018b      	lsls	r3, r1, #6
 800ee70:	4651      	mov	r1, sl
 800ee72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ee76:	4651      	mov	r1, sl
 800ee78:	018a      	lsls	r2, r1, #6
 800ee7a:	4651      	mov	r1, sl
 800ee7c:	1a54      	subs	r4, r2, r1
 800ee7e:	4659      	mov	r1, fp
 800ee80:	eb63 0501 	sbc.w	r5, r3, r1
 800ee84:	f04f 0200 	mov.w	r2, #0
 800ee88:	f04f 0300 	mov.w	r3, #0
 800ee8c:	00eb      	lsls	r3, r5, #3
 800ee8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ee92:	00e2      	lsls	r2, r4, #3
 800ee94:	4614      	mov	r4, r2
 800ee96:	461d      	mov	r5, r3
 800ee98:	4643      	mov	r3, r8
 800ee9a:	18e3      	adds	r3, r4, r3
 800ee9c:	603b      	str	r3, [r7, #0]
 800ee9e:	464b      	mov	r3, r9
 800eea0:	eb45 0303 	adc.w	r3, r5, r3
 800eea4:	607b      	str	r3, [r7, #4]
 800eea6:	f04f 0200 	mov.w	r2, #0
 800eeaa:	f04f 0300 	mov.w	r3, #0
 800eeae:	e9d7 4500 	ldrd	r4, r5, [r7]
 800eeb2:	4629      	mov	r1, r5
 800eeb4:	028b      	lsls	r3, r1, #10
 800eeb6:	4621      	mov	r1, r4
 800eeb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800eebc:	4621      	mov	r1, r4
 800eebe:	028a      	lsls	r2, r1, #10
 800eec0:	4610      	mov	r0, r2
 800eec2:	4619      	mov	r1, r3
 800eec4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eec8:	2200      	movs	r2, #0
 800eeca:	64bb      	str	r3, [r7, #72]	; 0x48
 800eecc:	64fa      	str	r2, [r7, #76]	; 0x4c
 800eece:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800eed2:	f7f1 fea9 	bl	8000c28 <__aeabi_uldivmod>
 800eed6:	4602      	mov	r2, r0
 800eed8:	460b      	mov	r3, r1
 800eeda:	4613      	mov	r3, r2
 800eedc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800eee0:	4b0d      	ldr	r3, [pc, #52]	; (800ef18 <HAL_RCC_GetSysClockFreq+0x454>)
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	0f1b      	lsrs	r3, r3, #28
 800eee6:	f003 0307 	and.w	r3, r3, #7
 800eeea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800eeee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800eef2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800eef6:	fbb2 f3f3 	udiv	r3, r2, r3
 800eefa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800eefe:	e003      	b.n	800ef08 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ef00:	4b06      	ldr	r3, [pc, #24]	; (800ef1c <HAL_RCC_GetSysClockFreq+0x458>)
 800ef02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800ef06:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ef08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	37b8      	adds	r7, #184	; 0xb8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ef16:	bf00      	nop
 800ef18:	40023800 	.word	0x40023800
 800ef1c:	00f42400 	.word	0x00f42400

0800ef20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b086      	sub	sp, #24
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d101      	bne.n	800ef32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ef2e:	2301      	movs	r3, #1
 800ef30:	e28d      	b.n	800f44e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	f003 0301 	and.w	r3, r3, #1
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	f000 8083 	beq.w	800f046 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ef40:	4b94      	ldr	r3, [pc, #592]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800ef42:	689b      	ldr	r3, [r3, #8]
 800ef44:	f003 030c 	and.w	r3, r3, #12
 800ef48:	2b04      	cmp	r3, #4
 800ef4a:	d019      	beq.n	800ef80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ef4c:	4b91      	ldr	r3, [pc, #580]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800ef4e:	689b      	ldr	r3, [r3, #8]
 800ef50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ef54:	2b08      	cmp	r3, #8
 800ef56:	d106      	bne.n	800ef66 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ef58:	4b8e      	ldr	r3, [pc, #568]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ef60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ef64:	d00c      	beq.n	800ef80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ef66:	4b8b      	ldr	r3, [pc, #556]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800ef68:	689b      	ldr	r3, [r3, #8]
 800ef6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ef6e:	2b0c      	cmp	r3, #12
 800ef70:	d112      	bne.n	800ef98 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ef72:	4b88      	ldr	r3, [pc, #544]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800ef74:	685b      	ldr	r3, [r3, #4]
 800ef76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ef7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ef7e:	d10b      	bne.n	800ef98 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ef80:	4b84      	ldr	r3, [pc, #528]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d05b      	beq.n	800f044 <HAL_RCC_OscConfig+0x124>
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	685b      	ldr	r3, [r3, #4]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d157      	bne.n	800f044 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800ef94:	2301      	movs	r3, #1
 800ef96:	e25a      	b.n	800f44e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	685b      	ldr	r3, [r3, #4]
 800ef9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efa0:	d106      	bne.n	800efb0 <HAL_RCC_OscConfig+0x90>
 800efa2:	4b7c      	ldr	r3, [pc, #496]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	4a7b      	ldr	r2, [pc, #492]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800efa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800efac:	6013      	str	r3, [r2, #0]
 800efae:	e01d      	b.n	800efec <HAL_RCC_OscConfig+0xcc>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	685b      	ldr	r3, [r3, #4]
 800efb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800efb8:	d10c      	bne.n	800efd4 <HAL_RCC_OscConfig+0xb4>
 800efba:	4b76      	ldr	r3, [pc, #472]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	4a75      	ldr	r2, [pc, #468]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800efc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800efc4:	6013      	str	r3, [r2, #0]
 800efc6:	4b73      	ldr	r3, [pc, #460]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	4a72      	ldr	r2, [pc, #456]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800efcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800efd0:	6013      	str	r3, [r2, #0]
 800efd2:	e00b      	b.n	800efec <HAL_RCC_OscConfig+0xcc>
 800efd4:	4b6f      	ldr	r3, [pc, #444]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	4a6e      	ldr	r2, [pc, #440]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800efda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800efde:	6013      	str	r3, [r2, #0]
 800efe0:	4b6c      	ldr	r3, [pc, #432]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	4a6b      	ldr	r2, [pc, #428]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800efe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800efea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	685b      	ldr	r3, [r3, #4]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d013      	beq.n	800f01c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eff4:	f7fb fc18 	bl	800a828 <HAL_GetTick>
 800eff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800effa:	e008      	b.n	800f00e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800effc:	f7fb fc14 	bl	800a828 <HAL_GetTick>
 800f000:	4602      	mov	r2, r0
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	1ad3      	subs	r3, r2, r3
 800f006:	2b64      	cmp	r3, #100	; 0x64
 800f008:	d901      	bls.n	800f00e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800f00a:	2303      	movs	r3, #3
 800f00c:	e21f      	b.n	800f44e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f00e:	4b61      	ldr	r3, [pc, #388]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f016:	2b00      	cmp	r3, #0
 800f018:	d0f0      	beq.n	800effc <HAL_RCC_OscConfig+0xdc>
 800f01a:	e014      	b.n	800f046 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f01c:	f7fb fc04 	bl	800a828 <HAL_GetTick>
 800f020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f022:	e008      	b.n	800f036 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f024:	f7fb fc00 	bl	800a828 <HAL_GetTick>
 800f028:	4602      	mov	r2, r0
 800f02a:	693b      	ldr	r3, [r7, #16]
 800f02c:	1ad3      	subs	r3, r2, r3
 800f02e:	2b64      	cmp	r3, #100	; 0x64
 800f030:	d901      	bls.n	800f036 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800f032:	2303      	movs	r3, #3
 800f034:	e20b      	b.n	800f44e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f036:	4b57      	ldr	r3, [pc, #348]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d1f0      	bne.n	800f024 <HAL_RCC_OscConfig+0x104>
 800f042:	e000      	b.n	800f046 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	f003 0302 	and.w	r3, r3, #2
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d06f      	beq.n	800f132 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800f052:	4b50      	ldr	r3, [pc, #320]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800f054:	689b      	ldr	r3, [r3, #8]
 800f056:	f003 030c 	and.w	r3, r3, #12
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d017      	beq.n	800f08e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800f05e:	4b4d      	ldr	r3, [pc, #308]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800f060:	689b      	ldr	r3, [r3, #8]
 800f062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800f066:	2b08      	cmp	r3, #8
 800f068:	d105      	bne.n	800f076 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800f06a:	4b4a      	ldr	r3, [pc, #296]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800f06c:	685b      	ldr	r3, [r3, #4]
 800f06e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f072:	2b00      	cmp	r3, #0
 800f074:	d00b      	beq.n	800f08e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f076:	4b47      	ldr	r3, [pc, #284]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800f078:	689b      	ldr	r3, [r3, #8]
 800f07a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800f07e:	2b0c      	cmp	r3, #12
 800f080:	d11c      	bne.n	800f0bc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f082:	4b44      	ldr	r3, [pc, #272]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800f084:	685b      	ldr	r3, [r3, #4]
 800f086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d116      	bne.n	800f0bc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f08e:	4b41      	ldr	r3, [pc, #260]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f003 0302 	and.w	r3, r3, #2
 800f096:	2b00      	cmp	r3, #0
 800f098:	d005      	beq.n	800f0a6 <HAL_RCC_OscConfig+0x186>
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	68db      	ldr	r3, [r3, #12]
 800f09e:	2b01      	cmp	r3, #1
 800f0a0:	d001      	beq.n	800f0a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800f0a2:	2301      	movs	r3, #1
 800f0a4:	e1d3      	b.n	800f44e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f0a6:	4b3b      	ldr	r3, [pc, #236]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	691b      	ldr	r3, [r3, #16]
 800f0b2:	00db      	lsls	r3, r3, #3
 800f0b4:	4937      	ldr	r1, [pc, #220]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800f0b6:	4313      	orrs	r3, r2
 800f0b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f0ba:	e03a      	b.n	800f132 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	68db      	ldr	r3, [r3, #12]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d020      	beq.n	800f106 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f0c4:	4b34      	ldr	r3, [pc, #208]	; (800f198 <HAL_RCC_OscConfig+0x278>)
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f0ca:	f7fb fbad 	bl	800a828 <HAL_GetTick>
 800f0ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f0d0:	e008      	b.n	800f0e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f0d2:	f7fb fba9 	bl	800a828 <HAL_GetTick>
 800f0d6:	4602      	mov	r2, r0
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	1ad3      	subs	r3, r2, r3
 800f0dc:	2b02      	cmp	r3, #2
 800f0de:	d901      	bls.n	800f0e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800f0e0:	2303      	movs	r3, #3
 800f0e2:	e1b4      	b.n	800f44e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f0e4:	4b2b      	ldr	r3, [pc, #172]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	f003 0302 	and.w	r3, r3, #2
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d0f0      	beq.n	800f0d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f0f0:	4b28      	ldr	r3, [pc, #160]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	691b      	ldr	r3, [r3, #16]
 800f0fc:	00db      	lsls	r3, r3, #3
 800f0fe:	4925      	ldr	r1, [pc, #148]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800f100:	4313      	orrs	r3, r2
 800f102:	600b      	str	r3, [r1, #0]
 800f104:	e015      	b.n	800f132 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f106:	4b24      	ldr	r3, [pc, #144]	; (800f198 <HAL_RCC_OscConfig+0x278>)
 800f108:	2200      	movs	r2, #0
 800f10a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f10c:	f7fb fb8c 	bl	800a828 <HAL_GetTick>
 800f110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f112:	e008      	b.n	800f126 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f114:	f7fb fb88 	bl	800a828 <HAL_GetTick>
 800f118:	4602      	mov	r2, r0
 800f11a:	693b      	ldr	r3, [r7, #16]
 800f11c:	1ad3      	subs	r3, r2, r3
 800f11e:	2b02      	cmp	r3, #2
 800f120:	d901      	bls.n	800f126 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800f122:	2303      	movs	r3, #3
 800f124:	e193      	b.n	800f44e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f126:	4b1b      	ldr	r3, [pc, #108]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	f003 0302 	and.w	r3, r3, #2
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d1f0      	bne.n	800f114 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	f003 0308 	and.w	r3, r3, #8
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d036      	beq.n	800f1ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	695b      	ldr	r3, [r3, #20]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d016      	beq.n	800f174 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f146:	4b15      	ldr	r3, [pc, #84]	; (800f19c <HAL_RCC_OscConfig+0x27c>)
 800f148:	2201      	movs	r2, #1
 800f14a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f14c:	f7fb fb6c 	bl	800a828 <HAL_GetTick>
 800f150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f152:	e008      	b.n	800f166 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f154:	f7fb fb68 	bl	800a828 <HAL_GetTick>
 800f158:	4602      	mov	r2, r0
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	1ad3      	subs	r3, r2, r3
 800f15e:	2b02      	cmp	r3, #2
 800f160:	d901      	bls.n	800f166 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800f162:	2303      	movs	r3, #3
 800f164:	e173      	b.n	800f44e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f166:	4b0b      	ldr	r3, [pc, #44]	; (800f194 <HAL_RCC_OscConfig+0x274>)
 800f168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f16a:	f003 0302 	and.w	r3, r3, #2
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d0f0      	beq.n	800f154 <HAL_RCC_OscConfig+0x234>
 800f172:	e01b      	b.n	800f1ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f174:	4b09      	ldr	r3, [pc, #36]	; (800f19c <HAL_RCC_OscConfig+0x27c>)
 800f176:	2200      	movs	r2, #0
 800f178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f17a:	f7fb fb55 	bl	800a828 <HAL_GetTick>
 800f17e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f180:	e00e      	b.n	800f1a0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f182:	f7fb fb51 	bl	800a828 <HAL_GetTick>
 800f186:	4602      	mov	r2, r0
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	1ad3      	subs	r3, r2, r3
 800f18c:	2b02      	cmp	r3, #2
 800f18e:	d907      	bls.n	800f1a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800f190:	2303      	movs	r3, #3
 800f192:	e15c      	b.n	800f44e <HAL_RCC_OscConfig+0x52e>
 800f194:	40023800 	.word	0x40023800
 800f198:	42470000 	.word	0x42470000
 800f19c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f1a0:	4b8a      	ldr	r3, [pc, #552]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f1a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1a4:	f003 0302 	and.w	r3, r3, #2
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d1ea      	bne.n	800f182 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	f003 0304 	and.w	r3, r3, #4
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	f000 8097 	beq.w	800f2e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f1be:	4b83      	ldr	r3, [pc, #524]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d10f      	bne.n	800f1ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	60bb      	str	r3, [r7, #8]
 800f1ce:	4b7f      	ldr	r3, [pc, #508]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1d2:	4a7e      	ldr	r2, [pc, #504]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f1d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f1d8:	6413      	str	r3, [r2, #64]	; 0x40
 800f1da:	4b7c      	ldr	r3, [pc, #496]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f1e2:	60bb      	str	r3, [r7, #8]
 800f1e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f1ea:	4b79      	ldr	r3, [pc, #484]	; (800f3d0 <HAL_RCC_OscConfig+0x4b0>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d118      	bne.n	800f228 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f1f6:	4b76      	ldr	r3, [pc, #472]	; (800f3d0 <HAL_RCC_OscConfig+0x4b0>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	4a75      	ldr	r2, [pc, #468]	; (800f3d0 <HAL_RCC_OscConfig+0x4b0>)
 800f1fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f202:	f7fb fb11 	bl	800a828 <HAL_GetTick>
 800f206:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f208:	e008      	b.n	800f21c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f20a:	f7fb fb0d 	bl	800a828 <HAL_GetTick>
 800f20e:	4602      	mov	r2, r0
 800f210:	693b      	ldr	r3, [r7, #16]
 800f212:	1ad3      	subs	r3, r2, r3
 800f214:	2b02      	cmp	r3, #2
 800f216:	d901      	bls.n	800f21c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800f218:	2303      	movs	r3, #3
 800f21a:	e118      	b.n	800f44e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f21c:	4b6c      	ldr	r3, [pc, #432]	; (800f3d0 <HAL_RCC_OscConfig+0x4b0>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f224:	2b00      	cmp	r3, #0
 800f226:	d0f0      	beq.n	800f20a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	689b      	ldr	r3, [r3, #8]
 800f22c:	2b01      	cmp	r3, #1
 800f22e:	d106      	bne.n	800f23e <HAL_RCC_OscConfig+0x31e>
 800f230:	4b66      	ldr	r3, [pc, #408]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f234:	4a65      	ldr	r2, [pc, #404]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f236:	f043 0301 	orr.w	r3, r3, #1
 800f23a:	6713      	str	r3, [r2, #112]	; 0x70
 800f23c:	e01c      	b.n	800f278 <HAL_RCC_OscConfig+0x358>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	689b      	ldr	r3, [r3, #8]
 800f242:	2b05      	cmp	r3, #5
 800f244:	d10c      	bne.n	800f260 <HAL_RCC_OscConfig+0x340>
 800f246:	4b61      	ldr	r3, [pc, #388]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f24a:	4a60      	ldr	r2, [pc, #384]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f24c:	f043 0304 	orr.w	r3, r3, #4
 800f250:	6713      	str	r3, [r2, #112]	; 0x70
 800f252:	4b5e      	ldr	r3, [pc, #376]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f256:	4a5d      	ldr	r2, [pc, #372]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f258:	f043 0301 	orr.w	r3, r3, #1
 800f25c:	6713      	str	r3, [r2, #112]	; 0x70
 800f25e:	e00b      	b.n	800f278 <HAL_RCC_OscConfig+0x358>
 800f260:	4b5a      	ldr	r3, [pc, #360]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f264:	4a59      	ldr	r2, [pc, #356]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f266:	f023 0301 	bic.w	r3, r3, #1
 800f26a:	6713      	str	r3, [r2, #112]	; 0x70
 800f26c:	4b57      	ldr	r3, [pc, #348]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f26e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f270:	4a56      	ldr	r2, [pc, #344]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f272:	f023 0304 	bic.w	r3, r3, #4
 800f276:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	689b      	ldr	r3, [r3, #8]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d015      	beq.n	800f2ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f280:	f7fb fad2 	bl	800a828 <HAL_GetTick>
 800f284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f286:	e00a      	b.n	800f29e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f288:	f7fb face 	bl	800a828 <HAL_GetTick>
 800f28c:	4602      	mov	r2, r0
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	1ad3      	subs	r3, r2, r3
 800f292:	f241 3288 	movw	r2, #5000	; 0x1388
 800f296:	4293      	cmp	r3, r2
 800f298:	d901      	bls.n	800f29e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800f29a:	2303      	movs	r3, #3
 800f29c:	e0d7      	b.n	800f44e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f29e:	4b4b      	ldr	r3, [pc, #300]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2a2:	f003 0302 	and.w	r3, r3, #2
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d0ee      	beq.n	800f288 <HAL_RCC_OscConfig+0x368>
 800f2aa:	e014      	b.n	800f2d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f2ac:	f7fb fabc 	bl	800a828 <HAL_GetTick>
 800f2b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f2b2:	e00a      	b.n	800f2ca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f2b4:	f7fb fab8 	bl	800a828 <HAL_GetTick>
 800f2b8:	4602      	mov	r2, r0
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	1ad3      	subs	r3, r2, r3
 800f2be:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2c2:	4293      	cmp	r3, r2
 800f2c4:	d901      	bls.n	800f2ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800f2c6:	2303      	movs	r3, #3
 800f2c8:	e0c1      	b.n	800f44e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f2ca:	4b40      	ldr	r3, [pc, #256]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f2cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2ce:	f003 0302 	and.w	r3, r3, #2
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d1ee      	bne.n	800f2b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f2d6:	7dfb      	ldrb	r3, [r7, #23]
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	d105      	bne.n	800f2e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f2dc:	4b3b      	ldr	r3, [pc, #236]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2e0:	4a3a      	ldr	r2, [pc, #232]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f2e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f2e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	699b      	ldr	r3, [r3, #24]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	f000 80ad 	beq.w	800f44c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f2f2:	4b36      	ldr	r3, [pc, #216]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f2f4:	689b      	ldr	r3, [r3, #8]
 800f2f6:	f003 030c 	and.w	r3, r3, #12
 800f2fa:	2b08      	cmp	r3, #8
 800f2fc:	d060      	beq.n	800f3c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	699b      	ldr	r3, [r3, #24]
 800f302:	2b02      	cmp	r3, #2
 800f304:	d145      	bne.n	800f392 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f306:	4b33      	ldr	r3, [pc, #204]	; (800f3d4 <HAL_RCC_OscConfig+0x4b4>)
 800f308:	2200      	movs	r2, #0
 800f30a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f30c:	f7fb fa8c 	bl	800a828 <HAL_GetTick>
 800f310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f312:	e008      	b.n	800f326 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f314:	f7fb fa88 	bl	800a828 <HAL_GetTick>
 800f318:	4602      	mov	r2, r0
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	1ad3      	subs	r3, r2, r3
 800f31e:	2b02      	cmp	r3, #2
 800f320:	d901      	bls.n	800f326 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800f322:	2303      	movs	r3, #3
 800f324:	e093      	b.n	800f44e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f326:	4b29      	ldr	r3, [pc, #164]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d1f0      	bne.n	800f314 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	69da      	ldr	r2, [r3, #28]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	6a1b      	ldr	r3, [r3, #32]
 800f33a:	431a      	orrs	r2, r3
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f340:	019b      	lsls	r3, r3, #6
 800f342:	431a      	orrs	r2, r3
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f348:	085b      	lsrs	r3, r3, #1
 800f34a:	3b01      	subs	r3, #1
 800f34c:	041b      	lsls	r3, r3, #16
 800f34e:	431a      	orrs	r2, r3
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f354:	061b      	lsls	r3, r3, #24
 800f356:	431a      	orrs	r2, r3
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f35c:	071b      	lsls	r3, r3, #28
 800f35e:	491b      	ldr	r1, [pc, #108]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f360:	4313      	orrs	r3, r2
 800f362:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f364:	4b1b      	ldr	r3, [pc, #108]	; (800f3d4 <HAL_RCC_OscConfig+0x4b4>)
 800f366:	2201      	movs	r2, #1
 800f368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f36a:	f7fb fa5d 	bl	800a828 <HAL_GetTick>
 800f36e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f370:	e008      	b.n	800f384 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f372:	f7fb fa59 	bl	800a828 <HAL_GetTick>
 800f376:	4602      	mov	r2, r0
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	1ad3      	subs	r3, r2, r3
 800f37c:	2b02      	cmp	r3, #2
 800f37e:	d901      	bls.n	800f384 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800f380:	2303      	movs	r3, #3
 800f382:	e064      	b.n	800f44e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f384:	4b11      	ldr	r3, [pc, #68]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d0f0      	beq.n	800f372 <HAL_RCC_OscConfig+0x452>
 800f390:	e05c      	b.n	800f44c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f392:	4b10      	ldr	r3, [pc, #64]	; (800f3d4 <HAL_RCC_OscConfig+0x4b4>)
 800f394:	2200      	movs	r2, #0
 800f396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f398:	f7fb fa46 	bl	800a828 <HAL_GetTick>
 800f39c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f39e:	e008      	b.n	800f3b2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f3a0:	f7fb fa42 	bl	800a828 <HAL_GetTick>
 800f3a4:	4602      	mov	r2, r0
 800f3a6:	693b      	ldr	r3, [r7, #16]
 800f3a8:	1ad3      	subs	r3, r2, r3
 800f3aa:	2b02      	cmp	r3, #2
 800f3ac:	d901      	bls.n	800f3b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800f3ae:	2303      	movs	r3, #3
 800f3b0:	e04d      	b.n	800f44e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f3b2:	4b06      	ldr	r3, [pc, #24]	; (800f3cc <HAL_RCC_OscConfig+0x4ac>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d1f0      	bne.n	800f3a0 <HAL_RCC_OscConfig+0x480>
 800f3be:	e045      	b.n	800f44c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	699b      	ldr	r3, [r3, #24]
 800f3c4:	2b01      	cmp	r3, #1
 800f3c6:	d107      	bne.n	800f3d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	e040      	b.n	800f44e <HAL_RCC_OscConfig+0x52e>
 800f3cc:	40023800 	.word	0x40023800
 800f3d0:	40007000 	.word	0x40007000
 800f3d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f3d8:	4b1f      	ldr	r3, [pc, #124]	; (800f458 <HAL_RCC_OscConfig+0x538>)
 800f3da:	685b      	ldr	r3, [r3, #4]
 800f3dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	699b      	ldr	r3, [r3, #24]
 800f3e2:	2b01      	cmp	r3, #1
 800f3e4:	d030      	beq.n	800f448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d129      	bne.n	800f448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f3fe:	429a      	cmp	r2, r3
 800f400:	d122      	bne.n	800f448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f402:	68fa      	ldr	r2, [r7, #12]
 800f404:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f408:	4013      	ands	r3, r2
 800f40a:	687a      	ldr	r2, [r7, #4]
 800f40c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f40e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f410:	4293      	cmp	r3, r2
 800f412:	d119      	bne.n	800f448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f41e:	085b      	lsrs	r3, r3, #1
 800f420:	3b01      	subs	r3, #1
 800f422:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f424:	429a      	cmp	r2, r3
 800f426:	d10f      	bne.n	800f448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f432:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f434:	429a      	cmp	r2, r3
 800f436:	d107      	bne.n	800f448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f442:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f444:	429a      	cmp	r2, r3
 800f446:	d001      	beq.n	800f44c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800f448:	2301      	movs	r3, #1
 800f44a:	e000      	b.n	800f44e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800f44c:	2300      	movs	r3, #0
}
 800f44e:	4618      	mov	r0, r3
 800f450:	3718      	adds	r7, #24
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}
 800f456:	bf00      	nop
 800f458:	40023800 	.word	0x40023800

0800f45c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b082      	sub	sp, #8
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d101      	bne.n	800f46e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f46a:	2301      	movs	r3, #1
 800f46c:	e041      	b.n	800f4f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f474:	b2db      	uxtb	r3, r3
 800f476:	2b00      	cmp	r3, #0
 800f478:	d106      	bne.n	800f488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2200      	movs	r2, #0
 800f47e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f7fa fcac 	bl	8009de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2202      	movs	r2, #2
 800f48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681a      	ldr	r2, [r3, #0]
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	3304      	adds	r3, #4
 800f498:	4619      	mov	r1, r3
 800f49a:	4610      	mov	r0, r2
 800f49c:	f001 fb12 	bl	8010ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2201      	movs	r2, #1
 800f4a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2201      	movs	r2, #1
 800f4b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2201      	movs	r2, #1
 800f4bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2201      	movs	r2, #1
 800f4c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2201      	movs	r2, #1
 800f4cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2201      	movs	r2, #1
 800f4d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2201      	movs	r2, #1
 800f4dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f4f0:	2300      	movs	r3, #0
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3708      	adds	r7, #8
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
	...

0800f4fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b085      	sub	sp, #20
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f50a:	b2db      	uxtb	r3, r3
 800f50c:	2b01      	cmp	r3, #1
 800f50e:	d001      	beq.n	800f514 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f510:	2301      	movs	r3, #1
 800f512:	e046      	b.n	800f5a2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2202      	movs	r2, #2
 800f518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	4a23      	ldr	r2, [pc, #140]	; (800f5b0 <HAL_TIM_Base_Start+0xb4>)
 800f522:	4293      	cmp	r3, r2
 800f524:	d022      	beq.n	800f56c <HAL_TIM_Base_Start+0x70>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f52e:	d01d      	beq.n	800f56c <HAL_TIM_Base_Start+0x70>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	4a1f      	ldr	r2, [pc, #124]	; (800f5b4 <HAL_TIM_Base_Start+0xb8>)
 800f536:	4293      	cmp	r3, r2
 800f538:	d018      	beq.n	800f56c <HAL_TIM_Base_Start+0x70>
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	4a1e      	ldr	r2, [pc, #120]	; (800f5b8 <HAL_TIM_Base_Start+0xbc>)
 800f540:	4293      	cmp	r3, r2
 800f542:	d013      	beq.n	800f56c <HAL_TIM_Base_Start+0x70>
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	4a1c      	ldr	r2, [pc, #112]	; (800f5bc <HAL_TIM_Base_Start+0xc0>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d00e      	beq.n	800f56c <HAL_TIM_Base_Start+0x70>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	4a1b      	ldr	r2, [pc, #108]	; (800f5c0 <HAL_TIM_Base_Start+0xc4>)
 800f554:	4293      	cmp	r3, r2
 800f556:	d009      	beq.n	800f56c <HAL_TIM_Base_Start+0x70>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	4a19      	ldr	r2, [pc, #100]	; (800f5c4 <HAL_TIM_Base_Start+0xc8>)
 800f55e:	4293      	cmp	r3, r2
 800f560:	d004      	beq.n	800f56c <HAL_TIM_Base_Start+0x70>
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	4a18      	ldr	r2, [pc, #96]	; (800f5c8 <HAL_TIM_Base_Start+0xcc>)
 800f568:	4293      	cmp	r3, r2
 800f56a:	d111      	bne.n	800f590 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	689b      	ldr	r3, [r3, #8]
 800f572:	f003 0307 	and.w	r3, r3, #7
 800f576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	2b06      	cmp	r3, #6
 800f57c:	d010      	beq.n	800f5a0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	f042 0201 	orr.w	r2, r2, #1
 800f58c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f58e:	e007      	b.n	800f5a0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	681a      	ldr	r2, [r3, #0]
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f042 0201 	orr.w	r2, r2, #1
 800f59e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f5a0:	2300      	movs	r3, #0
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3714      	adds	r7, #20
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ac:	4770      	bx	lr
 800f5ae:	bf00      	nop
 800f5b0:	40010000 	.word	0x40010000
 800f5b4:	40000400 	.word	0x40000400
 800f5b8:	40000800 	.word	0x40000800
 800f5bc:	40000c00 	.word	0x40000c00
 800f5c0:	40010400 	.word	0x40010400
 800f5c4:	40014000 	.word	0x40014000
 800f5c8:	40001800 	.word	0x40001800

0800f5cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b085      	sub	sp, #20
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f5da:	b2db      	uxtb	r3, r3
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	d001      	beq.n	800f5e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	e04e      	b.n	800f682 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2202      	movs	r2, #2
 800f5e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	68da      	ldr	r2, [r3, #12]
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	f042 0201 	orr.w	r2, r2, #1
 800f5fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	4a23      	ldr	r2, [pc, #140]	; (800f690 <HAL_TIM_Base_Start_IT+0xc4>)
 800f602:	4293      	cmp	r3, r2
 800f604:	d022      	beq.n	800f64c <HAL_TIM_Base_Start_IT+0x80>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f60e:	d01d      	beq.n	800f64c <HAL_TIM_Base_Start_IT+0x80>
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	4a1f      	ldr	r2, [pc, #124]	; (800f694 <HAL_TIM_Base_Start_IT+0xc8>)
 800f616:	4293      	cmp	r3, r2
 800f618:	d018      	beq.n	800f64c <HAL_TIM_Base_Start_IT+0x80>
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	4a1e      	ldr	r2, [pc, #120]	; (800f698 <HAL_TIM_Base_Start_IT+0xcc>)
 800f620:	4293      	cmp	r3, r2
 800f622:	d013      	beq.n	800f64c <HAL_TIM_Base_Start_IT+0x80>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	4a1c      	ldr	r2, [pc, #112]	; (800f69c <HAL_TIM_Base_Start_IT+0xd0>)
 800f62a:	4293      	cmp	r3, r2
 800f62c:	d00e      	beq.n	800f64c <HAL_TIM_Base_Start_IT+0x80>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	4a1b      	ldr	r2, [pc, #108]	; (800f6a0 <HAL_TIM_Base_Start_IT+0xd4>)
 800f634:	4293      	cmp	r3, r2
 800f636:	d009      	beq.n	800f64c <HAL_TIM_Base_Start_IT+0x80>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	4a19      	ldr	r2, [pc, #100]	; (800f6a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800f63e:	4293      	cmp	r3, r2
 800f640:	d004      	beq.n	800f64c <HAL_TIM_Base_Start_IT+0x80>
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	4a18      	ldr	r2, [pc, #96]	; (800f6a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800f648:	4293      	cmp	r3, r2
 800f64a:	d111      	bne.n	800f670 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	689b      	ldr	r3, [r3, #8]
 800f652:	f003 0307 	and.w	r3, r3, #7
 800f656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	2b06      	cmp	r3, #6
 800f65c:	d010      	beq.n	800f680 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	681a      	ldr	r2, [r3, #0]
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	f042 0201 	orr.w	r2, r2, #1
 800f66c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f66e:	e007      	b.n	800f680 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	681a      	ldr	r2, [r3, #0]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	f042 0201 	orr.w	r2, r2, #1
 800f67e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f680:	2300      	movs	r3, #0
}
 800f682:	4618      	mov	r0, r3
 800f684:	3714      	adds	r7, #20
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr
 800f68e:	bf00      	nop
 800f690:	40010000 	.word	0x40010000
 800f694:	40000400 	.word	0x40000400
 800f698:	40000800 	.word	0x40000800
 800f69c:	40000c00 	.word	0x40000c00
 800f6a0:	40010400 	.word	0x40010400
 800f6a4:	40014000 	.word	0x40014000
 800f6a8:	40001800 	.word	0x40001800

0800f6ac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b082      	sub	sp, #8
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d101      	bne.n	800f6be <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	e041      	b.n	800f742 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d106      	bne.n	800f6d8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f000 f839 	bl	800f74a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2202      	movs	r2, #2
 800f6dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681a      	ldr	r2, [r3, #0]
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	3304      	adds	r3, #4
 800f6e8:	4619      	mov	r1, r3
 800f6ea:	4610      	mov	r0, r2
 800f6ec:	f001 f9ea 	bl	8010ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	2201      	movs	r2, #1
 800f6f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2201      	movs	r2, #1
 800f6fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2201      	movs	r2, #1
 800f704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2201      	movs	r2, #1
 800f70c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2201      	movs	r2, #1
 800f714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2201      	movs	r2, #1
 800f71c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2201      	movs	r2, #1
 800f724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2201      	movs	r2, #1
 800f72c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2201      	movs	r2, #1
 800f734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2201      	movs	r2, #1
 800f73c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f740:	2300      	movs	r3, #0
}
 800f742:	4618      	mov	r0, r3
 800f744:	3708      	adds	r7, #8
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}

0800f74a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800f74a:	b480      	push	{r7}
 800f74c:	b083      	sub	sp, #12
 800f74e:	af00      	add	r7, sp, #0
 800f750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800f752:	bf00      	nop
 800f754:	370c      	adds	r7, #12
 800f756:	46bd      	mov	sp, r7
 800f758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75c:	4770      	bx	lr
	...

0800f760 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b084      	sub	sp, #16
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
 800f768:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d109      	bne.n	800f784 <HAL_TIM_OC_Start+0x24>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f776:	b2db      	uxtb	r3, r3
 800f778:	2b01      	cmp	r3, #1
 800f77a:	bf14      	ite	ne
 800f77c:	2301      	movne	r3, #1
 800f77e:	2300      	moveq	r3, #0
 800f780:	b2db      	uxtb	r3, r3
 800f782:	e022      	b.n	800f7ca <HAL_TIM_OC_Start+0x6a>
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	2b04      	cmp	r3, #4
 800f788:	d109      	bne.n	800f79e <HAL_TIM_OC_Start+0x3e>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f790:	b2db      	uxtb	r3, r3
 800f792:	2b01      	cmp	r3, #1
 800f794:	bf14      	ite	ne
 800f796:	2301      	movne	r3, #1
 800f798:	2300      	moveq	r3, #0
 800f79a:	b2db      	uxtb	r3, r3
 800f79c:	e015      	b.n	800f7ca <HAL_TIM_OC_Start+0x6a>
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	2b08      	cmp	r3, #8
 800f7a2:	d109      	bne.n	800f7b8 <HAL_TIM_OC_Start+0x58>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f7aa:	b2db      	uxtb	r3, r3
 800f7ac:	2b01      	cmp	r3, #1
 800f7ae:	bf14      	ite	ne
 800f7b0:	2301      	movne	r3, #1
 800f7b2:	2300      	moveq	r3, #0
 800f7b4:	b2db      	uxtb	r3, r3
 800f7b6:	e008      	b.n	800f7ca <HAL_TIM_OC_Start+0x6a>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f7be:	b2db      	uxtb	r3, r3
 800f7c0:	2b01      	cmp	r3, #1
 800f7c2:	bf14      	ite	ne
 800f7c4:	2301      	movne	r3, #1
 800f7c6:	2300      	moveq	r3, #0
 800f7c8:	b2db      	uxtb	r3, r3
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d001      	beq.n	800f7d2 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	e07c      	b.n	800f8cc <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d104      	bne.n	800f7e2 <HAL_TIM_OC_Start+0x82>
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2202      	movs	r2, #2
 800f7dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f7e0:	e013      	b.n	800f80a <HAL_TIM_OC_Start+0xaa>
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	2b04      	cmp	r3, #4
 800f7e6:	d104      	bne.n	800f7f2 <HAL_TIM_OC_Start+0x92>
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2202      	movs	r2, #2
 800f7ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f7f0:	e00b      	b.n	800f80a <HAL_TIM_OC_Start+0xaa>
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	2b08      	cmp	r3, #8
 800f7f6:	d104      	bne.n	800f802 <HAL_TIM_OC_Start+0xa2>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2202      	movs	r2, #2
 800f7fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f800:	e003      	b.n	800f80a <HAL_TIM_OC_Start+0xaa>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2202      	movs	r2, #2
 800f806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	2201      	movs	r2, #1
 800f810:	6839      	ldr	r1, [r7, #0]
 800f812:	4618      	mov	r0, r3
 800f814:	f001 fc40 	bl	8011098 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	4a2d      	ldr	r2, [pc, #180]	; (800f8d4 <HAL_TIM_OC_Start+0x174>)
 800f81e:	4293      	cmp	r3, r2
 800f820:	d004      	beq.n	800f82c <HAL_TIM_OC_Start+0xcc>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	4a2c      	ldr	r2, [pc, #176]	; (800f8d8 <HAL_TIM_OC_Start+0x178>)
 800f828:	4293      	cmp	r3, r2
 800f82a:	d101      	bne.n	800f830 <HAL_TIM_OC_Start+0xd0>
 800f82c:	2301      	movs	r3, #1
 800f82e:	e000      	b.n	800f832 <HAL_TIM_OC_Start+0xd2>
 800f830:	2300      	movs	r3, #0
 800f832:	2b00      	cmp	r3, #0
 800f834:	d007      	beq.n	800f846 <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f844:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	4a22      	ldr	r2, [pc, #136]	; (800f8d4 <HAL_TIM_OC_Start+0x174>)
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d022      	beq.n	800f896 <HAL_TIM_OC_Start+0x136>
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f858:	d01d      	beq.n	800f896 <HAL_TIM_OC_Start+0x136>
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	4a1f      	ldr	r2, [pc, #124]	; (800f8dc <HAL_TIM_OC_Start+0x17c>)
 800f860:	4293      	cmp	r3, r2
 800f862:	d018      	beq.n	800f896 <HAL_TIM_OC_Start+0x136>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	4a1d      	ldr	r2, [pc, #116]	; (800f8e0 <HAL_TIM_OC_Start+0x180>)
 800f86a:	4293      	cmp	r3, r2
 800f86c:	d013      	beq.n	800f896 <HAL_TIM_OC_Start+0x136>
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	4a1c      	ldr	r2, [pc, #112]	; (800f8e4 <HAL_TIM_OC_Start+0x184>)
 800f874:	4293      	cmp	r3, r2
 800f876:	d00e      	beq.n	800f896 <HAL_TIM_OC_Start+0x136>
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	4a16      	ldr	r2, [pc, #88]	; (800f8d8 <HAL_TIM_OC_Start+0x178>)
 800f87e:	4293      	cmp	r3, r2
 800f880:	d009      	beq.n	800f896 <HAL_TIM_OC_Start+0x136>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	4a18      	ldr	r2, [pc, #96]	; (800f8e8 <HAL_TIM_OC_Start+0x188>)
 800f888:	4293      	cmp	r3, r2
 800f88a:	d004      	beq.n	800f896 <HAL_TIM_OC_Start+0x136>
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	4a16      	ldr	r2, [pc, #88]	; (800f8ec <HAL_TIM_OC_Start+0x18c>)
 800f892:	4293      	cmp	r3, r2
 800f894:	d111      	bne.n	800f8ba <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	689b      	ldr	r3, [r3, #8]
 800f89c:	f003 0307 	and.w	r3, r3, #7
 800f8a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	2b06      	cmp	r3, #6
 800f8a6:	d010      	beq.n	800f8ca <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	681a      	ldr	r2, [r3, #0]
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	f042 0201 	orr.w	r2, r2, #1
 800f8b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f8b8:	e007      	b.n	800f8ca <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	681a      	ldr	r2, [r3, #0]
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	f042 0201 	orr.w	r2, r2, #1
 800f8c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f8ca:	2300      	movs	r3, #0
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	3710      	adds	r7, #16
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}
 800f8d4:	40010000 	.word	0x40010000
 800f8d8:	40010400 	.word	0x40010400
 800f8dc:	40000400 	.word	0x40000400
 800f8e0:	40000800 	.word	0x40000800
 800f8e4:	40000c00 	.word	0x40000c00
 800f8e8:	40014000 	.word	0x40014000
 800f8ec:	40001800 	.word	0x40001800

0800f8f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d101      	bne.n	800f902 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f8fe:	2301      	movs	r3, #1
 800f900:	e041      	b.n	800f986 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f908:	b2db      	uxtb	r3, r3
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d106      	bne.n	800f91c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2200      	movs	r2, #0
 800f912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	f000 f839 	bl	800f98e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2202      	movs	r2, #2
 800f920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681a      	ldr	r2, [r3, #0]
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	3304      	adds	r3, #4
 800f92c:	4619      	mov	r1, r3
 800f92e:	4610      	mov	r0, r2
 800f930:	f001 f8c8 	bl	8010ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2201      	movs	r2, #1
 800f938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2201      	movs	r2, #1
 800f940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2201      	movs	r2, #1
 800f948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2201      	movs	r2, #1
 800f950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2201      	movs	r2, #1
 800f958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2201      	movs	r2, #1
 800f960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2201      	movs	r2, #1
 800f968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2201      	movs	r2, #1
 800f970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2201      	movs	r2, #1
 800f978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2201      	movs	r2, #1
 800f980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f984:	2300      	movs	r3, #0
}
 800f986:	4618      	mov	r0, r3
 800f988:	3708      	adds	r7, #8
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}

0800f98e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f98e:	b480      	push	{r7}
 800f990:	b083      	sub	sp, #12
 800f992:	af00      	add	r7, sp, #0
 800f994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f996:	bf00      	nop
 800f998:	370c      	adds	r7, #12
 800f99a:	46bd      	mov	sp, r7
 800f99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a0:	4770      	bx	lr
	...

0800f9a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b084      	sub	sp, #16
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d109      	bne.n	800f9c8 <HAL_TIM_PWM_Start+0x24>
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f9ba:	b2db      	uxtb	r3, r3
 800f9bc:	2b01      	cmp	r3, #1
 800f9be:	bf14      	ite	ne
 800f9c0:	2301      	movne	r3, #1
 800f9c2:	2300      	moveq	r3, #0
 800f9c4:	b2db      	uxtb	r3, r3
 800f9c6:	e022      	b.n	800fa0e <HAL_TIM_PWM_Start+0x6a>
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	2b04      	cmp	r3, #4
 800f9cc:	d109      	bne.n	800f9e2 <HAL_TIM_PWM_Start+0x3e>
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f9d4:	b2db      	uxtb	r3, r3
 800f9d6:	2b01      	cmp	r3, #1
 800f9d8:	bf14      	ite	ne
 800f9da:	2301      	movne	r3, #1
 800f9dc:	2300      	moveq	r3, #0
 800f9de:	b2db      	uxtb	r3, r3
 800f9e0:	e015      	b.n	800fa0e <HAL_TIM_PWM_Start+0x6a>
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	2b08      	cmp	r3, #8
 800f9e6:	d109      	bne.n	800f9fc <HAL_TIM_PWM_Start+0x58>
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f9ee:	b2db      	uxtb	r3, r3
 800f9f0:	2b01      	cmp	r3, #1
 800f9f2:	bf14      	ite	ne
 800f9f4:	2301      	movne	r3, #1
 800f9f6:	2300      	moveq	r3, #0
 800f9f8:	b2db      	uxtb	r3, r3
 800f9fa:	e008      	b.n	800fa0e <HAL_TIM_PWM_Start+0x6a>
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fa02:	b2db      	uxtb	r3, r3
 800fa04:	2b01      	cmp	r3, #1
 800fa06:	bf14      	ite	ne
 800fa08:	2301      	movne	r3, #1
 800fa0a:	2300      	moveq	r3, #0
 800fa0c:	b2db      	uxtb	r3, r3
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d001      	beq.n	800fa16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800fa12:	2301      	movs	r3, #1
 800fa14:	e07c      	b.n	800fb10 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d104      	bne.n	800fa26 <HAL_TIM_PWM_Start+0x82>
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2202      	movs	r2, #2
 800fa20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fa24:	e013      	b.n	800fa4e <HAL_TIM_PWM_Start+0xaa>
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	2b04      	cmp	r3, #4
 800fa2a:	d104      	bne.n	800fa36 <HAL_TIM_PWM_Start+0x92>
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2202      	movs	r2, #2
 800fa30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fa34:	e00b      	b.n	800fa4e <HAL_TIM_PWM_Start+0xaa>
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	2b08      	cmp	r3, #8
 800fa3a:	d104      	bne.n	800fa46 <HAL_TIM_PWM_Start+0xa2>
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2202      	movs	r2, #2
 800fa40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fa44:	e003      	b.n	800fa4e <HAL_TIM_PWM_Start+0xaa>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	2202      	movs	r2, #2
 800fa4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	2201      	movs	r2, #1
 800fa54:	6839      	ldr	r1, [r7, #0]
 800fa56:	4618      	mov	r0, r3
 800fa58:	f001 fb1e 	bl	8011098 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	4a2d      	ldr	r2, [pc, #180]	; (800fb18 <HAL_TIM_PWM_Start+0x174>)
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d004      	beq.n	800fa70 <HAL_TIM_PWM_Start+0xcc>
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	4a2c      	ldr	r2, [pc, #176]	; (800fb1c <HAL_TIM_PWM_Start+0x178>)
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d101      	bne.n	800fa74 <HAL_TIM_PWM_Start+0xd0>
 800fa70:	2301      	movs	r3, #1
 800fa72:	e000      	b.n	800fa76 <HAL_TIM_PWM_Start+0xd2>
 800fa74:	2300      	movs	r3, #0
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d007      	beq.n	800fa8a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fa88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	4a22      	ldr	r2, [pc, #136]	; (800fb18 <HAL_TIM_PWM_Start+0x174>)
 800fa90:	4293      	cmp	r3, r2
 800fa92:	d022      	beq.n	800fada <HAL_TIM_PWM_Start+0x136>
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa9c:	d01d      	beq.n	800fada <HAL_TIM_PWM_Start+0x136>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	4a1f      	ldr	r2, [pc, #124]	; (800fb20 <HAL_TIM_PWM_Start+0x17c>)
 800faa4:	4293      	cmp	r3, r2
 800faa6:	d018      	beq.n	800fada <HAL_TIM_PWM_Start+0x136>
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	4a1d      	ldr	r2, [pc, #116]	; (800fb24 <HAL_TIM_PWM_Start+0x180>)
 800faae:	4293      	cmp	r3, r2
 800fab0:	d013      	beq.n	800fada <HAL_TIM_PWM_Start+0x136>
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	4a1c      	ldr	r2, [pc, #112]	; (800fb28 <HAL_TIM_PWM_Start+0x184>)
 800fab8:	4293      	cmp	r3, r2
 800faba:	d00e      	beq.n	800fada <HAL_TIM_PWM_Start+0x136>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	4a16      	ldr	r2, [pc, #88]	; (800fb1c <HAL_TIM_PWM_Start+0x178>)
 800fac2:	4293      	cmp	r3, r2
 800fac4:	d009      	beq.n	800fada <HAL_TIM_PWM_Start+0x136>
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	4a18      	ldr	r2, [pc, #96]	; (800fb2c <HAL_TIM_PWM_Start+0x188>)
 800facc:	4293      	cmp	r3, r2
 800face:	d004      	beq.n	800fada <HAL_TIM_PWM_Start+0x136>
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	4a16      	ldr	r2, [pc, #88]	; (800fb30 <HAL_TIM_PWM_Start+0x18c>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d111      	bne.n	800fafe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	689b      	ldr	r3, [r3, #8]
 800fae0:	f003 0307 	and.w	r3, r3, #7
 800fae4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	2b06      	cmp	r3, #6
 800faea:	d010      	beq.n	800fb0e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	681a      	ldr	r2, [r3, #0]
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	f042 0201 	orr.w	r2, r2, #1
 800fafa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fafc:	e007      	b.n	800fb0e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	681a      	ldr	r2, [r3, #0]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	f042 0201 	orr.w	r2, r2, #1
 800fb0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fb0e:	2300      	movs	r3, #0
}
 800fb10:	4618      	mov	r0, r3
 800fb12:	3710      	adds	r7, #16
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}
 800fb18:	40010000 	.word	0x40010000
 800fb1c:	40010400 	.word	0x40010400
 800fb20:	40000400 	.word	0x40000400
 800fb24:	40000800 	.word	0x40000800
 800fb28:	40000c00 	.word	0x40000c00
 800fb2c:	40014000 	.word	0x40014000
 800fb30:	40001800 	.word	0x40001800

0800fb34 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b086      	sub	sp, #24
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	60f8      	str	r0, [r7, #12]
 800fb3c:	60b9      	str	r1, [r7, #8]
 800fb3e:	607a      	str	r2, [r7, #4]
 800fb40:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800fb42:	2300      	movs	r3, #0
 800fb44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d109      	bne.n	800fb60 <HAL_TIM_PWM_Start_DMA+0x2c>
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fb52:	b2db      	uxtb	r3, r3
 800fb54:	2b02      	cmp	r3, #2
 800fb56:	bf0c      	ite	eq
 800fb58:	2301      	moveq	r3, #1
 800fb5a:	2300      	movne	r3, #0
 800fb5c:	b2db      	uxtb	r3, r3
 800fb5e:	e022      	b.n	800fba6 <HAL_TIM_PWM_Start_DMA+0x72>
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	2b04      	cmp	r3, #4
 800fb64:	d109      	bne.n	800fb7a <HAL_TIM_PWM_Start_DMA+0x46>
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fb6c:	b2db      	uxtb	r3, r3
 800fb6e:	2b02      	cmp	r3, #2
 800fb70:	bf0c      	ite	eq
 800fb72:	2301      	moveq	r3, #1
 800fb74:	2300      	movne	r3, #0
 800fb76:	b2db      	uxtb	r3, r3
 800fb78:	e015      	b.n	800fba6 <HAL_TIM_PWM_Start_DMA+0x72>
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	2b08      	cmp	r3, #8
 800fb7e:	d109      	bne.n	800fb94 <HAL_TIM_PWM_Start_DMA+0x60>
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb86:	b2db      	uxtb	r3, r3
 800fb88:	2b02      	cmp	r3, #2
 800fb8a:	bf0c      	ite	eq
 800fb8c:	2301      	moveq	r3, #1
 800fb8e:	2300      	movne	r3, #0
 800fb90:	b2db      	uxtb	r3, r3
 800fb92:	e008      	b.n	800fba6 <HAL_TIM_PWM_Start_DMA+0x72>
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fb9a:	b2db      	uxtb	r3, r3
 800fb9c:	2b02      	cmp	r3, #2
 800fb9e:	bf0c      	ite	eq
 800fba0:	2301      	moveq	r3, #1
 800fba2:	2300      	movne	r3, #0
 800fba4:	b2db      	uxtb	r3, r3
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d001      	beq.n	800fbae <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800fbaa:	2302      	movs	r3, #2
 800fbac:	e171      	b.n	800fe92 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d109      	bne.n	800fbc8 <HAL_TIM_PWM_Start_DMA+0x94>
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fbba:	b2db      	uxtb	r3, r3
 800fbbc:	2b01      	cmp	r3, #1
 800fbbe:	bf0c      	ite	eq
 800fbc0:	2301      	moveq	r3, #1
 800fbc2:	2300      	movne	r3, #0
 800fbc4:	b2db      	uxtb	r3, r3
 800fbc6:	e022      	b.n	800fc0e <HAL_TIM_PWM_Start_DMA+0xda>
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	2b04      	cmp	r3, #4
 800fbcc:	d109      	bne.n	800fbe2 <HAL_TIM_PWM_Start_DMA+0xae>
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fbd4:	b2db      	uxtb	r3, r3
 800fbd6:	2b01      	cmp	r3, #1
 800fbd8:	bf0c      	ite	eq
 800fbda:	2301      	moveq	r3, #1
 800fbdc:	2300      	movne	r3, #0
 800fbde:	b2db      	uxtb	r3, r3
 800fbe0:	e015      	b.n	800fc0e <HAL_TIM_PWM_Start_DMA+0xda>
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	2b08      	cmp	r3, #8
 800fbe6:	d109      	bne.n	800fbfc <HAL_TIM_PWM_Start_DMA+0xc8>
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fbee:	b2db      	uxtb	r3, r3
 800fbf0:	2b01      	cmp	r3, #1
 800fbf2:	bf0c      	ite	eq
 800fbf4:	2301      	moveq	r3, #1
 800fbf6:	2300      	movne	r3, #0
 800fbf8:	b2db      	uxtb	r3, r3
 800fbfa:	e008      	b.n	800fc0e <HAL_TIM_PWM_Start_DMA+0xda>
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fc02:	b2db      	uxtb	r3, r3
 800fc04:	2b01      	cmp	r3, #1
 800fc06:	bf0c      	ite	eq
 800fc08:	2301      	moveq	r3, #1
 800fc0a:	2300      	movne	r3, #0
 800fc0c:	b2db      	uxtb	r3, r3
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d024      	beq.n	800fc5c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d104      	bne.n	800fc22 <HAL_TIM_PWM_Start_DMA+0xee>
 800fc18:	887b      	ldrh	r3, [r7, #2]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d001      	beq.n	800fc22 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800fc1e:	2301      	movs	r3, #1
 800fc20:	e137      	b.n	800fe92 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d104      	bne.n	800fc32 <HAL_TIM_PWM_Start_DMA+0xfe>
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	2202      	movs	r2, #2
 800fc2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fc30:	e016      	b.n	800fc60 <HAL_TIM_PWM_Start_DMA+0x12c>
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	2b04      	cmp	r3, #4
 800fc36:	d104      	bne.n	800fc42 <HAL_TIM_PWM_Start_DMA+0x10e>
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	2202      	movs	r2, #2
 800fc3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fc40:	e00e      	b.n	800fc60 <HAL_TIM_PWM_Start_DMA+0x12c>
 800fc42:	68bb      	ldr	r3, [r7, #8]
 800fc44:	2b08      	cmp	r3, #8
 800fc46:	d104      	bne.n	800fc52 <HAL_TIM_PWM_Start_DMA+0x11e>
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	2202      	movs	r2, #2
 800fc4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fc50:	e006      	b.n	800fc60 <HAL_TIM_PWM_Start_DMA+0x12c>
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	2202      	movs	r2, #2
 800fc56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fc5a:	e001      	b.n	800fc60 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	e118      	b.n	800fe92 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	2b0c      	cmp	r3, #12
 800fc64:	f200 80ae 	bhi.w	800fdc4 <HAL_TIM_PWM_Start_DMA+0x290>
 800fc68:	a201      	add	r2, pc, #4	; (adr r2, 800fc70 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800fc6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc6e:	bf00      	nop
 800fc70:	0800fca5 	.word	0x0800fca5
 800fc74:	0800fdc5 	.word	0x0800fdc5
 800fc78:	0800fdc5 	.word	0x0800fdc5
 800fc7c:	0800fdc5 	.word	0x0800fdc5
 800fc80:	0800fced 	.word	0x0800fced
 800fc84:	0800fdc5 	.word	0x0800fdc5
 800fc88:	0800fdc5 	.word	0x0800fdc5
 800fc8c:	0800fdc5 	.word	0x0800fdc5
 800fc90:	0800fd35 	.word	0x0800fd35
 800fc94:	0800fdc5 	.word	0x0800fdc5
 800fc98:	0800fdc5 	.word	0x0800fdc5
 800fc9c:	0800fdc5 	.word	0x0800fdc5
 800fca0:	0800fd7d 	.word	0x0800fd7d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fca8:	4a7c      	ldr	r2, [pc, #496]	; (800fe9c <HAL_TIM_PWM_Start_DMA+0x368>)
 800fcaa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcb0:	4a7b      	ldr	r2, [pc, #492]	; (800fea0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800fcb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcb8:	4a7a      	ldr	r2, [pc, #488]	; (800fea4 <HAL_TIM_PWM_Start_DMA+0x370>)
 800fcba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fcc0:	6879      	ldr	r1, [r7, #4]
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	3334      	adds	r3, #52	; 0x34
 800fcc8:	461a      	mov	r2, r3
 800fcca:	887b      	ldrh	r3, [r7, #2]
 800fccc:	f7fb fb90 	bl	800b3f0 <HAL_DMA_Start_IT>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d001      	beq.n	800fcda <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	e0db      	b.n	800fe92 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	68da      	ldr	r2, [r3, #12]
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fce8:	60da      	str	r2, [r3, #12]
      break;
 800fcea:	e06e      	b.n	800fdca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcf0:	4a6a      	ldr	r2, [pc, #424]	; (800fe9c <HAL_TIM_PWM_Start_DMA+0x368>)
 800fcf2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcf8:	4a69      	ldr	r2, [pc, #420]	; (800fea0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800fcfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd00:	4a68      	ldr	r2, [pc, #416]	; (800fea4 <HAL_TIM_PWM_Start_DMA+0x370>)
 800fd02:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800fd08:	6879      	ldr	r1, [r7, #4]
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	3338      	adds	r3, #56	; 0x38
 800fd10:	461a      	mov	r2, r3
 800fd12:	887b      	ldrh	r3, [r7, #2]
 800fd14:	f7fb fb6c 	bl	800b3f0 <HAL_DMA_Start_IT>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d001      	beq.n	800fd22 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fd1e:	2301      	movs	r3, #1
 800fd20:	e0b7      	b.n	800fe92 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	68da      	ldr	r2, [r3, #12]
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fd30:	60da      	str	r2, [r3, #12]
      break;
 800fd32:	e04a      	b.n	800fdca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd38:	4a58      	ldr	r2, [pc, #352]	; (800fe9c <HAL_TIM_PWM_Start_DMA+0x368>)
 800fd3a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd40:	4a57      	ldr	r2, [pc, #348]	; (800fea0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800fd42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd48:	4a56      	ldr	r2, [pc, #344]	; (800fea4 <HAL_TIM_PWM_Start_DMA+0x370>)
 800fd4a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800fd50:	6879      	ldr	r1, [r7, #4]
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	333c      	adds	r3, #60	; 0x3c
 800fd58:	461a      	mov	r2, r3
 800fd5a:	887b      	ldrh	r3, [r7, #2]
 800fd5c:	f7fb fb48 	bl	800b3f0 <HAL_DMA_Start_IT>
 800fd60:	4603      	mov	r3, r0
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d001      	beq.n	800fd6a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fd66:	2301      	movs	r3, #1
 800fd68:	e093      	b.n	800fe92 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	68da      	ldr	r2, [r3, #12]
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fd78:	60da      	str	r2, [r3, #12]
      break;
 800fd7a:	e026      	b.n	800fdca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd80:	4a46      	ldr	r2, [pc, #280]	; (800fe9c <HAL_TIM_PWM_Start_DMA+0x368>)
 800fd82:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd88:	4a45      	ldr	r2, [pc, #276]	; (800fea0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800fd8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd90:	4a44      	ldr	r2, [pc, #272]	; (800fea4 <HAL_TIM_PWM_Start_DMA+0x370>)
 800fd92:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fd98:	6879      	ldr	r1, [r7, #4]
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	3340      	adds	r3, #64	; 0x40
 800fda0:	461a      	mov	r2, r3
 800fda2:	887b      	ldrh	r3, [r7, #2]
 800fda4:	f7fb fb24 	bl	800b3f0 <HAL_DMA_Start_IT>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d001      	beq.n	800fdb2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fdae:	2301      	movs	r3, #1
 800fdb0:	e06f      	b.n	800fe92 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	68da      	ldr	r2, [r3, #12]
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fdc0:	60da      	str	r2, [r3, #12]
      break;
 800fdc2:	e002      	b.n	800fdca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	75fb      	strb	r3, [r7, #23]
      break;
 800fdc8:	bf00      	nop
  }

  if (status == HAL_OK)
 800fdca:	7dfb      	ldrb	r3, [r7, #23]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d15f      	bne.n	800fe90 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	68b9      	ldr	r1, [r7, #8]
 800fdd8:	4618      	mov	r0, r3
 800fdda:	f001 f95d 	bl	8011098 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	4a31      	ldr	r2, [pc, #196]	; (800fea8 <HAL_TIM_PWM_Start_DMA+0x374>)
 800fde4:	4293      	cmp	r3, r2
 800fde6:	d004      	beq.n	800fdf2 <HAL_TIM_PWM_Start_DMA+0x2be>
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	4a2f      	ldr	r2, [pc, #188]	; (800feac <HAL_TIM_PWM_Start_DMA+0x378>)
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d101      	bne.n	800fdf6 <HAL_TIM_PWM_Start_DMA+0x2c2>
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	e000      	b.n	800fdf8 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d007      	beq.n	800fe0c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fe0a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	4a25      	ldr	r2, [pc, #148]	; (800fea8 <HAL_TIM_PWM_Start_DMA+0x374>)
 800fe12:	4293      	cmp	r3, r2
 800fe14:	d022      	beq.n	800fe5c <HAL_TIM_PWM_Start_DMA+0x328>
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe1e:	d01d      	beq.n	800fe5c <HAL_TIM_PWM_Start_DMA+0x328>
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	4a22      	ldr	r2, [pc, #136]	; (800feb0 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800fe26:	4293      	cmp	r3, r2
 800fe28:	d018      	beq.n	800fe5c <HAL_TIM_PWM_Start_DMA+0x328>
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	4a21      	ldr	r2, [pc, #132]	; (800feb4 <HAL_TIM_PWM_Start_DMA+0x380>)
 800fe30:	4293      	cmp	r3, r2
 800fe32:	d013      	beq.n	800fe5c <HAL_TIM_PWM_Start_DMA+0x328>
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	4a1f      	ldr	r2, [pc, #124]	; (800feb8 <HAL_TIM_PWM_Start_DMA+0x384>)
 800fe3a:	4293      	cmp	r3, r2
 800fe3c:	d00e      	beq.n	800fe5c <HAL_TIM_PWM_Start_DMA+0x328>
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	4a1a      	ldr	r2, [pc, #104]	; (800feac <HAL_TIM_PWM_Start_DMA+0x378>)
 800fe44:	4293      	cmp	r3, r2
 800fe46:	d009      	beq.n	800fe5c <HAL_TIM_PWM_Start_DMA+0x328>
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	4a1b      	ldr	r2, [pc, #108]	; (800febc <HAL_TIM_PWM_Start_DMA+0x388>)
 800fe4e:	4293      	cmp	r3, r2
 800fe50:	d004      	beq.n	800fe5c <HAL_TIM_PWM_Start_DMA+0x328>
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	4a1a      	ldr	r2, [pc, #104]	; (800fec0 <HAL_TIM_PWM_Start_DMA+0x38c>)
 800fe58:	4293      	cmp	r3, r2
 800fe5a:	d111      	bne.n	800fe80 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	689b      	ldr	r3, [r3, #8]
 800fe62:	f003 0307 	and.w	r3, r3, #7
 800fe66:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe68:	693b      	ldr	r3, [r7, #16]
 800fe6a:	2b06      	cmp	r3, #6
 800fe6c:	d010      	beq.n	800fe90 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	681a      	ldr	r2, [r3, #0]
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	f042 0201 	orr.w	r2, r2, #1
 800fe7c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe7e:	e007      	b.n	800fe90 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	681a      	ldr	r2, [r3, #0]
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	f042 0201 	orr.w	r2, r2, #1
 800fe8e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800fe90:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	3718      	adds	r7, #24
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}
 800fe9a:	bf00      	nop
 800fe9c:	080109b5 	.word	0x080109b5
 800fea0:	08010a5d 	.word	0x08010a5d
 800fea4:	08010923 	.word	0x08010923
 800fea8:	40010000 	.word	0x40010000
 800feac:	40010400 	.word	0x40010400
 800feb0:	40000400 	.word	0x40000400
 800feb4:	40000800 	.word	0x40000800
 800feb8:	40000c00 	.word	0x40000c00
 800febc:	40014000 	.word	0x40014000
 800fec0:	40001800 	.word	0x40001800

0800fec4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b084      	sub	sp, #16
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fece:	2300      	movs	r3, #0
 800fed0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	2b0c      	cmp	r3, #12
 800fed6:	d855      	bhi.n	800ff84 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800fed8:	a201      	add	r2, pc, #4	; (adr r2, 800fee0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800feda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fede:	bf00      	nop
 800fee0:	0800ff15 	.word	0x0800ff15
 800fee4:	0800ff85 	.word	0x0800ff85
 800fee8:	0800ff85 	.word	0x0800ff85
 800feec:	0800ff85 	.word	0x0800ff85
 800fef0:	0800ff31 	.word	0x0800ff31
 800fef4:	0800ff85 	.word	0x0800ff85
 800fef8:	0800ff85 	.word	0x0800ff85
 800fefc:	0800ff85 	.word	0x0800ff85
 800ff00:	0800ff4d 	.word	0x0800ff4d
 800ff04:	0800ff85 	.word	0x0800ff85
 800ff08:	0800ff85 	.word	0x0800ff85
 800ff0c:	0800ff85 	.word	0x0800ff85
 800ff10:	0800ff69 	.word	0x0800ff69
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	68da      	ldr	r2, [r3, #12]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ff22:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f7fb fb29 	bl	800b580 <HAL_DMA_Abort_IT>
      break;
 800ff2e:	e02c      	b.n	800ff8a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	68da      	ldr	r2, [r3, #12]
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff3e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff44:	4618      	mov	r0, r3
 800ff46:	f7fb fb1b 	bl	800b580 <HAL_DMA_Abort_IT>
      break;
 800ff4a:	e01e      	b.n	800ff8a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	68da      	ldr	r2, [r3, #12]
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ff5a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7fb fb0d 	bl	800b580 <HAL_DMA_Abort_IT>
      break;
 800ff66:	e010      	b.n	800ff8a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	68da      	ldr	r2, [r3, #12]
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ff76:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f7fb faff 	bl	800b580 <HAL_DMA_Abort_IT>
      break;
 800ff82:	e002      	b.n	800ff8a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800ff84:	2301      	movs	r3, #1
 800ff86:	73fb      	strb	r3, [r7, #15]
      break;
 800ff88:	bf00      	nop
  }

  if (status == HAL_OK)
 800ff8a:	7bfb      	ldrb	r3, [r7, #15]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d161      	bne.n	8010054 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	2200      	movs	r2, #0
 800ff96:	6839      	ldr	r1, [r7, #0]
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f001 f87d 	bl	8011098 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	4a2f      	ldr	r2, [pc, #188]	; (8010060 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 800ffa4:	4293      	cmp	r3, r2
 800ffa6:	d004      	beq.n	800ffb2 <HAL_TIM_PWM_Stop_DMA+0xee>
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	4a2d      	ldr	r2, [pc, #180]	; (8010064 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 800ffae:	4293      	cmp	r3, r2
 800ffb0:	d101      	bne.n	800ffb6 <HAL_TIM_PWM_Stop_DMA+0xf2>
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	e000      	b.n	800ffb8 <HAL_TIM_PWM_Stop_DMA+0xf4>
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d017      	beq.n	800ffec <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	6a1a      	ldr	r2, [r3, #32]
 800ffc2:	f241 1311 	movw	r3, #4369	; 0x1111
 800ffc6:	4013      	ands	r3, r2
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d10f      	bne.n	800ffec <HAL_TIM_PWM_Stop_DMA+0x128>
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	6a1a      	ldr	r2, [r3, #32]
 800ffd2:	f240 4344 	movw	r3, #1092	; 0x444
 800ffd6:	4013      	ands	r3, r2
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d107      	bne.n	800ffec <HAL_TIM_PWM_Stop_DMA+0x128>
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ffea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	6a1a      	ldr	r2, [r3, #32]
 800fff2:	f241 1311 	movw	r3, #4369	; 0x1111
 800fff6:	4013      	ands	r3, r2
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d10f      	bne.n	801001c <HAL_TIM_PWM_Stop_DMA+0x158>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	6a1a      	ldr	r2, [r3, #32]
 8010002:	f240 4344 	movw	r3, #1092	; 0x444
 8010006:	4013      	ands	r3, r2
 8010008:	2b00      	cmp	r3, #0
 801000a:	d107      	bne.n	801001c <HAL_TIM_PWM_Stop_DMA+0x158>
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	681a      	ldr	r2, [r3, #0]
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	f022 0201 	bic.w	r2, r2, #1
 801001a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d104      	bne.n	801002c <HAL_TIM_PWM_Stop_DMA+0x168>
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2201      	movs	r2, #1
 8010026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801002a:	e013      	b.n	8010054 <HAL_TIM_PWM_Stop_DMA+0x190>
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	2b04      	cmp	r3, #4
 8010030:	d104      	bne.n	801003c <HAL_TIM_PWM_Stop_DMA+0x178>
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2201      	movs	r2, #1
 8010036:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801003a:	e00b      	b.n	8010054 <HAL_TIM_PWM_Stop_DMA+0x190>
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	2b08      	cmp	r3, #8
 8010040:	d104      	bne.n	801004c <HAL_TIM_PWM_Stop_DMA+0x188>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2201      	movs	r2, #1
 8010046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801004a:	e003      	b.n	8010054 <HAL_TIM_PWM_Stop_DMA+0x190>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2201      	movs	r2, #1
 8010050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8010054:	7bfb      	ldrb	r3, [r7, #15]
}
 8010056:	4618      	mov	r0, r3
 8010058:	3710      	adds	r7, #16
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}
 801005e:	bf00      	nop
 8010060:	40010000 	.word	0x40010000
 8010064:	40010400 	.word	0x40010400

08010068 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b086      	sub	sp, #24
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d101      	bne.n	801007c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8010078:	2301      	movs	r3, #1
 801007a:	e097      	b.n	80101ac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010082:	b2db      	uxtb	r3, r3
 8010084:	2b00      	cmp	r3, #0
 8010086:	d106      	bne.n	8010096 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2200      	movs	r2, #0
 801008c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f7f9 ff79 	bl	8009f88 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2202      	movs	r2, #2
 801009a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	689b      	ldr	r3, [r3, #8]
 80100a4:	687a      	ldr	r2, [r7, #4]
 80100a6:	6812      	ldr	r2, [r2, #0]
 80100a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80100ac:	f023 0307 	bic.w	r3, r3, #7
 80100b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	3304      	adds	r3, #4
 80100ba:	4619      	mov	r1, r3
 80100bc:	4610      	mov	r0, r2
 80100be:	f000 fd01 	bl	8010ac4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	689b      	ldr	r3, [r3, #8]
 80100c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	699b      	ldr	r3, [r3, #24]
 80100d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	6a1b      	ldr	r3, [r3, #32]
 80100d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	697a      	ldr	r2, [r7, #20]
 80100e0:	4313      	orrs	r3, r2
 80100e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80100e4:	693b      	ldr	r3, [r7, #16]
 80100e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80100ea:	f023 0303 	bic.w	r3, r3, #3
 80100ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	689a      	ldr	r2, [r3, #8]
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	699b      	ldr	r3, [r3, #24]
 80100f8:	021b      	lsls	r3, r3, #8
 80100fa:	4313      	orrs	r3, r2
 80100fc:	693a      	ldr	r2, [r7, #16]
 80100fe:	4313      	orrs	r3, r2
 8010100:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8010102:	693b      	ldr	r3, [r7, #16]
 8010104:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8010108:	f023 030c 	bic.w	r3, r3, #12
 801010c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 801010e:	693b      	ldr	r3, [r7, #16]
 8010110:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010114:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010118:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	68da      	ldr	r2, [r3, #12]
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	69db      	ldr	r3, [r3, #28]
 8010122:	021b      	lsls	r3, r3, #8
 8010124:	4313      	orrs	r3, r2
 8010126:	693a      	ldr	r2, [r7, #16]
 8010128:	4313      	orrs	r3, r2
 801012a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	691b      	ldr	r3, [r3, #16]
 8010130:	011a      	lsls	r2, r3, #4
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	6a1b      	ldr	r3, [r3, #32]
 8010136:	031b      	lsls	r3, r3, #12
 8010138:	4313      	orrs	r3, r2
 801013a:	693a      	ldr	r2, [r7, #16]
 801013c:	4313      	orrs	r3, r2
 801013e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8010146:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 801014e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	685a      	ldr	r2, [r3, #4]
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	695b      	ldr	r3, [r3, #20]
 8010158:	011b      	lsls	r3, r3, #4
 801015a:	4313      	orrs	r3, r2
 801015c:	68fa      	ldr	r2, [r7, #12]
 801015e:	4313      	orrs	r3, r2
 8010160:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	697a      	ldr	r2, [r7, #20]
 8010168:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	693a      	ldr	r2, [r7, #16]
 8010170:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	68fa      	ldr	r2, [r7, #12]
 8010178:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2201      	movs	r2, #1
 801017e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2201      	movs	r2, #1
 8010186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2201      	movs	r2, #1
 801018e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2201      	movs	r2, #1
 8010196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2201      	movs	r2, #1
 801019e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2201      	movs	r2, #1
 80101a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80101aa:	2300      	movs	r3, #0
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3718      	adds	r7, #24
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd80      	pop	{r7, pc}

080101b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b084      	sub	sp, #16
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80101c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80101cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80101d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80101dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d110      	bne.n	8010206 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80101e4:	7bfb      	ldrb	r3, [r7, #15]
 80101e6:	2b01      	cmp	r3, #1
 80101e8:	d102      	bne.n	80101f0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80101ea:	7b7b      	ldrb	r3, [r7, #13]
 80101ec:	2b01      	cmp	r3, #1
 80101ee:	d001      	beq.n	80101f4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80101f0:	2301      	movs	r3, #1
 80101f2:	e069      	b.n	80102c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2202      	movs	r2, #2
 80101f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2202      	movs	r2, #2
 8010200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010204:	e031      	b.n	801026a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	2b04      	cmp	r3, #4
 801020a:	d110      	bne.n	801022e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 801020c:	7bbb      	ldrb	r3, [r7, #14]
 801020e:	2b01      	cmp	r3, #1
 8010210:	d102      	bne.n	8010218 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8010212:	7b3b      	ldrb	r3, [r7, #12]
 8010214:	2b01      	cmp	r3, #1
 8010216:	d001      	beq.n	801021c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8010218:	2301      	movs	r3, #1
 801021a:	e055      	b.n	80102c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2202      	movs	r2, #2
 8010220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2202      	movs	r2, #2
 8010228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801022c:	e01d      	b.n	801026a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801022e:	7bfb      	ldrb	r3, [r7, #15]
 8010230:	2b01      	cmp	r3, #1
 8010232:	d108      	bne.n	8010246 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8010234:	7bbb      	ldrb	r3, [r7, #14]
 8010236:	2b01      	cmp	r3, #1
 8010238:	d105      	bne.n	8010246 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801023a:	7b7b      	ldrb	r3, [r7, #13]
 801023c:	2b01      	cmp	r3, #1
 801023e:	d102      	bne.n	8010246 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8010240:	7b3b      	ldrb	r3, [r7, #12]
 8010242:	2b01      	cmp	r3, #1
 8010244:	d001      	beq.n	801024a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8010246:	2301      	movs	r3, #1
 8010248:	e03e      	b.n	80102c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	2202      	movs	r2, #2
 801024e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	2202      	movs	r2, #2
 8010256:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	2202      	movs	r2, #2
 801025e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	2202      	movs	r2, #2
 8010266:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d003      	beq.n	8010278 <HAL_TIM_Encoder_Start+0xc4>
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	2b04      	cmp	r3, #4
 8010274:	d008      	beq.n	8010288 <HAL_TIM_Encoder_Start+0xd4>
 8010276:	e00f      	b.n	8010298 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	2201      	movs	r2, #1
 801027e:	2100      	movs	r1, #0
 8010280:	4618      	mov	r0, r3
 8010282:	f000 ff09 	bl	8011098 <TIM_CCxChannelCmd>
      break;
 8010286:	e016      	b.n	80102b6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	2201      	movs	r2, #1
 801028e:	2104      	movs	r1, #4
 8010290:	4618      	mov	r0, r3
 8010292:	f000 ff01 	bl	8011098 <TIM_CCxChannelCmd>
      break;
 8010296:	e00e      	b.n	80102b6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	2201      	movs	r2, #1
 801029e:	2100      	movs	r1, #0
 80102a0:	4618      	mov	r0, r3
 80102a2:	f000 fef9 	bl	8011098 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	2201      	movs	r2, #1
 80102ac:	2104      	movs	r1, #4
 80102ae:	4618      	mov	r0, r3
 80102b0:	f000 fef2 	bl	8011098 <TIM_CCxChannelCmd>
      break;
 80102b4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	681a      	ldr	r2, [r3, #0]
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	f042 0201 	orr.w	r2, r2, #1
 80102c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80102c6:	2300      	movs	r3, #0
}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3710      	adds	r7, #16
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}

080102d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b082      	sub	sp, #8
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	691b      	ldr	r3, [r3, #16]
 80102de:	f003 0302 	and.w	r3, r3, #2
 80102e2:	2b02      	cmp	r3, #2
 80102e4:	d122      	bne.n	801032c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	68db      	ldr	r3, [r3, #12]
 80102ec:	f003 0302 	and.w	r3, r3, #2
 80102f0:	2b02      	cmp	r3, #2
 80102f2:	d11b      	bne.n	801032c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	f06f 0202 	mvn.w	r2, #2
 80102fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2201      	movs	r2, #1
 8010302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	699b      	ldr	r3, [r3, #24]
 801030a:	f003 0303 	and.w	r3, r3, #3
 801030e:	2b00      	cmp	r3, #0
 8010310:	d003      	beq.n	801031a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010312:	6878      	ldr	r0, [r7, #4]
 8010314:	f000 fadd 	bl	80108d2 <HAL_TIM_IC_CaptureCallback>
 8010318:	e005      	b.n	8010326 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f000 facf 	bl	80108be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f7f6 fabb 	bl	800689c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2200      	movs	r2, #0
 801032a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	691b      	ldr	r3, [r3, #16]
 8010332:	f003 0304 	and.w	r3, r3, #4
 8010336:	2b04      	cmp	r3, #4
 8010338:	d122      	bne.n	8010380 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	68db      	ldr	r3, [r3, #12]
 8010340:	f003 0304 	and.w	r3, r3, #4
 8010344:	2b04      	cmp	r3, #4
 8010346:	d11b      	bne.n	8010380 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	f06f 0204 	mvn.w	r2, #4
 8010350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	2202      	movs	r2, #2
 8010356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	699b      	ldr	r3, [r3, #24]
 801035e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010362:	2b00      	cmp	r3, #0
 8010364:	d003      	beq.n	801036e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f000 fab3 	bl	80108d2 <HAL_TIM_IC_CaptureCallback>
 801036c:	e005      	b.n	801037a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f000 faa5 	bl	80108be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f7f6 fa91 	bl	800689c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	2200      	movs	r2, #0
 801037e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	691b      	ldr	r3, [r3, #16]
 8010386:	f003 0308 	and.w	r3, r3, #8
 801038a:	2b08      	cmp	r3, #8
 801038c:	d122      	bne.n	80103d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	68db      	ldr	r3, [r3, #12]
 8010394:	f003 0308 	and.w	r3, r3, #8
 8010398:	2b08      	cmp	r3, #8
 801039a:	d11b      	bne.n	80103d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	f06f 0208 	mvn.w	r2, #8
 80103a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2204      	movs	r2, #4
 80103aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	69db      	ldr	r3, [r3, #28]
 80103b2:	f003 0303 	and.w	r3, r3, #3
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d003      	beq.n	80103c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80103ba:	6878      	ldr	r0, [r7, #4]
 80103bc:	f000 fa89 	bl	80108d2 <HAL_TIM_IC_CaptureCallback>
 80103c0:	e005      	b.n	80103ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	f000 fa7b 	bl	80108be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	f7f6 fa67 	bl	800689c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2200      	movs	r2, #0
 80103d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	691b      	ldr	r3, [r3, #16]
 80103da:	f003 0310 	and.w	r3, r3, #16
 80103de:	2b10      	cmp	r3, #16
 80103e0:	d122      	bne.n	8010428 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	68db      	ldr	r3, [r3, #12]
 80103e8:	f003 0310 	and.w	r3, r3, #16
 80103ec:	2b10      	cmp	r3, #16
 80103ee:	d11b      	bne.n	8010428 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	f06f 0210 	mvn.w	r2, #16
 80103f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2208      	movs	r2, #8
 80103fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	69db      	ldr	r3, [r3, #28]
 8010406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801040a:	2b00      	cmp	r3, #0
 801040c:	d003      	beq.n	8010416 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f000 fa5f 	bl	80108d2 <HAL_TIM_IC_CaptureCallback>
 8010414:	e005      	b.n	8010422 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	f000 fa51 	bl	80108be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f7f6 fa3d 	bl	800689c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2200      	movs	r2, #0
 8010426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	691b      	ldr	r3, [r3, #16]
 801042e:	f003 0301 	and.w	r3, r3, #1
 8010432:	2b01      	cmp	r3, #1
 8010434:	d10e      	bne.n	8010454 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	68db      	ldr	r3, [r3, #12]
 801043c:	f003 0301 	and.w	r3, r3, #1
 8010440:	2b01      	cmp	r3, #1
 8010442:	d107      	bne.n	8010454 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	f06f 0201 	mvn.w	r2, #1
 801044c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801044e:	6878      	ldr	r0, [r7, #4]
 8010450:	f000 fa2b 	bl	80108aa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	691b      	ldr	r3, [r3, #16]
 801045a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801045e:	2b80      	cmp	r3, #128	; 0x80
 8010460:	d10e      	bne.n	8010480 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	68db      	ldr	r3, [r3, #12]
 8010468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801046c:	2b80      	cmp	r3, #128	; 0x80
 801046e:	d107      	bne.n	8010480 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f000 ff0a 	bl	8011294 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	691b      	ldr	r3, [r3, #16]
 8010486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801048a:	2b40      	cmp	r3, #64	; 0x40
 801048c:	d10e      	bne.n	80104ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	68db      	ldr	r3, [r3, #12]
 8010494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010498:	2b40      	cmp	r3, #64	; 0x40
 801049a:	d107      	bne.n	80104ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80104a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80104a6:	6878      	ldr	r0, [r7, #4]
 80104a8:	f000 fa27 	bl	80108fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	691b      	ldr	r3, [r3, #16]
 80104b2:	f003 0320 	and.w	r3, r3, #32
 80104b6:	2b20      	cmp	r3, #32
 80104b8:	d10e      	bne.n	80104d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	68db      	ldr	r3, [r3, #12]
 80104c0:	f003 0320 	and.w	r3, r3, #32
 80104c4:	2b20      	cmp	r3, #32
 80104c6:	d107      	bne.n	80104d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	f06f 0220 	mvn.w	r2, #32
 80104d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	f000 fed4 	bl	8011280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80104d8:	bf00      	nop
 80104da:	3708      	adds	r7, #8
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}

080104e0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b086      	sub	sp, #24
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	60f8      	str	r0, [r7, #12]
 80104e8:	60b9      	str	r1, [r7, #8]
 80104ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80104ec:	2300      	movs	r3, #0
 80104ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80104f6:	2b01      	cmp	r3, #1
 80104f8:	d101      	bne.n	80104fe <HAL_TIM_OC_ConfigChannel+0x1e>
 80104fa:	2302      	movs	r3, #2
 80104fc:	e048      	b.n	8010590 <HAL_TIM_OC_ConfigChannel+0xb0>
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	2201      	movs	r2, #1
 8010502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2b0c      	cmp	r3, #12
 801050a:	d839      	bhi.n	8010580 <HAL_TIM_OC_ConfigChannel+0xa0>
 801050c:	a201      	add	r2, pc, #4	; (adr r2, 8010514 <HAL_TIM_OC_ConfigChannel+0x34>)
 801050e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010512:	bf00      	nop
 8010514:	08010549 	.word	0x08010549
 8010518:	08010581 	.word	0x08010581
 801051c:	08010581 	.word	0x08010581
 8010520:	08010581 	.word	0x08010581
 8010524:	08010557 	.word	0x08010557
 8010528:	08010581 	.word	0x08010581
 801052c:	08010581 	.word	0x08010581
 8010530:	08010581 	.word	0x08010581
 8010534:	08010565 	.word	0x08010565
 8010538:	08010581 	.word	0x08010581
 801053c:	08010581 	.word	0x08010581
 8010540:	08010581 	.word	0x08010581
 8010544:	08010573 	.word	0x08010573
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	68b9      	ldr	r1, [r7, #8]
 801054e:	4618      	mov	r0, r3
 8010550:	f000 fb58 	bl	8010c04 <TIM_OC1_SetConfig>
      break;
 8010554:	e017      	b.n	8010586 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	68b9      	ldr	r1, [r7, #8]
 801055c:	4618      	mov	r0, r3
 801055e:	f000 fbc1 	bl	8010ce4 <TIM_OC2_SetConfig>
      break;
 8010562:	e010      	b.n	8010586 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	68b9      	ldr	r1, [r7, #8]
 801056a:	4618      	mov	r0, r3
 801056c:	f000 fc30 	bl	8010dd0 <TIM_OC3_SetConfig>
      break;
 8010570:	e009      	b.n	8010586 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	68b9      	ldr	r1, [r7, #8]
 8010578:	4618      	mov	r0, r3
 801057a:	f000 fc9d 	bl	8010eb8 <TIM_OC4_SetConfig>
      break;
 801057e:	e002      	b.n	8010586 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8010580:	2301      	movs	r3, #1
 8010582:	75fb      	strb	r3, [r7, #23]
      break;
 8010584:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	2200      	movs	r2, #0
 801058a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801058e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010590:	4618      	mov	r0, r3
 8010592:	3718      	adds	r7, #24
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b086      	sub	sp, #24
 801059c:	af00      	add	r7, sp, #0
 801059e:	60f8      	str	r0, [r7, #12]
 80105a0:	60b9      	str	r1, [r7, #8]
 80105a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80105a4:	2300      	movs	r3, #0
 80105a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80105ae:	2b01      	cmp	r3, #1
 80105b0:	d101      	bne.n	80105b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80105b2:	2302      	movs	r3, #2
 80105b4:	e0ae      	b.n	8010714 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	2201      	movs	r2, #1
 80105ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2b0c      	cmp	r3, #12
 80105c2:	f200 809f 	bhi.w	8010704 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80105c6:	a201      	add	r2, pc, #4	; (adr r2, 80105cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80105c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105cc:	08010601 	.word	0x08010601
 80105d0:	08010705 	.word	0x08010705
 80105d4:	08010705 	.word	0x08010705
 80105d8:	08010705 	.word	0x08010705
 80105dc:	08010641 	.word	0x08010641
 80105e0:	08010705 	.word	0x08010705
 80105e4:	08010705 	.word	0x08010705
 80105e8:	08010705 	.word	0x08010705
 80105ec:	08010683 	.word	0x08010683
 80105f0:	08010705 	.word	0x08010705
 80105f4:	08010705 	.word	0x08010705
 80105f8:	08010705 	.word	0x08010705
 80105fc:	080106c3 	.word	0x080106c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	68b9      	ldr	r1, [r7, #8]
 8010606:	4618      	mov	r0, r3
 8010608:	f000 fafc 	bl	8010c04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	699a      	ldr	r2, [r3, #24]
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	f042 0208 	orr.w	r2, r2, #8
 801061a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	699a      	ldr	r2, [r3, #24]
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	f022 0204 	bic.w	r2, r2, #4
 801062a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	6999      	ldr	r1, [r3, #24]
 8010632:	68bb      	ldr	r3, [r7, #8]
 8010634:	691a      	ldr	r2, [r3, #16]
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	430a      	orrs	r2, r1
 801063c:	619a      	str	r2, [r3, #24]
      break;
 801063e:	e064      	b.n	801070a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	68b9      	ldr	r1, [r7, #8]
 8010646:	4618      	mov	r0, r3
 8010648:	f000 fb4c 	bl	8010ce4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	699a      	ldr	r2, [r3, #24]
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801065a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	699a      	ldr	r2, [r3, #24]
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801066a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	6999      	ldr	r1, [r3, #24]
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	691b      	ldr	r3, [r3, #16]
 8010676:	021a      	lsls	r2, r3, #8
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	430a      	orrs	r2, r1
 801067e:	619a      	str	r2, [r3, #24]
      break;
 8010680:	e043      	b.n	801070a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	68b9      	ldr	r1, [r7, #8]
 8010688:	4618      	mov	r0, r3
 801068a:	f000 fba1 	bl	8010dd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	69da      	ldr	r2, [r3, #28]
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	f042 0208 	orr.w	r2, r2, #8
 801069c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	69da      	ldr	r2, [r3, #28]
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	f022 0204 	bic.w	r2, r2, #4
 80106ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	69d9      	ldr	r1, [r3, #28]
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	691a      	ldr	r2, [r3, #16]
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	430a      	orrs	r2, r1
 80106be:	61da      	str	r2, [r3, #28]
      break;
 80106c0:	e023      	b.n	801070a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	68b9      	ldr	r1, [r7, #8]
 80106c8:	4618      	mov	r0, r3
 80106ca:	f000 fbf5 	bl	8010eb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	69da      	ldr	r2, [r3, #28]
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80106dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	69da      	ldr	r2, [r3, #28]
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80106ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	69d9      	ldr	r1, [r3, #28]
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	691b      	ldr	r3, [r3, #16]
 80106f8:	021a      	lsls	r2, r3, #8
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	430a      	orrs	r2, r1
 8010700:	61da      	str	r2, [r3, #28]
      break;
 8010702:	e002      	b.n	801070a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8010704:	2301      	movs	r3, #1
 8010706:	75fb      	strb	r3, [r7, #23]
      break;
 8010708:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	2200      	movs	r2, #0
 801070e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010712:	7dfb      	ldrb	r3, [r7, #23]
}
 8010714:	4618      	mov	r0, r3
 8010716:	3718      	adds	r7, #24
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}

0801071c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b084      	sub	sp, #16
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
 8010724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010726:	2300      	movs	r3, #0
 8010728:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010730:	2b01      	cmp	r3, #1
 8010732:	d101      	bne.n	8010738 <HAL_TIM_ConfigClockSource+0x1c>
 8010734:	2302      	movs	r3, #2
 8010736:	e0b4      	b.n	80108a2 <HAL_TIM_ConfigClockSource+0x186>
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2201      	movs	r2, #1
 801073c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2202      	movs	r2, #2
 8010744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	689b      	ldr	r3, [r3, #8]
 801074e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8010756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801075e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	68ba      	ldr	r2, [r7, #8]
 8010766:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010770:	d03e      	beq.n	80107f0 <HAL_TIM_ConfigClockSource+0xd4>
 8010772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010776:	f200 8087 	bhi.w	8010888 <HAL_TIM_ConfigClockSource+0x16c>
 801077a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801077e:	f000 8086 	beq.w	801088e <HAL_TIM_ConfigClockSource+0x172>
 8010782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010786:	d87f      	bhi.n	8010888 <HAL_TIM_ConfigClockSource+0x16c>
 8010788:	2b70      	cmp	r3, #112	; 0x70
 801078a:	d01a      	beq.n	80107c2 <HAL_TIM_ConfigClockSource+0xa6>
 801078c:	2b70      	cmp	r3, #112	; 0x70
 801078e:	d87b      	bhi.n	8010888 <HAL_TIM_ConfigClockSource+0x16c>
 8010790:	2b60      	cmp	r3, #96	; 0x60
 8010792:	d050      	beq.n	8010836 <HAL_TIM_ConfigClockSource+0x11a>
 8010794:	2b60      	cmp	r3, #96	; 0x60
 8010796:	d877      	bhi.n	8010888 <HAL_TIM_ConfigClockSource+0x16c>
 8010798:	2b50      	cmp	r3, #80	; 0x50
 801079a:	d03c      	beq.n	8010816 <HAL_TIM_ConfigClockSource+0xfa>
 801079c:	2b50      	cmp	r3, #80	; 0x50
 801079e:	d873      	bhi.n	8010888 <HAL_TIM_ConfigClockSource+0x16c>
 80107a0:	2b40      	cmp	r3, #64	; 0x40
 80107a2:	d058      	beq.n	8010856 <HAL_TIM_ConfigClockSource+0x13a>
 80107a4:	2b40      	cmp	r3, #64	; 0x40
 80107a6:	d86f      	bhi.n	8010888 <HAL_TIM_ConfigClockSource+0x16c>
 80107a8:	2b30      	cmp	r3, #48	; 0x30
 80107aa:	d064      	beq.n	8010876 <HAL_TIM_ConfigClockSource+0x15a>
 80107ac:	2b30      	cmp	r3, #48	; 0x30
 80107ae:	d86b      	bhi.n	8010888 <HAL_TIM_ConfigClockSource+0x16c>
 80107b0:	2b20      	cmp	r3, #32
 80107b2:	d060      	beq.n	8010876 <HAL_TIM_ConfigClockSource+0x15a>
 80107b4:	2b20      	cmp	r3, #32
 80107b6:	d867      	bhi.n	8010888 <HAL_TIM_ConfigClockSource+0x16c>
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d05c      	beq.n	8010876 <HAL_TIM_ConfigClockSource+0x15a>
 80107bc:	2b10      	cmp	r3, #16
 80107be:	d05a      	beq.n	8010876 <HAL_TIM_ConfigClockSource+0x15a>
 80107c0:	e062      	b.n	8010888 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	6818      	ldr	r0, [r3, #0]
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	6899      	ldr	r1, [r3, #8]
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	685a      	ldr	r2, [r3, #4]
 80107ce:	683b      	ldr	r3, [r7, #0]
 80107d0:	68db      	ldr	r3, [r3, #12]
 80107d2:	f000 fc41 	bl	8011058 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	689b      	ldr	r3, [r3, #8]
 80107dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80107de:	68bb      	ldr	r3, [r7, #8]
 80107e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80107e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	68ba      	ldr	r2, [r7, #8]
 80107ec:	609a      	str	r2, [r3, #8]
      break;
 80107ee:	e04f      	b.n	8010890 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	6818      	ldr	r0, [r3, #0]
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	6899      	ldr	r1, [r3, #8]
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	685a      	ldr	r2, [r3, #4]
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	68db      	ldr	r3, [r3, #12]
 8010800:	f000 fc2a 	bl	8011058 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	689a      	ldr	r2, [r3, #8]
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010812:	609a      	str	r2, [r3, #8]
      break;
 8010814:	e03c      	b.n	8010890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6818      	ldr	r0, [r3, #0]
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	6859      	ldr	r1, [r3, #4]
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	68db      	ldr	r3, [r3, #12]
 8010822:	461a      	mov	r2, r3
 8010824:	f000 fb9e 	bl	8010f64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	2150      	movs	r1, #80	; 0x50
 801082e:	4618      	mov	r0, r3
 8010830:	f000 fbf7 	bl	8011022 <TIM_ITRx_SetConfig>
      break;
 8010834:	e02c      	b.n	8010890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	6818      	ldr	r0, [r3, #0]
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	6859      	ldr	r1, [r3, #4]
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	68db      	ldr	r3, [r3, #12]
 8010842:	461a      	mov	r2, r3
 8010844:	f000 fbbd 	bl	8010fc2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	2160      	movs	r1, #96	; 0x60
 801084e:	4618      	mov	r0, r3
 8010850:	f000 fbe7 	bl	8011022 <TIM_ITRx_SetConfig>
      break;
 8010854:	e01c      	b.n	8010890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6818      	ldr	r0, [r3, #0]
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	6859      	ldr	r1, [r3, #4]
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	68db      	ldr	r3, [r3, #12]
 8010862:	461a      	mov	r2, r3
 8010864:	f000 fb7e 	bl	8010f64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	2140      	movs	r1, #64	; 0x40
 801086e:	4618      	mov	r0, r3
 8010870:	f000 fbd7 	bl	8011022 <TIM_ITRx_SetConfig>
      break;
 8010874:	e00c      	b.n	8010890 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681a      	ldr	r2, [r3, #0]
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	4619      	mov	r1, r3
 8010880:	4610      	mov	r0, r2
 8010882:	f000 fbce 	bl	8011022 <TIM_ITRx_SetConfig>
      break;
 8010886:	e003      	b.n	8010890 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8010888:	2301      	movs	r3, #1
 801088a:	73fb      	strb	r3, [r7, #15]
      break;
 801088c:	e000      	b.n	8010890 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801088e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2201      	movs	r2, #1
 8010894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2200      	movs	r2, #0
 801089c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80108a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80108a2:	4618      	mov	r0, r3
 80108a4:	3710      	adds	r7, #16
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}

080108aa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80108aa:	b480      	push	{r7}
 80108ac:	b083      	sub	sp, #12
 80108ae:	af00      	add	r7, sp, #0
 80108b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80108b2:	bf00      	nop
 80108b4:	370c      	adds	r7, #12
 80108b6:	46bd      	mov	sp, r7
 80108b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108bc:	4770      	bx	lr

080108be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80108be:	b480      	push	{r7}
 80108c0:	b083      	sub	sp, #12
 80108c2:	af00      	add	r7, sp, #0
 80108c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80108c6:	bf00      	nop
 80108c8:	370c      	adds	r7, #12
 80108ca:	46bd      	mov	sp, r7
 80108cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d0:	4770      	bx	lr

080108d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80108d2:	b480      	push	{r7}
 80108d4:	b083      	sub	sp, #12
 80108d6:	af00      	add	r7, sp, #0
 80108d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80108da:	bf00      	nop
 80108dc:	370c      	adds	r7, #12
 80108de:	46bd      	mov	sp, r7
 80108e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e4:	4770      	bx	lr

080108e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80108e6:	b480      	push	{r7}
 80108e8:	b083      	sub	sp, #12
 80108ea:	af00      	add	r7, sp, #0
 80108ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80108ee:	bf00      	nop
 80108f0:	370c      	adds	r7, #12
 80108f2:	46bd      	mov	sp, r7
 80108f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f8:	4770      	bx	lr

080108fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80108fa:	b480      	push	{r7}
 80108fc:	b083      	sub	sp, #12
 80108fe:	af00      	add	r7, sp, #0
 8010900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010902:	bf00      	nop
 8010904:	370c      	adds	r7, #12
 8010906:	46bd      	mov	sp, r7
 8010908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090c:	4770      	bx	lr

0801090e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 801090e:	b480      	push	{r7}
 8010910:	b083      	sub	sp, #12
 8010912:	af00      	add	r7, sp, #0
 8010914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010916:	bf00      	nop
 8010918:	370c      	adds	r7, #12
 801091a:	46bd      	mov	sp, r7
 801091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010920:	4770      	bx	lr

08010922 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010922:	b580      	push	{r7, lr}
 8010924:	b084      	sub	sp, #16
 8010926:	af00      	add	r7, sp, #0
 8010928:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801092e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010934:	687a      	ldr	r2, [r7, #4]
 8010936:	429a      	cmp	r2, r3
 8010938:	d107      	bne.n	801094a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	2201      	movs	r2, #1
 801093e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	2201      	movs	r2, #1
 8010944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010948:	e02a      	b.n	80109a0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801094e:	687a      	ldr	r2, [r7, #4]
 8010950:	429a      	cmp	r2, r3
 8010952:	d107      	bne.n	8010964 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	2202      	movs	r2, #2
 8010958:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	2201      	movs	r2, #1
 801095e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010962:	e01d      	b.n	80109a0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010968:	687a      	ldr	r2, [r7, #4]
 801096a:	429a      	cmp	r2, r3
 801096c:	d107      	bne.n	801097e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	2204      	movs	r2, #4
 8010972:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	2201      	movs	r2, #1
 8010978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801097c:	e010      	b.n	80109a0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010982:	687a      	ldr	r2, [r7, #4]
 8010984:	429a      	cmp	r2, r3
 8010986:	d107      	bne.n	8010998 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	2208      	movs	r2, #8
 801098c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	2201      	movs	r2, #1
 8010992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010996:	e003      	b.n	80109a0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2201      	movs	r2, #1
 801099c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80109a0:	68f8      	ldr	r0, [r7, #12]
 80109a2:	f7ff ffb4 	bl	801090e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	2200      	movs	r2, #0
 80109aa:	771a      	strb	r2, [r3, #28]
}
 80109ac:	bf00      	nop
 80109ae:	3710      	adds	r7, #16
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}

080109b4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b084      	sub	sp, #16
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109c0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109c6:	687a      	ldr	r2, [r7, #4]
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d10b      	bne.n	80109e4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	2201      	movs	r2, #1
 80109d0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	69db      	ldr	r3, [r3, #28]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d136      	bne.n	8010a48 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	2201      	movs	r2, #1
 80109de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80109e2:	e031      	b.n	8010a48 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109e8:	687a      	ldr	r2, [r7, #4]
 80109ea:	429a      	cmp	r2, r3
 80109ec:	d10b      	bne.n	8010a06 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	2202      	movs	r2, #2
 80109f2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	69db      	ldr	r3, [r3, #28]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d125      	bne.n	8010a48 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	2201      	movs	r2, #1
 8010a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010a04:	e020      	b.n	8010a48 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a0a:	687a      	ldr	r2, [r7, #4]
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	d10b      	bne.n	8010a28 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	2204      	movs	r2, #4
 8010a14:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	69db      	ldr	r3, [r3, #28]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d114      	bne.n	8010a48 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	2201      	movs	r2, #1
 8010a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010a26:	e00f      	b.n	8010a48 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a2c:	687a      	ldr	r2, [r7, #4]
 8010a2e:	429a      	cmp	r2, r3
 8010a30:	d10a      	bne.n	8010a48 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	2208      	movs	r2, #8
 8010a36:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	69db      	ldr	r3, [r3, #28]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d103      	bne.n	8010a48 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	2201      	movs	r2, #1
 8010a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010a48:	68f8      	ldr	r0, [r7, #12]
 8010a4a:	f7f5 ff27 	bl	800689c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	2200      	movs	r2, #0
 8010a52:	771a      	strb	r2, [r3, #28]
}
 8010a54:	bf00      	nop
 8010a56:	3710      	adds	r7, #16
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}

08010a5c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b084      	sub	sp, #16
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a68:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a6e:	687a      	ldr	r2, [r7, #4]
 8010a70:	429a      	cmp	r2, r3
 8010a72:	d103      	bne.n	8010a7c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	2201      	movs	r2, #1
 8010a78:	771a      	strb	r2, [r3, #28]
 8010a7a:	e019      	b.n	8010ab0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a80:	687a      	ldr	r2, [r7, #4]
 8010a82:	429a      	cmp	r2, r3
 8010a84:	d103      	bne.n	8010a8e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	2202      	movs	r2, #2
 8010a8a:	771a      	strb	r2, [r3, #28]
 8010a8c:	e010      	b.n	8010ab0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a92:	687a      	ldr	r2, [r7, #4]
 8010a94:	429a      	cmp	r2, r3
 8010a96:	d103      	bne.n	8010aa0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	2204      	movs	r2, #4
 8010a9c:	771a      	strb	r2, [r3, #28]
 8010a9e:	e007      	b.n	8010ab0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010aa4:	687a      	ldr	r2, [r7, #4]
 8010aa6:	429a      	cmp	r2, r3
 8010aa8:	d102      	bne.n	8010ab0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	2208      	movs	r2, #8
 8010aae:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8010ab0:	68f8      	ldr	r0, [r7, #12]
 8010ab2:	f7ff ff18 	bl	80108e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	2200      	movs	r2, #0
 8010aba:	771a      	strb	r2, [r3, #28]
}
 8010abc:	bf00      	nop
 8010abe:	3710      	adds	r7, #16
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}

08010ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	b085      	sub	sp, #20
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
 8010acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	4a40      	ldr	r2, [pc, #256]	; (8010bd8 <TIM_Base_SetConfig+0x114>)
 8010ad8:	4293      	cmp	r3, r2
 8010ada:	d013      	beq.n	8010b04 <TIM_Base_SetConfig+0x40>
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010ae2:	d00f      	beq.n	8010b04 <TIM_Base_SetConfig+0x40>
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	4a3d      	ldr	r2, [pc, #244]	; (8010bdc <TIM_Base_SetConfig+0x118>)
 8010ae8:	4293      	cmp	r3, r2
 8010aea:	d00b      	beq.n	8010b04 <TIM_Base_SetConfig+0x40>
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	4a3c      	ldr	r2, [pc, #240]	; (8010be0 <TIM_Base_SetConfig+0x11c>)
 8010af0:	4293      	cmp	r3, r2
 8010af2:	d007      	beq.n	8010b04 <TIM_Base_SetConfig+0x40>
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	4a3b      	ldr	r2, [pc, #236]	; (8010be4 <TIM_Base_SetConfig+0x120>)
 8010af8:	4293      	cmp	r3, r2
 8010afa:	d003      	beq.n	8010b04 <TIM_Base_SetConfig+0x40>
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	4a3a      	ldr	r2, [pc, #232]	; (8010be8 <TIM_Base_SetConfig+0x124>)
 8010b00:	4293      	cmp	r3, r2
 8010b02:	d108      	bne.n	8010b16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	685b      	ldr	r3, [r3, #4]
 8010b10:	68fa      	ldr	r2, [r7, #12]
 8010b12:	4313      	orrs	r3, r2
 8010b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	4a2f      	ldr	r2, [pc, #188]	; (8010bd8 <TIM_Base_SetConfig+0x114>)
 8010b1a:	4293      	cmp	r3, r2
 8010b1c:	d02b      	beq.n	8010b76 <TIM_Base_SetConfig+0xb2>
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b24:	d027      	beq.n	8010b76 <TIM_Base_SetConfig+0xb2>
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	4a2c      	ldr	r2, [pc, #176]	; (8010bdc <TIM_Base_SetConfig+0x118>)
 8010b2a:	4293      	cmp	r3, r2
 8010b2c:	d023      	beq.n	8010b76 <TIM_Base_SetConfig+0xb2>
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	4a2b      	ldr	r2, [pc, #172]	; (8010be0 <TIM_Base_SetConfig+0x11c>)
 8010b32:	4293      	cmp	r3, r2
 8010b34:	d01f      	beq.n	8010b76 <TIM_Base_SetConfig+0xb2>
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	4a2a      	ldr	r2, [pc, #168]	; (8010be4 <TIM_Base_SetConfig+0x120>)
 8010b3a:	4293      	cmp	r3, r2
 8010b3c:	d01b      	beq.n	8010b76 <TIM_Base_SetConfig+0xb2>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	4a29      	ldr	r2, [pc, #164]	; (8010be8 <TIM_Base_SetConfig+0x124>)
 8010b42:	4293      	cmp	r3, r2
 8010b44:	d017      	beq.n	8010b76 <TIM_Base_SetConfig+0xb2>
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	4a28      	ldr	r2, [pc, #160]	; (8010bec <TIM_Base_SetConfig+0x128>)
 8010b4a:	4293      	cmp	r3, r2
 8010b4c:	d013      	beq.n	8010b76 <TIM_Base_SetConfig+0xb2>
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	4a27      	ldr	r2, [pc, #156]	; (8010bf0 <TIM_Base_SetConfig+0x12c>)
 8010b52:	4293      	cmp	r3, r2
 8010b54:	d00f      	beq.n	8010b76 <TIM_Base_SetConfig+0xb2>
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	4a26      	ldr	r2, [pc, #152]	; (8010bf4 <TIM_Base_SetConfig+0x130>)
 8010b5a:	4293      	cmp	r3, r2
 8010b5c:	d00b      	beq.n	8010b76 <TIM_Base_SetConfig+0xb2>
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	4a25      	ldr	r2, [pc, #148]	; (8010bf8 <TIM_Base_SetConfig+0x134>)
 8010b62:	4293      	cmp	r3, r2
 8010b64:	d007      	beq.n	8010b76 <TIM_Base_SetConfig+0xb2>
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	4a24      	ldr	r2, [pc, #144]	; (8010bfc <TIM_Base_SetConfig+0x138>)
 8010b6a:	4293      	cmp	r3, r2
 8010b6c:	d003      	beq.n	8010b76 <TIM_Base_SetConfig+0xb2>
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	4a23      	ldr	r2, [pc, #140]	; (8010c00 <TIM_Base_SetConfig+0x13c>)
 8010b72:	4293      	cmp	r3, r2
 8010b74:	d108      	bne.n	8010b88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010b7e:	683b      	ldr	r3, [r7, #0]
 8010b80:	68db      	ldr	r3, [r3, #12]
 8010b82:	68fa      	ldr	r2, [r7, #12]
 8010b84:	4313      	orrs	r3, r2
 8010b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	695b      	ldr	r3, [r3, #20]
 8010b92:	4313      	orrs	r3, r2
 8010b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	68fa      	ldr	r2, [r7, #12]
 8010b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	689a      	ldr	r2, [r3, #8]
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010ba4:	683b      	ldr	r3, [r7, #0]
 8010ba6:	681a      	ldr	r2, [r3, #0]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	4a0a      	ldr	r2, [pc, #40]	; (8010bd8 <TIM_Base_SetConfig+0x114>)
 8010bb0:	4293      	cmp	r3, r2
 8010bb2:	d003      	beq.n	8010bbc <TIM_Base_SetConfig+0xf8>
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	4a0c      	ldr	r2, [pc, #48]	; (8010be8 <TIM_Base_SetConfig+0x124>)
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	d103      	bne.n	8010bc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	691a      	ldr	r2, [r3, #16]
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	2201      	movs	r2, #1
 8010bc8:	615a      	str	r2, [r3, #20]
}
 8010bca:	bf00      	nop
 8010bcc:	3714      	adds	r7, #20
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop
 8010bd8:	40010000 	.word	0x40010000
 8010bdc:	40000400 	.word	0x40000400
 8010be0:	40000800 	.word	0x40000800
 8010be4:	40000c00 	.word	0x40000c00
 8010be8:	40010400 	.word	0x40010400
 8010bec:	40014000 	.word	0x40014000
 8010bf0:	40014400 	.word	0x40014400
 8010bf4:	40014800 	.word	0x40014800
 8010bf8:	40001800 	.word	0x40001800
 8010bfc:	40001c00 	.word	0x40001c00
 8010c00:	40002000 	.word	0x40002000

08010c04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010c04:	b480      	push	{r7}
 8010c06:	b087      	sub	sp, #28
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
 8010c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6a1b      	ldr	r3, [r3, #32]
 8010c12:	f023 0201 	bic.w	r2, r3, #1
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6a1b      	ldr	r3, [r3, #32]
 8010c1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	685b      	ldr	r3, [r3, #4]
 8010c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	699b      	ldr	r3, [r3, #24]
 8010c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	f023 0303 	bic.w	r3, r3, #3
 8010c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	68fa      	ldr	r2, [r7, #12]
 8010c42:	4313      	orrs	r3, r2
 8010c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010c46:	697b      	ldr	r3, [r7, #20]
 8010c48:	f023 0302 	bic.w	r3, r3, #2
 8010c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	689b      	ldr	r3, [r3, #8]
 8010c52:	697a      	ldr	r2, [r7, #20]
 8010c54:	4313      	orrs	r3, r2
 8010c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	4a20      	ldr	r2, [pc, #128]	; (8010cdc <TIM_OC1_SetConfig+0xd8>)
 8010c5c:	4293      	cmp	r3, r2
 8010c5e:	d003      	beq.n	8010c68 <TIM_OC1_SetConfig+0x64>
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	4a1f      	ldr	r2, [pc, #124]	; (8010ce0 <TIM_OC1_SetConfig+0xdc>)
 8010c64:	4293      	cmp	r3, r2
 8010c66:	d10c      	bne.n	8010c82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	f023 0308 	bic.w	r3, r3, #8
 8010c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	68db      	ldr	r3, [r3, #12]
 8010c74:	697a      	ldr	r2, [r7, #20]
 8010c76:	4313      	orrs	r3, r2
 8010c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	f023 0304 	bic.w	r3, r3, #4
 8010c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	4a15      	ldr	r2, [pc, #84]	; (8010cdc <TIM_OC1_SetConfig+0xd8>)
 8010c86:	4293      	cmp	r3, r2
 8010c88:	d003      	beq.n	8010c92 <TIM_OC1_SetConfig+0x8e>
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	4a14      	ldr	r2, [pc, #80]	; (8010ce0 <TIM_OC1_SetConfig+0xdc>)
 8010c8e:	4293      	cmp	r3, r2
 8010c90:	d111      	bne.n	8010cb6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010c92:	693b      	ldr	r3, [r7, #16]
 8010c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010c9a:	693b      	ldr	r3, [r7, #16]
 8010c9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	695b      	ldr	r3, [r3, #20]
 8010ca6:	693a      	ldr	r2, [r7, #16]
 8010ca8:	4313      	orrs	r3, r2
 8010caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	699b      	ldr	r3, [r3, #24]
 8010cb0:	693a      	ldr	r2, [r7, #16]
 8010cb2:	4313      	orrs	r3, r2
 8010cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	693a      	ldr	r2, [r7, #16]
 8010cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	68fa      	ldr	r2, [r7, #12]
 8010cc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	685a      	ldr	r2, [r3, #4]
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	697a      	ldr	r2, [r7, #20]
 8010cce:	621a      	str	r2, [r3, #32]
}
 8010cd0:	bf00      	nop
 8010cd2:	371c      	adds	r7, #28
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cda:	4770      	bx	lr
 8010cdc:	40010000 	.word	0x40010000
 8010ce0:	40010400 	.word	0x40010400

08010ce4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010ce4:	b480      	push	{r7}
 8010ce6:	b087      	sub	sp, #28
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	6a1b      	ldr	r3, [r3, #32]
 8010cf2:	f023 0210 	bic.w	r2, r3, #16
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	6a1b      	ldr	r3, [r3, #32]
 8010cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	685b      	ldr	r3, [r3, #4]
 8010d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	699b      	ldr	r3, [r3, #24]
 8010d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	021b      	lsls	r3, r3, #8
 8010d22:	68fa      	ldr	r2, [r7, #12]
 8010d24:	4313      	orrs	r3, r2
 8010d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	f023 0320 	bic.w	r3, r3, #32
 8010d2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	689b      	ldr	r3, [r3, #8]
 8010d34:	011b      	lsls	r3, r3, #4
 8010d36:	697a      	ldr	r2, [r7, #20]
 8010d38:	4313      	orrs	r3, r2
 8010d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	4a22      	ldr	r2, [pc, #136]	; (8010dc8 <TIM_OC2_SetConfig+0xe4>)
 8010d40:	4293      	cmp	r3, r2
 8010d42:	d003      	beq.n	8010d4c <TIM_OC2_SetConfig+0x68>
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	4a21      	ldr	r2, [pc, #132]	; (8010dcc <TIM_OC2_SetConfig+0xe8>)
 8010d48:	4293      	cmp	r3, r2
 8010d4a:	d10d      	bne.n	8010d68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	68db      	ldr	r3, [r3, #12]
 8010d58:	011b      	lsls	r3, r3, #4
 8010d5a:	697a      	ldr	r2, [r7, #20]
 8010d5c:	4313      	orrs	r3, r2
 8010d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010d60:	697b      	ldr	r3, [r7, #20]
 8010d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	4a17      	ldr	r2, [pc, #92]	; (8010dc8 <TIM_OC2_SetConfig+0xe4>)
 8010d6c:	4293      	cmp	r3, r2
 8010d6e:	d003      	beq.n	8010d78 <TIM_OC2_SetConfig+0x94>
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	4a16      	ldr	r2, [pc, #88]	; (8010dcc <TIM_OC2_SetConfig+0xe8>)
 8010d74:	4293      	cmp	r3, r2
 8010d76:	d113      	bne.n	8010da0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010d78:	693b      	ldr	r3, [r7, #16]
 8010d7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010d7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010d80:	693b      	ldr	r3, [r7, #16]
 8010d82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010d86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	695b      	ldr	r3, [r3, #20]
 8010d8c:	009b      	lsls	r3, r3, #2
 8010d8e:	693a      	ldr	r2, [r7, #16]
 8010d90:	4313      	orrs	r3, r2
 8010d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	699b      	ldr	r3, [r3, #24]
 8010d98:	009b      	lsls	r3, r3, #2
 8010d9a:	693a      	ldr	r2, [r7, #16]
 8010d9c:	4313      	orrs	r3, r2
 8010d9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	693a      	ldr	r2, [r7, #16]
 8010da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	68fa      	ldr	r2, [r7, #12]
 8010daa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	685a      	ldr	r2, [r3, #4]
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	697a      	ldr	r2, [r7, #20]
 8010db8:	621a      	str	r2, [r3, #32]
}
 8010dba:	bf00      	nop
 8010dbc:	371c      	adds	r7, #28
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc4:	4770      	bx	lr
 8010dc6:	bf00      	nop
 8010dc8:	40010000 	.word	0x40010000
 8010dcc:	40010400 	.word	0x40010400

08010dd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010dd0:	b480      	push	{r7}
 8010dd2:	b087      	sub	sp, #28
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	6a1b      	ldr	r3, [r3, #32]
 8010dde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	6a1b      	ldr	r3, [r3, #32]
 8010dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	685b      	ldr	r3, [r3, #4]
 8010df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	69db      	ldr	r3, [r3, #28]
 8010df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	f023 0303 	bic.w	r3, r3, #3
 8010e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010e08:	683b      	ldr	r3, [r7, #0]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	68fa      	ldr	r2, [r7, #12]
 8010e0e:	4313      	orrs	r3, r2
 8010e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	689b      	ldr	r3, [r3, #8]
 8010e1e:	021b      	lsls	r3, r3, #8
 8010e20:	697a      	ldr	r2, [r7, #20]
 8010e22:	4313      	orrs	r3, r2
 8010e24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	4a21      	ldr	r2, [pc, #132]	; (8010eb0 <TIM_OC3_SetConfig+0xe0>)
 8010e2a:	4293      	cmp	r3, r2
 8010e2c:	d003      	beq.n	8010e36 <TIM_OC3_SetConfig+0x66>
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	4a20      	ldr	r2, [pc, #128]	; (8010eb4 <TIM_OC3_SetConfig+0xe4>)
 8010e32:	4293      	cmp	r3, r2
 8010e34:	d10d      	bne.n	8010e52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010e36:	697b      	ldr	r3, [r7, #20]
 8010e38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010e3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	68db      	ldr	r3, [r3, #12]
 8010e42:	021b      	lsls	r3, r3, #8
 8010e44:	697a      	ldr	r2, [r7, #20]
 8010e46:	4313      	orrs	r3, r2
 8010e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	4a16      	ldr	r2, [pc, #88]	; (8010eb0 <TIM_OC3_SetConfig+0xe0>)
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d003      	beq.n	8010e62 <TIM_OC3_SetConfig+0x92>
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	4a15      	ldr	r2, [pc, #84]	; (8010eb4 <TIM_OC3_SetConfig+0xe4>)
 8010e5e:	4293      	cmp	r3, r2
 8010e60:	d113      	bne.n	8010e8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010e6a:	693b      	ldr	r3, [r7, #16]
 8010e6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	695b      	ldr	r3, [r3, #20]
 8010e76:	011b      	lsls	r3, r3, #4
 8010e78:	693a      	ldr	r2, [r7, #16]
 8010e7a:	4313      	orrs	r3, r2
 8010e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	699b      	ldr	r3, [r3, #24]
 8010e82:	011b      	lsls	r3, r3, #4
 8010e84:	693a      	ldr	r2, [r7, #16]
 8010e86:	4313      	orrs	r3, r2
 8010e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	693a      	ldr	r2, [r7, #16]
 8010e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	68fa      	ldr	r2, [r7, #12]
 8010e94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	685a      	ldr	r2, [r3, #4]
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	697a      	ldr	r2, [r7, #20]
 8010ea2:	621a      	str	r2, [r3, #32]
}
 8010ea4:	bf00      	nop
 8010ea6:	371c      	adds	r7, #28
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eae:	4770      	bx	lr
 8010eb0:	40010000 	.word	0x40010000
 8010eb4:	40010400 	.word	0x40010400

08010eb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	b087      	sub	sp, #28
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
 8010ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6a1b      	ldr	r3, [r3, #32]
 8010ec6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	6a1b      	ldr	r3, [r3, #32]
 8010ed2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	685b      	ldr	r3, [r3, #4]
 8010ed8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	69db      	ldr	r3, [r3, #28]
 8010ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	021b      	lsls	r3, r3, #8
 8010ef6:	68fa      	ldr	r2, [r7, #12]
 8010ef8:	4313      	orrs	r3, r2
 8010efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010efc:	693b      	ldr	r3, [r7, #16]
 8010efe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	689b      	ldr	r3, [r3, #8]
 8010f08:	031b      	lsls	r3, r3, #12
 8010f0a:	693a      	ldr	r2, [r7, #16]
 8010f0c:	4313      	orrs	r3, r2
 8010f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	4a12      	ldr	r2, [pc, #72]	; (8010f5c <TIM_OC4_SetConfig+0xa4>)
 8010f14:	4293      	cmp	r3, r2
 8010f16:	d003      	beq.n	8010f20 <TIM_OC4_SetConfig+0x68>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	4a11      	ldr	r2, [pc, #68]	; (8010f60 <TIM_OC4_SetConfig+0xa8>)
 8010f1c:	4293      	cmp	r3, r2
 8010f1e:	d109      	bne.n	8010f34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010f20:	697b      	ldr	r3, [r7, #20]
 8010f22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010f26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	695b      	ldr	r3, [r3, #20]
 8010f2c:	019b      	lsls	r3, r3, #6
 8010f2e:	697a      	ldr	r2, [r7, #20]
 8010f30:	4313      	orrs	r3, r2
 8010f32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	697a      	ldr	r2, [r7, #20]
 8010f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	68fa      	ldr	r2, [r7, #12]
 8010f3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	685a      	ldr	r2, [r3, #4]
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	693a      	ldr	r2, [r7, #16]
 8010f4c:	621a      	str	r2, [r3, #32]
}
 8010f4e:	bf00      	nop
 8010f50:	371c      	adds	r7, #28
 8010f52:	46bd      	mov	sp, r7
 8010f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f58:	4770      	bx	lr
 8010f5a:	bf00      	nop
 8010f5c:	40010000 	.word	0x40010000
 8010f60:	40010400 	.word	0x40010400

08010f64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010f64:	b480      	push	{r7}
 8010f66:	b087      	sub	sp, #28
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	60f8      	str	r0, [r7, #12]
 8010f6c:	60b9      	str	r1, [r7, #8]
 8010f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	6a1b      	ldr	r3, [r3, #32]
 8010f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	6a1b      	ldr	r3, [r3, #32]
 8010f7a:	f023 0201 	bic.w	r2, r3, #1
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	699b      	ldr	r3, [r3, #24]
 8010f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010f88:	693b      	ldr	r3, [r7, #16]
 8010f8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	011b      	lsls	r3, r3, #4
 8010f94:	693a      	ldr	r2, [r7, #16]
 8010f96:	4313      	orrs	r3, r2
 8010f98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	f023 030a 	bic.w	r3, r3, #10
 8010fa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010fa2:	697a      	ldr	r2, [r7, #20]
 8010fa4:	68bb      	ldr	r3, [r7, #8]
 8010fa6:	4313      	orrs	r3, r2
 8010fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	693a      	ldr	r2, [r7, #16]
 8010fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	697a      	ldr	r2, [r7, #20]
 8010fb4:	621a      	str	r2, [r3, #32]
}
 8010fb6:	bf00      	nop
 8010fb8:	371c      	adds	r7, #28
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc0:	4770      	bx	lr

08010fc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010fc2:	b480      	push	{r7}
 8010fc4:	b087      	sub	sp, #28
 8010fc6:	af00      	add	r7, sp, #0
 8010fc8:	60f8      	str	r0, [r7, #12]
 8010fca:	60b9      	str	r1, [r7, #8]
 8010fcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	6a1b      	ldr	r3, [r3, #32]
 8010fd2:	f023 0210 	bic.w	r2, r3, #16
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	699b      	ldr	r3, [r3, #24]
 8010fde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	6a1b      	ldr	r3, [r3, #32]
 8010fe4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010fec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	031b      	lsls	r3, r3, #12
 8010ff2:	697a      	ldr	r2, [r7, #20]
 8010ff4:	4313      	orrs	r3, r2
 8010ff6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010ffe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011000:	68bb      	ldr	r3, [r7, #8]
 8011002:	011b      	lsls	r3, r3, #4
 8011004:	693a      	ldr	r2, [r7, #16]
 8011006:	4313      	orrs	r3, r2
 8011008:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	697a      	ldr	r2, [r7, #20]
 801100e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	693a      	ldr	r2, [r7, #16]
 8011014:	621a      	str	r2, [r3, #32]
}
 8011016:	bf00      	nop
 8011018:	371c      	adds	r7, #28
 801101a:	46bd      	mov	sp, r7
 801101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011020:	4770      	bx	lr

08011022 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011022:	b480      	push	{r7}
 8011024:	b085      	sub	sp, #20
 8011026:	af00      	add	r7, sp, #0
 8011028:	6078      	str	r0, [r7, #4]
 801102a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	689b      	ldr	r3, [r3, #8]
 8011030:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011038:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801103a:	683a      	ldr	r2, [r7, #0]
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	4313      	orrs	r3, r2
 8011040:	f043 0307 	orr.w	r3, r3, #7
 8011044:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	68fa      	ldr	r2, [r7, #12]
 801104a:	609a      	str	r2, [r3, #8]
}
 801104c:	bf00      	nop
 801104e:	3714      	adds	r7, #20
 8011050:	46bd      	mov	sp, r7
 8011052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011056:	4770      	bx	lr

08011058 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011058:	b480      	push	{r7}
 801105a:	b087      	sub	sp, #28
 801105c:	af00      	add	r7, sp, #0
 801105e:	60f8      	str	r0, [r7, #12]
 8011060:	60b9      	str	r1, [r7, #8]
 8011062:	607a      	str	r2, [r7, #4]
 8011064:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	689b      	ldr	r3, [r3, #8]
 801106a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801106c:	697b      	ldr	r3, [r7, #20]
 801106e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011072:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011074:	683b      	ldr	r3, [r7, #0]
 8011076:	021a      	lsls	r2, r3, #8
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	431a      	orrs	r2, r3
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	4313      	orrs	r3, r2
 8011080:	697a      	ldr	r2, [r7, #20]
 8011082:	4313      	orrs	r3, r2
 8011084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	697a      	ldr	r2, [r7, #20]
 801108a:	609a      	str	r2, [r3, #8]
}
 801108c:	bf00      	nop
 801108e:	371c      	adds	r7, #28
 8011090:	46bd      	mov	sp, r7
 8011092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011096:	4770      	bx	lr

08011098 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011098:	b480      	push	{r7}
 801109a:	b087      	sub	sp, #28
 801109c:	af00      	add	r7, sp, #0
 801109e:	60f8      	str	r0, [r7, #12]
 80110a0:	60b9      	str	r1, [r7, #8]
 80110a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	f003 031f 	and.w	r3, r3, #31
 80110aa:	2201      	movs	r2, #1
 80110ac:	fa02 f303 	lsl.w	r3, r2, r3
 80110b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	6a1a      	ldr	r2, [r3, #32]
 80110b6:	697b      	ldr	r3, [r7, #20]
 80110b8:	43db      	mvns	r3, r3
 80110ba:	401a      	ands	r2, r3
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	6a1a      	ldr	r2, [r3, #32]
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	f003 031f 	and.w	r3, r3, #31
 80110ca:	6879      	ldr	r1, [r7, #4]
 80110cc:	fa01 f303 	lsl.w	r3, r1, r3
 80110d0:	431a      	orrs	r2, r3
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	621a      	str	r2, [r3, #32]
}
 80110d6:	bf00      	nop
 80110d8:	371c      	adds	r7, #28
 80110da:	46bd      	mov	sp, r7
 80110dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e0:	4770      	bx	lr
	...

080110e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80110e4:	b480      	push	{r7}
 80110e6:	b085      	sub	sp, #20
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80110f4:	2b01      	cmp	r3, #1
 80110f6:	d101      	bne.n	80110fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80110f8:	2302      	movs	r3, #2
 80110fa:	e05a      	b.n	80111b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2201      	movs	r2, #1
 8011100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2202      	movs	r2, #2
 8011108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	685b      	ldr	r3, [r3, #4]
 8011112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	689b      	ldr	r3, [r3, #8]
 801111a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	68fa      	ldr	r2, [r7, #12]
 801112a:	4313      	orrs	r3, r2
 801112c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	68fa      	ldr	r2, [r7, #12]
 8011134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	4a21      	ldr	r2, [pc, #132]	; (80111c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801113c:	4293      	cmp	r3, r2
 801113e:	d022      	beq.n	8011186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011148:	d01d      	beq.n	8011186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	4a1d      	ldr	r2, [pc, #116]	; (80111c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8011150:	4293      	cmp	r3, r2
 8011152:	d018      	beq.n	8011186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	4a1b      	ldr	r2, [pc, #108]	; (80111c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801115a:	4293      	cmp	r3, r2
 801115c:	d013      	beq.n	8011186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	4a1a      	ldr	r2, [pc, #104]	; (80111cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8011164:	4293      	cmp	r3, r2
 8011166:	d00e      	beq.n	8011186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	4a18      	ldr	r2, [pc, #96]	; (80111d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801116e:	4293      	cmp	r3, r2
 8011170:	d009      	beq.n	8011186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	4a17      	ldr	r2, [pc, #92]	; (80111d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8011178:	4293      	cmp	r3, r2
 801117a:	d004      	beq.n	8011186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	4a15      	ldr	r2, [pc, #84]	; (80111d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8011182:	4293      	cmp	r3, r2
 8011184:	d10c      	bne.n	80111a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801118c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	685b      	ldr	r3, [r3, #4]
 8011192:	68ba      	ldr	r2, [r7, #8]
 8011194:	4313      	orrs	r3, r2
 8011196:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	68ba      	ldr	r2, [r7, #8]
 801119e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2201      	movs	r2, #1
 80111a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2200      	movs	r2, #0
 80111ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80111b0:	2300      	movs	r3, #0
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3714      	adds	r7, #20
 80111b6:	46bd      	mov	sp, r7
 80111b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111bc:	4770      	bx	lr
 80111be:	bf00      	nop
 80111c0:	40010000 	.word	0x40010000
 80111c4:	40000400 	.word	0x40000400
 80111c8:	40000800 	.word	0x40000800
 80111cc:	40000c00 	.word	0x40000c00
 80111d0:	40010400 	.word	0x40010400
 80111d4:	40014000 	.word	0x40014000
 80111d8:	40001800 	.word	0x40001800

080111dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80111dc:	b480      	push	{r7}
 80111de:	b085      	sub	sp, #20
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
 80111e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80111e6:	2300      	movs	r3, #0
 80111e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80111f0:	2b01      	cmp	r3, #1
 80111f2:	d101      	bne.n	80111f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80111f4:	2302      	movs	r3, #2
 80111f6:	e03d      	b.n	8011274 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2201      	movs	r2, #1
 80111fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	68db      	ldr	r3, [r3, #12]
 801120a:	4313      	orrs	r3, r2
 801120c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	689b      	ldr	r3, [r3, #8]
 8011218:	4313      	orrs	r3, r2
 801121a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	685b      	ldr	r3, [r3, #4]
 8011226:	4313      	orrs	r3, r2
 8011228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	4313      	orrs	r3, r2
 8011236:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	691b      	ldr	r3, [r3, #16]
 8011242:	4313      	orrs	r3, r2
 8011244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	695b      	ldr	r3, [r3, #20]
 8011250:	4313      	orrs	r3, r2
 8011252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	69db      	ldr	r3, [r3, #28]
 801125e:	4313      	orrs	r3, r2
 8011260:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	68fa      	ldr	r2, [r7, #12]
 8011268:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	2200      	movs	r2, #0
 801126e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011272:	2300      	movs	r3, #0
}
 8011274:	4618      	mov	r0, r3
 8011276:	3714      	adds	r7, #20
 8011278:	46bd      	mov	sp, r7
 801127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127e:	4770      	bx	lr

08011280 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011280:	b480      	push	{r7}
 8011282:	b083      	sub	sp, #12
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011288:	bf00      	nop
 801128a:	370c      	adds	r7, #12
 801128c:	46bd      	mov	sp, r7
 801128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011292:	4770      	bx	lr

08011294 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011294:	b480      	push	{r7}
 8011296:	b083      	sub	sp, #12
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801129c:	bf00      	nop
 801129e:	370c      	adds	r7, #12
 80112a0:	46bd      	mov	sp, r7
 80112a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a6:	4770      	bx	lr

080112a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b082      	sub	sp, #8
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d101      	bne.n	80112ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80112b6:	2301      	movs	r3, #1
 80112b8:	e03f      	b.n	801133a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80112c0:	b2db      	uxtb	r3, r3
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d106      	bne.n	80112d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	2200      	movs	r2, #0
 80112ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80112ce:	6878      	ldr	r0, [r7, #4]
 80112d0:	f7f8 ff8c 	bl	800a1ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2224      	movs	r2, #36	; 0x24
 80112d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	68da      	ldr	r2, [r3, #12]
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80112ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f000 fe6f 	bl	8011fd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	691a      	ldr	r2, [r3, #16]
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011300:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	695a      	ldr	r2, [r3, #20]
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011310:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	68da      	ldr	r2, [r3, #12]
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011320:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2200      	movs	r2, #0
 8011326:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2220      	movs	r2, #32
 801132c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2220      	movs	r2, #32
 8011334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8011338:	2300      	movs	r3, #0
}
 801133a:	4618      	mov	r0, r3
 801133c:	3708      	adds	r7, #8
 801133e:	46bd      	mov	sp, r7
 8011340:	bd80      	pop	{r7, pc}

08011342 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8011342:	b480      	push	{r7}
 8011344:	b085      	sub	sp, #20
 8011346:	af00      	add	r7, sp, #0
 8011348:	60f8      	str	r0, [r7, #12]
 801134a:	60b9      	str	r1, [r7, #8]
 801134c:	4613      	mov	r3, r2
 801134e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011356:	b2db      	uxtb	r3, r3
 8011358:	2b20      	cmp	r3, #32
 801135a:	d130      	bne.n	80113be <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d002      	beq.n	8011368 <HAL_UART_Transmit_IT+0x26>
 8011362:	88fb      	ldrh	r3, [r7, #6]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d101      	bne.n	801136c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8011368:	2301      	movs	r3, #1
 801136a:	e029      	b.n	80113c0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011372:	2b01      	cmp	r3, #1
 8011374:	d101      	bne.n	801137a <HAL_UART_Transmit_IT+0x38>
 8011376:	2302      	movs	r3, #2
 8011378:	e022      	b.n	80113c0 <HAL_UART_Transmit_IT+0x7e>
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	2201      	movs	r2, #1
 801137e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	68ba      	ldr	r2, [r7, #8]
 8011386:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	88fa      	ldrh	r2, [r7, #6]
 801138c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	88fa      	ldrh	r2, [r7, #6]
 8011392:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	2200      	movs	r2, #0
 8011398:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	2221      	movs	r2, #33	; 0x21
 801139e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	2200      	movs	r2, #0
 80113a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	68da      	ldr	r2, [r3, #12]
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80113b8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80113ba:	2300      	movs	r3, #0
 80113bc:	e000      	b.n	80113c0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80113be:	2302      	movs	r3, #2
  }
}
 80113c0:	4618      	mov	r0, r3
 80113c2:	3714      	adds	r7, #20
 80113c4:	46bd      	mov	sp, r7
 80113c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ca:	4770      	bx	lr

080113cc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b084      	sub	sp, #16
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	60f8      	str	r0, [r7, #12]
 80113d4:	60b9      	str	r1, [r7, #8]
 80113d6:	4613      	mov	r3, r2
 80113d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80113e0:	b2db      	uxtb	r3, r3
 80113e2:	2b20      	cmp	r3, #32
 80113e4:	d11d      	bne.n	8011422 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d002      	beq.n	80113f2 <HAL_UART_Receive_IT+0x26>
 80113ec:	88fb      	ldrh	r3, [r7, #6]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d101      	bne.n	80113f6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80113f2:	2301      	movs	r3, #1
 80113f4:	e016      	b.n	8011424 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80113fc:	2b01      	cmp	r3, #1
 80113fe:	d101      	bne.n	8011404 <HAL_UART_Receive_IT+0x38>
 8011400:	2302      	movs	r3, #2
 8011402:	e00f      	b.n	8011424 <HAL_UART_Receive_IT+0x58>
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	2201      	movs	r2, #1
 8011408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	2200      	movs	r2, #0
 8011410:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8011412:	88fb      	ldrh	r3, [r7, #6]
 8011414:	461a      	mov	r2, r3
 8011416:	68b9      	ldr	r1, [r7, #8]
 8011418:	68f8      	ldr	r0, [r7, #12]
 801141a:	f000 fbd8 	bl	8011bce <UART_Start_Receive_IT>
 801141e:	4603      	mov	r3, r0
 8011420:	e000      	b.n	8011424 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8011422:	2302      	movs	r3, #2
  }
}
 8011424:	4618      	mov	r0, r3
 8011426:	3710      	adds	r7, #16
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}

0801142c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b08c      	sub	sp, #48	; 0x30
 8011430:	af00      	add	r7, sp, #0
 8011432:	60f8      	str	r0, [r7, #12]
 8011434:	60b9      	str	r1, [r7, #8]
 8011436:	4613      	mov	r3, r2
 8011438:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011440:	b2db      	uxtb	r3, r3
 8011442:	2b20      	cmp	r3, #32
 8011444:	d165      	bne.n	8011512 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d002      	beq.n	8011452 <HAL_UART_Transmit_DMA+0x26>
 801144c:	88fb      	ldrh	r3, [r7, #6]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d101      	bne.n	8011456 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8011452:	2301      	movs	r3, #1
 8011454:	e05e      	b.n	8011514 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801145c:	2b01      	cmp	r3, #1
 801145e:	d101      	bne.n	8011464 <HAL_UART_Transmit_DMA+0x38>
 8011460:	2302      	movs	r3, #2
 8011462:	e057      	b.n	8011514 <HAL_UART_Transmit_DMA+0xe8>
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	2201      	movs	r2, #1
 8011468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 801146c:	68ba      	ldr	r2, [r7, #8]
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	88fa      	ldrh	r2, [r7, #6]
 8011476:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	88fa      	ldrh	r2, [r7, #6]
 801147c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	2200      	movs	r2, #0
 8011482:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	2221      	movs	r2, #33	; 0x21
 8011488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011490:	4a22      	ldr	r2, [pc, #136]	; (801151c <HAL_UART_Transmit_DMA+0xf0>)
 8011492:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011498:	4a21      	ldr	r2, [pc, #132]	; (8011520 <HAL_UART_Transmit_DMA+0xf4>)
 801149a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114a0:	4a20      	ldr	r2, [pc, #128]	; (8011524 <HAL_UART_Transmit_DMA+0xf8>)
 80114a2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114a8:	2200      	movs	r2, #0
 80114aa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80114ac:	f107 0308 	add.w	r3, r7, #8
 80114b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80114b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114b8:	6819      	ldr	r1, [r3, #0]
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	3304      	adds	r3, #4
 80114c0:	461a      	mov	r2, r3
 80114c2:	88fb      	ldrh	r3, [r7, #6]
 80114c4:	f7f9 ff94 	bl	800b3f0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80114d0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	2200      	movs	r2, #0
 80114d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	3314      	adds	r3, #20
 80114e0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114e2:	69bb      	ldr	r3, [r7, #24]
 80114e4:	e853 3f00 	ldrex	r3, [r3]
 80114e8:	617b      	str	r3, [r7, #20]
   return(result);
 80114ea:	697b      	ldr	r3, [r7, #20]
 80114ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	3314      	adds	r3, #20
 80114f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114fa:	627a      	str	r2, [r7, #36]	; 0x24
 80114fc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114fe:	6a39      	ldr	r1, [r7, #32]
 8011500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011502:	e841 2300 	strex	r3, r2, [r1]
 8011506:	61fb      	str	r3, [r7, #28]
   return(result);
 8011508:	69fb      	ldr	r3, [r7, #28]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d1e5      	bne.n	80114da <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 801150e:	2300      	movs	r3, #0
 8011510:	e000      	b.n	8011514 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8011512:	2302      	movs	r3, #2
  }
}
 8011514:	4618      	mov	r0, r3
 8011516:	3730      	adds	r7, #48	; 0x30
 8011518:	46bd      	mov	sp, r7
 801151a:	bd80      	pop	{r7, pc}
 801151c:	08011a85 	.word	0x08011a85
 8011520:	08011b1f 	.word	0x08011b1f
 8011524:	08011b3b 	.word	0x08011b3b

08011528 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b0ba      	sub	sp, #232	; 0xe8
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	68db      	ldr	r3, [r3, #12]
 8011540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	695b      	ldr	r3, [r3, #20]
 801154a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 801154e:	2300      	movs	r3, #0
 8011550:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8011554:	2300      	movs	r3, #0
 8011556:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801155a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801155e:	f003 030f 	and.w	r3, r3, #15
 8011562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8011566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801156a:	2b00      	cmp	r3, #0
 801156c:	d10f      	bne.n	801158e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801156e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011572:	f003 0320 	and.w	r3, r3, #32
 8011576:	2b00      	cmp	r3, #0
 8011578:	d009      	beq.n	801158e <HAL_UART_IRQHandler+0x66>
 801157a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801157e:	f003 0320 	and.w	r3, r3, #32
 8011582:	2b00      	cmp	r3, #0
 8011584:	d003      	beq.n	801158e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8011586:	6878      	ldr	r0, [r7, #4]
 8011588:	f000 fc66 	bl	8011e58 <UART_Receive_IT>
      return;
 801158c:	e256      	b.n	8011a3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801158e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011592:	2b00      	cmp	r3, #0
 8011594:	f000 80de 	beq.w	8011754 <HAL_UART_IRQHandler+0x22c>
 8011598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801159c:	f003 0301 	and.w	r3, r3, #1
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d106      	bne.n	80115b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80115a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80115a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	f000 80d1 	beq.w	8011754 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80115b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80115b6:	f003 0301 	and.w	r3, r3, #1
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d00b      	beq.n	80115d6 <HAL_UART_IRQHandler+0xae>
 80115be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80115c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d005      	beq.n	80115d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115ce:	f043 0201 	orr.w	r2, r3, #1
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80115d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80115da:	f003 0304 	and.w	r3, r3, #4
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d00b      	beq.n	80115fa <HAL_UART_IRQHandler+0xd2>
 80115e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80115e6:	f003 0301 	and.w	r3, r3, #1
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d005      	beq.n	80115fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115f2:	f043 0202 	orr.w	r2, r3, #2
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80115fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80115fe:	f003 0302 	and.w	r3, r3, #2
 8011602:	2b00      	cmp	r3, #0
 8011604:	d00b      	beq.n	801161e <HAL_UART_IRQHandler+0xf6>
 8011606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801160a:	f003 0301 	and.w	r3, r3, #1
 801160e:	2b00      	cmp	r3, #0
 8011610:	d005      	beq.n	801161e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011616:	f043 0204 	orr.w	r2, r3, #4
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801161e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011622:	f003 0308 	and.w	r3, r3, #8
 8011626:	2b00      	cmp	r3, #0
 8011628:	d011      	beq.n	801164e <HAL_UART_IRQHandler+0x126>
 801162a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801162e:	f003 0320 	and.w	r3, r3, #32
 8011632:	2b00      	cmp	r3, #0
 8011634:	d105      	bne.n	8011642 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8011636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801163a:	f003 0301 	and.w	r3, r3, #1
 801163e:	2b00      	cmp	r3, #0
 8011640:	d005      	beq.n	801164e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011646:	f043 0208 	orr.w	r2, r3, #8
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011652:	2b00      	cmp	r3, #0
 8011654:	f000 81ed 	beq.w	8011a32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801165c:	f003 0320 	and.w	r3, r3, #32
 8011660:	2b00      	cmp	r3, #0
 8011662:	d008      	beq.n	8011676 <HAL_UART_IRQHandler+0x14e>
 8011664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011668:	f003 0320 	and.w	r3, r3, #32
 801166c:	2b00      	cmp	r3, #0
 801166e:	d002      	beq.n	8011676 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f000 fbf1 	bl	8011e58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	695b      	ldr	r3, [r3, #20]
 801167c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011680:	2b40      	cmp	r3, #64	; 0x40
 8011682:	bf0c      	ite	eq
 8011684:	2301      	moveq	r3, #1
 8011686:	2300      	movne	r3, #0
 8011688:	b2db      	uxtb	r3, r3
 801168a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011692:	f003 0308 	and.w	r3, r3, #8
 8011696:	2b00      	cmp	r3, #0
 8011698:	d103      	bne.n	80116a2 <HAL_UART_IRQHandler+0x17a>
 801169a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d04f      	beq.n	8011742 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80116a2:	6878      	ldr	r0, [r7, #4]
 80116a4:	f000 faf9 	bl	8011c9a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	695b      	ldr	r3, [r3, #20]
 80116ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116b2:	2b40      	cmp	r3, #64	; 0x40
 80116b4:	d141      	bne.n	801173a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	3314      	adds	r3, #20
 80116bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80116c4:	e853 3f00 	ldrex	r3, [r3]
 80116c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80116cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80116d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80116d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	3314      	adds	r3, #20
 80116de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80116e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80116e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80116ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80116f2:	e841 2300 	strex	r3, r2, [r1]
 80116f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80116fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d1d9      	bne.n	80116b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011706:	2b00      	cmp	r3, #0
 8011708:	d013      	beq.n	8011732 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801170e:	4a7d      	ldr	r2, [pc, #500]	; (8011904 <HAL_UART_IRQHandler+0x3dc>)
 8011710:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011716:	4618      	mov	r0, r3
 8011718:	f7f9 ff32 	bl	800b580 <HAL_DMA_Abort_IT>
 801171c:	4603      	mov	r3, r0
 801171e:	2b00      	cmp	r3, #0
 8011720:	d016      	beq.n	8011750 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011728:	687a      	ldr	r2, [r7, #4]
 801172a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801172c:	4610      	mov	r0, r2
 801172e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011730:	e00e      	b.n	8011750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011732:	6878      	ldr	r0, [r7, #4]
 8011734:	f000 f990 	bl	8011a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011738:	e00a      	b.n	8011750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801173a:	6878      	ldr	r0, [r7, #4]
 801173c:	f000 f98c 	bl	8011a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011740:	e006      	b.n	8011750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011742:	6878      	ldr	r0, [r7, #4]
 8011744:	f000 f988 	bl	8011a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	2200      	movs	r2, #0
 801174c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801174e:	e170      	b.n	8011a32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011750:	bf00      	nop
    return;
 8011752:	e16e      	b.n	8011a32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011758:	2b01      	cmp	r3, #1
 801175a:	f040 814a 	bne.w	80119f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801175e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011762:	f003 0310 	and.w	r3, r3, #16
 8011766:	2b00      	cmp	r3, #0
 8011768:	f000 8143 	beq.w	80119f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801176c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011770:	f003 0310 	and.w	r3, r3, #16
 8011774:	2b00      	cmp	r3, #0
 8011776:	f000 813c 	beq.w	80119f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801177a:	2300      	movs	r3, #0
 801177c:	60bb      	str	r3, [r7, #8]
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	60bb      	str	r3, [r7, #8]
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	685b      	ldr	r3, [r3, #4]
 801178c:	60bb      	str	r3, [r7, #8]
 801178e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	695b      	ldr	r3, [r3, #20]
 8011796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801179a:	2b40      	cmp	r3, #64	; 0x40
 801179c:	f040 80b4 	bne.w	8011908 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	685b      	ldr	r3, [r3, #4]
 80117a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80117ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	f000 8140 	beq.w	8011a36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80117ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80117be:	429a      	cmp	r2, r3
 80117c0:	f080 8139 	bcs.w	8011a36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80117ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117d0:	69db      	ldr	r3, [r3, #28]
 80117d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80117d6:	f000 8088 	beq.w	80118ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	330c      	adds	r3, #12
 80117e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80117e8:	e853 3f00 	ldrex	r3, [r3]
 80117ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80117f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80117f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80117f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	330c      	adds	r3, #12
 8011802:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011806:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801180a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801180e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011812:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011816:	e841 2300 	strex	r3, r2, [r1]
 801181a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801181e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011822:	2b00      	cmp	r3, #0
 8011824:	d1d9      	bne.n	80117da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	3314      	adds	r3, #20
 801182c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801182e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011830:	e853 3f00 	ldrex	r3, [r3]
 8011834:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011838:	f023 0301 	bic.w	r3, r3, #1
 801183c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	3314      	adds	r3, #20
 8011846:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801184a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801184e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011850:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011852:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011856:	e841 2300 	strex	r3, r2, [r1]
 801185a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801185c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801185e:	2b00      	cmp	r3, #0
 8011860:	d1e1      	bne.n	8011826 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	3314      	adds	r3, #20
 8011868:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801186a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801186c:	e853 3f00 	ldrex	r3, [r3]
 8011870:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011878:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	3314      	adds	r3, #20
 8011882:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8011886:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011888:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801188a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801188c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801188e:	e841 2300 	strex	r3, r2, [r1]
 8011892:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011896:	2b00      	cmp	r3, #0
 8011898:	d1e3      	bne.n	8011862 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	2220      	movs	r2, #32
 801189e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	2200      	movs	r2, #0
 80118a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	330c      	adds	r3, #12
 80118ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118b2:	e853 3f00 	ldrex	r3, [r3]
 80118b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80118b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118ba:	f023 0310 	bic.w	r3, r3, #16
 80118be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	330c      	adds	r3, #12
 80118c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80118cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80118ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80118d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80118d4:	e841 2300 	strex	r3, r2, [r1]
 80118d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80118da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d1e3      	bne.n	80118a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7f9 fddb 	bl	800b4a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80118f2:	b29b      	uxth	r3, r3
 80118f4:	1ad3      	subs	r3, r2, r3
 80118f6:	b29b      	uxth	r3, r3
 80118f8:	4619      	mov	r1, r3
 80118fa:	6878      	ldr	r0, [r7, #4]
 80118fc:	f000 f8b6 	bl	8011a6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011900:	e099      	b.n	8011a36 <HAL_UART_IRQHandler+0x50e>
 8011902:	bf00      	nop
 8011904:	08011d61 	.word	0x08011d61
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011910:	b29b      	uxth	r3, r3
 8011912:	1ad3      	subs	r3, r2, r3
 8011914:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801191c:	b29b      	uxth	r3, r3
 801191e:	2b00      	cmp	r3, #0
 8011920:	f000 808b 	beq.w	8011a3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8011924:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011928:	2b00      	cmp	r3, #0
 801192a:	f000 8086 	beq.w	8011a3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	330c      	adds	r3, #12
 8011934:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011938:	e853 3f00 	ldrex	r3, [r3]
 801193c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801193e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011940:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011944:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	330c      	adds	r3, #12
 801194e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011952:	647a      	str	r2, [r7, #68]	; 0x44
 8011954:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011956:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011958:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801195a:	e841 2300 	strex	r3, r2, [r1]
 801195e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011962:	2b00      	cmp	r3, #0
 8011964:	d1e3      	bne.n	801192e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	3314      	adds	r3, #20
 801196c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011970:	e853 3f00 	ldrex	r3, [r3]
 8011974:	623b      	str	r3, [r7, #32]
   return(result);
 8011976:	6a3b      	ldr	r3, [r7, #32]
 8011978:	f023 0301 	bic.w	r3, r3, #1
 801197c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	3314      	adds	r3, #20
 8011986:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801198a:	633a      	str	r2, [r7, #48]	; 0x30
 801198c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801198e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011992:	e841 2300 	strex	r3, r2, [r1]
 8011996:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801199a:	2b00      	cmp	r3, #0
 801199c:	d1e3      	bne.n	8011966 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	2220      	movs	r2, #32
 80119a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2200      	movs	r2, #0
 80119aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	330c      	adds	r3, #12
 80119b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119b4:	693b      	ldr	r3, [r7, #16]
 80119b6:	e853 3f00 	ldrex	r3, [r3]
 80119ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	f023 0310 	bic.w	r3, r3, #16
 80119c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	330c      	adds	r3, #12
 80119cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80119d0:	61fa      	str	r2, [r7, #28]
 80119d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119d4:	69b9      	ldr	r1, [r7, #24]
 80119d6:	69fa      	ldr	r2, [r7, #28]
 80119d8:	e841 2300 	strex	r3, r2, [r1]
 80119dc:	617b      	str	r3, [r7, #20]
   return(result);
 80119de:	697b      	ldr	r3, [r7, #20]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d1e3      	bne.n	80119ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80119e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80119e8:	4619      	mov	r1, r3
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f000 f83e 	bl	8011a6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80119f0:	e023      	b.n	8011a3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80119f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80119f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d009      	beq.n	8011a12 <HAL_UART_IRQHandler+0x4ea>
 80119fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d003      	beq.n	8011a12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8011a0a:	6878      	ldr	r0, [r7, #4]
 8011a0c:	f000 f9bc 	bl	8011d88 <UART_Transmit_IT>
    return;
 8011a10:	e014      	b.n	8011a3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8011a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d00e      	beq.n	8011a3c <HAL_UART_IRQHandler+0x514>
 8011a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d008      	beq.n	8011a3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8011a2a:	6878      	ldr	r0, [r7, #4]
 8011a2c:	f000 f9fc 	bl	8011e28 <UART_EndTransmit_IT>
    return;
 8011a30:	e004      	b.n	8011a3c <HAL_UART_IRQHandler+0x514>
    return;
 8011a32:	bf00      	nop
 8011a34:	e002      	b.n	8011a3c <HAL_UART_IRQHandler+0x514>
      return;
 8011a36:	bf00      	nop
 8011a38:	e000      	b.n	8011a3c <HAL_UART_IRQHandler+0x514>
      return;
 8011a3a:	bf00      	nop
  }
}
 8011a3c:	37e8      	adds	r7, #232	; 0xe8
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bd80      	pop	{r7, pc}
 8011a42:	bf00      	nop

08011a44 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011a44:	b480      	push	{r7}
 8011a46:	b083      	sub	sp, #12
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8011a4c:	bf00      	nop
 8011a4e:	370c      	adds	r7, #12
 8011a50:	46bd      	mov	sp, r7
 8011a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a56:	4770      	bx	lr

08011a58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011a58:	b480      	push	{r7}
 8011a5a:	b083      	sub	sp, #12
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8011a60:	bf00      	nop
 8011a62:	370c      	adds	r7, #12
 8011a64:	46bd      	mov	sp, r7
 8011a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6a:	4770      	bx	lr

08011a6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	b083      	sub	sp, #12
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	460b      	mov	r3, r1
 8011a76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011a78:	bf00      	nop
 8011a7a:	370c      	adds	r7, #12
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a82:	4770      	bx	lr

08011a84 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b090      	sub	sp, #64	; 0x40
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d137      	bne.n	8011b10 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8011aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	3314      	adds	r3, #20
 8011aac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab0:	e853 3f00 	ldrex	r3, [r3]
 8011ab4:	623b      	str	r3, [r7, #32]
   return(result);
 8011ab6:	6a3b      	ldr	r3, [r7, #32]
 8011ab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011abc:	63bb      	str	r3, [r7, #56]	; 0x38
 8011abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	3314      	adds	r3, #20
 8011ac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ac6:	633a      	str	r2, [r7, #48]	; 0x30
 8011ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ace:	e841 2300 	strex	r3, r2, [r1]
 8011ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d1e5      	bne.n	8011aa6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	330c      	adds	r3, #12
 8011ae0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ae2:	693b      	ldr	r3, [r7, #16]
 8011ae4:	e853 3f00 	ldrex	r3, [r3]
 8011ae8:	60fb      	str	r3, [r7, #12]
   return(result);
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011af0:	637b      	str	r3, [r7, #52]	; 0x34
 8011af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	330c      	adds	r3, #12
 8011af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011afa:	61fa      	str	r2, [r7, #28]
 8011afc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011afe:	69b9      	ldr	r1, [r7, #24]
 8011b00:	69fa      	ldr	r2, [r7, #28]
 8011b02:	e841 2300 	strex	r3, r2, [r1]
 8011b06:	617b      	str	r3, [r7, #20]
   return(result);
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d1e5      	bne.n	8011ada <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011b0e:	e002      	b.n	8011b16 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8011b10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011b12:	f7f6 ff1f 	bl	8008954 <HAL_UART_TxCpltCallback>
}
 8011b16:	bf00      	nop
 8011b18:	3740      	adds	r7, #64	; 0x40
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}

08011b1e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011b1e:	b580      	push	{r7, lr}
 8011b20:	b084      	sub	sp, #16
 8011b22:	af00      	add	r7, sp, #0
 8011b24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011b2c:	68f8      	ldr	r0, [r7, #12]
 8011b2e:	f7ff ff89 	bl	8011a44 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b32:	bf00      	nop
 8011b34:	3710      	adds	r7, #16
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}

08011b3a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011b3a:	b580      	push	{r7, lr}
 8011b3c:	b084      	sub	sp, #16
 8011b3e:	af00      	add	r7, sp, #0
 8011b40:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8011b42:	2300      	movs	r3, #0
 8011b44:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b4a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	695b      	ldr	r3, [r3, #20]
 8011b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b56:	2b80      	cmp	r3, #128	; 0x80
 8011b58:	bf0c      	ite	eq
 8011b5a:	2301      	moveq	r3, #1
 8011b5c:	2300      	movne	r3, #0
 8011b5e:	b2db      	uxtb	r3, r3
 8011b60:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8011b62:	68bb      	ldr	r3, [r7, #8]
 8011b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011b68:	b2db      	uxtb	r3, r3
 8011b6a:	2b21      	cmp	r3, #33	; 0x21
 8011b6c:	d108      	bne.n	8011b80 <UART_DMAError+0x46>
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d005      	beq.n	8011b80 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8011b74:	68bb      	ldr	r3, [r7, #8]
 8011b76:	2200      	movs	r2, #0
 8011b78:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8011b7a:	68b8      	ldr	r0, [r7, #8]
 8011b7c:	f000 f865 	bl	8011c4a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	695b      	ldr	r3, [r3, #20]
 8011b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b8a:	2b40      	cmp	r3, #64	; 0x40
 8011b8c:	bf0c      	ite	eq
 8011b8e:	2301      	moveq	r3, #1
 8011b90:	2300      	movne	r3, #0
 8011b92:	b2db      	uxtb	r3, r3
 8011b94:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011b9c:	b2db      	uxtb	r3, r3
 8011b9e:	2b22      	cmp	r3, #34	; 0x22
 8011ba0:	d108      	bne.n	8011bb4 <UART_DMAError+0x7a>
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d005      	beq.n	8011bb4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8011ba8:	68bb      	ldr	r3, [r7, #8]
 8011baa:	2200      	movs	r2, #0
 8011bac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8011bae:	68b8      	ldr	r0, [r7, #8]
 8011bb0:	f000 f873 	bl	8011c9a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011bb4:	68bb      	ldr	r3, [r7, #8]
 8011bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bb8:	f043 0210 	orr.w	r2, r3, #16
 8011bbc:	68bb      	ldr	r3, [r7, #8]
 8011bbe:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011bc0:	68b8      	ldr	r0, [r7, #8]
 8011bc2:	f7ff ff49 	bl	8011a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011bc6:	bf00      	nop
 8011bc8:	3710      	adds	r7, #16
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}

08011bce <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011bce:	b480      	push	{r7}
 8011bd0:	b085      	sub	sp, #20
 8011bd2:	af00      	add	r7, sp, #0
 8011bd4:	60f8      	str	r0, [r7, #12]
 8011bd6:	60b9      	str	r1, [r7, #8]
 8011bd8:	4613      	mov	r3, r2
 8011bda:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	68ba      	ldr	r2, [r7, #8]
 8011be0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	88fa      	ldrh	r2, [r7, #6]
 8011be6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	88fa      	ldrh	r2, [r7, #6]
 8011bec:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	2222      	movs	r2, #34	; 0x22
 8011bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	2200      	movs	r2, #0
 8011c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	691b      	ldr	r3, [r3, #16]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d007      	beq.n	8011c1c <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	68da      	ldr	r2, [r3, #12]
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011c1a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	695a      	ldr	r2, [r3, #20]
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	f042 0201 	orr.w	r2, r2, #1
 8011c2a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	68da      	ldr	r2, [r3, #12]
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	f042 0220 	orr.w	r2, r2, #32
 8011c3a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011c3c:	2300      	movs	r3, #0
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	3714      	adds	r7, #20
 8011c42:	46bd      	mov	sp, r7
 8011c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c48:	4770      	bx	lr

08011c4a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011c4a:	b480      	push	{r7}
 8011c4c:	b089      	sub	sp, #36	; 0x24
 8011c4e:	af00      	add	r7, sp, #0
 8011c50:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	330c      	adds	r3, #12
 8011c58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	e853 3f00 	ldrex	r3, [r3]
 8011c60:	60bb      	str	r3, [r7, #8]
   return(result);
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011c68:	61fb      	str	r3, [r7, #28]
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	330c      	adds	r3, #12
 8011c70:	69fa      	ldr	r2, [r7, #28]
 8011c72:	61ba      	str	r2, [r7, #24]
 8011c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c76:	6979      	ldr	r1, [r7, #20]
 8011c78:	69ba      	ldr	r2, [r7, #24]
 8011c7a:	e841 2300 	strex	r3, r2, [r1]
 8011c7e:	613b      	str	r3, [r7, #16]
   return(result);
 8011c80:	693b      	ldr	r3, [r7, #16]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d1e5      	bne.n	8011c52 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	2220      	movs	r2, #32
 8011c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8011c8e:	bf00      	nop
 8011c90:	3724      	adds	r7, #36	; 0x24
 8011c92:	46bd      	mov	sp, r7
 8011c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c98:	4770      	bx	lr

08011c9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011c9a:	b480      	push	{r7}
 8011c9c:	b095      	sub	sp, #84	; 0x54
 8011c9e:	af00      	add	r7, sp, #0
 8011ca0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	330c      	adds	r3, #12
 8011ca8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cac:	e853 3f00 	ldrex	r3, [r3]
 8011cb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	330c      	adds	r3, #12
 8011cc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011cc2:	643a      	str	r2, [r7, #64]	; 0x40
 8011cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011cc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011cca:	e841 2300 	strex	r3, r2, [r1]
 8011cce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d1e5      	bne.n	8011ca2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	3314      	adds	r3, #20
 8011cdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cde:	6a3b      	ldr	r3, [r7, #32]
 8011ce0:	e853 3f00 	ldrex	r3, [r3]
 8011ce4:	61fb      	str	r3, [r7, #28]
   return(result);
 8011ce6:	69fb      	ldr	r3, [r7, #28]
 8011ce8:	f023 0301 	bic.w	r3, r3, #1
 8011cec:	64bb      	str	r3, [r7, #72]	; 0x48
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	3314      	adds	r3, #20
 8011cf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011cf8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011cfe:	e841 2300 	strex	r3, r2, [r1]
 8011d02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d1e5      	bne.n	8011cd6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d0e:	2b01      	cmp	r3, #1
 8011d10:	d119      	bne.n	8011d46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	330c      	adds	r3, #12
 8011d18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	e853 3f00 	ldrex	r3, [r3]
 8011d20:	60bb      	str	r3, [r7, #8]
   return(result);
 8011d22:	68bb      	ldr	r3, [r7, #8]
 8011d24:	f023 0310 	bic.w	r3, r3, #16
 8011d28:	647b      	str	r3, [r7, #68]	; 0x44
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	330c      	adds	r3, #12
 8011d30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011d32:	61ba      	str	r2, [r7, #24]
 8011d34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d36:	6979      	ldr	r1, [r7, #20]
 8011d38:	69ba      	ldr	r2, [r7, #24]
 8011d3a:	e841 2300 	strex	r3, r2, [r1]
 8011d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8011d40:	693b      	ldr	r3, [r7, #16]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d1e5      	bne.n	8011d12 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	2220      	movs	r2, #32
 8011d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	2200      	movs	r2, #0
 8011d52:	631a      	str	r2, [r3, #48]	; 0x30
}
 8011d54:	bf00      	nop
 8011d56:	3754      	adds	r7, #84	; 0x54
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5e:	4770      	bx	lr

08011d60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b084      	sub	sp, #16
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	2200      	movs	r2, #0
 8011d72:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	2200      	movs	r2, #0
 8011d78:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011d7a:	68f8      	ldr	r0, [r7, #12]
 8011d7c:	f7ff fe6c 	bl	8011a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011d80:	bf00      	nop
 8011d82:	3710      	adds	r7, #16
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}

08011d88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011d88:	b480      	push	{r7}
 8011d8a:	b085      	sub	sp, #20
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011d96:	b2db      	uxtb	r3, r3
 8011d98:	2b21      	cmp	r3, #33	; 0x21
 8011d9a:	d13e      	bne.n	8011e1a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	689b      	ldr	r3, [r3, #8]
 8011da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011da4:	d114      	bne.n	8011dd0 <UART_Transmit_IT+0x48>
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	691b      	ldr	r3, [r3, #16]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d110      	bne.n	8011dd0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	6a1b      	ldr	r3, [r3, #32]
 8011db2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	881b      	ldrh	r3, [r3, #0]
 8011db8:	461a      	mov	r2, r3
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011dc2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	6a1b      	ldr	r3, [r3, #32]
 8011dc8:	1c9a      	adds	r2, r3, #2
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	621a      	str	r2, [r3, #32]
 8011dce:	e008      	b.n	8011de2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	6a1b      	ldr	r3, [r3, #32]
 8011dd4:	1c59      	adds	r1, r3, #1
 8011dd6:	687a      	ldr	r2, [r7, #4]
 8011dd8:	6211      	str	r1, [r2, #32]
 8011dda:	781a      	ldrb	r2, [r3, #0]
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011de6:	b29b      	uxth	r3, r3
 8011de8:	3b01      	subs	r3, #1
 8011dea:	b29b      	uxth	r3, r3
 8011dec:	687a      	ldr	r2, [r7, #4]
 8011dee:	4619      	mov	r1, r3
 8011df0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d10f      	bne.n	8011e16 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	68da      	ldr	r2, [r3, #12]
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011e04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	68da      	ldr	r2, [r3, #12]
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011e14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011e16:	2300      	movs	r3, #0
 8011e18:	e000      	b.n	8011e1c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011e1a:	2302      	movs	r3, #2
  }
}
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	3714      	adds	r7, #20
 8011e20:	46bd      	mov	sp, r7
 8011e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e26:	4770      	bx	lr

08011e28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b082      	sub	sp, #8
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	68da      	ldr	r2, [r3, #12]
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011e3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	2220      	movs	r2, #32
 8011e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011e48:	6878      	ldr	r0, [r7, #4]
 8011e4a:	f7f6 fd83 	bl	8008954 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8011e4e:	2300      	movs	r3, #0
}
 8011e50:	4618      	mov	r0, r3
 8011e52:	3708      	adds	r7, #8
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}

08011e58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b08c      	sub	sp, #48	; 0x30
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011e66:	b2db      	uxtb	r3, r3
 8011e68:	2b22      	cmp	r3, #34	; 0x22
 8011e6a:	f040 80ab 	bne.w	8011fc4 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	689b      	ldr	r3, [r3, #8]
 8011e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e76:	d117      	bne.n	8011ea8 <UART_Receive_IT+0x50>
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	691b      	ldr	r3, [r3, #16]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d113      	bne.n	8011ea8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8011e80:	2300      	movs	r3, #0
 8011e82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e88:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	685b      	ldr	r3, [r3, #4]
 8011e90:	b29b      	uxth	r3, r3
 8011e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e96:	b29a      	uxth	r2, r3
 8011e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e9a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ea0:	1c9a      	adds	r2, r3, #2
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	629a      	str	r2, [r3, #40]	; 0x28
 8011ea6:	e026      	b.n	8011ef6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8011eae:	2300      	movs	r3, #0
 8011eb0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	689b      	ldr	r3, [r3, #8]
 8011eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011eba:	d007      	beq.n	8011ecc <UART_Receive_IT+0x74>
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	689b      	ldr	r3, [r3, #8]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d10a      	bne.n	8011eda <UART_Receive_IT+0x82>
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	691b      	ldr	r3, [r3, #16]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d106      	bne.n	8011eda <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	685b      	ldr	r3, [r3, #4]
 8011ed2:	b2da      	uxtb	r2, r3
 8011ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ed6:	701a      	strb	r2, [r3, #0]
 8011ed8:	e008      	b.n	8011eec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	685b      	ldr	r3, [r3, #4]
 8011ee0:	b2db      	uxtb	r3, r3
 8011ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ee6:	b2da      	uxtb	r2, r3
 8011ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ef0:	1c5a      	adds	r2, r3, #1
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011efa:	b29b      	uxth	r3, r3
 8011efc:	3b01      	subs	r3, #1
 8011efe:	b29b      	uxth	r3, r3
 8011f00:	687a      	ldr	r2, [r7, #4]
 8011f02:	4619      	mov	r1, r3
 8011f04:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d15a      	bne.n	8011fc0 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	68da      	ldr	r2, [r3, #12]
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	f022 0220 	bic.w	r2, r2, #32
 8011f18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	68da      	ldr	r2, [r3, #12]
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011f28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	695a      	ldr	r2, [r3, #20]
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	f022 0201 	bic.w	r2, r2, #1
 8011f38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	2220      	movs	r2, #32
 8011f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f46:	2b01      	cmp	r3, #1
 8011f48:	d135      	bne.n	8011fb6 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	330c      	adds	r3, #12
 8011f56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f58:	697b      	ldr	r3, [r7, #20]
 8011f5a:	e853 3f00 	ldrex	r3, [r3]
 8011f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	f023 0310 	bic.w	r3, r3, #16
 8011f66:	627b      	str	r3, [r7, #36]	; 0x24
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	330c      	adds	r3, #12
 8011f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f70:	623a      	str	r2, [r7, #32]
 8011f72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f74:	69f9      	ldr	r1, [r7, #28]
 8011f76:	6a3a      	ldr	r2, [r7, #32]
 8011f78:	e841 2300 	strex	r3, r2, [r1]
 8011f7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8011f7e:	69bb      	ldr	r3, [r7, #24]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d1e5      	bne.n	8011f50 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	f003 0310 	and.w	r3, r3, #16
 8011f8e:	2b10      	cmp	r3, #16
 8011f90:	d10a      	bne.n	8011fa8 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011f92:	2300      	movs	r3, #0
 8011f94:	60fb      	str	r3, [r7, #12]
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	60fb      	str	r3, [r7, #12]
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	685b      	ldr	r3, [r3, #4]
 8011fa4:	60fb      	str	r3, [r7, #12]
 8011fa6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011fac:	4619      	mov	r1, r3
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f7ff fd5c 	bl	8011a6c <HAL_UARTEx_RxEventCallback>
 8011fb4:	e002      	b.n	8011fbc <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8011fb6:	6878      	ldr	r0, [r7, #4]
 8011fb8:	f7f6 fc68 	bl	800888c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	e002      	b.n	8011fc6 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	e000      	b.n	8011fc6 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8011fc4:	2302      	movs	r3, #2
  }
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	3730      	adds	r7, #48	; 0x30
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}
	...

08011fd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011fd4:	b0c0      	sub	sp, #256	; 0x100
 8011fd6:	af00      	add	r7, sp, #0
 8011fd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	691b      	ldr	r3, [r3, #16]
 8011fe4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8011fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011fec:	68d9      	ldr	r1, [r3, #12]
 8011fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011ff2:	681a      	ldr	r2, [r3, #0]
 8011ff4:	ea40 0301 	orr.w	r3, r0, r1
 8011ff8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011ffe:	689a      	ldr	r2, [r3, #8]
 8012000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012004:	691b      	ldr	r3, [r3, #16]
 8012006:	431a      	orrs	r2, r3
 8012008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801200c:	695b      	ldr	r3, [r3, #20]
 801200e:	431a      	orrs	r2, r3
 8012010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012014:	69db      	ldr	r3, [r3, #28]
 8012016:	4313      	orrs	r3, r2
 8012018:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801201c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	68db      	ldr	r3, [r3, #12]
 8012024:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8012028:	f021 010c 	bic.w	r1, r1, #12
 801202c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012030:	681a      	ldr	r2, [r3, #0]
 8012032:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012036:	430b      	orrs	r3, r1
 8012038:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801203a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	695b      	ldr	r3, [r3, #20]
 8012042:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8012046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801204a:	6999      	ldr	r1, [r3, #24]
 801204c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012050:	681a      	ldr	r2, [r3, #0]
 8012052:	ea40 0301 	orr.w	r3, r0, r1
 8012056:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8012058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801205c:	681a      	ldr	r2, [r3, #0]
 801205e:	4b8f      	ldr	r3, [pc, #572]	; (801229c <UART_SetConfig+0x2cc>)
 8012060:	429a      	cmp	r2, r3
 8012062:	d005      	beq.n	8012070 <UART_SetConfig+0xa0>
 8012064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012068:	681a      	ldr	r2, [r3, #0]
 801206a:	4b8d      	ldr	r3, [pc, #564]	; (80122a0 <UART_SetConfig+0x2d0>)
 801206c:	429a      	cmp	r2, r3
 801206e:	d104      	bne.n	801207a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8012070:	f7fc fd14 	bl	800ea9c <HAL_RCC_GetPCLK2Freq>
 8012074:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8012078:	e003      	b.n	8012082 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801207a:	f7fc fcfb 	bl	800ea74 <HAL_RCC_GetPCLK1Freq>
 801207e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012086:	69db      	ldr	r3, [r3, #28]
 8012088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801208c:	f040 810c 	bne.w	80122a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8012090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012094:	2200      	movs	r2, #0
 8012096:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801209a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801209e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80120a2:	4622      	mov	r2, r4
 80120a4:	462b      	mov	r3, r5
 80120a6:	1891      	adds	r1, r2, r2
 80120a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80120aa:	415b      	adcs	r3, r3
 80120ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80120ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80120b2:	4621      	mov	r1, r4
 80120b4:	eb12 0801 	adds.w	r8, r2, r1
 80120b8:	4629      	mov	r1, r5
 80120ba:	eb43 0901 	adc.w	r9, r3, r1
 80120be:	f04f 0200 	mov.w	r2, #0
 80120c2:	f04f 0300 	mov.w	r3, #0
 80120c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80120ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80120ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80120d2:	4690      	mov	r8, r2
 80120d4:	4699      	mov	r9, r3
 80120d6:	4623      	mov	r3, r4
 80120d8:	eb18 0303 	adds.w	r3, r8, r3
 80120dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80120e0:	462b      	mov	r3, r5
 80120e2:	eb49 0303 	adc.w	r3, r9, r3
 80120e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80120ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80120ee:	685b      	ldr	r3, [r3, #4]
 80120f0:	2200      	movs	r2, #0
 80120f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80120f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80120fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80120fe:	460b      	mov	r3, r1
 8012100:	18db      	adds	r3, r3, r3
 8012102:	653b      	str	r3, [r7, #80]	; 0x50
 8012104:	4613      	mov	r3, r2
 8012106:	eb42 0303 	adc.w	r3, r2, r3
 801210a:	657b      	str	r3, [r7, #84]	; 0x54
 801210c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012110:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8012114:	f7ee fd88 	bl	8000c28 <__aeabi_uldivmod>
 8012118:	4602      	mov	r2, r0
 801211a:	460b      	mov	r3, r1
 801211c:	4b61      	ldr	r3, [pc, #388]	; (80122a4 <UART_SetConfig+0x2d4>)
 801211e:	fba3 2302 	umull	r2, r3, r3, r2
 8012122:	095b      	lsrs	r3, r3, #5
 8012124:	011c      	lsls	r4, r3, #4
 8012126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801212a:	2200      	movs	r2, #0
 801212c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012130:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8012134:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8012138:	4642      	mov	r2, r8
 801213a:	464b      	mov	r3, r9
 801213c:	1891      	adds	r1, r2, r2
 801213e:	64b9      	str	r1, [r7, #72]	; 0x48
 8012140:	415b      	adcs	r3, r3
 8012142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012144:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8012148:	4641      	mov	r1, r8
 801214a:	eb12 0a01 	adds.w	sl, r2, r1
 801214e:	4649      	mov	r1, r9
 8012150:	eb43 0b01 	adc.w	fp, r3, r1
 8012154:	f04f 0200 	mov.w	r2, #0
 8012158:	f04f 0300 	mov.w	r3, #0
 801215c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012160:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8012164:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8012168:	4692      	mov	sl, r2
 801216a:	469b      	mov	fp, r3
 801216c:	4643      	mov	r3, r8
 801216e:	eb1a 0303 	adds.w	r3, sl, r3
 8012172:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012176:	464b      	mov	r3, r9
 8012178:	eb4b 0303 	adc.w	r3, fp, r3
 801217c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012184:	685b      	ldr	r3, [r3, #4]
 8012186:	2200      	movs	r2, #0
 8012188:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801218c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8012190:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8012194:	460b      	mov	r3, r1
 8012196:	18db      	adds	r3, r3, r3
 8012198:	643b      	str	r3, [r7, #64]	; 0x40
 801219a:	4613      	mov	r3, r2
 801219c:	eb42 0303 	adc.w	r3, r2, r3
 80121a0:	647b      	str	r3, [r7, #68]	; 0x44
 80121a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80121a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80121aa:	f7ee fd3d 	bl	8000c28 <__aeabi_uldivmod>
 80121ae:	4602      	mov	r2, r0
 80121b0:	460b      	mov	r3, r1
 80121b2:	4611      	mov	r1, r2
 80121b4:	4b3b      	ldr	r3, [pc, #236]	; (80122a4 <UART_SetConfig+0x2d4>)
 80121b6:	fba3 2301 	umull	r2, r3, r3, r1
 80121ba:	095b      	lsrs	r3, r3, #5
 80121bc:	2264      	movs	r2, #100	; 0x64
 80121be:	fb02 f303 	mul.w	r3, r2, r3
 80121c2:	1acb      	subs	r3, r1, r3
 80121c4:	00db      	lsls	r3, r3, #3
 80121c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80121ca:	4b36      	ldr	r3, [pc, #216]	; (80122a4 <UART_SetConfig+0x2d4>)
 80121cc:	fba3 2302 	umull	r2, r3, r3, r2
 80121d0:	095b      	lsrs	r3, r3, #5
 80121d2:	005b      	lsls	r3, r3, #1
 80121d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80121d8:	441c      	add	r4, r3
 80121da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80121de:	2200      	movs	r2, #0
 80121e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80121e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80121e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80121ec:	4642      	mov	r2, r8
 80121ee:	464b      	mov	r3, r9
 80121f0:	1891      	adds	r1, r2, r2
 80121f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80121f4:	415b      	adcs	r3, r3
 80121f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80121f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80121fc:	4641      	mov	r1, r8
 80121fe:	1851      	adds	r1, r2, r1
 8012200:	6339      	str	r1, [r7, #48]	; 0x30
 8012202:	4649      	mov	r1, r9
 8012204:	414b      	adcs	r3, r1
 8012206:	637b      	str	r3, [r7, #52]	; 0x34
 8012208:	f04f 0200 	mov.w	r2, #0
 801220c:	f04f 0300 	mov.w	r3, #0
 8012210:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8012214:	4659      	mov	r1, fp
 8012216:	00cb      	lsls	r3, r1, #3
 8012218:	4651      	mov	r1, sl
 801221a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801221e:	4651      	mov	r1, sl
 8012220:	00ca      	lsls	r2, r1, #3
 8012222:	4610      	mov	r0, r2
 8012224:	4619      	mov	r1, r3
 8012226:	4603      	mov	r3, r0
 8012228:	4642      	mov	r2, r8
 801222a:	189b      	adds	r3, r3, r2
 801222c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012230:	464b      	mov	r3, r9
 8012232:	460a      	mov	r2, r1
 8012234:	eb42 0303 	adc.w	r3, r2, r3
 8012238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801223c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012240:	685b      	ldr	r3, [r3, #4]
 8012242:	2200      	movs	r2, #0
 8012244:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8012248:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801224c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8012250:	460b      	mov	r3, r1
 8012252:	18db      	adds	r3, r3, r3
 8012254:	62bb      	str	r3, [r7, #40]	; 0x28
 8012256:	4613      	mov	r3, r2
 8012258:	eb42 0303 	adc.w	r3, r2, r3
 801225c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801225e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012262:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8012266:	f7ee fcdf 	bl	8000c28 <__aeabi_uldivmod>
 801226a:	4602      	mov	r2, r0
 801226c:	460b      	mov	r3, r1
 801226e:	4b0d      	ldr	r3, [pc, #52]	; (80122a4 <UART_SetConfig+0x2d4>)
 8012270:	fba3 1302 	umull	r1, r3, r3, r2
 8012274:	095b      	lsrs	r3, r3, #5
 8012276:	2164      	movs	r1, #100	; 0x64
 8012278:	fb01 f303 	mul.w	r3, r1, r3
 801227c:	1ad3      	subs	r3, r2, r3
 801227e:	00db      	lsls	r3, r3, #3
 8012280:	3332      	adds	r3, #50	; 0x32
 8012282:	4a08      	ldr	r2, [pc, #32]	; (80122a4 <UART_SetConfig+0x2d4>)
 8012284:	fba2 2303 	umull	r2, r3, r2, r3
 8012288:	095b      	lsrs	r3, r3, #5
 801228a:	f003 0207 	and.w	r2, r3, #7
 801228e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	4422      	add	r2, r4
 8012296:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8012298:	e106      	b.n	80124a8 <UART_SetConfig+0x4d8>
 801229a:	bf00      	nop
 801229c:	40011000 	.word	0x40011000
 80122a0:	40011400 	.word	0x40011400
 80122a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80122a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80122ac:	2200      	movs	r2, #0
 80122ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80122b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80122b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80122ba:	4642      	mov	r2, r8
 80122bc:	464b      	mov	r3, r9
 80122be:	1891      	adds	r1, r2, r2
 80122c0:	6239      	str	r1, [r7, #32]
 80122c2:	415b      	adcs	r3, r3
 80122c4:	627b      	str	r3, [r7, #36]	; 0x24
 80122c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80122ca:	4641      	mov	r1, r8
 80122cc:	1854      	adds	r4, r2, r1
 80122ce:	4649      	mov	r1, r9
 80122d0:	eb43 0501 	adc.w	r5, r3, r1
 80122d4:	f04f 0200 	mov.w	r2, #0
 80122d8:	f04f 0300 	mov.w	r3, #0
 80122dc:	00eb      	lsls	r3, r5, #3
 80122de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80122e2:	00e2      	lsls	r2, r4, #3
 80122e4:	4614      	mov	r4, r2
 80122e6:	461d      	mov	r5, r3
 80122e8:	4643      	mov	r3, r8
 80122ea:	18e3      	adds	r3, r4, r3
 80122ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80122f0:	464b      	mov	r3, r9
 80122f2:	eb45 0303 	adc.w	r3, r5, r3
 80122f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80122fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80122fe:	685b      	ldr	r3, [r3, #4]
 8012300:	2200      	movs	r2, #0
 8012302:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012306:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801230a:	f04f 0200 	mov.w	r2, #0
 801230e:	f04f 0300 	mov.w	r3, #0
 8012312:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8012316:	4629      	mov	r1, r5
 8012318:	008b      	lsls	r3, r1, #2
 801231a:	4621      	mov	r1, r4
 801231c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012320:	4621      	mov	r1, r4
 8012322:	008a      	lsls	r2, r1, #2
 8012324:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8012328:	f7ee fc7e 	bl	8000c28 <__aeabi_uldivmod>
 801232c:	4602      	mov	r2, r0
 801232e:	460b      	mov	r3, r1
 8012330:	4b60      	ldr	r3, [pc, #384]	; (80124b4 <UART_SetConfig+0x4e4>)
 8012332:	fba3 2302 	umull	r2, r3, r3, r2
 8012336:	095b      	lsrs	r3, r3, #5
 8012338:	011c      	lsls	r4, r3, #4
 801233a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801233e:	2200      	movs	r2, #0
 8012340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012344:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8012348:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 801234c:	4642      	mov	r2, r8
 801234e:	464b      	mov	r3, r9
 8012350:	1891      	adds	r1, r2, r2
 8012352:	61b9      	str	r1, [r7, #24]
 8012354:	415b      	adcs	r3, r3
 8012356:	61fb      	str	r3, [r7, #28]
 8012358:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801235c:	4641      	mov	r1, r8
 801235e:	1851      	adds	r1, r2, r1
 8012360:	6139      	str	r1, [r7, #16]
 8012362:	4649      	mov	r1, r9
 8012364:	414b      	adcs	r3, r1
 8012366:	617b      	str	r3, [r7, #20]
 8012368:	f04f 0200 	mov.w	r2, #0
 801236c:	f04f 0300 	mov.w	r3, #0
 8012370:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8012374:	4659      	mov	r1, fp
 8012376:	00cb      	lsls	r3, r1, #3
 8012378:	4651      	mov	r1, sl
 801237a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801237e:	4651      	mov	r1, sl
 8012380:	00ca      	lsls	r2, r1, #3
 8012382:	4610      	mov	r0, r2
 8012384:	4619      	mov	r1, r3
 8012386:	4603      	mov	r3, r0
 8012388:	4642      	mov	r2, r8
 801238a:	189b      	adds	r3, r3, r2
 801238c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012390:	464b      	mov	r3, r9
 8012392:	460a      	mov	r2, r1
 8012394:	eb42 0303 	adc.w	r3, r2, r3
 8012398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801239c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80123a0:	685b      	ldr	r3, [r3, #4]
 80123a2:	2200      	movs	r2, #0
 80123a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80123a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80123a8:	f04f 0200 	mov.w	r2, #0
 80123ac:	f04f 0300 	mov.w	r3, #0
 80123b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80123b4:	4649      	mov	r1, r9
 80123b6:	008b      	lsls	r3, r1, #2
 80123b8:	4641      	mov	r1, r8
 80123ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80123be:	4641      	mov	r1, r8
 80123c0:	008a      	lsls	r2, r1, #2
 80123c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80123c6:	f7ee fc2f 	bl	8000c28 <__aeabi_uldivmod>
 80123ca:	4602      	mov	r2, r0
 80123cc:	460b      	mov	r3, r1
 80123ce:	4611      	mov	r1, r2
 80123d0:	4b38      	ldr	r3, [pc, #224]	; (80124b4 <UART_SetConfig+0x4e4>)
 80123d2:	fba3 2301 	umull	r2, r3, r3, r1
 80123d6:	095b      	lsrs	r3, r3, #5
 80123d8:	2264      	movs	r2, #100	; 0x64
 80123da:	fb02 f303 	mul.w	r3, r2, r3
 80123de:	1acb      	subs	r3, r1, r3
 80123e0:	011b      	lsls	r3, r3, #4
 80123e2:	3332      	adds	r3, #50	; 0x32
 80123e4:	4a33      	ldr	r2, [pc, #204]	; (80124b4 <UART_SetConfig+0x4e4>)
 80123e6:	fba2 2303 	umull	r2, r3, r2, r3
 80123ea:	095b      	lsrs	r3, r3, #5
 80123ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80123f0:	441c      	add	r4, r3
 80123f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80123f6:	2200      	movs	r2, #0
 80123f8:	673b      	str	r3, [r7, #112]	; 0x70
 80123fa:	677a      	str	r2, [r7, #116]	; 0x74
 80123fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8012400:	4642      	mov	r2, r8
 8012402:	464b      	mov	r3, r9
 8012404:	1891      	adds	r1, r2, r2
 8012406:	60b9      	str	r1, [r7, #8]
 8012408:	415b      	adcs	r3, r3
 801240a:	60fb      	str	r3, [r7, #12]
 801240c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012410:	4641      	mov	r1, r8
 8012412:	1851      	adds	r1, r2, r1
 8012414:	6039      	str	r1, [r7, #0]
 8012416:	4649      	mov	r1, r9
 8012418:	414b      	adcs	r3, r1
 801241a:	607b      	str	r3, [r7, #4]
 801241c:	f04f 0200 	mov.w	r2, #0
 8012420:	f04f 0300 	mov.w	r3, #0
 8012424:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8012428:	4659      	mov	r1, fp
 801242a:	00cb      	lsls	r3, r1, #3
 801242c:	4651      	mov	r1, sl
 801242e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012432:	4651      	mov	r1, sl
 8012434:	00ca      	lsls	r2, r1, #3
 8012436:	4610      	mov	r0, r2
 8012438:	4619      	mov	r1, r3
 801243a:	4603      	mov	r3, r0
 801243c:	4642      	mov	r2, r8
 801243e:	189b      	adds	r3, r3, r2
 8012440:	66bb      	str	r3, [r7, #104]	; 0x68
 8012442:	464b      	mov	r3, r9
 8012444:	460a      	mov	r2, r1
 8012446:	eb42 0303 	adc.w	r3, r2, r3
 801244a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801244c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012450:	685b      	ldr	r3, [r3, #4]
 8012452:	2200      	movs	r2, #0
 8012454:	663b      	str	r3, [r7, #96]	; 0x60
 8012456:	667a      	str	r2, [r7, #100]	; 0x64
 8012458:	f04f 0200 	mov.w	r2, #0
 801245c:	f04f 0300 	mov.w	r3, #0
 8012460:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8012464:	4649      	mov	r1, r9
 8012466:	008b      	lsls	r3, r1, #2
 8012468:	4641      	mov	r1, r8
 801246a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801246e:	4641      	mov	r1, r8
 8012470:	008a      	lsls	r2, r1, #2
 8012472:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8012476:	f7ee fbd7 	bl	8000c28 <__aeabi_uldivmod>
 801247a:	4602      	mov	r2, r0
 801247c:	460b      	mov	r3, r1
 801247e:	4b0d      	ldr	r3, [pc, #52]	; (80124b4 <UART_SetConfig+0x4e4>)
 8012480:	fba3 1302 	umull	r1, r3, r3, r2
 8012484:	095b      	lsrs	r3, r3, #5
 8012486:	2164      	movs	r1, #100	; 0x64
 8012488:	fb01 f303 	mul.w	r3, r1, r3
 801248c:	1ad3      	subs	r3, r2, r3
 801248e:	011b      	lsls	r3, r3, #4
 8012490:	3332      	adds	r3, #50	; 0x32
 8012492:	4a08      	ldr	r2, [pc, #32]	; (80124b4 <UART_SetConfig+0x4e4>)
 8012494:	fba2 2303 	umull	r2, r3, r2, r3
 8012498:	095b      	lsrs	r3, r3, #5
 801249a:	f003 020f 	and.w	r2, r3, #15
 801249e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	4422      	add	r2, r4
 80124a6:	609a      	str	r2, [r3, #8]
}
 80124a8:	bf00      	nop
 80124aa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80124ae:	46bd      	mov	sp, r7
 80124b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80124b4:	51eb851f 	.word	0x51eb851f

080124b8 <atoi>:
 80124b8:	220a      	movs	r2, #10
 80124ba:	2100      	movs	r1, #0
 80124bc:	f000 bdda 	b.w	8013074 <strtol>

080124c0 <__cvt>:
 80124c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80124c4:	ec55 4b10 	vmov	r4, r5, d0
 80124c8:	2d00      	cmp	r5, #0
 80124ca:	460e      	mov	r6, r1
 80124cc:	4619      	mov	r1, r3
 80124ce:	462b      	mov	r3, r5
 80124d0:	bfbb      	ittet	lt
 80124d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80124d6:	461d      	movlt	r5, r3
 80124d8:	2300      	movge	r3, #0
 80124da:	232d      	movlt	r3, #45	; 0x2d
 80124dc:	700b      	strb	r3, [r1, #0]
 80124de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80124e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80124e4:	4691      	mov	r9, r2
 80124e6:	f023 0820 	bic.w	r8, r3, #32
 80124ea:	bfbc      	itt	lt
 80124ec:	4622      	movlt	r2, r4
 80124ee:	4614      	movlt	r4, r2
 80124f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80124f4:	d005      	beq.n	8012502 <__cvt+0x42>
 80124f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80124fa:	d100      	bne.n	80124fe <__cvt+0x3e>
 80124fc:	3601      	adds	r6, #1
 80124fe:	2102      	movs	r1, #2
 8012500:	e000      	b.n	8012504 <__cvt+0x44>
 8012502:	2103      	movs	r1, #3
 8012504:	ab03      	add	r3, sp, #12
 8012506:	9301      	str	r3, [sp, #4]
 8012508:	ab02      	add	r3, sp, #8
 801250a:	9300      	str	r3, [sp, #0]
 801250c:	ec45 4b10 	vmov	d0, r4, r5
 8012510:	4653      	mov	r3, sl
 8012512:	4632      	mov	r2, r6
 8012514:	f000 fec4 	bl	80132a0 <_dtoa_r>
 8012518:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801251c:	4607      	mov	r7, r0
 801251e:	d102      	bne.n	8012526 <__cvt+0x66>
 8012520:	f019 0f01 	tst.w	r9, #1
 8012524:	d022      	beq.n	801256c <__cvt+0xac>
 8012526:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801252a:	eb07 0906 	add.w	r9, r7, r6
 801252e:	d110      	bne.n	8012552 <__cvt+0x92>
 8012530:	783b      	ldrb	r3, [r7, #0]
 8012532:	2b30      	cmp	r3, #48	; 0x30
 8012534:	d10a      	bne.n	801254c <__cvt+0x8c>
 8012536:	2200      	movs	r2, #0
 8012538:	2300      	movs	r3, #0
 801253a:	4620      	mov	r0, r4
 801253c:	4629      	mov	r1, r5
 801253e:	f7ee fae3 	bl	8000b08 <__aeabi_dcmpeq>
 8012542:	b918      	cbnz	r0, 801254c <__cvt+0x8c>
 8012544:	f1c6 0601 	rsb	r6, r6, #1
 8012548:	f8ca 6000 	str.w	r6, [sl]
 801254c:	f8da 3000 	ldr.w	r3, [sl]
 8012550:	4499      	add	r9, r3
 8012552:	2200      	movs	r2, #0
 8012554:	2300      	movs	r3, #0
 8012556:	4620      	mov	r0, r4
 8012558:	4629      	mov	r1, r5
 801255a:	f7ee fad5 	bl	8000b08 <__aeabi_dcmpeq>
 801255e:	b108      	cbz	r0, 8012564 <__cvt+0xa4>
 8012560:	f8cd 900c 	str.w	r9, [sp, #12]
 8012564:	2230      	movs	r2, #48	; 0x30
 8012566:	9b03      	ldr	r3, [sp, #12]
 8012568:	454b      	cmp	r3, r9
 801256a:	d307      	bcc.n	801257c <__cvt+0xbc>
 801256c:	9b03      	ldr	r3, [sp, #12]
 801256e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012570:	1bdb      	subs	r3, r3, r7
 8012572:	4638      	mov	r0, r7
 8012574:	6013      	str	r3, [r2, #0]
 8012576:	b004      	add	sp, #16
 8012578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801257c:	1c59      	adds	r1, r3, #1
 801257e:	9103      	str	r1, [sp, #12]
 8012580:	701a      	strb	r2, [r3, #0]
 8012582:	e7f0      	b.n	8012566 <__cvt+0xa6>

08012584 <__exponent>:
 8012584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012586:	4603      	mov	r3, r0
 8012588:	2900      	cmp	r1, #0
 801258a:	bfb8      	it	lt
 801258c:	4249      	neglt	r1, r1
 801258e:	f803 2b02 	strb.w	r2, [r3], #2
 8012592:	bfb4      	ite	lt
 8012594:	222d      	movlt	r2, #45	; 0x2d
 8012596:	222b      	movge	r2, #43	; 0x2b
 8012598:	2909      	cmp	r1, #9
 801259a:	7042      	strb	r2, [r0, #1]
 801259c:	dd2a      	ble.n	80125f4 <__exponent+0x70>
 801259e:	f10d 0207 	add.w	r2, sp, #7
 80125a2:	4617      	mov	r7, r2
 80125a4:	260a      	movs	r6, #10
 80125a6:	4694      	mov	ip, r2
 80125a8:	fb91 f5f6 	sdiv	r5, r1, r6
 80125ac:	fb06 1415 	mls	r4, r6, r5, r1
 80125b0:	3430      	adds	r4, #48	; 0x30
 80125b2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80125b6:	460c      	mov	r4, r1
 80125b8:	2c63      	cmp	r4, #99	; 0x63
 80125ba:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80125be:	4629      	mov	r1, r5
 80125c0:	dcf1      	bgt.n	80125a6 <__exponent+0x22>
 80125c2:	3130      	adds	r1, #48	; 0x30
 80125c4:	f1ac 0402 	sub.w	r4, ip, #2
 80125c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80125cc:	1c41      	adds	r1, r0, #1
 80125ce:	4622      	mov	r2, r4
 80125d0:	42ba      	cmp	r2, r7
 80125d2:	d30a      	bcc.n	80125ea <__exponent+0x66>
 80125d4:	f10d 0209 	add.w	r2, sp, #9
 80125d8:	eba2 020c 	sub.w	r2, r2, ip
 80125dc:	42bc      	cmp	r4, r7
 80125de:	bf88      	it	hi
 80125e0:	2200      	movhi	r2, #0
 80125e2:	4413      	add	r3, r2
 80125e4:	1a18      	subs	r0, r3, r0
 80125e6:	b003      	add	sp, #12
 80125e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125ea:	f812 5b01 	ldrb.w	r5, [r2], #1
 80125ee:	f801 5f01 	strb.w	r5, [r1, #1]!
 80125f2:	e7ed      	b.n	80125d0 <__exponent+0x4c>
 80125f4:	2330      	movs	r3, #48	; 0x30
 80125f6:	3130      	adds	r1, #48	; 0x30
 80125f8:	7083      	strb	r3, [r0, #2]
 80125fa:	70c1      	strb	r1, [r0, #3]
 80125fc:	1d03      	adds	r3, r0, #4
 80125fe:	e7f1      	b.n	80125e4 <__exponent+0x60>

08012600 <_printf_float>:
 8012600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012604:	ed2d 8b02 	vpush	{d8}
 8012608:	b08d      	sub	sp, #52	; 0x34
 801260a:	460c      	mov	r4, r1
 801260c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012610:	4616      	mov	r6, r2
 8012612:	461f      	mov	r7, r3
 8012614:	4605      	mov	r5, r0
 8012616:	f000 fd5d 	bl	80130d4 <_localeconv_r>
 801261a:	f8d0 a000 	ldr.w	sl, [r0]
 801261e:	4650      	mov	r0, sl
 8012620:	f7ed fe46 	bl	80002b0 <strlen>
 8012624:	2300      	movs	r3, #0
 8012626:	930a      	str	r3, [sp, #40]	; 0x28
 8012628:	6823      	ldr	r3, [r4, #0]
 801262a:	9305      	str	r3, [sp, #20]
 801262c:	f8d8 3000 	ldr.w	r3, [r8]
 8012630:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012634:	3307      	adds	r3, #7
 8012636:	f023 0307 	bic.w	r3, r3, #7
 801263a:	f103 0208 	add.w	r2, r3, #8
 801263e:	f8c8 2000 	str.w	r2, [r8]
 8012642:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012646:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801264a:	9307      	str	r3, [sp, #28]
 801264c:	f8cd 8018 	str.w	r8, [sp, #24]
 8012650:	ee08 0a10 	vmov	s16, r0
 8012654:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8012658:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801265c:	4b9e      	ldr	r3, [pc, #632]	; (80128d8 <_printf_float+0x2d8>)
 801265e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012662:	f7ee fa83 	bl	8000b6c <__aeabi_dcmpun>
 8012666:	bb88      	cbnz	r0, 80126cc <_printf_float+0xcc>
 8012668:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801266c:	4b9a      	ldr	r3, [pc, #616]	; (80128d8 <_printf_float+0x2d8>)
 801266e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012672:	f7ee fa5d 	bl	8000b30 <__aeabi_dcmple>
 8012676:	bb48      	cbnz	r0, 80126cc <_printf_float+0xcc>
 8012678:	2200      	movs	r2, #0
 801267a:	2300      	movs	r3, #0
 801267c:	4640      	mov	r0, r8
 801267e:	4649      	mov	r1, r9
 8012680:	f7ee fa4c 	bl	8000b1c <__aeabi_dcmplt>
 8012684:	b110      	cbz	r0, 801268c <_printf_float+0x8c>
 8012686:	232d      	movs	r3, #45	; 0x2d
 8012688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801268c:	4a93      	ldr	r2, [pc, #588]	; (80128dc <_printf_float+0x2dc>)
 801268e:	4b94      	ldr	r3, [pc, #592]	; (80128e0 <_printf_float+0x2e0>)
 8012690:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012694:	bf94      	ite	ls
 8012696:	4690      	movls	r8, r2
 8012698:	4698      	movhi	r8, r3
 801269a:	2303      	movs	r3, #3
 801269c:	6123      	str	r3, [r4, #16]
 801269e:	9b05      	ldr	r3, [sp, #20]
 80126a0:	f023 0304 	bic.w	r3, r3, #4
 80126a4:	6023      	str	r3, [r4, #0]
 80126a6:	f04f 0900 	mov.w	r9, #0
 80126aa:	9700      	str	r7, [sp, #0]
 80126ac:	4633      	mov	r3, r6
 80126ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80126b0:	4621      	mov	r1, r4
 80126b2:	4628      	mov	r0, r5
 80126b4:	f000 f9da 	bl	8012a6c <_printf_common>
 80126b8:	3001      	adds	r0, #1
 80126ba:	f040 8090 	bne.w	80127de <_printf_float+0x1de>
 80126be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126c2:	b00d      	add	sp, #52	; 0x34
 80126c4:	ecbd 8b02 	vpop	{d8}
 80126c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126cc:	4642      	mov	r2, r8
 80126ce:	464b      	mov	r3, r9
 80126d0:	4640      	mov	r0, r8
 80126d2:	4649      	mov	r1, r9
 80126d4:	f7ee fa4a 	bl	8000b6c <__aeabi_dcmpun>
 80126d8:	b140      	cbz	r0, 80126ec <_printf_float+0xec>
 80126da:	464b      	mov	r3, r9
 80126dc:	2b00      	cmp	r3, #0
 80126de:	bfbc      	itt	lt
 80126e0:	232d      	movlt	r3, #45	; 0x2d
 80126e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80126e6:	4a7f      	ldr	r2, [pc, #508]	; (80128e4 <_printf_float+0x2e4>)
 80126e8:	4b7f      	ldr	r3, [pc, #508]	; (80128e8 <_printf_float+0x2e8>)
 80126ea:	e7d1      	b.n	8012690 <_printf_float+0x90>
 80126ec:	6863      	ldr	r3, [r4, #4]
 80126ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80126f2:	9206      	str	r2, [sp, #24]
 80126f4:	1c5a      	adds	r2, r3, #1
 80126f6:	d13f      	bne.n	8012778 <_printf_float+0x178>
 80126f8:	2306      	movs	r3, #6
 80126fa:	6063      	str	r3, [r4, #4]
 80126fc:	9b05      	ldr	r3, [sp, #20]
 80126fe:	6861      	ldr	r1, [r4, #4]
 8012700:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012704:	2300      	movs	r3, #0
 8012706:	9303      	str	r3, [sp, #12]
 8012708:	ab0a      	add	r3, sp, #40	; 0x28
 801270a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801270e:	ab09      	add	r3, sp, #36	; 0x24
 8012710:	ec49 8b10 	vmov	d0, r8, r9
 8012714:	9300      	str	r3, [sp, #0]
 8012716:	6022      	str	r2, [r4, #0]
 8012718:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801271c:	4628      	mov	r0, r5
 801271e:	f7ff fecf 	bl	80124c0 <__cvt>
 8012722:	9b06      	ldr	r3, [sp, #24]
 8012724:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012726:	2b47      	cmp	r3, #71	; 0x47
 8012728:	4680      	mov	r8, r0
 801272a:	d108      	bne.n	801273e <_printf_float+0x13e>
 801272c:	1cc8      	adds	r0, r1, #3
 801272e:	db02      	blt.n	8012736 <_printf_float+0x136>
 8012730:	6863      	ldr	r3, [r4, #4]
 8012732:	4299      	cmp	r1, r3
 8012734:	dd41      	ble.n	80127ba <_printf_float+0x1ba>
 8012736:	f1ab 0302 	sub.w	r3, fp, #2
 801273a:	fa5f fb83 	uxtb.w	fp, r3
 801273e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012742:	d820      	bhi.n	8012786 <_printf_float+0x186>
 8012744:	3901      	subs	r1, #1
 8012746:	465a      	mov	r2, fp
 8012748:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801274c:	9109      	str	r1, [sp, #36]	; 0x24
 801274e:	f7ff ff19 	bl	8012584 <__exponent>
 8012752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012754:	1813      	adds	r3, r2, r0
 8012756:	2a01      	cmp	r2, #1
 8012758:	4681      	mov	r9, r0
 801275a:	6123      	str	r3, [r4, #16]
 801275c:	dc02      	bgt.n	8012764 <_printf_float+0x164>
 801275e:	6822      	ldr	r2, [r4, #0]
 8012760:	07d2      	lsls	r2, r2, #31
 8012762:	d501      	bpl.n	8012768 <_printf_float+0x168>
 8012764:	3301      	adds	r3, #1
 8012766:	6123      	str	r3, [r4, #16]
 8012768:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801276c:	2b00      	cmp	r3, #0
 801276e:	d09c      	beq.n	80126aa <_printf_float+0xaa>
 8012770:	232d      	movs	r3, #45	; 0x2d
 8012772:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012776:	e798      	b.n	80126aa <_printf_float+0xaa>
 8012778:	9a06      	ldr	r2, [sp, #24]
 801277a:	2a47      	cmp	r2, #71	; 0x47
 801277c:	d1be      	bne.n	80126fc <_printf_float+0xfc>
 801277e:	2b00      	cmp	r3, #0
 8012780:	d1bc      	bne.n	80126fc <_printf_float+0xfc>
 8012782:	2301      	movs	r3, #1
 8012784:	e7b9      	b.n	80126fa <_printf_float+0xfa>
 8012786:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801278a:	d118      	bne.n	80127be <_printf_float+0x1be>
 801278c:	2900      	cmp	r1, #0
 801278e:	6863      	ldr	r3, [r4, #4]
 8012790:	dd0b      	ble.n	80127aa <_printf_float+0x1aa>
 8012792:	6121      	str	r1, [r4, #16]
 8012794:	b913      	cbnz	r3, 801279c <_printf_float+0x19c>
 8012796:	6822      	ldr	r2, [r4, #0]
 8012798:	07d0      	lsls	r0, r2, #31
 801279a:	d502      	bpl.n	80127a2 <_printf_float+0x1a2>
 801279c:	3301      	adds	r3, #1
 801279e:	440b      	add	r3, r1
 80127a0:	6123      	str	r3, [r4, #16]
 80127a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80127a4:	f04f 0900 	mov.w	r9, #0
 80127a8:	e7de      	b.n	8012768 <_printf_float+0x168>
 80127aa:	b913      	cbnz	r3, 80127b2 <_printf_float+0x1b2>
 80127ac:	6822      	ldr	r2, [r4, #0]
 80127ae:	07d2      	lsls	r2, r2, #31
 80127b0:	d501      	bpl.n	80127b6 <_printf_float+0x1b6>
 80127b2:	3302      	adds	r3, #2
 80127b4:	e7f4      	b.n	80127a0 <_printf_float+0x1a0>
 80127b6:	2301      	movs	r3, #1
 80127b8:	e7f2      	b.n	80127a0 <_printf_float+0x1a0>
 80127ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80127be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127c0:	4299      	cmp	r1, r3
 80127c2:	db05      	blt.n	80127d0 <_printf_float+0x1d0>
 80127c4:	6823      	ldr	r3, [r4, #0]
 80127c6:	6121      	str	r1, [r4, #16]
 80127c8:	07d8      	lsls	r0, r3, #31
 80127ca:	d5ea      	bpl.n	80127a2 <_printf_float+0x1a2>
 80127cc:	1c4b      	adds	r3, r1, #1
 80127ce:	e7e7      	b.n	80127a0 <_printf_float+0x1a0>
 80127d0:	2900      	cmp	r1, #0
 80127d2:	bfd4      	ite	le
 80127d4:	f1c1 0202 	rsble	r2, r1, #2
 80127d8:	2201      	movgt	r2, #1
 80127da:	4413      	add	r3, r2
 80127dc:	e7e0      	b.n	80127a0 <_printf_float+0x1a0>
 80127de:	6823      	ldr	r3, [r4, #0]
 80127e0:	055a      	lsls	r2, r3, #21
 80127e2:	d407      	bmi.n	80127f4 <_printf_float+0x1f4>
 80127e4:	6923      	ldr	r3, [r4, #16]
 80127e6:	4642      	mov	r2, r8
 80127e8:	4631      	mov	r1, r6
 80127ea:	4628      	mov	r0, r5
 80127ec:	47b8      	blx	r7
 80127ee:	3001      	adds	r0, #1
 80127f0:	d12c      	bne.n	801284c <_printf_float+0x24c>
 80127f2:	e764      	b.n	80126be <_printf_float+0xbe>
 80127f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80127f8:	f240 80e0 	bls.w	80129bc <_printf_float+0x3bc>
 80127fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012800:	2200      	movs	r2, #0
 8012802:	2300      	movs	r3, #0
 8012804:	f7ee f980 	bl	8000b08 <__aeabi_dcmpeq>
 8012808:	2800      	cmp	r0, #0
 801280a:	d034      	beq.n	8012876 <_printf_float+0x276>
 801280c:	4a37      	ldr	r2, [pc, #220]	; (80128ec <_printf_float+0x2ec>)
 801280e:	2301      	movs	r3, #1
 8012810:	4631      	mov	r1, r6
 8012812:	4628      	mov	r0, r5
 8012814:	47b8      	blx	r7
 8012816:	3001      	adds	r0, #1
 8012818:	f43f af51 	beq.w	80126be <_printf_float+0xbe>
 801281c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012820:	429a      	cmp	r2, r3
 8012822:	db02      	blt.n	801282a <_printf_float+0x22a>
 8012824:	6823      	ldr	r3, [r4, #0]
 8012826:	07d8      	lsls	r0, r3, #31
 8012828:	d510      	bpl.n	801284c <_printf_float+0x24c>
 801282a:	ee18 3a10 	vmov	r3, s16
 801282e:	4652      	mov	r2, sl
 8012830:	4631      	mov	r1, r6
 8012832:	4628      	mov	r0, r5
 8012834:	47b8      	blx	r7
 8012836:	3001      	adds	r0, #1
 8012838:	f43f af41 	beq.w	80126be <_printf_float+0xbe>
 801283c:	f04f 0800 	mov.w	r8, #0
 8012840:	f104 091a 	add.w	r9, r4, #26
 8012844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012846:	3b01      	subs	r3, #1
 8012848:	4543      	cmp	r3, r8
 801284a:	dc09      	bgt.n	8012860 <_printf_float+0x260>
 801284c:	6823      	ldr	r3, [r4, #0]
 801284e:	079b      	lsls	r3, r3, #30
 8012850:	f100 8107 	bmi.w	8012a62 <_printf_float+0x462>
 8012854:	68e0      	ldr	r0, [r4, #12]
 8012856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012858:	4298      	cmp	r0, r3
 801285a:	bfb8      	it	lt
 801285c:	4618      	movlt	r0, r3
 801285e:	e730      	b.n	80126c2 <_printf_float+0xc2>
 8012860:	2301      	movs	r3, #1
 8012862:	464a      	mov	r2, r9
 8012864:	4631      	mov	r1, r6
 8012866:	4628      	mov	r0, r5
 8012868:	47b8      	blx	r7
 801286a:	3001      	adds	r0, #1
 801286c:	f43f af27 	beq.w	80126be <_printf_float+0xbe>
 8012870:	f108 0801 	add.w	r8, r8, #1
 8012874:	e7e6      	b.n	8012844 <_printf_float+0x244>
 8012876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012878:	2b00      	cmp	r3, #0
 801287a:	dc39      	bgt.n	80128f0 <_printf_float+0x2f0>
 801287c:	4a1b      	ldr	r2, [pc, #108]	; (80128ec <_printf_float+0x2ec>)
 801287e:	2301      	movs	r3, #1
 8012880:	4631      	mov	r1, r6
 8012882:	4628      	mov	r0, r5
 8012884:	47b8      	blx	r7
 8012886:	3001      	adds	r0, #1
 8012888:	f43f af19 	beq.w	80126be <_printf_float+0xbe>
 801288c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012890:	4313      	orrs	r3, r2
 8012892:	d102      	bne.n	801289a <_printf_float+0x29a>
 8012894:	6823      	ldr	r3, [r4, #0]
 8012896:	07d9      	lsls	r1, r3, #31
 8012898:	d5d8      	bpl.n	801284c <_printf_float+0x24c>
 801289a:	ee18 3a10 	vmov	r3, s16
 801289e:	4652      	mov	r2, sl
 80128a0:	4631      	mov	r1, r6
 80128a2:	4628      	mov	r0, r5
 80128a4:	47b8      	blx	r7
 80128a6:	3001      	adds	r0, #1
 80128a8:	f43f af09 	beq.w	80126be <_printf_float+0xbe>
 80128ac:	f04f 0900 	mov.w	r9, #0
 80128b0:	f104 0a1a 	add.w	sl, r4, #26
 80128b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128b6:	425b      	negs	r3, r3
 80128b8:	454b      	cmp	r3, r9
 80128ba:	dc01      	bgt.n	80128c0 <_printf_float+0x2c0>
 80128bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128be:	e792      	b.n	80127e6 <_printf_float+0x1e6>
 80128c0:	2301      	movs	r3, #1
 80128c2:	4652      	mov	r2, sl
 80128c4:	4631      	mov	r1, r6
 80128c6:	4628      	mov	r0, r5
 80128c8:	47b8      	blx	r7
 80128ca:	3001      	adds	r0, #1
 80128cc:	f43f aef7 	beq.w	80126be <_printf_float+0xbe>
 80128d0:	f109 0901 	add.w	r9, r9, #1
 80128d4:	e7ee      	b.n	80128b4 <_printf_float+0x2b4>
 80128d6:	bf00      	nop
 80128d8:	7fefffff 	.word	0x7fefffff
 80128dc:	08015884 	.word	0x08015884
 80128e0:	08015888 	.word	0x08015888
 80128e4:	0801588c 	.word	0x0801588c
 80128e8:	08015890 	.word	0x08015890
 80128ec:	08015894 	.word	0x08015894
 80128f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80128f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80128f4:	429a      	cmp	r2, r3
 80128f6:	bfa8      	it	ge
 80128f8:	461a      	movge	r2, r3
 80128fa:	2a00      	cmp	r2, #0
 80128fc:	4691      	mov	r9, r2
 80128fe:	dc37      	bgt.n	8012970 <_printf_float+0x370>
 8012900:	f04f 0b00 	mov.w	fp, #0
 8012904:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012908:	f104 021a 	add.w	r2, r4, #26
 801290c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801290e:	9305      	str	r3, [sp, #20]
 8012910:	eba3 0309 	sub.w	r3, r3, r9
 8012914:	455b      	cmp	r3, fp
 8012916:	dc33      	bgt.n	8012980 <_printf_float+0x380>
 8012918:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801291c:	429a      	cmp	r2, r3
 801291e:	db3b      	blt.n	8012998 <_printf_float+0x398>
 8012920:	6823      	ldr	r3, [r4, #0]
 8012922:	07da      	lsls	r2, r3, #31
 8012924:	d438      	bmi.n	8012998 <_printf_float+0x398>
 8012926:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801292a:	eba2 0903 	sub.w	r9, r2, r3
 801292e:	9b05      	ldr	r3, [sp, #20]
 8012930:	1ad2      	subs	r2, r2, r3
 8012932:	4591      	cmp	r9, r2
 8012934:	bfa8      	it	ge
 8012936:	4691      	movge	r9, r2
 8012938:	f1b9 0f00 	cmp.w	r9, #0
 801293c:	dc35      	bgt.n	80129aa <_printf_float+0x3aa>
 801293e:	f04f 0800 	mov.w	r8, #0
 8012942:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012946:	f104 0a1a 	add.w	sl, r4, #26
 801294a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801294e:	1a9b      	subs	r3, r3, r2
 8012950:	eba3 0309 	sub.w	r3, r3, r9
 8012954:	4543      	cmp	r3, r8
 8012956:	f77f af79 	ble.w	801284c <_printf_float+0x24c>
 801295a:	2301      	movs	r3, #1
 801295c:	4652      	mov	r2, sl
 801295e:	4631      	mov	r1, r6
 8012960:	4628      	mov	r0, r5
 8012962:	47b8      	blx	r7
 8012964:	3001      	adds	r0, #1
 8012966:	f43f aeaa 	beq.w	80126be <_printf_float+0xbe>
 801296a:	f108 0801 	add.w	r8, r8, #1
 801296e:	e7ec      	b.n	801294a <_printf_float+0x34a>
 8012970:	4613      	mov	r3, r2
 8012972:	4631      	mov	r1, r6
 8012974:	4642      	mov	r2, r8
 8012976:	4628      	mov	r0, r5
 8012978:	47b8      	blx	r7
 801297a:	3001      	adds	r0, #1
 801297c:	d1c0      	bne.n	8012900 <_printf_float+0x300>
 801297e:	e69e      	b.n	80126be <_printf_float+0xbe>
 8012980:	2301      	movs	r3, #1
 8012982:	4631      	mov	r1, r6
 8012984:	4628      	mov	r0, r5
 8012986:	9205      	str	r2, [sp, #20]
 8012988:	47b8      	blx	r7
 801298a:	3001      	adds	r0, #1
 801298c:	f43f ae97 	beq.w	80126be <_printf_float+0xbe>
 8012990:	9a05      	ldr	r2, [sp, #20]
 8012992:	f10b 0b01 	add.w	fp, fp, #1
 8012996:	e7b9      	b.n	801290c <_printf_float+0x30c>
 8012998:	ee18 3a10 	vmov	r3, s16
 801299c:	4652      	mov	r2, sl
 801299e:	4631      	mov	r1, r6
 80129a0:	4628      	mov	r0, r5
 80129a2:	47b8      	blx	r7
 80129a4:	3001      	adds	r0, #1
 80129a6:	d1be      	bne.n	8012926 <_printf_float+0x326>
 80129a8:	e689      	b.n	80126be <_printf_float+0xbe>
 80129aa:	9a05      	ldr	r2, [sp, #20]
 80129ac:	464b      	mov	r3, r9
 80129ae:	4442      	add	r2, r8
 80129b0:	4631      	mov	r1, r6
 80129b2:	4628      	mov	r0, r5
 80129b4:	47b8      	blx	r7
 80129b6:	3001      	adds	r0, #1
 80129b8:	d1c1      	bne.n	801293e <_printf_float+0x33e>
 80129ba:	e680      	b.n	80126be <_printf_float+0xbe>
 80129bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129be:	2a01      	cmp	r2, #1
 80129c0:	dc01      	bgt.n	80129c6 <_printf_float+0x3c6>
 80129c2:	07db      	lsls	r3, r3, #31
 80129c4:	d53a      	bpl.n	8012a3c <_printf_float+0x43c>
 80129c6:	2301      	movs	r3, #1
 80129c8:	4642      	mov	r2, r8
 80129ca:	4631      	mov	r1, r6
 80129cc:	4628      	mov	r0, r5
 80129ce:	47b8      	blx	r7
 80129d0:	3001      	adds	r0, #1
 80129d2:	f43f ae74 	beq.w	80126be <_printf_float+0xbe>
 80129d6:	ee18 3a10 	vmov	r3, s16
 80129da:	4652      	mov	r2, sl
 80129dc:	4631      	mov	r1, r6
 80129de:	4628      	mov	r0, r5
 80129e0:	47b8      	blx	r7
 80129e2:	3001      	adds	r0, #1
 80129e4:	f43f ae6b 	beq.w	80126be <_printf_float+0xbe>
 80129e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80129ec:	2200      	movs	r2, #0
 80129ee:	2300      	movs	r3, #0
 80129f0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80129f4:	f7ee f888 	bl	8000b08 <__aeabi_dcmpeq>
 80129f8:	b9d8      	cbnz	r0, 8012a32 <_printf_float+0x432>
 80129fa:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80129fe:	f108 0201 	add.w	r2, r8, #1
 8012a02:	4631      	mov	r1, r6
 8012a04:	4628      	mov	r0, r5
 8012a06:	47b8      	blx	r7
 8012a08:	3001      	adds	r0, #1
 8012a0a:	d10e      	bne.n	8012a2a <_printf_float+0x42a>
 8012a0c:	e657      	b.n	80126be <_printf_float+0xbe>
 8012a0e:	2301      	movs	r3, #1
 8012a10:	4652      	mov	r2, sl
 8012a12:	4631      	mov	r1, r6
 8012a14:	4628      	mov	r0, r5
 8012a16:	47b8      	blx	r7
 8012a18:	3001      	adds	r0, #1
 8012a1a:	f43f ae50 	beq.w	80126be <_printf_float+0xbe>
 8012a1e:	f108 0801 	add.w	r8, r8, #1
 8012a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a24:	3b01      	subs	r3, #1
 8012a26:	4543      	cmp	r3, r8
 8012a28:	dcf1      	bgt.n	8012a0e <_printf_float+0x40e>
 8012a2a:	464b      	mov	r3, r9
 8012a2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012a30:	e6da      	b.n	80127e8 <_printf_float+0x1e8>
 8012a32:	f04f 0800 	mov.w	r8, #0
 8012a36:	f104 0a1a 	add.w	sl, r4, #26
 8012a3a:	e7f2      	b.n	8012a22 <_printf_float+0x422>
 8012a3c:	2301      	movs	r3, #1
 8012a3e:	4642      	mov	r2, r8
 8012a40:	e7df      	b.n	8012a02 <_printf_float+0x402>
 8012a42:	2301      	movs	r3, #1
 8012a44:	464a      	mov	r2, r9
 8012a46:	4631      	mov	r1, r6
 8012a48:	4628      	mov	r0, r5
 8012a4a:	47b8      	blx	r7
 8012a4c:	3001      	adds	r0, #1
 8012a4e:	f43f ae36 	beq.w	80126be <_printf_float+0xbe>
 8012a52:	f108 0801 	add.w	r8, r8, #1
 8012a56:	68e3      	ldr	r3, [r4, #12]
 8012a58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012a5a:	1a5b      	subs	r3, r3, r1
 8012a5c:	4543      	cmp	r3, r8
 8012a5e:	dcf0      	bgt.n	8012a42 <_printf_float+0x442>
 8012a60:	e6f8      	b.n	8012854 <_printf_float+0x254>
 8012a62:	f04f 0800 	mov.w	r8, #0
 8012a66:	f104 0919 	add.w	r9, r4, #25
 8012a6a:	e7f4      	b.n	8012a56 <_printf_float+0x456>

08012a6c <_printf_common>:
 8012a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a70:	4616      	mov	r6, r2
 8012a72:	4699      	mov	r9, r3
 8012a74:	688a      	ldr	r2, [r1, #8]
 8012a76:	690b      	ldr	r3, [r1, #16]
 8012a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012a7c:	4293      	cmp	r3, r2
 8012a7e:	bfb8      	it	lt
 8012a80:	4613      	movlt	r3, r2
 8012a82:	6033      	str	r3, [r6, #0]
 8012a84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012a88:	4607      	mov	r7, r0
 8012a8a:	460c      	mov	r4, r1
 8012a8c:	b10a      	cbz	r2, 8012a92 <_printf_common+0x26>
 8012a8e:	3301      	adds	r3, #1
 8012a90:	6033      	str	r3, [r6, #0]
 8012a92:	6823      	ldr	r3, [r4, #0]
 8012a94:	0699      	lsls	r1, r3, #26
 8012a96:	bf42      	ittt	mi
 8012a98:	6833      	ldrmi	r3, [r6, #0]
 8012a9a:	3302      	addmi	r3, #2
 8012a9c:	6033      	strmi	r3, [r6, #0]
 8012a9e:	6825      	ldr	r5, [r4, #0]
 8012aa0:	f015 0506 	ands.w	r5, r5, #6
 8012aa4:	d106      	bne.n	8012ab4 <_printf_common+0x48>
 8012aa6:	f104 0a19 	add.w	sl, r4, #25
 8012aaa:	68e3      	ldr	r3, [r4, #12]
 8012aac:	6832      	ldr	r2, [r6, #0]
 8012aae:	1a9b      	subs	r3, r3, r2
 8012ab0:	42ab      	cmp	r3, r5
 8012ab2:	dc26      	bgt.n	8012b02 <_printf_common+0x96>
 8012ab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012ab8:	1e13      	subs	r3, r2, #0
 8012aba:	6822      	ldr	r2, [r4, #0]
 8012abc:	bf18      	it	ne
 8012abe:	2301      	movne	r3, #1
 8012ac0:	0692      	lsls	r2, r2, #26
 8012ac2:	d42b      	bmi.n	8012b1c <_printf_common+0xb0>
 8012ac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012ac8:	4649      	mov	r1, r9
 8012aca:	4638      	mov	r0, r7
 8012acc:	47c0      	blx	r8
 8012ace:	3001      	adds	r0, #1
 8012ad0:	d01e      	beq.n	8012b10 <_printf_common+0xa4>
 8012ad2:	6823      	ldr	r3, [r4, #0]
 8012ad4:	6922      	ldr	r2, [r4, #16]
 8012ad6:	f003 0306 	and.w	r3, r3, #6
 8012ada:	2b04      	cmp	r3, #4
 8012adc:	bf02      	ittt	eq
 8012ade:	68e5      	ldreq	r5, [r4, #12]
 8012ae0:	6833      	ldreq	r3, [r6, #0]
 8012ae2:	1aed      	subeq	r5, r5, r3
 8012ae4:	68a3      	ldr	r3, [r4, #8]
 8012ae6:	bf0c      	ite	eq
 8012ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012aec:	2500      	movne	r5, #0
 8012aee:	4293      	cmp	r3, r2
 8012af0:	bfc4      	itt	gt
 8012af2:	1a9b      	subgt	r3, r3, r2
 8012af4:	18ed      	addgt	r5, r5, r3
 8012af6:	2600      	movs	r6, #0
 8012af8:	341a      	adds	r4, #26
 8012afa:	42b5      	cmp	r5, r6
 8012afc:	d11a      	bne.n	8012b34 <_printf_common+0xc8>
 8012afe:	2000      	movs	r0, #0
 8012b00:	e008      	b.n	8012b14 <_printf_common+0xa8>
 8012b02:	2301      	movs	r3, #1
 8012b04:	4652      	mov	r2, sl
 8012b06:	4649      	mov	r1, r9
 8012b08:	4638      	mov	r0, r7
 8012b0a:	47c0      	blx	r8
 8012b0c:	3001      	adds	r0, #1
 8012b0e:	d103      	bne.n	8012b18 <_printf_common+0xac>
 8012b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b18:	3501      	adds	r5, #1
 8012b1a:	e7c6      	b.n	8012aaa <_printf_common+0x3e>
 8012b1c:	18e1      	adds	r1, r4, r3
 8012b1e:	1c5a      	adds	r2, r3, #1
 8012b20:	2030      	movs	r0, #48	; 0x30
 8012b22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012b26:	4422      	add	r2, r4
 8012b28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012b2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012b30:	3302      	adds	r3, #2
 8012b32:	e7c7      	b.n	8012ac4 <_printf_common+0x58>
 8012b34:	2301      	movs	r3, #1
 8012b36:	4622      	mov	r2, r4
 8012b38:	4649      	mov	r1, r9
 8012b3a:	4638      	mov	r0, r7
 8012b3c:	47c0      	blx	r8
 8012b3e:	3001      	adds	r0, #1
 8012b40:	d0e6      	beq.n	8012b10 <_printf_common+0xa4>
 8012b42:	3601      	adds	r6, #1
 8012b44:	e7d9      	b.n	8012afa <_printf_common+0x8e>
	...

08012b48 <_printf_i>:
 8012b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012b4c:	7e0f      	ldrb	r7, [r1, #24]
 8012b4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012b50:	2f78      	cmp	r7, #120	; 0x78
 8012b52:	4691      	mov	r9, r2
 8012b54:	4680      	mov	r8, r0
 8012b56:	460c      	mov	r4, r1
 8012b58:	469a      	mov	sl, r3
 8012b5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012b5e:	d807      	bhi.n	8012b70 <_printf_i+0x28>
 8012b60:	2f62      	cmp	r7, #98	; 0x62
 8012b62:	d80a      	bhi.n	8012b7a <_printf_i+0x32>
 8012b64:	2f00      	cmp	r7, #0
 8012b66:	f000 80d4 	beq.w	8012d12 <_printf_i+0x1ca>
 8012b6a:	2f58      	cmp	r7, #88	; 0x58
 8012b6c:	f000 80c0 	beq.w	8012cf0 <_printf_i+0x1a8>
 8012b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012b74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012b78:	e03a      	b.n	8012bf0 <_printf_i+0xa8>
 8012b7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012b7e:	2b15      	cmp	r3, #21
 8012b80:	d8f6      	bhi.n	8012b70 <_printf_i+0x28>
 8012b82:	a101      	add	r1, pc, #4	; (adr r1, 8012b88 <_printf_i+0x40>)
 8012b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012b88:	08012be1 	.word	0x08012be1
 8012b8c:	08012bf5 	.word	0x08012bf5
 8012b90:	08012b71 	.word	0x08012b71
 8012b94:	08012b71 	.word	0x08012b71
 8012b98:	08012b71 	.word	0x08012b71
 8012b9c:	08012b71 	.word	0x08012b71
 8012ba0:	08012bf5 	.word	0x08012bf5
 8012ba4:	08012b71 	.word	0x08012b71
 8012ba8:	08012b71 	.word	0x08012b71
 8012bac:	08012b71 	.word	0x08012b71
 8012bb0:	08012b71 	.word	0x08012b71
 8012bb4:	08012cf9 	.word	0x08012cf9
 8012bb8:	08012c21 	.word	0x08012c21
 8012bbc:	08012cb3 	.word	0x08012cb3
 8012bc0:	08012b71 	.word	0x08012b71
 8012bc4:	08012b71 	.word	0x08012b71
 8012bc8:	08012d1b 	.word	0x08012d1b
 8012bcc:	08012b71 	.word	0x08012b71
 8012bd0:	08012c21 	.word	0x08012c21
 8012bd4:	08012b71 	.word	0x08012b71
 8012bd8:	08012b71 	.word	0x08012b71
 8012bdc:	08012cbb 	.word	0x08012cbb
 8012be0:	682b      	ldr	r3, [r5, #0]
 8012be2:	1d1a      	adds	r2, r3, #4
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	602a      	str	r2, [r5, #0]
 8012be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012bf0:	2301      	movs	r3, #1
 8012bf2:	e09f      	b.n	8012d34 <_printf_i+0x1ec>
 8012bf4:	6820      	ldr	r0, [r4, #0]
 8012bf6:	682b      	ldr	r3, [r5, #0]
 8012bf8:	0607      	lsls	r7, r0, #24
 8012bfa:	f103 0104 	add.w	r1, r3, #4
 8012bfe:	6029      	str	r1, [r5, #0]
 8012c00:	d501      	bpl.n	8012c06 <_printf_i+0xbe>
 8012c02:	681e      	ldr	r6, [r3, #0]
 8012c04:	e003      	b.n	8012c0e <_printf_i+0xc6>
 8012c06:	0646      	lsls	r6, r0, #25
 8012c08:	d5fb      	bpl.n	8012c02 <_printf_i+0xba>
 8012c0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012c0e:	2e00      	cmp	r6, #0
 8012c10:	da03      	bge.n	8012c1a <_printf_i+0xd2>
 8012c12:	232d      	movs	r3, #45	; 0x2d
 8012c14:	4276      	negs	r6, r6
 8012c16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c1a:	485a      	ldr	r0, [pc, #360]	; (8012d84 <_printf_i+0x23c>)
 8012c1c:	230a      	movs	r3, #10
 8012c1e:	e012      	b.n	8012c46 <_printf_i+0xfe>
 8012c20:	682b      	ldr	r3, [r5, #0]
 8012c22:	6820      	ldr	r0, [r4, #0]
 8012c24:	1d19      	adds	r1, r3, #4
 8012c26:	6029      	str	r1, [r5, #0]
 8012c28:	0605      	lsls	r5, r0, #24
 8012c2a:	d501      	bpl.n	8012c30 <_printf_i+0xe8>
 8012c2c:	681e      	ldr	r6, [r3, #0]
 8012c2e:	e002      	b.n	8012c36 <_printf_i+0xee>
 8012c30:	0641      	lsls	r1, r0, #25
 8012c32:	d5fb      	bpl.n	8012c2c <_printf_i+0xe4>
 8012c34:	881e      	ldrh	r6, [r3, #0]
 8012c36:	4853      	ldr	r0, [pc, #332]	; (8012d84 <_printf_i+0x23c>)
 8012c38:	2f6f      	cmp	r7, #111	; 0x6f
 8012c3a:	bf0c      	ite	eq
 8012c3c:	2308      	moveq	r3, #8
 8012c3e:	230a      	movne	r3, #10
 8012c40:	2100      	movs	r1, #0
 8012c42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012c46:	6865      	ldr	r5, [r4, #4]
 8012c48:	60a5      	str	r5, [r4, #8]
 8012c4a:	2d00      	cmp	r5, #0
 8012c4c:	bfa2      	ittt	ge
 8012c4e:	6821      	ldrge	r1, [r4, #0]
 8012c50:	f021 0104 	bicge.w	r1, r1, #4
 8012c54:	6021      	strge	r1, [r4, #0]
 8012c56:	b90e      	cbnz	r6, 8012c5c <_printf_i+0x114>
 8012c58:	2d00      	cmp	r5, #0
 8012c5a:	d04b      	beq.n	8012cf4 <_printf_i+0x1ac>
 8012c5c:	4615      	mov	r5, r2
 8012c5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012c62:	fb03 6711 	mls	r7, r3, r1, r6
 8012c66:	5dc7      	ldrb	r7, [r0, r7]
 8012c68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012c6c:	4637      	mov	r7, r6
 8012c6e:	42bb      	cmp	r3, r7
 8012c70:	460e      	mov	r6, r1
 8012c72:	d9f4      	bls.n	8012c5e <_printf_i+0x116>
 8012c74:	2b08      	cmp	r3, #8
 8012c76:	d10b      	bne.n	8012c90 <_printf_i+0x148>
 8012c78:	6823      	ldr	r3, [r4, #0]
 8012c7a:	07de      	lsls	r6, r3, #31
 8012c7c:	d508      	bpl.n	8012c90 <_printf_i+0x148>
 8012c7e:	6923      	ldr	r3, [r4, #16]
 8012c80:	6861      	ldr	r1, [r4, #4]
 8012c82:	4299      	cmp	r1, r3
 8012c84:	bfde      	ittt	le
 8012c86:	2330      	movle	r3, #48	; 0x30
 8012c88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012c8c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012c90:	1b52      	subs	r2, r2, r5
 8012c92:	6122      	str	r2, [r4, #16]
 8012c94:	f8cd a000 	str.w	sl, [sp]
 8012c98:	464b      	mov	r3, r9
 8012c9a:	aa03      	add	r2, sp, #12
 8012c9c:	4621      	mov	r1, r4
 8012c9e:	4640      	mov	r0, r8
 8012ca0:	f7ff fee4 	bl	8012a6c <_printf_common>
 8012ca4:	3001      	adds	r0, #1
 8012ca6:	d14a      	bne.n	8012d3e <_printf_i+0x1f6>
 8012ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012cac:	b004      	add	sp, #16
 8012cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cb2:	6823      	ldr	r3, [r4, #0]
 8012cb4:	f043 0320 	orr.w	r3, r3, #32
 8012cb8:	6023      	str	r3, [r4, #0]
 8012cba:	4833      	ldr	r0, [pc, #204]	; (8012d88 <_printf_i+0x240>)
 8012cbc:	2778      	movs	r7, #120	; 0x78
 8012cbe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012cc2:	6823      	ldr	r3, [r4, #0]
 8012cc4:	6829      	ldr	r1, [r5, #0]
 8012cc6:	061f      	lsls	r7, r3, #24
 8012cc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8012ccc:	d402      	bmi.n	8012cd4 <_printf_i+0x18c>
 8012cce:	065f      	lsls	r7, r3, #25
 8012cd0:	bf48      	it	mi
 8012cd2:	b2b6      	uxthmi	r6, r6
 8012cd4:	07df      	lsls	r7, r3, #31
 8012cd6:	bf48      	it	mi
 8012cd8:	f043 0320 	orrmi.w	r3, r3, #32
 8012cdc:	6029      	str	r1, [r5, #0]
 8012cde:	bf48      	it	mi
 8012ce0:	6023      	strmi	r3, [r4, #0]
 8012ce2:	b91e      	cbnz	r6, 8012cec <_printf_i+0x1a4>
 8012ce4:	6823      	ldr	r3, [r4, #0]
 8012ce6:	f023 0320 	bic.w	r3, r3, #32
 8012cea:	6023      	str	r3, [r4, #0]
 8012cec:	2310      	movs	r3, #16
 8012cee:	e7a7      	b.n	8012c40 <_printf_i+0xf8>
 8012cf0:	4824      	ldr	r0, [pc, #144]	; (8012d84 <_printf_i+0x23c>)
 8012cf2:	e7e4      	b.n	8012cbe <_printf_i+0x176>
 8012cf4:	4615      	mov	r5, r2
 8012cf6:	e7bd      	b.n	8012c74 <_printf_i+0x12c>
 8012cf8:	682b      	ldr	r3, [r5, #0]
 8012cfa:	6826      	ldr	r6, [r4, #0]
 8012cfc:	6961      	ldr	r1, [r4, #20]
 8012cfe:	1d18      	adds	r0, r3, #4
 8012d00:	6028      	str	r0, [r5, #0]
 8012d02:	0635      	lsls	r5, r6, #24
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	d501      	bpl.n	8012d0c <_printf_i+0x1c4>
 8012d08:	6019      	str	r1, [r3, #0]
 8012d0a:	e002      	b.n	8012d12 <_printf_i+0x1ca>
 8012d0c:	0670      	lsls	r0, r6, #25
 8012d0e:	d5fb      	bpl.n	8012d08 <_printf_i+0x1c0>
 8012d10:	8019      	strh	r1, [r3, #0]
 8012d12:	2300      	movs	r3, #0
 8012d14:	6123      	str	r3, [r4, #16]
 8012d16:	4615      	mov	r5, r2
 8012d18:	e7bc      	b.n	8012c94 <_printf_i+0x14c>
 8012d1a:	682b      	ldr	r3, [r5, #0]
 8012d1c:	1d1a      	adds	r2, r3, #4
 8012d1e:	602a      	str	r2, [r5, #0]
 8012d20:	681d      	ldr	r5, [r3, #0]
 8012d22:	6862      	ldr	r2, [r4, #4]
 8012d24:	2100      	movs	r1, #0
 8012d26:	4628      	mov	r0, r5
 8012d28:	f7ed fa72 	bl	8000210 <memchr>
 8012d2c:	b108      	cbz	r0, 8012d32 <_printf_i+0x1ea>
 8012d2e:	1b40      	subs	r0, r0, r5
 8012d30:	6060      	str	r0, [r4, #4]
 8012d32:	6863      	ldr	r3, [r4, #4]
 8012d34:	6123      	str	r3, [r4, #16]
 8012d36:	2300      	movs	r3, #0
 8012d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d3c:	e7aa      	b.n	8012c94 <_printf_i+0x14c>
 8012d3e:	6923      	ldr	r3, [r4, #16]
 8012d40:	462a      	mov	r2, r5
 8012d42:	4649      	mov	r1, r9
 8012d44:	4640      	mov	r0, r8
 8012d46:	47d0      	blx	sl
 8012d48:	3001      	adds	r0, #1
 8012d4a:	d0ad      	beq.n	8012ca8 <_printf_i+0x160>
 8012d4c:	6823      	ldr	r3, [r4, #0]
 8012d4e:	079b      	lsls	r3, r3, #30
 8012d50:	d413      	bmi.n	8012d7a <_printf_i+0x232>
 8012d52:	68e0      	ldr	r0, [r4, #12]
 8012d54:	9b03      	ldr	r3, [sp, #12]
 8012d56:	4298      	cmp	r0, r3
 8012d58:	bfb8      	it	lt
 8012d5a:	4618      	movlt	r0, r3
 8012d5c:	e7a6      	b.n	8012cac <_printf_i+0x164>
 8012d5e:	2301      	movs	r3, #1
 8012d60:	4632      	mov	r2, r6
 8012d62:	4649      	mov	r1, r9
 8012d64:	4640      	mov	r0, r8
 8012d66:	47d0      	blx	sl
 8012d68:	3001      	adds	r0, #1
 8012d6a:	d09d      	beq.n	8012ca8 <_printf_i+0x160>
 8012d6c:	3501      	adds	r5, #1
 8012d6e:	68e3      	ldr	r3, [r4, #12]
 8012d70:	9903      	ldr	r1, [sp, #12]
 8012d72:	1a5b      	subs	r3, r3, r1
 8012d74:	42ab      	cmp	r3, r5
 8012d76:	dcf2      	bgt.n	8012d5e <_printf_i+0x216>
 8012d78:	e7eb      	b.n	8012d52 <_printf_i+0x20a>
 8012d7a:	2500      	movs	r5, #0
 8012d7c:	f104 0619 	add.w	r6, r4, #25
 8012d80:	e7f5      	b.n	8012d6e <_printf_i+0x226>
 8012d82:	bf00      	nop
 8012d84:	08015896 	.word	0x08015896
 8012d88:	080158a7 	.word	0x080158a7

08012d8c <siprintf>:
 8012d8c:	b40e      	push	{r1, r2, r3}
 8012d8e:	b500      	push	{lr}
 8012d90:	b09c      	sub	sp, #112	; 0x70
 8012d92:	ab1d      	add	r3, sp, #116	; 0x74
 8012d94:	9002      	str	r0, [sp, #8]
 8012d96:	9006      	str	r0, [sp, #24]
 8012d98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012d9c:	4809      	ldr	r0, [pc, #36]	; (8012dc4 <siprintf+0x38>)
 8012d9e:	9107      	str	r1, [sp, #28]
 8012da0:	9104      	str	r1, [sp, #16]
 8012da2:	4909      	ldr	r1, [pc, #36]	; (8012dc8 <siprintf+0x3c>)
 8012da4:	f853 2b04 	ldr.w	r2, [r3], #4
 8012da8:	9105      	str	r1, [sp, #20]
 8012daa:	6800      	ldr	r0, [r0, #0]
 8012dac:	9301      	str	r3, [sp, #4]
 8012dae:	a902      	add	r1, sp, #8
 8012db0:	f001 f8c2 	bl	8013f38 <_svfiprintf_r>
 8012db4:	9b02      	ldr	r3, [sp, #8]
 8012db6:	2200      	movs	r2, #0
 8012db8:	701a      	strb	r2, [r3, #0]
 8012dba:	b01c      	add	sp, #112	; 0x70
 8012dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8012dc0:	b003      	add	sp, #12
 8012dc2:	4770      	bx	lr
 8012dc4:	20000068 	.word	0x20000068
 8012dc8:	ffff0208 	.word	0xffff0208

08012dcc <srand>:
 8012dcc:	b538      	push	{r3, r4, r5, lr}
 8012dce:	4b10      	ldr	r3, [pc, #64]	; (8012e10 <srand+0x44>)
 8012dd0:	681d      	ldr	r5, [r3, #0]
 8012dd2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012dd4:	4604      	mov	r4, r0
 8012dd6:	b9b3      	cbnz	r3, 8012e06 <srand+0x3a>
 8012dd8:	2018      	movs	r0, #24
 8012dda:	f001 f9ab 	bl	8014134 <malloc>
 8012dde:	4602      	mov	r2, r0
 8012de0:	6328      	str	r0, [r5, #48]	; 0x30
 8012de2:	b920      	cbnz	r0, 8012dee <srand+0x22>
 8012de4:	4b0b      	ldr	r3, [pc, #44]	; (8012e14 <srand+0x48>)
 8012de6:	480c      	ldr	r0, [pc, #48]	; (8012e18 <srand+0x4c>)
 8012de8:	2146      	movs	r1, #70	; 0x46
 8012dea:	f000 f9b3 	bl	8013154 <__assert_func>
 8012dee:	490b      	ldr	r1, [pc, #44]	; (8012e1c <srand+0x50>)
 8012df0:	4b0b      	ldr	r3, [pc, #44]	; (8012e20 <srand+0x54>)
 8012df2:	e9c0 1300 	strd	r1, r3, [r0]
 8012df6:	4b0b      	ldr	r3, [pc, #44]	; (8012e24 <srand+0x58>)
 8012df8:	6083      	str	r3, [r0, #8]
 8012dfa:	230b      	movs	r3, #11
 8012dfc:	8183      	strh	r3, [r0, #12]
 8012dfe:	2100      	movs	r1, #0
 8012e00:	2001      	movs	r0, #1
 8012e02:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012e06:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012e08:	2200      	movs	r2, #0
 8012e0a:	611c      	str	r4, [r3, #16]
 8012e0c:	615a      	str	r2, [r3, #20]
 8012e0e:	bd38      	pop	{r3, r4, r5, pc}
 8012e10:	20000068 	.word	0x20000068
 8012e14:	080158b8 	.word	0x080158b8
 8012e18:	080158cf 	.word	0x080158cf
 8012e1c:	abcd330e 	.word	0xabcd330e
 8012e20:	e66d1234 	.word	0xe66d1234
 8012e24:	0005deec 	.word	0x0005deec

08012e28 <std>:
 8012e28:	2300      	movs	r3, #0
 8012e2a:	b510      	push	{r4, lr}
 8012e2c:	4604      	mov	r4, r0
 8012e2e:	e9c0 3300 	strd	r3, r3, [r0]
 8012e32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012e36:	6083      	str	r3, [r0, #8]
 8012e38:	8181      	strh	r1, [r0, #12]
 8012e3a:	6643      	str	r3, [r0, #100]	; 0x64
 8012e3c:	81c2      	strh	r2, [r0, #14]
 8012e3e:	6183      	str	r3, [r0, #24]
 8012e40:	4619      	mov	r1, r3
 8012e42:	2208      	movs	r2, #8
 8012e44:	305c      	adds	r0, #92	; 0x5c
 8012e46:	f000 f93d 	bl	80130c4 <memset>
 8012e4a:	4b0d      	ldr	r3, [pc, #52]	; (8012e80 <std+0x58>)
 8012e4c:	6263      	str	r3, [r4, #36]	; 0x24
 8012e4e:	4b0d      	ldr	r3, [pc, #52]	; (8012e84 <std+0x5c>)
 8012e50:	62a3      	str	r3, [r4, #40]	; 0x28
 8012e52:	4b0d      	ldr	r3, [pc, #52]	; (8012e88 <std+0x60>)
 8012e54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012e56:	4b0d      	ldr	r3, [pc, #52]	; (8012e8c <std+0x64>)
 8012e58:	6323      	str	r3, [r4, #48]	; 0x30
 8012e5a:	4b0d      	ldr	r3, [pc, #52]	; (8012e90 <std+0x68>)
 8012e5c:	6224      	str	r4, [r4, #32]
 8012e5e:	429c      	cmp	r4, r3
 8012e60:	d006      	beq.n	8012e70 <std+0x48>
 8012e62:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012e66:	4294      	cmp	r4, r2
 8012e68:	d002      	beq.n	8012e70 <std+0x48>
 8012e6a:	33d0      	adds	r3, #208	; 0xd0
 8012e6c:	429c      	cmp	r4, r3
 8012e6e:	d105      	bne.n	8012e7c <std+0x54>
 8012e70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e78:	f000 b95a 	b.w	8013130 <__retarget_lock_init_recursive>
 8012e7c:	bd10      	pop	{r4, pc}
 8012e7e:	bf00      	nop
 8012e80:	08014af1 	.word	0x08014af1
 8012e84:	08014b13 	.word	0x08014b13
 8012e88:	08014b4b 	.word	0x08014b4b
 8012e8c:	08014b6f 	.word	0x08014b6f
 8012e90:	200028e4 	.word	0x200028e4

08012e94 <stdio_exit_handler>:
 8012e94:	4a02      	ldr	r2, [pc, #8]	; (8012ea0 <stdio_exit_handler+0xc>)
 8012e96:	4903      	ldr	r1, [pc, #12]	; (8012ea4 <stdio_exit_handler+0x10>)
 8012e98:	4803      	ldr	r0, [pc, #12]	; (8012ea8 <stdio_exit_handler+0x14>)
 8012e9a:	f000 b8f5 	b.w	8013088 <_fwalk_sglue>
 8012e9e:	bf00      	nop
 8012ea0:	20000010 	.word	0x20000010
 8012ea4:	08014391 	.word	0x08014391
 8012ea8:	2000001c 	.word	0x2000001c

08012eac <cleanup_stdio>:
 8012eac:	6841      	ldr	r1, [r0, #4]
 8012eae:	4b0c      	ldr	r3, [pc, #48]	; (8012ee0 <cleanup_stdio+0x34>)
 8012eb0:	4299      	cmp	r1, r3
 8012eb2:	b510      	push	{r4, lr}
 8012eb4:	4604      	mov	r4, r0
 8012eb6:	d001      	beq.n	8012ebc <cleanup_stdio+0x10>
 8012eb8:	f001 fa6a 	bl	8014390 <_fflush_r>
 8012ebc:	68a1      	ldr	r1, [r4, #8]
 8012ebe:	4b09      	ldr	r3, [pc, #36]	; (8012ee4 <cleanup_stdio+0x38>)
 8012ec0:	4299      	cmp	r1, r3
 8012ec2:	d002      	beq.n	8012eca <cleanup_stdio+0x1e>
 8012ec4:	4620      	mov	r0, r4
 8012ec6:	f001 fa63 	bl	8014390 <_fflush_r>
 8012eca:	68e1      	ldr	r1, [r4, #12]
 8012ecc:	4b06      	ldr	r3, [pc, #24]	; (8012ee8 <cleanup_stdio+0x3c>)
 8012ece:	4299      	cmp	r1, r3
 8012ed0:	d004      	beq.n	8012edc <cleanup_stdio+0x30>
 8012ed2:	4620      	mov	r0, r4
 8012ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ed8:	f001 ba5a 	b.w	8014390 <_fflush_r>
 8012edc:	bd10      	pop	{r4, pc}
 8012ede:	bf00      	nop
 8012ee0:	200028e4 	.word	0x200028e4
 8012ee4:	2000294c 	.word	0x2000294c
 8012ee8:	200029b4 	.word	0x200029b4

08012eec <global_stdio_init.part.0>:
 8012eec:	b510      	push	{r4, lr}
 8012eee:	4b0b      	ldr	r3, [pc, #44]	; (8012f1c <global_stdio_init.part.0+0x30>)
 8012ef0:	4c0b      	ldr	r4, [pc, #44]	; (8012f20 <global_stdio_init.part.0+0x34>)
 8012ef2:	4a0c      	ldr	r2, [pc, #48]	; (8012f24 <global_stdio_init.part.0+0x38>)
 8012ef4:	601a      	str	r2, [r3, #0]
 8012ef6:	4620      	mov	r0, r4
 8012ef8:	2200      	movs	r2, #0
 8012efa:	2104      	movs	r1, #4
 8012efc:	f7ff ff94 	bl	8012e28 <std>
 8012f00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012f04:	2201      	movs	r2, #1
 8012f06:	2109      	movs	r1, #9
 8012f08:	f7ff ff8e 	bl	8012e28 <std>
 8012f0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012f10:	2202      	movs	r2, #2
 8012f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f16:	2112      	movs	r1, #18
 8012f18:	f7ff bf86 	b.w	8012e28 <std>
 8012f1c:	20002a1c 	.word	0x20002a1c
 8012f20:	200028e4 	.word	0x200028e4
 8012f24:	08012e95 	.word	0x08012e95

08012f28 <__sfp_lock_acquire>:
 8012f28:	4801      	ldr	r0, [pc, #4]	; (8012f30 <__sfp_lock_acquire+0x8>)
 8012f2a:	f000 b902 	b.w	8013132 <__retarget_lock_acquire_recursive>
 8012f2e:	bf00      	nop
 8012f30:	20002a21 	.word	0x20002a21

08012f34 <__sfp_lock_release>:
 8012f34:	4801      	ldr	r0, [pc, #4]	; (8012f3c <__sfp_lock_release+0x8>)
 8012f36:	f000 b8fd 	b.w	8013134 <__retarget_lock_release_recursive>
 8012f3a:	bf00      	nop
 8012f3c:	20002a21 	.word	0x20002a21

08012f40 <__sinit>:
 8012f40:	b510      	push	{r4, lr}
 8012f42:	4604      	mov	r4, r0
 8012f44:	f7ff fff0 	bl	8012f28 <__sfp_lock_acquire>
 8012f48:	6a23      	ldr	r3, [r4, #32]
 8012f4a:	b11b      	cbz	r3, 8012f54 <__sinit+0x14>
 8012f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f50:	f7ff bff0 	b.w	8012f34 <__sfp_lock_release>
 8012f54:	4b04      	ldr	r3, [pc, #16]	; (8012f68 <__sinit+0x28>)
 8012f56:	6223      	str	r3, [r4, #32]
 8012f58:	4b04      	ldr	r3, [pc, #16]	; (8012f6c <__sinit+0x2c>)
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d1f5      	bne.n	8012f4c <__sinit+0xc>
 8012f60:	f7ff ffc4 	bl	8012eec <global_stdio_init.part.0>
 8012f64:	e7f2      	b.n	8012f4c <__sinit+0xc>
 8012f66:	bf00      	nop
 8012f68:	08012ead 	.word	0x08012ead
 8012f6c:	20002a1c 	.word	0x20002a1c

08012f70 <_strtol_l.constprop.0>:
 8012f70:	2b01      	cmp	r3, #1
 8012f72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f76:	d001      	beq.n	8012f7c <_strtol_l.constprop.0+0xc>
 8012f78:	2b24      	cmp	r3, #36	; 0x24
 8012f7a:	d906      	bls.n	8012f8a <_strtol_l.constprop.0+0x1a>
 8012f7c:	f000 f8ae 	bl	80130dc <__errno>
 8012f80:	2316      	movs	r3, #22
 8012f82:	6003      	str	r3, [r0, #0]
 8012f84:	2000      	movs	r0, #0
 8012f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f8a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013070 <_strtol_l.constprop.0+0x100>
 8012f8e:	460d      	mov	r5, r1
 8012f90:	462e      	mov	r6, r5
 8012f92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f96:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8012f9a:	f017 0708 	ands.w	r7, r7, #8
 8012f9e:	d1f7      	bne.n	8012f90 <_strtol_l.constprop.0+0x20>
 8012fa0:	2c2d      	cmp	r4, #45	; 0x2d
 8012fa2:	d132      	bne.n	801300a <_strtol_l.constprop.0+0x9a>
 8012fa4:	782c      	ldrb	r4, [r5, #0]
 8012fa6:	2701      	movs	r7, #1
 8012fa8:	1cb5      	adds	r5, r6, #2
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d05b      	beq.n	8013066 <_strtol_l.constprop.0+0xf6>
 8012fae:	2b10      	cmp	r3, #16
 8012fb0:	d109      	bne.n	8012fc6 <_strtol_l.constprop.0+0x56>
 8012fb2:	2c30      	cmp	r4, #48	; 0x30
 8012fb4:	d107      	bne.n	8012fc6 <_strtol_l.constprop.0+0x56>
 8012fb6:	782c      	ldrb	r4, [r5, #0]
 8012fb8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012fbc:	2c58      	cmp	r4, #88	; 0x58
 8012fbe:	d14d      	bne.n	801305c <_strtol_l.constprop.0+0xec>
 8012fc0:	786c      	ldrb	r4, [r5, #1]
 8012fc2:	2310      	movs	r3, #16
 8012fc4:	3502      	adds	r5, #2
 8012fc6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012fca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8012fce:	f04f 0e00 	mov.w	lr, #0
 8012fd2:	fbb8 f9f3 	udiv	r9, r8, r3
 8012fd6:	4676      	mov	r6, lr
 8012fd8:	fb03 8a19 	mls	sl, r3, r9, r8
 8012fdc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012fe0:	f1bc 0f09 	cmp.w	ip, #9
 8012fe4:	d816      	bhi.n	8013014 <_strtol_l.constprop.0+0xa4>
 8012fe6:	4664      	mov	r4, ip
 8012fe8:	42a3      	cmp	r3, r4
 8012fea:	dd24      	ble.n	8013036 <_strtol_l.constprop.0+0xc6>
 8012fec:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8012ff0:	d008      	beq.n	8013004 <_strtol_l.constprop.0+0x94>
 8012ff2:	45b1      	cmp	r9, r6
 8012ff4:	d31c      	bcc.n	8013030 <_strtol_l.constprop.0+0xc0>
 8012ff6:	d101      	bne.n	8012ffc <_strtol_l.constprop.0+0x8c>
 8012ff8:	45a2      	cmp	sl, r4
 8012ffa:	db19      	blt.n	8013030 <_strtol_l.constprop.0+0xc0>
 8012ffc:	fb06 4603 	mla	r6, r6, r3, r4
 8013000:	f04f 0e01 	mov.w	lr, #1
 8013004:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013008:	e7e8      	b.n	8012fdc <_strtol_l.constprop.0+0x6c>
 801300a:	2c2b      	cmp	r4, #43	; 0x2b
 801300c:	bf04      	itt	eq
 801300e:	782c      	ldrbeq	r4, [r5, #0]
 8013010:	1cb5      	addeq	r5, r6, #2
 8013012:	e7ca      	b.n	8012faa <_strtol_l.constprop.0+0x3a>
 8013014:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013018:	f1bc 0f19 	cmp.w	ip, #25
 801301c:	d801      	bhi.n	8013022 <_strtol_l.constprop.0+0xb2>
 801301e:	3c37      	subs	r4, #55	; 0x37
 8013020:	e7e2      	b.n	8012fe8 <_strtol_l.constprop.0+0x78>
 8013022:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013026:	f1bc 0f19 	cmp.w	ip, #25
 801302a:	d804      	bhi.n	8013036 <_strtol_l.constprop.0+0xc6>
 801302c:	3c57      	subs	r4, #87	; 0x57
 801302e:	e7db      	b.n	8012fe8 <_strtol_l.constprop.0+0x78>
 8013030:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8013034:	e7e6      	b.n	8013004 <_strtol_l.constprop.0+0x94>
 8013036:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 801303a:	d105      	bne.n	8013048 <_strtol_l.constprop.0+0xd8>
 801303c:	2322      	movs	r3, #34	; 0x22
 801303e:	6003      	str	r3, [r0, #0]
 8013040:	4646      	mov	r6, r8
 8013042:	b942      	cbnz	r2, 8013056 <_strtol_l.constprop.0+0xe6>
 8013044:	4630      	mov	r0, r6
 8013046:	e79e      	b.n	8012f86 <_strtol_l.constprop.0+0x16>
 8013048:	b107      	cbz	r7, 801304c <_strtol_l.constprop.0+0xdc>
 801304a:	4276      	negs	r6, r6
 801304c:	2a00      	cmp	r2, #0
 801304e:	d0f9      	beq.n	8013044 <_strtol_l.constprop.0+0xd4>
 8013050:	f1be 0f00 	cmp.w	lr, #0
 8013054:	d000      	beq.n	8013058 <_strtol_l.constprop.0+0xe8>
 8013056:	1e69      	subs	r1, r5, #1
 8013058:	6011      	str	r1, [r2, #0]
 801305a:	e7f3      	b.n	8013044 <_strtol_l.constprop.0+0xd4>
 801305c:	2430      	movs	r4, #48	; 0x30
 801305e:	2b00      	cmp	r3, #0
 8013060:	d1b1      	bne.n	8012fc6 <_strtol_l.constprop.0+0x56>
 8013062:	2308      	movs	r3, #8
 8013064:	e7af      	b.n	8012fc6 <_strtol_l.constprop.0+0x56>
 8013066:	2c30      	cmp	r4, #48	; 0x30
 8013068:	d0a5      	beq.n	8012fb6 <_strtol_l.constprop.0+0x46>
 801306a:	230a      	movs	r3, #10
 801306c:	e7ab      	b.n	8012fc6 <_strtol_l.constprop.0+0x56>
 801306e:	bf00      	nop
 8013070:	08015928 	.word	0x08015928

08013074 <strtol>:
 8013074:	4613      	mov	r3, r2
 8013076:	460a      	mov	r2, r1
 8013078:	4601      	mov	r1, r0
 801307a:	4802      	ldr	r0, [pc, #8]	; (8013084 <strtol+0x10>)
 801307c:	6800      	ldr	r0, [r0, #0]
 801307e:	f7ff bf77 	b.w	8012f70 <_strtol_l.constprop.0>
 8013082:	bf00      	nop
 8013084:	20000068 	.word	0x20000068

08013088 <_fwalk_sglue>:
 8013088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801308c:	4607      	mov	r7, r0
 801308e:	4688      	mov	r8, r1
 8013090:	4614      	mov	r4, r2
 8013092:	2600      	movs	r6, #0
 8013094:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013098:	f1b9 0901 	subs.w	r9, r9, #1
 801309c:	d505      	bpl.n	80130aa <_fwalk_sglue+0x22>
 801309e:	6824      	ldr	r4, [r4, #0]
 80130a0:	2c00      	cmp	r4, #0
 80130a2:	d1f7      	bne.n	8013094 <_fwalk_sglue+0xc>
 80130a4:	4630      	mov	r0, r6
 80130a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130aa:	89ab      	ldrh	r3, [r5, #12]
 80130ac:	2b01      	cmp	r3, #1
 80130ae:	d907      	bls.n	80130c0 <_fwalk_sglue+0x38>
 80130b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80130b4:	3301      	adds	r3, #1
 80130b6:	d003      	beq.n	80130c0 <_fwalk_sglue+0x38>
 80130b8:	4629      	mov	r1, r5
 80130ba:	4638      	mov	r0, r7
 80130bc:	47c0      	blx	r8
 80130be:	4306      	orrs	r6, r0
 80130c0:	3568      	adds	r5, #104	; 0x68
 80130c2:	e7e9      	b.n	8013098 <_fwalk_sglue+0x10>

080130c4 <memset>:
 80130c4:	4402      	add	r2, r0
 80130c6:	4603      	mov	r3, r0
 80130c8:	4293      	cmp	r3, r2
 80130ca:	d100      	bne.n	80130ce <memset+0xa>
 80130cc:	4770      	bx	lr
 80130ce:	f803 1b01 	strb.w	r1, [r3], #1
 80130d2:	e7f9      	b.n	80130c8 <memset+0x4>

080130d4 <_localeconv_r>:
 80130d4:	4800      	ldr	r0, [pc, #0]	; (80130d8 <_localeconv_r+0x4>)
 80130d6:	4770      	bx	lr
 80130d8:	2000015c 	.word	0x2000015c

080130dc <__errno>:
 80130dc:	4b01      	ldr	r3, [pc, #4]	; (80130e4 <__errno+0x8>)
 80130de:	6818      	ldr	r0, [r3, #0]
 80130e0:	4770      	bx	lr
 80130e2:	bf00      	nop
 80130e4:	20000068 	.word	0x20000068

080130e8 <__libc_init_array>:
 80130e8:	b570      	push	{r4, r5, r6, lr}
 80130ea:	4d0d      	ldr	r5, [pc, #52]	; (8013120 <__libc_init_array+0x38>)
 80130ec:	4c0d      	ldr	r4, [pc, #52]	; (8013124 <__libc_init_array+0x3c>)
 80130ee:	1b64      	subs	r4, r4, r5
 80130f0:	10a4      	asrs	r4, r4, #2
 80130f2:	2600      	movs	r6, #0
 80130f4:	42a6      	cmp	r6, r4
 80130f6:	d109      	bne.n	801310c <__libc_init_array+0x24>
 80130f8:	4d0b      	ldr	r5, [pc, #44]	; (8013128 <__libc_init_array+0x40>)
 80130fa:	4c0c      	ldr	r4, [pc, #48]	; (801312c <__libc_init_array+0x44>)
 80130fc:	f002 fb96 	bl	801582c <_init>
 8013100:	1b64      	subs	r4, r4, r5
 8013102:	10a4      	asrs	r4, r4, #2
 8013104:	2600      	movs	r6, #0
 8013106:	42a6      	cmp	r6, r4
 8013108:	d105      	bne.n	8013116 <__libc_init_array+0x2e>
 801310a:	bd70      	pop	{r4, r5, r6, pc}
 801310c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013110:	4798      	blx	r3
 8013112:	3601      	adds	r6, #1
 8013114:	e7ee      	b.n	80130f4 <__libc_init_array+0xc>
 8013116:	f855 3b04 	ldr.w	r3, [r5], #4
 801311a:	4798      	blx	r3
 801311c:	3601      	adds	r6, #1
 801311e:	e7f2      	b.n	8013106 <__libc_init_array+0x1e>
 8013120:	08015cc8 	.word	0x08015cc8
 8013124:	08015cc8 	.word	0x08015cc8
 8013128:	08015cc8 	.word	0x08015cc8
 801312c:	08015ccc 	.word	0x08015ccc

08013130 <__retarget_lock_init_recursive>:
 8013130:	4770      	bx	lr

08013132 <__retarget_lock_acquire_recursive>:
 8013132:	4770      	bx	lr

08013134 <__retarget_lock_release_recursive>:
 8013134:	4770      	bx	lr

08013136 <memcpy>:
 8013136:	440a      	add	r2, r1
 8013138:	4291      	cmp	r1, r2
 801313a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801313e:	d100      	bne.n	8013142 <memcpy+0xc>
 8013140:	4770      	bx	lr
 8013142:	b510      	push	{r4, lr}
 8013144:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013148:	f803 4f01 	strb.w	r4, [r3, #1]!
 801314c:	4291      	cmp	r1, r2
 801314e:	d1f9      	bne.n	8013144 <memcpy+0xe>
 8013150:	bd10      	pop	{r4, pc}
	...

08013154 <__assert_func>:
 8013154:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013156:	4614      	mov	r4, r2
 8013158:	461a      	mov	r2, r3
 801315a:	4b09      	ldr	r3, [pc, #36]	; (8013180 <__assert_func+0x2c>)
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	4605      	mov	r5, r0
 8013160:	68d8      	ldr	r0, [r3, #12]
 8013162:	b14c      	cbz	r4, 8013178 <__assert_func+0x24>
 8013164:	4b07      	ldr	r3, [pc, #28]	; (8013184 <__assert_func+0x30>)
 8013166:	9100      	str	r1, [sp, #0]
 8013168:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801316c:	4906      	ldr	r1, [pc, #24]	; (8013188 <__assert_func+0x34>)
 801316e:	462b      	mov	r3, r5
 8013170:	f001 fd02 	bl	8014b78 <fiprintf>
 8013174:	f001 fdb2 	bl	8014cdc <abort>
 8013178:	4b04      	ldr	r3, [pc, #16]	; (801318c <__assert_func+0x38>)
 801317a:	461c      	mov	r4, r3
 801317c:	e7f3      	b.n	8013166 <__assert_func+0x12>
 801317e:	bf00      	nop
 8013180:	20000068 	.word	0x20000068
 8013184:	08015a28 	.word	0x08015a28
 8013188:	08015a35 	.word	0x08015a35
 801318c:	08015a63 	.word	0x08015a63

08013190 <quorem>:
 8013190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013194:	6903      	ldr	r3, [r0, #16]
 8013196:	690c      	ldr	r4, [r1, #16]
 8013198:	42a3      	cmp	r3, r4
 801319a:	4607      	mov	r7, r0
 801319c:	db7e      	blt.n	801329c <quorem+0x10c>
 801319e:	3c01      	subs	r4, #1
 80131a0:	f101 0814 	add.w	r8, r1, #20
 80131a4:	f100 0514 	add.w	r5, r0, #20
 80131a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80131ac:	9301      	str	r3, [sp, #4]
 80131ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80131b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80131b6:	3301      	adds	r3, #1
 80131b8:	429a      	cmp	r2, r3
 80131ba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80131be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80131c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80131c6:	d331      	bcc.n	801322c <quorem+0x9c>
 80131c8:	f04f 0e00 	mov.w	lr, #0
 80131cc:	4640      	mov	r0, r8
 80131ce:	46ac      	mov	ip, r5
 80131d0:	46f2      	mov	sl, lr
 80131d2:	f850 2b04 	ldr.w	r2, [r0], #4
 80131d6:	b293      	uxth	r3, r2
 80131d8:	fb06 e303 	mla	r3, r6, r3, lr
 80131dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80131e0:	0c1a      	lsrs	r2, r3, #16
 80131e2:	b29b      	uxth	r3, r3
 80131e4:	ebaa 0303 	sub.w	r3, sl, r3
 80131e8:	f8dc a000 	ldr.w	sl, [ip]
 80131ec:	fa13 f38a 	uxtah	r3, r3, sl
 80131f0:	fb06 220e 	mla	r2, r6, lr, r2
 80131f4:	9300      	str	r3, [sp, #0]
 80131f6:	9b00      	ldr	r3, [sp, #0]
 80131f8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80131fc:	b292      	uxth	r2, r2
 80131fe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013202:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013206:	f8bd 3000 	ldrh.w	r3, [sp]
 801320a:	4581      	cmp	r9, r0
 801320c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013210:	f84c 3b04 	str.w	r3, [ip], #4
 8013214:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013218:	d2db      	bcs.n	80131d2 <quorem+0x42>
 801321a:	f855 300b 	ldr.w	r3, [r5, fp]
 801321e:	b92b      	cbnz	r3, 801322c <quorem+0x9c>
 8013220:	9b01      	ldr	r3, [sp, #4]
 8013222:	3b04      	subs	r3, #4
 8013224:	429d      	cmp	r5, r3
 8013226:	461a      	mov	r2, r3
 8013228:	d32c      	bcc.n	8013284 <quorem+0xf4>
 801322a:	613c      	str	r4, [r7, #16]
 801322c:	4638      	mov	r0, r7
 801322e:	f001 fb5f 	bl	80148f0 <__mcmp>
 8013232:	2800      	cmp	r0, #0
 8013234:	db22      	blt.n	801327c <quorem+0xec>
 8013236:	3601      	adds	r6, #1
 8013238:	4629      	mov	r1, r5
 801323a:	2000      	movs	r0, #0
 801323c:	f858 2b04 	ldr.w	r2, [r8], #4
 8013240:	f8d1 c000 	ldr.w	ip, [r1]
 8013244:	b293      	uxth	r3, r2
 8013246:	1ac3      	subs	r3, r0, r3
 8013248:	0c12      	lsrs	r2, r2, #16
 801324a:	fa13 f38c 	uxtah	r3, r3, ip
 801324e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8013252:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013256:	b29b      	uxth	r3, r3
 8013258:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801325c:	45c1      	cmp	r9, r8
 801325e:	f841 3b04 	str.w	r3, [r1], #4
 8013262:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013266:	d2e9      	bcs.n	801323c <quorem+0xac>
 8013268:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801326c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013270:	b922      	cbnz	r2, 801327c <quorem+0xec>
 8013272:	3b04      	subs	r3, #4
 8013274:	429d      	cmp	r5, r3
 8013276:	461a      	mov	r2, r3
 8013278:	d30a      	bcc.n	8013290 <quorem+0x100>
 801327a:	613c      	str	r4, [r7, #16]
 801327c:	4630      	mov	r0, r6
 801327e:	b003      	add	sp, #12
 8013280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013284:	6812      	ldr	r2, [r2, #0]
 8013286:	3b04      	subs	r3, #4
 8013288:	2a00      	cmp	r2, #0
 801328a:	d1ce      	bne.n	801322a <quorem+0x9a>
 801328c:	3c01      	subs	r4, #1
 801328e:	e7c9      	b.n	8013224 <quorem+0x94>
 8013290:	6812      	ldr	r2, [r2, #0]
 8013292:	3b04      	subs	r3, #4
 8013294:	2a00      	cmp	r2, #0
 8013296:	d1f0      	bne.n	801327a <quorem+0xea>
 8013298:	3c01      	subs	r4, #1
 801329a:	e7eb      	b.n	8013274 <quorem+0xe4>
 801329c:	2000      	movs	r0, #0
 801329e:	e7ee      	b.n	801327e <quorem+0xee>

080132a0 <_dtoa_r>:
 80132a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132a4:	ed2d 8b04 	vpush	{d8-d9}
 80132a8:	69c5      	ldr	r5, [r0, #28]
 80132aa:	b093      	sub	sp, #76	; 0x4c
 80132ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80132b0:	ec57 6b10 	vmov	r6, r7, d0
 80132b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80132b8:	9107      	str	r1, [sp, #28]
 80132ba:	4604      	mov	r4, r0
 80132bc:	920a      	str	r2, [sp, #40]	; 0x28
 80132be:	930d      	str	r3, [sp, #52]	; 0x34
 80132c0:	b975      	cbnz	r5, 80132e0 <_dtoa_r+0x40>
 80132c2:	2010      	movs	r0, #16
 80132c4:	f000 ff36 	bl	8014134 <malloc>
 80132c8:	4602      	mov	r2, r0
 80132ca:	61e0      	str	r0, [r4, #28]
 80132cc:	b920      	cbnz	r0, 80132d8 <_dtoa_r+0x38>
 80132ce:	4bae      	ldr	r3, [pc, #696]	; (8013588 <_dtoa_r+0x2e8>)
 80132d0:	21ef      	movs	r1, #239	; 0xef
 80132d2:	48ae      	ldr	r0, [pc, #696]	; (801358c <_dtoa_r+0x2ec>)
 80132d4:	f7ff ff3e 	bl	8013154 <__assert_func>
 80132d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80132dc:	6005      	str	r5, [r0, #0]
 80132de:	60c5      	str	r5, [r0, #12]
 80132e0:	69e3      	ldr	r3, [r4, #28]
 80132e2:	6819      	ldr	r1, [r3, #0]
 80132e4:	b151      	cbz	r1, 80132fc <_dtoa_r+0x5c>
 80132e6:	685a      	ldr	r2, [r3, #4]
 80132e8:	604a      	str	r2, [r1, #4]
 80132ea:	2301      	movs	r3, #1
 80132ec:	4093      	lsls	r3, r2
 80132ee:	608b      	str	r3, [r1, #8]
 80132f0:	4620      	mov	r0, r4
 80132f2:	f001 f8c1 	bl	8014478 <_Bfree>
 80132f6:	69e3      	ldr	r3, [r4, #28]
 80132f8:	2200      	movs	r2, #0
 80132fa:	601a      	str	r2, [r3, #0]
 80132fc:	1e3b      	subs	r3, r7, #0
 80132fe:	bfbb      	ittet	lt
 8013300:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013304:	9303      	strlt	r3, [sp, #12]
 8013306:	2300      	movge	r3, #0
 8013308:	2201      	movlt	r2, #1
 801330a:	bfac      	ite	ge
 801330c:	f8c8 3000 	strge.w	r3, [r8]
 8013310:	f8c8 2000 	strlt.w	r2, [r8]
 8013314:	4b9e      	ldr	r3, [pc, #632]	; (8013590 <_dtoa_r+0x2f0>)
 8013316:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801331a:	ea33 0308 	bics.w	r3, r3, r8
 801331e:	d11b      	bne.n	8013358 <_dtoa_r+0xb8>
 8013320:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013322:	f242 730f 	movw	r3, #9999	; 0x270f
 8013326:	6013      	str	r3, [r2, #0]
 8013328:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801332c:	4333      	orrs	r3, r6
 801332e:	f000 8593 	beq.w	8013e58 <_dtoa_r+0xbb8>
 8013332:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013334:	b963      	cbnz	r3, 8013350 <_dtoa_r+0xb0>
 8013336:	4b97      	ldr	r3, [pc, #604]	; (8013594 <_dtoa_r+0x2f4>)
 8013338:	e027      	b.n	801338a <_dtoa_r+0xea>
 801333a:	4b97      	ldr	r3, [pc, #604]	; (8013598 <_dtoa_r+0x2f8>)
 801333c:	9300      	str	r3, [sp, #0]
 801333e:	3308      	adds	r3, #8
 8013340:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013342:	6013      	str	r3, [r2, #0]
 8013344:	9800      	ldr	r0, [sp, #0]
 8013346:	b013      	add	sp, #76	; 0x4c
 8013348:	ecbd 8b04 	vpop	{d8-d9}
 801334c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013350:	4b90      	ldr	r3, [pc, #576]	; (8013594 <_dtoa_r+0x2f4>)
 8013352:	9300      	str	r3, [sp, #0]
 8013354:	3303      	adds	r3, #3
 8013356:	e7f3      	b.n	8013340 <_dtoa_r+0xa0>
 8013358:	ed9d 7b02 	vldr	d7, [sp, #8]
 801335c:	2200      	movs	r2, #0
 801335e:	ec51 0b17 	vmov	r0, r1, d7
 8013362:	eeb0 8a47 	vmov.f32	s16, s14
 8013366:	eef0 8a67 	vmov.f32	s17, s15
 801336a:	2300      	movs	r3, #0
 801336c:	f7ed fbcc 	bl	8000b08 <__aeabi_dcmpeq>
 8013370:	4681      	mov	r9, r0
 8013372:	b160      	cbz	r0, 801338e <_dtoa_r+0xee>
 8013374:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013376:	2301      	movs	r3, #1
 8013378:	6013      	str	r3, [r2, #0]
 801337a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801337c:	2b00      	cmp	r3, #0
 801337e:	f000 8568 	beq.w	8013e52 <_dtoa_r+0xbb2>
 8013382:	4b86      	ldr	r3, [pc, #536]	; (801359c <_dtoa_r+0x2fc>)
 8013384:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013386:	6013      	str	r3, [r2, #0]
 8013388:	3b01      	subs	r3, #1
 801338a:	9300      	str	r3, [sp, #0]
 801338c:	e7da      	b.n	8013344 <_dtoa_r+0xa4>
 801338e:	aa10      	add	r2, sp, #64	; 0x40
 8013390:	a911      	add	r1, sp, #68	; 0x44
 8013392:	4620      	mov	r0, r4
 8013394:	eeb0 0a48 	vmov.f32	s0, s16
 8013398:	eef0 0a68 	vmov.f32	s1, s17
 801339c:	f001 fb4e 	bl	8014a3c <__d2b>
 80133a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80133a4:	4682      	mov	sl, r0
 80133a6:	2d00      	cmp	r5, #0
 80133a8:	d07f      	beq.n	80134aa <_dtoa_r+0x20a>
 80133aa:	ee18 3a90 	vmov	r3, s17
 80133ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80133b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80133b6:	ec51 0b18 	vmov	r0, r1, d8
 80133ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80133be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80133c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80133c6:	4619      	mov	r1, r3
 80133c8:	2200      	movs	r2, #0
 80133ca:	4b75      	ldr	r3, [pc, #468]	; (80135a0 <_dtoa_r+0x300>)
 80133cc:	f7ec ff7c 	bl	80002c8 <__aeabi_dsub>
 80133d0:	a367      	add	r3, pc, #412	; (adr r3, 8013570 <_dtoa_r+0x2d0>)
 80133d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133d6:	f7ed f92f 	bl	8000638 <__aeabi_dmul>
 80133da:	a367      	add	r3, pc, #412	; (adr r3, 8013578 <_dtoa_r+0x2d8>)
 80133dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133e0:	f7ec ff74 	bl	80002cc <__adddf3>
 80133e4:	4606      	mov	r6, r0
 80133e6:	4628      	mov	r0, r5
 80133e8:	460f      	mov	r7, r1
 80133ea:	f7ed f8bb 	bl	8000564 <__aeabi_i2d>
 80133ee:	a364      	add	r3, pc, #400	; (adr r3, 8013580 <_dtoa_r+0x2e0>)
 80133f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133f4:	f7ed f920 	bl	8000638 <__aeabi_dmul>
 80133f8:	4602      	mov	r2, r0
 80133fa:	460b      	mov	r3, r1
 80133fc:	4630      	mov	r0, r6
 80133fe:	4639      	mov	r1, r7
 8013400:	f7ec ff64 	bl	80002cc <__adddf3>
 8013404:	4606      	mov	r6, r0
 8013406:	460f      	mov	r7, r1
 8013408:	f7ed fbc6 	bl	8000b98 <__aeabi_d2iz>
 801340c:	2200      	movs	r2, #0
 801340e:	4683      	mov	fp, r0
 8013410:	2300      	movs	r3, #0
 8013412:	4630      	mov	r0, r6
 8013414:	4639      	mov	r1, r7
 8013416:	f7ed fb81 	bl	8000b1c <__aeabi_dcmplt>
 801341a:	b148      	cbz	r0, 8013430 <_dtoa_r+0x190>
 801341c:	4658      	mov	r0, fp
 801341e:	f7ed f8a1 	bl	8000564 <__aeabi_i2d>
 8013422:	4632      	mov	r2, r6
 8013424:	463b      	mov	r3, r7
 8013426:	f7ed fb6f 	bl	8000b08 <__aeabi_dcmpeq>
 801342a:	b908      	cbnz	r0, 8013430 <_dtoa_r+0x190>
 801342c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013430:	f1bb 0f16 	cmp.w	fp, #22
 8013434:	d857      	bhi.n	80134e6 <_dtoa_r+0x246>
 8013436:	4b5b      	ldr	r3, [pc, #364]	; (80135a4 <_dtoa_r+0x304>)
 8013438:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013440:	ec51 0b18 	vmov	r0, r1, d8
 8013444:	f7ed fb6a 	bl	8000b1c <__aeabi_dcmplt>
 8013448:	2800      	cmp	r0, #0
 801344a:	d04e      	beq.n	80134ea <_dtoa_r+0x24a>
 801344c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013450:	2300      	movs	r3, #0
 8013452:	930c      	str	r3, [sp, #48]	; 0x30
 8013454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013456:	1b5b      	subs	r3, r3, r5
 8013458:	1e5a      	subs	r2, r3, #1
 801345a:	bf45      	ittet	mi
 801345c:	f1c3 0301 	rsbmi	r3, r3, #1
 8013460:	9305      	strmi	r3, [sp, #20]
 8013462:	2300      	movpl	r3, #0
 8013464:	2300      	movmi	r3, #0
 8013466:	9206      	str	r2, [sp, #24]
 8013468:	bf54      	ite	pl
 801346a:	9305      	strpl	r3, [sp, #20]
 801346c:	9306      	strmi	r3, [sp, #24]
 801346e:	f1bb 0f00 	cmp.w	fp, #0
 8013472:	db3c      	blt.n	80134ee <_dtoa_r+0x24e>
 8013474:	9b06      	ldr	r3, [sp, #24]
 8013476:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801347a:	445b      	add	r3, fp
 801347c:	9306      	str	r3, [sp, #24]
 801347e:	2300      	movs	r3, #0
 8013480:	9308      	str	r3, [sp, #32]
 8013482:	9b07      	ldr	r3, [sp, #28]
 8013484:	2b09      	cmp	r3, #9
 8013486:	d868      	bhi.n	801355a <_dtoa_r+0x2ba>
 8013488:	2b05      	cmp	r3, #5
 801348a:	bfc4      	itt	gt
 801348c:	3b04      	subgt	r3, #4
 801348e:	9307      	strgt	r3, [sp, #28]
 8013490:	9b07      	ldr	r3, [sp, #28]
 8013492:	f1a3 0302 	sub.w	r3, r3, #2
 8013496:	bfcc      	ite	gt
 8013498:	2500      	movgt	r5, #0
 801349a:	2501      	movle	r5, #1
 801349c:	2b03      	cmp	r3, #3
 801349e:	f200 8085 	bhi.w	80135ac <_dtoa_r+0x30c>
 80134a2:	e8df f003 	tbb	[pc, r3]
 80134a6:	3b2e      	.short	0x3b2e
 80134a8:	5839      	.short	0x5839
 80134aa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80134ae:	441d      	add	r5, r3
 80134b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80134b4:	2b20      	cmp	r3, #32
 80134b6:	bfc1      	itttt	gt
 80134b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80134bc:	fa08 f803 	lslgt.w	r8, r8, r3
 80134c0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80134c4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80134c8:	bfd6      	itet	le
 80134ca:	f1c3 0320 	rsble	r3, r3, #32
 80134ce:	ea48 0003 	orrgt.w	r0, r8, r3
 80134d2:	fa06 f003 	lslle.w	r0, r6, r3
 80134d6:	f7ed f835 	bl	8000544 <__aeabi_ui2d>
 80134da:	2201      	movs	r2, #1
 80134dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80134e0:	3d01      	subs	r5, #1
 80134e2:	920e      	str	r2, [sp, #56]	; 0x38
 80134e4:	e76f      	b.n	80133c6 <_dtoa_r+0x126>
 80134e6:	2301      	movs	r3, #1
 80134e8:	e7b3      	b.n	8013452 <_dtoa_r+0x1b2>
 80134ea:	900c      	str	r0, [sp, #48]	; 0x30
 80134ec:	e7b2      	b.n	8013454 <_dtoa_r+0x1b4>
 80134ee:	9b05      	ldr	r3, [sp, #20]
 80134f0:	eba3 030b 	sub.w	r3, r3, fp
 80134f4:	9305      	str	r3, [sp, #20]
 80134f6:	f1cb 0300 	rsb	r3, fp, #0
 80134fa:	9308      	str	r3, [sp, #32]
 80134fc:	2300      	movs	r3, #0
 80134fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8013500:	e7bf      	b.n	8013482 <_dtoa_r+0x1e2>
 8013502:	2300      	movs	r3, #0
 8013504:	9309      	str	r3, [sp, #36]	; 0x24
 8013506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013508:	2b00      	cmp	r3, #0
 801350a:	dc52      	bgt.n	80135b2 <_dtoa_r+0x312>
 801350c:	2301      	movs	r3, #1
 801350e:	9301      	str	r3, [sp, #4]
 8013510:	9304      	str	r3, [sp, #16]
 8013512:	461a      	mov	r2, r3
 8013514:	920a      	str	r2, [sp, #40]	; 0x28
 8013516:	e00b      	b.n	8013530 <_dtoa_r+0x290>
 8013518:	2301      	movs	r3, #1
 801351a:	e7f3      	b.n	8013504 <_dtoa_r+0x264>
 801351c:	2300      	movs	r3, #0
 801351e:	9309      	str	r3, [sp, #36]	; 0x24
 8013520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013522:	445b      	add	r3, fp
 8013524:	9301      	str	r3, [sp, #4]
 8013526:	3301      	adds	r3, #1
 8013528:	2b01      	cmp	r3, #1
 801352a:	9304      	str	r3, [sp, #16]
 801352c:	bfb8      	it	lt
 801352e:	2301      	movlt	r3, #1
 8013530:	69e0      	ldr	r0, [r4, #28]
 8013532:	2100      	movs	r1, #0
 8013534:	2204      	movs	r2, #4
 8013536:	f102 0614 	add.w	r6, r2, #20
 801353a:	429e      	cmp	r6, r3
 801353c:	d93d      	bls.n	80135ba <_dtoa_r+0x31a>
 801353e:	6041      	str	r1, [r0, #4]
 8013540:	4620      	mov	r0, r4
 8013542:	f000 ff59 	bl	80143f8 <_Balloc>
 8013546:	9000      	str	r0, [sp, #0]
 8013548:	2800      	cmp	r0, #0
 801354a:	d139      	bne.n	80135c0 <_dtoa_r+0x320>
 801354c:	4b16      	ldr	r3, [pc, #88]	; (80135a8 <_dtoa_r+0x308>)
 801354e:	4602      	mov	r2, r0
 8013550:	f240 11af 	movw	r1, #431	; 0x1af
 8013554:	e6bd      	b.n	80132d2 <_dtoa_r+0x32>
 8013556:	2301      	movs	r3, #1
 8013558:	e7e1      	b.n	801351e <_dtoa_r+0x27e>
 801355a:	2501      	movs	r5, #1
 801355c:	2300      	movs	r3, #0
 801355e:	9307      	str	r3, [sp, #28]
 8013560:	9509      	str	r5, [sp, #36]	; 0x24
 8013562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013566:	9301      	str	r3, [sp, #4]
 8013568:	9304      	str	r3, [sp, #16]
 801356a:	2200      	movs	r2, #0
 801356c:	2312      	movs	r3, #18
 801356e:	e7d1      	b.n	8013514 <_dtoa_r+0x274>
 8013570:	636f4361 	.word	0x636f4361
 8013574:	3fd287a7 	.word	0x3fd287a7
 8013578:	8b60c8b3 	.word	0x8b60c8b3
 801357c:	3fc68a28 	.word	0x3fc68a28
 8013580:	509f79fb 	.word	0x509f79fb
 8013584:	3fd34413 	.word	0x3fd34413
 8013588:	080158b8 	.word	0x080158b8
 801358c:	08015a71 	.word	0x08015a71
 8013590:	7ff00000 	.word	0x7ff00000
 8013594:	08015a6d 	.word	0x08015a6d
 8013598:	08015a64 	.word	0x08015a64
 801359c:	08015895 	.word	0x08015895
 80135a0:	3ff80000 	.word	0x3ff80000
 80135a4:	08015b70 	.word	0x08015b70
 80135a8:	08015ac9 	.word	0x08015ac9
 80135ac:	2301      	movs	r3, #1
 80135ae:	9309      	str	r3, [sp, #36]	; 0x24
 80135b0:	e7d7      	b.n	8013562 <_dtoa_r+0x2c2>
 80135b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135b4:	9301      	str	r3, [sp, #4]
 80135b6:	9304      	str	r3, [sp, #16]
 80135b8:	e7ba      	b.n	8013530 <_dtoa_r+0x290>
 80135ba:	3101      	adds	r1, #1
 80135bc:	0052      	lsls	r2, r2, #1
 80135be:	e7ba      	b.n	8013536 <_dtoa_r+0x296>
 80135c0:	69e3      	ldr	r3, [r4, #28]
 80135c2:	9a00      	ldr	r2, [sp, #0]
 80135c4:	601a      	str	r2, [r3, #0]
 80135c6:	9b04      	ldr	r3, [sp, #16]
 80135c8:	2b0e      	cmp	r3, #14
 80135ca:	f200 80a8 	bhi.w	801371e <_dtoa_r+0x47e>
 80135ce:	2d00      	cmp	r5, #0
 80135d0:	f000 80a5 	beq.w	801371e <_dtoa_r+0x47e>
 80135d4:	f1bb 0f00 	cmp.w	fp, #0
 80135d8:	dd38      	ble.n	801364c <_dtoa_r+0x3ac>
 80135da:	4bc0      	ldr	r3, [pc, #768]	; (80138dc <_dtoa_r+0x63c>)
 80135dc:	f00b 020f 	and.w	r2, fp, #15
 80135e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80135e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80135e8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80135ec:	ea4f 182b 	mov.w	r8, fp, asr #4
 80135f0:	d019      	beq.n	8013626 <_dtoa_r+0x386>
 80135f2:	4bbb      	ldr	r3, [pc, #748]	; (80138e0 <_dtoa_r+0x640>)
 80135f4:	ec51 0b18 	vmov	r0, r1, d8
 80135f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80135fc:	f7ed f946 	bl	800088c <__aeabi_ddiv>
 8013600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013604:	f008 080f 	and.w	r8, r8, #15
 8013608:	2503      	movs	r5, #3
 801360a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80138e0 <_dtoa_r+0x640>
 801360e:	f1b8 0f00 	cmp.w	r8, #0
 8013612:	d10a      	bne.n	801362a <_dtoa_r+0x38a>
 8013614:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013618:	4632      	mov	r2, r6
 801361a:	463b      	mov	r3, r7
 801361c:	f7ed f936 	bl	800088c <__aeabi_ddiv>
 8013620:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013624:	e02b      	b.n	801367e <_dtoa_r+0x3de>
 8013626:	2502      	movs	r5, #2
 8013628:	e7ef      	b.n	801360a <_dtoa_r+0x36a>
 801362a:	f018 0f01 	tst.w	r8, #1
 801362e:	d008      	beq.n	8013642 <_dtoa_r+0x3a2>
 8013630:	4630      	mov	r0, r6
 8013632:	4639      	mov	r1, r7
 8013634:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013638:	f7ec fffe 	bl	8000638 <__aeabi_dmul>
 801363c:	3501      	adds	r5, #1
 801363e:	4606      	mov	r6, r0
 8013640:	460f      	mov	r7, r1
 8013642:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013646:	f109 0908 	add.w	r9, r9, #8
 801364a:	e7e0      	b.n	801360e <_dtoa_r+0x36e>
 801364c:	f000 809f 	beq.w	801378e <_dtoa_r+0x4ee>
 8013650:	f1cb 0600 	rsb	r6, fp, #0
 8013654:	4ba1      	ldr	r3, [pc, #644]	; (80138dc <_dtoa_r+0x63c>)
 8013656:	4fa2      	ldr	r7, [pc, #648]	; (80138e0 <_dtoa_r+0x640>)
 8013658:	f006 020f 	and.w	r2, r6, #15
 801365c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013664:	ec51 0b18 	vmov	r0, r1, d8
 8013668:	f7ec ffe6 	bl	8000638 <__aeabi_dmul>
 801366c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013670:	1136      	asrs	r6, r6, #4
 8013672:	2300      	movs	r3, #0
 8013674:	2502      	movs	r5, #2
 8013676:	2e00      	cmp	r6, #0
 8013678:	d17e      	bne.n	8013778 <_dtoa_r+0x4d8>
 801367a:	2b00      	cmp	r3, #0
 801367c:	d1d0      	bne.n	8013620 <_dtoa_r+0x380>
 801367e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013680:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013684:	2b00      	cmp	r3, #0
 8013686:	f000 8084 	beq.w	8013792 <_dtoa_r+0x4f2>
 801368a:	4b96      	ldr	r3, [pc, #600]	; (80138e4 <_dtoa_r+0x644>)
 801368c:	2200      	movs	r2, #0
 801368e:	4640      	mov	r0, r8
 8013690:	4649      	mov	r1, r9
 8013692:	f7ed fa43 	bl	8000b1c <__aeabi_dcmplt>
 8013696:	2800      	cmp	r0, #0
 8013698:	d07b      	beq.n	8013792 <_dtoa_r+0x4f2>
 801369a:	9b04      	ldr	r3, [sp, #16]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d078      	beq.n	8013792 <_dtoa_r+0x4f2>
 80136a0:	9b01      	ldr	r3, [sp, #4]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	dd39      	ble.n	801371a <_dtoa_r+0x47a>
 80136a6:	4b90      	ldr	r3, [pc, #576]	; (80138e8 <_dtoa_r+0x648>)
 80136a8:	2200      	movs	r2, #0
 80136aa:	4640      	mov	r0, r8
 80136ac:	4649      	mov	r1, r9
 80136ae:	f7ec ffc3 	bl	8000638 <__aeabi_dmul>
 80136b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80136b6:	9e01      	ldr	r6, [sp, #4]
 80136b8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80136bc:	3501      	adds	r5, #1
 80136be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80136c2:	4628      	mov	r0, r5
 80136c4:	f7ec ff4e 	bl	8000564 <__aeabi_i2d>
 80136c8:	4642      	mov	r2, r8
 80136ca:	464b      	mov	r3, r9
 80136cc:	f7ec ffb4 	bl	8000638 <__aeabi_dmul>
 80136d0:	4b86      	ldr	r3, [pc, #536]	; (80138ec <_dtoa_r+0x64c>)
 80136d2:	2200      	movs	r2, #0
 80136d4:	f7ec fdfa 	bl	80002cc <__adddf3>
 80136d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80136dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80136e0:	9303      	str	r3, [sp, #12]
 80136e2:	2e00      	cmp	r6, #0
 80136e4:	d158      	bne.n	8013798 <_dtoa_r+0x4f8>
 80136e6:	4b82      	ldr	r3, [pc, #520]	; (80138f0 <_dtoa_r+0x650>)
 80136e8:	2200      	movs	r2, #0
 80136ea:	4640      	mov	r0, r8
 80136ec:	4649      	mov	r1, r9
 80136ee:	f7ec fdeb 	bl	80002c8 <__aeabi_dsub>
 80136f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80136f6:	4680      	mov	r8, r0
 80136f8:	4689      	mov	r9, r1
 80136fa:	f7ed fa2d 	bl	8000b58 <__aeabi_dcmpgt>
 80136fe:	2800      	cmp	r0, #0
 8013700:	f040 8296 	bne.w	8013c30 <_dtoa_r+0x990>
 8013704:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013708:	4640      	mov	r0, r8
 801370a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801370e:	4649      	mov	r1, r9
 8013710:	f7ed fa04 	bl	8000b1c <__aeabi_dcmplt>
 8013714:	2800      	cmp	r0, #0
 8013716:	f040 8289 	bne.w	8013c2c <_dtoa_r+0x98c>
 801371a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801371e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013720:	2b00      	cmp	r3, #0
 8013722:	f2c0 814e 	blt.w	80139c2 <_dtoa_r+0x722>
 8013726:	f1bb 0f0e 	cmp.w	fp, #14
 801372a:	f300 814a 	bgt.w	80139c2 <_dtoa_r+0x722>
 801372e:	4b6b      	ldr	r3, [pc, #428]	; (80138dc <_dtoa_r+0x63c>)
 8013730:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013734:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801373a:	2b00      	cmp	r3, #0
 801373c:	f280 80dc 	bge.w	80138f8 <_dtoa_r+0x658>
 8013740:	9b04      	ldr	r3, [sp, #16]
 8013742:	2b00      	cmp	r3, #0
 8013744:	f300 80d8 	bgt.w	80138f8 <_dtoa_r+0x658>
 8013748:	f040 826f 	bne.w	8013c2a <_dtoa_r+0x98a>
 801374c:	4b68      	ldr	r3, [pc, #416]	; (80138f0 <_dtoa_r+0x650>)
 801374e:	2200      	movs	r2, #0
 8013750:	4640      	mov	r0, r8
 8013752:	4649      	mov	r1, r9
 8013754:	f7ec ff70 	bl	8000638 <__aeabi_dmul>
 8013758:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801375c:	f7ed f9f2 	bl	8000b44 <__aeabi_dcmpge>
 8013760:	9e04      	ldr	r6, [sp, #16]
 8013762:	4637      	mov	r7, r6
 8013764:	2800      	cmp	r0, #0
 8013766:	f040 8245 	bne.w	8013bf4 <_dtoa_r+0x954>
 801376a:	9d00      	ldr	r5, [sp, #0]
 801376c:	2331      	movs	r3, #49	; 0x31
 801376e:	f805 3b01 	strb.w	r3, [r5], #1
 8013772:	f10b 0b01 	add.w	fp, fp, #1
 8013776:	e241      	b.n	8013bfc <_dtoa_r+0x95c>
 8013778:	07f2      	lsls	r2, r6, #31
 801377a:	d505      	bpl.n	8013788 <_dtoa_r+0x4e8>
 801377c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013780:	f7ec ff5a 	bl	8000638 <__aeabi_dmul>
 8013784:	3501      	adds	r5, #1
 8013786:	2301      	movs	r3, #1
 8013788:	1076      	asrs	r6, r6, #1
 801378a:	3708      	adds	r7, #8
 801378c:	e773      	b.n	8013676 <_dtoa_r+0x3d6>
 801378e:	2502      	movs	r5, #2
 8013790:	e775      	b.n	801367e <_dtoa_r+0x3de>
 8013792:	9e04      	ldr	r6, [sp, #16]
 8013794:	465f      	mov	r7, fp
 8013796:	e792      	b.n	80136be <_dtoa_r+0x41e>
 8013798:	9900      	ldr	r1, [sp, #0]
 801379a:	4b50      	ldr	r3, [pc, #320]	; (80138dc <_dtoa_r+0x63c>)
 801379c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80137a0:	4431      	add	r1, r6
 80137a2:	9102      	str	r1, [sp, #8]
 80137a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80137a6:	eeb0 9a47 	vmov.f32	s18, s14
 80137aa:	eef0 9a67 	vmov.f32	s19, s15
 80137ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80137b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80137b6:	2900      	cmp	r1, #0
 80137b8:	d044      	beq.n	8013844 <_dtoa_r+0x5a4>
 80137ba:	494e      	ldr	r1, [pc, #312]	; (80138f4 <_dtoa_r+0x654>)
 80137bc:	2000      	movs	r0, #0
 80137be:	f7ed f865 	bl	800088c <__aeabi_ddiv>
 80137c2:	ec53 2b19 	vmov	r2, r3, d9
 80137c6:	f7ec fd7f 	bl	80002c8 <__aeabi_dsub>
 80137ca:	9d00      	ldr	r5, [sp, #0]
 80137cc:	ec41 0b19 	vmov	d9, r0, r1
 80137d0:	4649      	mov	r1, r9
 80137d2:	4640      	mov	r0, r8
 80137d4:	f7ed f9e0 	bl	8000b98 <__aeabi_d2iz>
 80137d8:	4606      	mov	r6, r0
 80137da:	f7ec fec3 	bl	8000564 <__aeabi_i2d>
 80137de:	4602      	mov	r2, r0
 80137e0:	460b      	mov	r3, r1
 80137e2:	4640      	mov	r0, r8
 80137e4:	4649      	mov	r1, r9
 80137e6:	f7ec fd6f 	bl	80002c8 <__aeabi_dsub>
 80137ea:	3630      	adds	r6, #48	; 0x30
 80137ec:	f805 6b01 	strb.w	r6, [r5], #1
 80137f0:	ec53 2b19 	vmov	r2, r3, d9
 80137f4:	4680      	mov	r8, r0
 80137f6:	4689      	mov	r9, r1
 80137f8:	f7ed f990 	bl	8000b1c <__aeabi_dcmplt>
 80137fc:	2800      	cmp	r0, #0
 80137fe:	d164      	bne.n	80138ca <_dtoa_r+0x62a>
 8013800:	4642      	mov	r2, r8
 8013802:	464b      	mov	r3, r9
 8013804:	4937      	ldr	r1, [pc, #220]	; (80138e4 <_dtoa_r+0x644>)
 8013806:	2000      	movs	r0, #0
 8013808:	f7ec fd5e 	bl	80002c8 <__aeabi_dsub>
 801380c:	ec53 2b19 	vmov	r2, r3, d9
 8013810:	f7ed f984 	bl	8000b1c <__aeabi_dcmplt>
 8013814:	2800      	cmp	r0, #0
 8013816:	f040 80b6 	bne.w	8013986 <_dtoa_r+0x6e6>
 801381a:	9b02      	ldr	r3, [sp, #8]
 801381c:	429d      	cmp	r5, r3
 801381e:	f43f af7c 	beq.w	801371a <_dtoa_r+0x47a>
 8013822:	4b31      	ldr	r3, [pc, #196]	; (80138e8 <_dtoa_r+0x648>)
 8013824:	ec51 0b19 	vmov	r0, r1, d9
 8013828:	2200      	movs	r2, #0
 801382a:	f7ec ff05 	bl	8000638 <__aeabi_dmul>
 801382e:	4b2e      	ldr	r3, [pc, #184]	; (80138e8 <_dtoa_r+0x648>)
 8013830:	ec41 0b19 	vmov	d9, r0, r1
 8013834:	2200      	movs	r2, #0
 8013836:	4640      	mov	r0, r8
 8013838:	4649      	mov	r1, r9
 801383a:	f7ec fefd 	bl	8000638 <__aeabi_dmul>
 801383e:	4680      	mov	r8, r0
 8013840:	4689      	mov	r9, r1
 8013842:	e7c5      	b.n	80137d0 <_dtoa_r+0x530>
 8013844:	ec51 0b17 	vmov	r0, r1, d7
 8013848:	f7ec fef6 	bl	8000638 <__aeabi_dmul>
 801384c:	9b02      	ldr	r3, [sp, #8]
 801384e:	9d00      	ldr	r5, [sp, #0]
 8013850:	930f      	str	r3, [sp, #60]	; 0x3c
 8013852:	ec41 0b19 	vmov	d9, r0, r1
 8013856:	4649      	mov	r1, r9
 8013858:	4640      	mov	r0, r8
 801385a:	f7ed f99d 	bl	8000b98 <__aeabi_d2iz>
 801385e:	4606      	mov	r6, r0
 8013860:	f7ec fe80 	bl	8000564 <__aeabi_i2d>
 8013864:	3630      	adds	r6, #48	; 0x30
 8013866:	4602      	mov	r2, r0
 8013868:	460b      	mov	r3, r1
 801386a:	4640      	mov	r0, r8
 801386c:	4649      	mov	r1, r9
 801386e:	f7ec fd2b 	bl	80002c8 <__aeabi_dsub>
 8013872:	f805 6b01 	strb.w	r6, [r5], #1
 8013876:	9b02      	ldr	r3, [sp, #8]
 8013878:	429d      	cmp	r5, r3
 801387a:	4680      	mov	r8, r0
 801387c:	4689      	mov	r9, r1
 801387e:	f04f 0200 	mov.w	r2, #0
 8013882:	d124      	bne.n	80138ce <_dtoa_r+0x62e>
 8013884:	4b1b      	ldr	r3, [pc, #108]	; (80138f4 <_dtoa_r+0x654>)
 8013886:	ec51 0b19 	vmov	r0, r1, d9
 801388a:	f7ec fd1f 	bl	80002cc <__adddf3>
 801388e:	4602      	mov	r2, r0
 8013890:	460b      	mov	r3, r1
 8013892:	4640      	mov	r0, r8
 8013894:	4649      	mov	r1, r9
 8013896:	f7ed f95f 	bl	8000b58 <__aeabi_dcmpgt>
 801389a:	2800      	cmp	r0, #0
 801389c:	d173      	bne.n	8013986 <_dtoa_r+0x6e6>
 801389e:	ec53 2b19 	vmov	r2, r3, d9
 80138a2:	4914      	ldr	r1, [pc, #80]	; (80138f4 <_dtoa_r+0x654>)
 80138a4:	2000      	movs	r0, #0
 80138a6:	f7ec fd0f 	bl	80002c8 <__aeabi_dsub>
 80138aa:	4602      	mov	r2, r0
 80138ac:	460b      	mov	r3, r1
 80138ae:	4640      	mov	r0, r8
 80138b0:	4649      	mov	r1, r9
 80138b2:	f7ed f933 	bl	8000b1c <__aeabi_dcmplt>
 80138b6:	2800      	cmp	r0, #0
 80138b8:	f43f af2f 	beq.w	801371a <_dtoa_r+0x47a>
 80138bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80138be:	1e6b      	subs	r3, r5, #1
 80138c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80138c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80138c6:	2b30      	cmp	r3, #48	; 0x30
 80138c8:	d0f8      	beq.n	80138bc <_dtoa_r+0x61c>
 80138ca:	46bb      	mov	fp, r7
 80138cc:	e04a      	b.n	8013964 <_dtoa_r+0x6c4>
 80138ce:	4b06      	ldr	r3, [pc, #24]	; (80138e8 <_dtoa_r+0x648>)
 80138d0:	f7ec feb2 	bl	8000638 <__aeabi_dmul>
 80138d4:	4680      	mov	r8, r0
 80138d6:	4689      	mov	r9, r1
 80138d8:	e7bd      	b.n	8013856 <_dtoa_r+0x5b6>
 80138da:	bf00      	nop
 80138dc:	08015b70 	.word	0x08015b70
 80138e0:	08015b48 	.word	0x08015b48
 80138e4:	3ff00000 	.word	0x3ff00000
 80138e8:	40240000 	.word	0x40240000
 80138ec:	401c0000 	.word	0x401c0000
 80138f0:	40140000 	.word	0x40140000
 80138f4:	3fe00000 	.word	0x3fe00000
 80138f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80138fc:	9d00      	ldr	r5, [sp, #0]
 80138fe:	4642      	mov	r2, r8
 8013900:	464b      	mov	r3, r9
 8013902:	4630      	mov	r0, r6
 8013904:	4639      	mov	r1, r7
 8013906:	f7ec ffc1 	bl	800088c <__aeabi_ddiv>
 801390a:	f7ed f945 	bl	8000b98 <__aeabi_d2iz>
 801390e:	9001      	str	r0, [sp, #4]
 8013910:	f7ec fe28 	bl	8000564 <__aeabi_i2d>
 8013914:	4642      	mov	r2, r8
 8013916:	464b      	mov	r3, r9
 8013918:	f7ec fe8e 	bl	8000638 <__aeabi_dmul>
 801391c:	4602      	mov	r2, r0
 801391e:	460b      	mov	r3, r1
 8013920:	4630      	mov	r0, r6
 8013922:	4639      	mov	r1, r7
 8013924:	f7ec fcd0 	bl	80002c8 <__aeabi_dsub>
 8013928:	9e01      	ldr	r6, [sp, #4]
 801392a:	9f04      	ldr	r7, [sp, #16]
 801392c:	3630      	adds	r6, #48	; 0x30
 801392e:	f805 6b01 	strb.w	r6, [r5], #1
 8013932:	9e00      	ldr	r6, [sp, #0]
 8013934:	1bae      	subs	r6, r5, r6
 8013936:	42b7      	cmp	r7, r6
 8013938:	4602      	mov	r2, r0
 801393a:	460b      	mov	r3, r1
 801393c:	d134      	bne.n	80139a8 <_dtoa_r+0x708>
 801393e:	f7ec fcc5 	bl	80002cc <__adddf3>
 8013942:	4642      	mov	r2, r8
 8013944:	464b      	mov	r3, r9
 8013946:	4606      	mov	r6, r0
 8013948:	460f      	mov	r7, r1
 801394a:	f7ed f905 	bl	8000b58 <__aeabi_dcmpgt>
 801394e:	b9c8      	cbnz	r0, 8013984 <_dtoa_r+0x6e4>
 8013950:	4642      	mov	r2, r8
 8013952:	464b      	mov	r3, r9
 8013954:	4630      	mov	r0, r6
 8013956:	4639      	mov	r1, r7
 8013958:	f7ed f8d6 	bl	8000b08 <__aeabi_dcmpeq>
 801395c:	b110      	cbz	r0, 8013964 <_dtoa_r+0x6c4>
 801395e:	9b01      	ldr	r3, [sp, #4]
 8013960:	07db      	lsls	r3, r3, #31
 8013962:	d40f      	bmi.n	8013984 <_dtoa_r+0x6e4>
 8013964:	4651      	mov	r1, sl
 8013966:	4620      	mov	r0, r4
 8013968:	f000 fd86 	bl	8014478 <_Bfree>
 801396c:	2300      	movs	r3, #0
 801396e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013970:	702b      	strb	r3, [r5, #0]
 8013972:	f10b 0301 	add.w	r3, fp, #1
 8013976:	6013      	str	r3, [r2, #0]
 8013978:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801397a:	2b00      	cmp	r3, #0
 801397c:	f43f ace2 	beq.w	8013344 <_dtoa_r+0xa4>
 8013980:	601d      	str	r5, [r3, #0]
 8013982:	e4df      	b.n	8013344 <_dtoa_r+0xa4>
 8013984:	465f      	mov	r7, fp
 8013986:	462b      	mov	r3, r5
 8013988:	461d      	mov	r5, r3
 801398a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801398e:	2a39      	cmp	r2, #57	; 0x39
 8013990:	d106      	bne.n	80139a0 <_dtoa_r+0x700>
 8013992:	9a00      	ldr	r2, [sp, #0]
 8013994:	429a      	cmp	r2, r3
 8013996:	d1f7      	bne.n	8013988 <_dtoa_r+0x6e8>
 8013998:	9900      	ldr	r1, [sp, #0]
 801399a:	2230      	movs	r2, #48	; 0x30
 801399c:	3701      	adds	r7, #1
 801399e:	700a      	strb	r2, [r1, #0]
 80139a0:	781a      	ldrb	r2, [r3, #0]
 80139a2:	3201      	adds	r2, #1
 80139a4:	701a      	strb	r2, [r3, #0]
 80139a6:	e790      	b.n	80138ca <_dtoa_r+0x62a>
 80139a8:	4ba3      	ldr	r3, [pc, #652]	; (8013c38 <_dtoa_r+0x998>)
 80139aa:	2200      	movs	r2, #0
 80139ac:	f7ec fe44 	bl	8000638 <__aeabi_dmul>
 80139b0:	2200      	movs	r2, #0
 80139b2:	2300      	movs	r3, #0
 80139b4:	4606      	mov	r6, r0
 80139b6:	460f      	mov	r7, r1
 80139b8:	f7ed f8a6 	bl	8000b08 <__aeabi_dcmpeq>
 80139bc:	2800      	cmp	r0, #0
 80139be:	d09e      	beq.n	80138fe <_dtoa_r+0x65e>
 80139c0:	e7d0      	b.n	8013964 <_dtoa_r+0x6c4>
 80139c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80139c4:	2a00      	cmp	r2, #0
 80139c6:	f000 80ca 	beq.w	8013b5e <_dtoa_r+0x8be>
 80139ca:	9a07      	ldr	r2, [sp, #28]
 80139cc:	2a01      	cmp	r2, #1
 80139ce:	f300 80ad 	bgt.w	8013b2c <_dtoa_r+0x88c>
 80139d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80139d4:	2a00      	cmp	r2, #0
 80139d6:	f000 80a5 	beq.w	8013b24 <_dtoa_r+0x884>
 80139da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80139de:	9e08      	ldr	r6, [sp, #32]
 80139e0:	9d05      	ldr	r5, [sp, #20]
 80139e2:	9a05      	ldr	r2, [sp, #20]
 80139e4:	441a      	add	r2, r3
 80139e6:	9205      	str	r2, [sp, #20]
 80139e8:	9a06      	ldr	r2, [sp, #24]
 80139ea:	2101      	movs	r1, #1
 80139ec:	441a      	add	r2, r3
 80139ee:	4620      	mov	r0, r4
 80139f0:	9206      	str	r2, [sp, #24]
 80139f2:	f000 fdf7 	bl	80145e4 <__i2b>
 80139f6:	4607      	mov	r7, r0
 80139f8:	b165      	cbz	r5, 8013a14 <_dtoa_r+0x774>
 80139fa:	9b06      	ldr	r3, [sp, #24]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	dd09      	ble.n	8013a14 <_dtoa_r+0x774>
 8013a00:	42ab      	cmp	r3, r5
 8013a02:	9a05      	ldr	r2, [sp, #20]
 8013a04:	bfa8      	it	ge
 8013a06:	462b      	movge	r3, r5
 8013a08:	1ad2      	subs	r2, r2, r3
 8013a0a:	9205      	str	r2, [sp, #20]
 8013a0c:	9a06      	ldr	r2, [sp, #24]
 8013a0e:	1aed      	subs	r5, r5, r3
 8013a10:	1ad3      	subs	r3, r2, r3
 8013a12:	9306      	str	r3, [sp, #24]
 8013a14:	9b08      	ldr	r3, [sp, #32]
 8013a16:	b1f3      	cbz	r3, 8013a56 <_dtoa_r+0x7b6>
 8013a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	f000 80a3 	beq.w	8013b66 <_dtoa_r+0x8c6>
 8013a20:	2e00      	cmp	r6, #0
 8013a22:	dd10      	ble.n	8013a46 <_dtoa_r+0x7a6>
 8013a24:	4639      	mov	r1, r7
 8013a26:	4632      	mov	r2, r6
 8013a28:	4620      	mov	r0, r4
 8013a2a:	f000 fe9b 	bl	8014764 <__pow5mult>
 8013a2e:	4652      	mov	r2, sl
 8013a30:	4601      	mov	r1, r0
 8013a32:	4607      	mov	r7, r0
 8013a34:	4620      	mov	r0, r4
 8013a36:	f000 fdeb 	bl	8014610 <__multiply>
 8013a3a:	4651      	mov	r1, sl
 8013a3c:	4680      	mov	r8, r0
 8013a3e:	4620      	mov	r0, r4
 8013a40:	f000 fd1a 	bl	8014478 <_Bfree>
 8013a44:	46c2      	mov	sl, r8
 8013a46:	9b08      	ldr	r3, [sp, #32]
 8013a48:	1b9a      	subs	r2, r3, r6
 8013a4a:	d004      	beq.n	8013a56 <_dtoa_r+0x7b6>
 8013a4c:	4651      	mov	r1, sl
 8013a4e:	4620      	mov	r0, r4
 8013a50:	f000 fe88 	bl	8014764 <__pow5mult>
 8013a54:	4682      	mov	sl, r0
 8013a56:	2101      	movs	r1, #1
 8013a58:	4620      	mov	r0, r4
 8013a5a:	f000 fdc3 	bl	80145e4 <__i2b>
 8013a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	4606      	mov	r6, r0
 8013a64:	f340 8081 	ble.w	8013b6a <_dtoa_r+0x8ca>
 8013a68:	461a      	mov	r2, r3
 8013a6a:	4601      	mov	r1, r0
 8013a6c:	4620      	mov	r0, r4
 8013a6e:	f000 fe79 	bl	8014764 <__pow5mult>
 8013a72:	9b07      	ldr	r3, [sp, #28]
 8013a74:	2b01      	cmp	r3, #1
 8013a76:	4606      	mov	r6, r0
 8013a78:	dd7a      	ble.n	8013b70 <_dtoa_r+0x8d0>
 8013a7a:	f04f 0800 	mov.w	r8, #0
 8013a7e:	6933      	ldr	r3, [r6, #16]
 8013a80:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013a84:	6918      	ldr	r0, [r3, #16]
 8013a86:	f000 fd5f 	bl	8014548 <__hi0bits>
 8013a8a:	f1c0 0020 	rsb	r0, r0, #32
 8013a8e:	9b06      	ldr	r3, [sp, #24]
 8013a90:	4418      	add	r0, r3
 8013a92:	f010 001f 	ands.w	r0, r0, #31
 8013a96:	f000 8094 	beq.w	8013bc2 <_dtoa_r+0x922>
 8013a9a:	f1c0 0320 	rsb	r3, r0, #32
 8013a9e:	2b04      	cmp	r3, #4
 8013aa0:	f340 8085 	ble.w	8013bae <_dtoa_r+0x90e>
 8013aa4:	9b05      	ldr	r3, [sp, #20]
 8013aa6:	f1c0 001c 	rsb	r0, r0, #28
 8013aaa:	4403      	add	r3, r0
 8013aac:	9305      	str	r3, [sp, #20]
 8013aae:	9b06      	ldr	r3, [sp, #24]
 8013ab0:	4403      	add	r3, r0
 8013ab2:	4405      	add	r5, r0
 8013ab4:	9306      	str	r3, [sp, #24]
 8013ab6:	9b05      	ldr	r3, [sp, #20]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	dd05      	ble.n	8013ac8 <_dtoa_r+0x828>
 8013abc:	4651      	mov	r1, sl
 8013abe:	461a      	mov	r2, r3
 8013ac0:	4620      	mov	r0, r4
 8013ac2:	f000 fea9 	bl	8014818 <__lshift>
 8013ac6:	4682      	mov	sl, r0
 8013ac8:	9b06      	ldr	r3, [sp, #24]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	dd05      	ble.n	8013ada <_dtoa_r+0x83a>
 8013ace:	4631      	mov	r1, r6
 8013ad0:	461a      	mov	r2, r3
 8013ad2:	4620      	mov	r0, r4
 8013ad4:	f000 fea0 	bl	8014818 <__lshift>
 8013ad8:	4606      	mov	r6, r0
 8013ada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d072      	beq.n	8013bc6 <_dtoa_r+0x926>
 8013ae0:	4631      	mov	r1, r6
 8013ae2:	4650      	mov	r0, sl
 8013ae4:	f000 ff04 	bl	80148f0 <__mcmp>
 8013ae8:	2800      	cmp	r0, #0
 8013aea:	da6c      	bge.n	8013bc6 <_dtoa_r+0x926>
 8013aec:	2300      	movs	r3, #0
 8013aee:	4651      	mov	r1, sl
 8013af0:	220a      	movs	r2, #10
 8013af2:	4620      	mov	r0, r4
 8013af4:	f000 fce2 	bl	80144bc <__multadd>
 8013af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013afa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013afe:	4682      	mov	sl, r0
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	f000 81b0 	beq.w	8013e66 <_dtoa_r+0xbc6>
 8013b06:	2300      	movs	r3, #0
 8013b08:	4639      	mov	r1, r7
 8013b0a:	220a      	movs	r2, #10
 8013b0c:	4620      	mov	r0, r4
 8013b0e:	f000 fcd5 	bl	80144bc <__multadd>
 8013b12:	9b01      	ldr	r3, [sp, #4]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	4607      	mov	r7, r0
 8013b18:	f300 8096 	bgt.w	8013c48 <_dtoa_r+0x9a8>
 8013b1c:	9b07      	ldr	r3, [sp, #28]
 8013b1e:	2b02      	cmp	r3, #2
 8013b20:	dc59      	bgt.n	8013bd6 <_dtoa_r+0x936>
 8013b22:	e091      	b.n	8013c48 <_dtoa_r+0x9a8>
 8013b24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013b26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013b2a:	e758      	b.n	80139de <_dtoa_r+0x73e>
 8013b2c:	9b04      	ldr	r3, [sp, #16]
 8013b2e:	1e5e      	subs	r6, r3, #1
 8013b30:	9b08      	ldr	r3, [sp, #32]
 8013b32:	42b3      	cmp	r3, r6
 8013b34:	bfbf      	itttt	lt
 8013b36:	9b08      	ldrlt	r3, [sp, #32]
 8013b38:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8013b3a:	9608      	strlt	r6, [sp, #32]
 8013b3c:	1af3      	sublt	r3, r6, r3
 8013b3e:	bfb4      	ite	lt
 8013b40:	18d2      	addlt	r2, r2, r3
 8013b42:	1b9e      	subge	r6, r3, r6
 8013b44:	9b04      	ldr	r3, [sp, #16]
 8013b46:	bfbc      	itt	lt
 8013b48:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8013b4a:	2600      	movlt	r6, #0
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	bfb7      	itett	lt
 8013b50:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8013b54:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8013b58:	1a9d      	sublt	r5, r3, r2
 8013b5a:	2300      	movlt	r3, #0
 8013b5c:	e741      	b.n	80139e2 <_dtoa_r+0x742>
 8013b5e:	9e08      	ldr	r6, [sp, #32]
 8013b60:	9d05      	ldr	r5, [sp, #20]
 8013b62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013b64:	e748      	b.n	80139f8 <_dtoa_r+0x758>
 8013b66:	9a08      	ldr	r2, [sp, #32]
 8013b68:	e770      	b.n	8013a4c <_dtoa_r+0x7ac>
 8013b6a:	9b07      	ldr	r3, [sp, #28]
 8013b6c:	2b01      	cmp	r3, #1
 8013b6e:	dc19      	bgt.n	8013ba4 <_dtoa_r+0x904>
 8013b70:	9b02      	ldr	r3, [sp, #8]
 8013b72:	b9bb      	cbnz	r3, 8013ba4 <_dtoa_r+0x904>
 8013b74:	9b03      	ldr	r3, [sp, #12]
 8013b76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013b7a:	b99b      	cbnz	r3, 8013ba4 <_dtoa_r+0x904>
 8013b7c:	9b03      	ldr	r3, [sp, #12]
 8013b7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013b82:	0d1b      	lsrs	r3, r3, #20
 8013b84:	051b      	lsls	r3, r3, #20
 8013b86:	b183      	cbz	r3, 8013baa <_dtoa_r+0x90a>
 8013b88:	9b05      	ldr	r3, [sp, #20]
 8013b8a:	3301      	adds	r3, #1
 8013b8c:	9305      	str	r3, [sp, #20]
 8013b8e:	9b06      	ldr	r3, [sp, #24]
 8013b90:	3301      	adds	r3, #1
 8013b92:	9306      	str	r3, [sp, #24]
 8013b94:	f04f 0801 	mov.w	r8, #1
 8013b98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	f47f af6f 	bne.w	8013a7e <_dtoa_r+0x7de>
 8013ba0:	2001      	movs	r0, #1
 8013ba2:	e774      	b.n	8013a8e <_dtoa_r+0x7ee>
 8013ba4:	f04f 0800 	mov.w	r8, #0
 8013ba8:	e7f6      	b.n	8013b98 <_dtoa_r+0x8f8>
 8013baa:	4698      	mov	r8, r3
 8013bac:	e7f4      	b.n	8013b98 <_dtoa_r+0x8f8>
 8013bae:	d082      	beq.n	8013ab6 <_dtoa_r+0x816>
 8013bb0:	9a05      	ldr	r2, [sp, #20]
 8013bb2:	331c      	adds	r3, #28
 8013bb4:	441a      	add	r2, r3
 8013bb6:	9205      	str	r2, [sp, #20]
 8013bb8:	9a06      	ldr	r2, [sp, #24]
 8013bba:	441a      	add	r2, r3
 8013bbc:	441d      	add	r5, r3
 8013bbe:	9206      	str	r2, [sp, #24]
 8013bc0:	e779      	b.n	8013ab6 <_dtoa_r+0x816>
 8013bc2:	4603      	mov	r3, r0
 8013bc4:	e7f4      	b.n	8013bb0 <_dtoa_r+0x910>
 8013bc6:	9b04      	ldr	r3, [sp, #16]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	dc37      	bgt.n	8013c3c <_dtoa_r+0x99c>
 8013bcc:	9b07      	ldr	r3, [sp, #28]
 8013bce:	2b02      	cmp	r3, #2
 8013bd0:	dd34      	ble.n	8013c3c <_dtoa_r+0x99c>
 8013bd2:	9b04      	ldr	r3, [sp, #16]
 8013bd4:	9301      	str	r3, [sp, #4]
 8013bd6:	9b01      	ldr	r3, [sp, #4]
 8013bd8:	b963      	cbnz	r3, 8013bf4 <_dtoa_r+0x954>
 8013bda:	4631      	mov	r1, r6
 8013bdc:	2205      	movs	r2, #5
 8013bde:	4620      	mov	r0, r4
 8013be0:	f000 fc6c 	bl	80144bc <__multadd>
 8013be4:	4601      	mov	r1, r0
 8013be6:	4606      	mov	r6, r0
 8013be8:	4650      	mov	r0, sl
 8013bea:	f000 fe81 	bl	80148f0 <__mcmp>
 8013bee:	2800      	cmp	r0, #0
 8013bf0:	f73f adbb 	bgt.w	801376a <_dtoa_r+0x4ca>
 8013bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013bf6:	9d00      	ldr	r5, [sp, #0]
 8013bf8:	ea6f 0b03 	mvn.w	fp, r3
 8013bfc:	f04f 0800 	mov.w	r8, #0
 8013c00:	4631      	mov	r1, r6
 8013c02:	4620      	mov	r0, r4
 8013c04:	f000 fc38 	bl	8014478 <_Bfree>
 8013c08:	2f00      	cmp	r7, #0
 8013c0a:	f43f aeab 	beq.w	8013964 <_dtoa_r+0x6c4>
 8013c0e:	f1b8 0f00 	cmp.w	r8, #0
 8013c12:	d005      	beq.n	8013c20 <_dtoa_r+0x980>
 8013c14:	45b8      	cmp	r8, r7
 8013c16:	d003      	beq.n	8013c20 <_dtoa_r+0x980>
 8013c18:	4641      	mov	r1, r8
 8013c1a:	4620      	mov	r0, r4
 8013c1c:	f000 fc2c 	bl	8014478 <_Bfree>
 8013c20:	4639      	mov	r1, r7
 8013c22:	4620      	mov	r0, r4
 8013c24:	f000 fc28 	bl	8014478 <_Bfree>
 8013c28:	e69c      	b.n	8013964 <_dtoa_r+0x6c4>
 8013c2a:	2600      	movs	r6, #0
 8013c2c:	4637      	mov	r7, r6
 8013c2e:	e7e1      	b.n	8013bf4 <_dtoa_r+0x954>
 8013c30:	46bb      	mov	fp, r7
 8013c32:	4637      	mov	r7, r6
 8013c34:	e599      	b.n	801376a <_dtoa_r+0x4ca>
 8013c36:	bf00      	nop
 8013c38:	40240000 	.word	0x40240000
 8013c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	f000 80c8 	beq.w	8013dd4 <_dtoa_r+0xb34>
 8013c44:	9b04      	ldr	r3, [sp, #16]
 8013c46:	9301      	str	r3, [sp, #4]
 8013c48:	2d00      	cmp	r5, #0
 8013c4a:	dd05      	ble.n	8013c58 <_dtoa_r+0x9b8>
 8013c4c:	4639      	mov	r1, r7
 8013c4e:	462a      	mov	r2, r5
 8013c50:	4620      	mov	r0, r4
 8013c52:	f000 fde1 	bl	8014818 <__lshift>
 8013c56:	4607      	mov	r7, r0
 8013c58:	f1b8 0f00 	cmp.w	r8, #0
 8013c5c:	d05b      	beq.n	8013d16 <_dtoa_r+0xa76>
 8013c5e:	6879      	ldr	r1, [r7, #4]
 8013c60:	4620      	mov	r0, r4
 8013c62:	f000 fbc9 	bl	80143f8 <_Balloc>
 8013c66:	4605      	mov	r5, r0
 8013c68:	b928      	cbnz	r0, 8013c76 <_dtoa_r+0x9d6>
 8013c6a:	4b83      	ldr	r3, [pc, #524]	; (8013e78 <_dtoa_r+0xbd8>)
 8013c6c:	4602      	mov	r2, r0
 8013c6e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8013c72:	f7ff bb2e 	b.w	80132d2 <_dtoa_r+0x32>
 8013c76:	693a      	ldr	r2, [r7, #16]
 8013c78:	3202      	adds	r2, #2
 8013c7a:	0092      	lsls	r2, r2, #2
 8013c7c:	f107 010c 	add.w	r1, r7, #12
 8013c80:	300c      	adds	r0, #12
 8013c82:	f7ff fa58 	bl	8013136 <memcpy>
 8013c86:	2201      	movs	r2, #1
 8013c88:	4629      	mov	r1, r5
 8013c8a:	4620      	mov	r0, r4
 8013c8c:	f000 fdc4 	bl	8014818 <__lshift>
 8013c90:	9b00      	ldr	r3, [sp, #0]
 8013c92:	3301      	adds	r3, #1
 8013c94:	9304      	str	r3, [sp, #16]
 8013c96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c9a:	4413      	add	r3, r2
 8013c9c:	9308      	str	r3, [sp, #32]
 8013c9e:	9b02      	ldr	r3, [sp, #8]
 8013ca0:	f003 0301 	and.w	r3, r3, #1
 8013ca4:	46b8      	mov	r8, r7
 8013ca6:	9306      	str	r3, [sp, #24]
 8013ca8:	4607      	mov	r7, r0
 8013caa:	9b04      	ldr	r3, [sp, #16]
 8013cac:	4631      	mov	r1, r6
 8013cae:	3b01      	subs	r3, #1
 8013cb0:	4650      	mov	r0, sl
 8013cb2:	9301      	str	r3, [sp, #4]
 8013cb4:	f7ff fa6c 	bl	8013190 <quorem>
 8013cb8:	4641      	mov	r1, r8
 8013cba:	9002      	str	r0, [sp, #8]
 8013cbc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013cc0:	4650      	mov	r0, sl
 8013cc2:	f000 fe15 	bl	80148f0 <__mcmp>
 8013cc6:	463a      	mov	r2, r7
 8013cc8:	9005      	str	r0, [sp, #20]
 8013cca:	4631      	mov	r1, r6
 8013ccc:	4620      	mov	r0, r4
 8013cce:	f000 fe2b 	bl	8014928 <__mdiff>
 8013cd2:	68c2      	ldr	r2, [r0, #12]
 8013cd4:	4605      	mov	r5, r0
 8013cd6:	bb02      	cbnz	r2, 8013d1a <_dtoa_r+0xa7a>
 8013cd8:	4601      	mov	r1, r0
 8013cda:	4650      	mov	r0, sl
 8013cdc:	f000 fe08 	bl	80148f0 <__mcmp>
 8013ce0:	4602      	mov	r2, r0
 8013ce2:	4629      	mov	r1, r5
 8013ce4:	4620      	mov	r0, r4
 8013ce6:	9209      	str	r2, [sp, #36]	; 0x24
 8013ce8:	f000 fbc6 	bl	8014478 <_Bfree>
 8013cec:	9b07      	ldr	r3, [sp, #28]
 8013cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013cf0:	9d04      	ldr	r5, [sp, #16]
 8013cf2:	ea43 0102 	orr.w	r1, r3, r2
 8013cf6:	9b06      	ldr	r3, [sp, #24]
 8013cf8:	4319      	orrs	r1, r3
 8013cfa:	d110      	bne.n	8013d1e <_dtoa_r+0xa7e>
 8013cfc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013d00:	d029      	beq.n	8013d56 <_dtoa_r+0xab6>
 8013d02:	9b05      	ldr	r3, [sp, #20]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	dd02      	ble.n	8013d0e <_dtoa_r+0xa6e>
 8013d08:	9b02      	ldr	r3, [sp, #8]
 8013d0a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8013d0e:	9b01      	ldr	r3, [sp, #4]
 8013d10:	f883 9000 	strb.w	r9, [r3]
 8013d14:	e774      	b.n	8013c00 <_dtoa_r+0x960>
 8013d16:	4638      	mov	r0, r7
 8013d18:	e7ba      	b.n	8013c90 <_dtoa_r+0x9f0>
 8013d1a:	2201      	movs	r2, #1
 8013d1c:	e7e1      	b.n	8013ce2 <_dtoa_r+0xa42>
 8013d1e:	9b05      	ldr	r3, [sp, #20]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	db04      	blt.n	8013d2e <_dtoa_r+0xa8e>
 8013d24:	9907      	ldr	r1, [sp, #28]
 8013d26:	430b      	orrs	r3, r1
 8013d28:	9906      	ldr	r1, [sp, #24]
 8013d2a:	430b      	orrs	r3, r1
 8013d2c:	d120      	bne.n	8013d70 <_dtoa_r+0xad0>
 8013d2e:	2a00      	cmp	r2, #0
 8013d30:	dded      	ble.n	8013d0e <_dtoa_r+0xa6e>
 8013d32:	4651      	mov	r1, sl
 8013d34:	2201      	movs	r2, #1
 8013d36:	4620      	mov	r0, r4
 8013d38:	f000 fd6e 	bl	8014818 <__lshift>
 8013d3c:	4631      	mov	r1, r6
 8013d3e:	4682      	mov	sl, r0
 8013d40:	f000 fdd6 	bl	80148f0 <__mcmp>
 8013d44:	2800      	cmp	r0, #0
 8013d46:	dc03      	bgt.n	8013d50 <_dtoa_r+0xab0>
 8013d48:	d1e1      	bne.n	8013d0e <_dtoa_r+0xa6e>
 8013d4a:	f019 0f01 	tst.w	r9, #1
 8013d4e:	d0de      	beq.n	8013d0e <_dtoa_r+0xa6e>
 8013d50:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013d54:	d1d8      	bne.n	8013d08 <_dtoa_r+0xa68>
 8013d56:	9a01      	ldr	r2, [sp, #4]
 8013d58:	2339      	movs	r3, #57	; 0x39
 8013d5a:	7013      	strb	r3, [r2, #0]
 8013d5c:	462b      	mov	r3, r5
 8013d5e:	461d      	mov	r5, r3
 8013d60:	3b01      	subs	r3, #1
 8013d62:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013d66:	2a39      	cmp	r2, #57	; 0x39
 8013d68:	d06c      	beq.n	8013e44 <_dtoa_r+0xba4>
 8013d6a:	3201      	adds	r2, #1
 8013d6c:	701a      	strb	r2, [r3, #0]
 8013d6e:	e747      	b.n	8013c00 <_dtoa_r+0x960>
 8013d70:	2a00      	cmp	r2, #0
 8013d72:	dd07      	ble.n	8013d84 <_dtoa_r+0xae4>
 8013d74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013d78:	d0ed      	beq.n	8013d56 <_dtoa_r+0xab6>
 8013d7a:	9a01      	ldr	r2, [sp, #4]
 8013d7c:	f109 0301 	add.w	r3, r9, #1
 8013d80:	7013      	strb	r3, [r2, #0]
 8013d82:	e73d      	b.n	8013c00 <_dtoa_r+0x960>
 8013d84:	9b04      	ldr	r3, [sp, #16]
 8013d86:	9a08      	ldr	r2, [sp, #32]
 8013d88:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013d8c:	4293      	cmp	r3, r2
 8013d8e:	d043      	beq.n	8013e18 <_dtoa_r+0xb78>
 8013d90:	4651      	mov	r1, sl
 8013d92:	2300      	movs	r3, #0
 8013d94:	220a      	movs	r2, #10
 8013d96:	4620      	mov	r0, r4
 8013d98:	f000 fb90 	bl	80144bc <__multadd>
 8013d9c:	45b8      	cmp	r8, r7
 8013d9e:	4682      	mov	sl, r0
 8013da0:	f04f 0300 	mov.w	r3, #0
 8013da4:	f04f 020a 	mov.w	r2, #10
 8013da8:	4641      	mov	r1, r8
 8013daa:	4620      	mov	r0, r4
 8013dac:	d107      	bne.n	8013dbe <_dtoa_r+0xb1e>
 8013dae:	f000 fb85 	bl	80144bc <__multadd>
 8013db2:	4680      	mov	r8, r0
 8013db4:	4607      	mov	r7, r0
 8013db6:	9b04      	ldr	r3, [sp, #16]
 8013db8:	3301      	adds	r3, #1
 8013dba:	9304      	str	r3, [sp, #16]
 8013dbc:	e775      	b.n	8013caa <_dtoa_r+0xa0a>
 8013dbe:	f000 fb7d 	bl	80144bc <__multadd>
 8013dc2:	4639      	mov	r1, r7
 8013dc4:	4680      	mov	r8, r0
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	220a      	movs	r2, #10
 8013dca:	4620      	mov	r0, r4
 8013dcc:	f000 fb76 	bl	80144bc <__multadd>
 8013dd0:	4607      	mov	r7, r0
 8013dd2:	e7f0      	b.n	8013db6 <_dtoa_r+0xb16>
 8013dd4:	9b04      	ldr	r3, [sp, #16]
 8013dd6:	9301      	str	r3, [sp, #4]
 8013dd8:	9d00      	ldr	r5, [sp, #0]
 8013dda:	4631      	mov	r1, r6
 8013ddc:	4650      	mov	r0, sl
 8013dde:	f7ff f9d7 	bl	8013190 <quorem>
 8013de2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013de6:	9b00      	ldr	r3, [sp, #0]
 8013de8:	f805 9b01 	strb.w	r9, [r5], #1
 8013dec:	1aea      	subs	r2, r5, r3
 8013dee:	9b01      	ldr	r3, [sp, #4]
 8013df0:	4293      	cmp	r3, r2
 8013df2:	dd07      	ble.n	8013e04 <_dtoa_r+0xb64>
 8013df4:	4651      	mov	r1, sl
 8013df6:	2300      	movs	r3, #0
 8013df8:	220a      	movs	r2, #10
 8013dfa:	4620      	mov	r0, r4
 8013dfc:	f000 fb5e 	bl	80144bc <__multadd>
 8013e00:	4682      	mov	sl, r0
 8013e02:	e7ea      	b.n	8013dda <_dtoa_r+0xb3a>
 8013e04:	9b01      	ldr	r3, [sp, #4]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	bfc8      	it	gt
 8013e0a:	461d      	movgt	r5, r3
 8013e0c:	9b00      	ldr	r3, [sp, #0]
 8013e0e:	bfd8      	it	le
 8013e10:	2501      	movle	r5, #1
 8013e12:	441d      	add	r5, r3
 8013e14:	f04f 0800 	mov.w	r8, #0
 8013e18:	4651      	mov	r1, sl
 8013e1a:	2201      	movs	r2, #1
 8013e1c:	4620      	mov	r0, r4
 8013e1e:	f000 fcfb 	bl	8014818 <__lshift>
 8013e22:	4631      	mov	r1, r6
 8013e24:	4682      	mov	sl, r0
 8013e26:	f000 fd63 	bl	80148f0 <__mcmp>
 8013e2a:	2800      	cmp	r0, #0
 8013e2c:	dc96      	bgt.n	8013d5c <_dtoa_r+0xabc>
 8013e2e:	d102      	bne.n	8013e36 <_dtoa_r+0xb96>
 8013e30:	f019 0f01 	tst.w	r9, #1
 8013e34:	d192      	bne.n	8013d5c <_dtoa_r+0xabc>
 8013e36:	462b      	mov	r3, r5
 8013e38:	461d      	mov	r5, r3
 8013e3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013e3e:	2a30      	cmp	r2, #48	; 0x30
 8013e40:	d0fa      	beq.n	8013e38 <_dtoa_r+0xb98>
 8013e42:	e6dd      	b.n	8013c00 <_dtoa_r+0x960>
 8013e44:	9a00      	ldr	r2, [sp, #0]
 8013e46:	429a      	cmp	r2, r3
 8013e48:	d189      	bne.n	8013d5e <_dtoa_r+0xabe>
 8013e4a:	f10b 0b01 	add.w	fp, fp, #1
 8013e4e:	2331      	movs	r3, #49	; 0x31
 8013e50:	e796      	b.n	8013d80 <_dtoa_r+0xae0>
 8013e52:	4b0a      	ldr	r3, [pc, #40]	; (8013e7c <_dtoa_r+0xbdc>)
 8013e54:	f7ff ba99 	b.w	801338a <_dtoa_r+0xea>
 8013e58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	f47f aa6d 	bne.w	801333a <_dtoa_r+0x9a>
 8013e60:	4b07      	ldr	r3, [pc, #28]	; (8013e80 <_dtoa_r+0xbe0>)
 8013e62:	f7ff ba92 	b.w	801338a <_dtoa_r+0xea>
 8013e66:	9b01      	ldr	r3, [sp, #4]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	dcb5      	bgt.n	8013dd8 <_dtoa_r+0xb38>
 8013e6c:	9b07      	ldr	r3, [sp, #28]
 8013e6e:	2b02      	cmp	r3, #2
 8013e70:	f73f aeb1 	bgt.w	8013bd6 <_dtoa_r+0x936>
 8013e74:	e7b0      	b.n	8013dd8 <_dtoa_r+0xb38>
 8013e76:	bf00      	nop
 8013e78:	08015ac9 	.word	0x08015ac9
 8013e7c:	08015894 	.word	0x08015894
 8013e80:	08015a64 	.word	0x08015a64

08013e84 <__ssputs_r>:
 8013e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e88:	688e      	ldr	r6, [r1, #8]
 8013e8a:	461f      	mov	r7, r3
 8013e8c:	42be      	cmp	r6, r7
 8013e8e:	680b      	ldr	r3, [r1, #0]
 8013e90:	4682      	mov	sl, r0
 8013e92:	460c      	mov	r4, r1
 8013e94:	4690      	mov	r8, r2
 8013e96:	d82c      	bhi.n	8013ef2 <__ssputs_r+0x6e>
 8013e98:	898a      	ldrh	r2, [r1, #12]
 8013e9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013e9e:	d026      	beq.n	8013eee <__ssputs_r+0x6a>
 8013ea0:	6965      	ldr	r5, [r4, #20]
 8013ea2:	6909      	ldr	r1, [r1, #16]
 8013ea4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ea8:	eba3 0901 	sub.w	r9, r3, r1
 8013eac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013eb0:	1c7b      	adds	r3, r7, #1
 8013eb2:	444b      	add	r3, r9
 8013eb4:	106d      	asrs	r5, r5, #1
 8013eb6:	429d      	cmp	r5, r3
 8013eb8:	bf38      	it	cc
 8013eba:	461d      	movcc	r5, r3
 8013ebc:	0553      	lsls	r3, r2, #21
 8013ebe:	d527      	bpl.n	8013f10 <__ssputs_r+0x8c>
 8013ec0:	4629      	mov	r1, r5
 8013ec2:	f000 f95f 	bl	8014184 <_malloc_r>
 8013ec6:	4606      	mov	r6, r0
 8013ec8:	b360      	cbz	r0, 8013f24 <__ssputs_r+0xa0>
 8013eca:	6921      	ldr	r1, [r4, #16]
 8013ecc:	464a      	mov	r2, r9
 8013ece:	f7ff f932 	bl	8013136 <memcpy>
 8013ed2:	89a3      	ldrh	r3, [r4, #12]
 8013ed4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013edc:	81a3      	strh	r3, [r4, #12]
 8013ede:	6126      	str	r6, [r4, #16]
 8013ee0:	6165      	str	r5, [r4, #20]
 8013ee2:	444e      	add	r6, r9
 8013ee4:	eba5 0509 	sub.w	r5, r5, r9
 8013ee8:	6026      	str	r6, [r4, #0]
 8013eea:	60a5      	str	r5, [r4, #8]
 8013eec:	463e      	mov	r6, r7
 8013eee:	42be      	cmp	r6, r7
 8013ef0:	d900      	bls.n	8013ef4 <__ssputs_r+0x70>
 8013ef2:	463e      	mov	r6, r7
 8013ef4:	6820      	ldr	r0, [r4, #0]
 8013ef6:	4632      	mov	r2, r6
 8013ef8:	4641      	mov	r1, r8
 8013efa:	f000 fe7e 	bl	8014bfa <memmove>
 8013efe:	68a3      	ldr	r3, [r4, #8]
 8013f00:	1b9b      	subs	r3, r3, r6
 8013f02:	60a3      	str	r3, [r4, #8]
 8013f04:	6823      	ldr	r3, [r4, #0]
 8013f06:	4433      	add	r3, r6
 8013f08:	6023      	str	r3, [r4, #0]
 8013f0a:	2000      	movs	r0, #0
 8013f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f10:	462a      	mov	r2, r5
 8013f12:	f000 fe43 	bl	8014b9c <_realloc_r>
 8013f16:	4606      	mov	r6, r0
 8013f18:	2800      	cmp	r0, #0
 8013f1a:	d1e0      	bne.n	8013ede <__ssputs_r+0x5a>
 8013f1c:	6921      	ldr	r1, [r4, #16]
 8013f1e:	4650      	mov	r0, sl
 8013f20:	f000 fefa 	bl	8014d18 <_free_r>
 8013f24:	230c      	movs	r3, #12
 8013f26:	f8ca 3000 	str.w	r3, [sl]
 8013f2a:	89a3      	ldrh	r3, [r4, #12]
 8013f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f30:	81a3      	strh	r3, [r4, #12]
 8013f32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f36:	e7e9      	b.n	8013f0c <__ssputs_r+0x88>

08013f38 <_svfiprintf_r>:
 8013f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f3c:	4698      	mov	r8, r3
 8013f3e:	898b      	ldrh	r3, [r1, #12]
 8013f40:	061b      	lsls	r3, r3, #24
 8013f42:	b09d      	sub	sp, #116	; 0x74
 8013f44:	4607      	mov	r7, r0
 8013f46:	460d      	mov	r5, r1
 8013f48:	4614      	mov	r4, r2
 8013f4a:	d50e      	bpl.n	8013f6a <_svfiprintf_r+0x32>
 8013f4c:	690b      	ldr	r3, [r1, #16]
 8013f4e:	b963      	cbnz	r3, 8013f6a <_svfiprintf_r+0x32>
 8013f50:	2140      	movs	r1, #64	; 0x40
 8013f52:	f000 f917 	bl	8014184 <_malloc_r>
 8013f56:	6028      	str	r0, [r5, #0]
 8013f58:	6128      	str	r0, [r5, #16]
 8013f5a:	b920      	cbnz	r0, 8013f66 <_svfiprintf_r+0x2e>
 8013f5c:	230c      	movs	r3, #12
 8013f5e:	603b      	str	r3, [r7, #0]
 8013f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f64:	e0d0      	b.n	8014108 <_svfiprintf_r+0x1d0>
 8013f66:	2340      	movs	r3, #64	; 0x40
 8013f68:	616b      	str	r3, [r5, #20]
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8013f6e:	2320      	movs	r3, #32
 8013f70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013f74:	f8cd 800c 	str.w	r8, [sp, #12]
 8013f78:	2330      	movs	r3, #48	; 0x30
 8013f7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014120 <_svfiprintf_r+0x1e8>
 8013f7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013f82:	f04f 0901 	mov.w	r9, #1
 8013f86:	4623      	mov	r3, r4
 8013f88:	469a      	mov	sl, r3
 8013f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f8e:	b10a      	cbz	r2, 8013f94 <_svfiprintf_r+0x5c>
 8013f90:	2a25      	cmp	r2, #37	; 0x25
 8013f92:	d1f9      	bne.n	8013f88 <_svfiprintf_r+0x50>
 8013f94:	ebba 0b04 	subs.w	fp, sl, r4
 8013f98:	d00b      	beq.n	8013fb2 <_svfiprintf_r+0x7a>
 8013f9a:	465b      	mov	r3, fp
 8013f9c:	4622      	mov	r2, r4
 8013f9e:	4629      	mov	r1, r5
 8013fa0:	4638      	mov	r0, r7
 8013fa2:	f7ff ff6f 	bl	8013e84 <__ssputs_r>
 8013fa6:	3001      	adds	r0, #1
 8013fa8:	f000 80a9 	beq.w	80140fe <_svfiprintf_r+0x1c6>
 8013fac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013fae:	445a      	add	r2, fp
 8013fb0:	9209      	str	r2, [sp, #36]	; 0x24
 8013fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	f000 80a1 	beq.w	80140fe <_svfiprintf_r+0x1c6>
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013fc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013fc6:	f10a 0a01 	add.w	sl, sl, #1
 8013fca:	9304      	str	r3, [sp, #16]
 8013fcc:	9307      	str	r3, [sp, #28]
 8013fce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013fd2:	931a      	str	r3, [sp, #104]	; 0x68
 8013fd4:	4654      	mov	r4, sl
 8013fd6:	2205      	movs	r2, #5
 8013fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fdc:	4850      	ldr	r0, [pc, #320]	; (8014120 <_svfiprintf_r+0x1e8>)
 8013fde:	f7ec f917 	bl	8000210 <memchr>
 8013fe2:	9a04      	ldr	r2, [sp, #16]
 8013fe4:	b9d8      	cbnz	r0, 801401e <_svfiprintf_r+0xe6>
 8013fe6:	06d0      	lsls	r0, r2, #27
 8013fe8:	bf44      	itt	mi
 8013fea:	2320      	movmi	r3, #32
 8013fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ff0:	0711      	lsls	r1, r2, #28
 8013ff2:	bf44      	itt	mi
 8013ff4:	232b      	movmi	r3, #43	; 0x2b
 8013ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8013ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8014000:	d015      	beq.n	801402e <_svfiprintf_r+0xf6>
 8014002:	9a07      	ldr	r2, [sp, #28]
 8014004:	4654      	mov	r4, sl
 8014006:	2000      	movs	r0, #0
 8014008:	f04f 0c0a 	mov.w	ip, #10
 801400c:	4621      	mov	r1, r4
 801400e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014012:	3b30      	subs	r3, #48	; 0x30
 8014014:	2b09      	cmp	r3, #9
 8014016:	d94d      	bls.n	80140b4 <_svfiprintf_r+0x17c>
 8014018:	b1b0      	cbz	r0, 8014048 <_svfiprintf_r+0x110>
 801401a:	9207      	str	r2, [sp, #28]
 801401c:	e014      	b.n	8014048 <_svfiprintf_r+0x110>
 801401e:	eba0 0308 	sub.w	r3, r0, r8
 8014022:	fa09 f303 	lsl.w	r3, r9, r3
 8014026:	4313      	orrs	r3, r2
 8014028:	9304      	str	r3, [sp, #16]
 801402a:	46a2      	mov	sl, r4
 801402c:	e7d2      	b.n	8013fd4 <_svfiprintf_r+0x9c>
 801402e:	9b03      	ldr	r3, [sp, #12]
 8014030:	1d19      	adds	r1, r3, #4
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	9103      	str	r1, [sp, #12]
 8014036:	2b00      	cmp	r3, #0
 8014038:	bfbb      	ittet	lt
 801403a:	425b      	neglt	r3, r3
 801403c:	f042 0202 	orrlt.w	r2, r2, #2
 8014040:	9307      	strge	r3, [sp, #28]
 8014042:	9307      	strlt	r3, [sp, #28]
 8014044:	bfb8      	it	lt
 8014046:	9204      	strlt	r2, [sp, #16]
 8014048:	7823      	ldrb	r3, [r4, #0]
 801404a:	2b2e      	cmp	r3, #46	; 0x2e
 801404c:	d10c      	bne.n	8014068 <_svfiprintf_r+0x130>
 801404e:	7863      	ldrb	r3, [r4, #1]
 8014050:	2b2a      	cmp	r3, #42	; 0x2a
 8014052:	d134      	bne.n	80140be <_svfiprintf_r+0x186>
 8014054:	9b03      	ldr	r3, [sp, #12]
 8014056:	1d1a      	adds	r2, r3, #4
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	9203      	str	r2, [sp, #12]
 801405c:	2b00      	cmp	r3, #0
 801405e:	bfb8      	it	lt
 8014060:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014064:	3402      	adds	r4, #2
 8014066:	9305      	str	r3, [sp, #20]
 8014068:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014130 <_svfiprintf_r+0x1f8>
 801406c:	7821      	ldrb	r1, [r4, #0]
 801406e:	2203      	movs	r2, #3
 8014070:	4650      	mov	r0, sl
 8014072:	f7ec f8cd 	bl	8000210 <memchr>
 8014076:	b138      	cbz	r0, 8014088 <_svfiprintf_r+0x150>
 8014078:	9b04      	ldr	r3, [sp, #16]
 801407a:	eba0 000a 	sub.w	r0, r0, sl
 801407e:	2240      	movs	r2, #64	; 0x40
 8014080:	4082      	lsls	r2, r0
 8014082:	4313      	orrs	r3, r2
 8014084:	3401      	adds	r4, #1
 8014086:	9304      	str	r3, [sp, #16]
 8014088:	f814 1b01 	ldrb.w	r1, [r4], #1
 801408c:	4825      	ldr	r0, [pc, #148]	; (8014124 <_svfiprintf_r+0x1ec>)
 801408e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014092:	2206      	movs	r2, #6
 8014094:	f7ec f8bc 	bl	8000210 <memchr>
 8014098:	2800      	cmp	r0, #0
 801409a:	d038      	beq.n	801410e <_svfiprintf_r+0x1d6>
 801409c:	4b22      	ldr	r3, [pc, #136]	; (8014128 <_svfiprintf_r+0x1f0>)
 801409e:	bb1b      	cbnz	r3, 80140e8 <_svfiprintf_r+0x1b0>
 80140a0:	9b03      	ldr	r3, [sp, #12]
 80140a2:	3307      	adds	r3, #7
 80140a4:	f023 0307 	bic.w	r3, r3, #7
 80140a8:	3308      	adds	r3, #8
 80140aa:	9303      	str	r3, [sp, #12]
 80140ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140ae:	4433      	add	r3, r6
 80140b0:	9309      	str	r3, [sp, #36]	; 0x24
 80140b2:	e768      	b.n	8013f86 <_svfiprintf_r+0x4e>
 80140b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80140b8:	460c      	mov	r4, r1
 80140ba:	2001      	movs	r0, #1
 80140bc:	e7a6      	b.n	801400c <_svfiprintf_r+0xd4>
 80140be:	2300      	movs	r3, #0
 80140c0:	3401      	adds	r4, #1
 80140c2:	9305      	str	r3, [sp, #20]
 80140c4:	4619      	mov	r1, r3
 80140c6:	f04f 0c0a 	mov.w	ip, #10
 80140ca:	4620      	mov	r0, r4
 80140cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80140d0:	3a30      	subs	r2, #48	; 0x30
 80140d2:	2a09      	cmp	r2, #9
 80140d4:	d903      	bls.n	80140de <_svfiprintf_r+0x1a6>
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d0c6      	beq.n	8014068 <_svfiprintf_r+0x130>
 80140da:	9105      	str	r1, [sp, #20]
 80140dc:	e7c4      	b.n	8014068 <_svfiprintf_r+0x130>
 80140de:	fb0c 2101 	mla	r1, ip, r1, r2
 80140e2:	4604      	mov	r4, r0
 80140e4:	2301      	movs	r3, #1
 80140e6:	e7f0      	b.n	80140ca <_svfiprintf_r+0x192>
 80140e8:	ab03      	add	r3, sp, #12
 80140ea:	9300      	str	r3, [sp, #0]
 80140ec:	462a      	mov	r2, r5
 80140ee:	4b0f      	ldr	r3, [pc, #60]	; (801412c <_svfiprintf_r+0x1f4>)
 80140f0:	a904      	add	r1, sp, #16
 80140f2:	4638      	mov	r0, r7
 80140f4:	f7fe fa84 	bl	8012600 <_printf_float>
 80140f8:	1c42      	adds	r2, r0, #1
 80140fa:	4606      	mov	r6, r0
 80140fc:	d1d6      	bne.n	80140ac <_svfiprintf_r+0x174>
 80140fe:	89ab      	ldrh	r3, [r5, #12]
 8014100:	065b      	lsls	r3, r3, #25
 8014102:	f53f af2d 	bmi.w	8013f60 <_svfiprintf_r+0x28>
 8014106:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014108:	b01d      	add	sp, #116	; 0x74
 801410a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801410e:	ab03      	add	r3, sp, #12
 8014110:	9300      	str	r3, [sp, #0]
 8014112:	462a      	mov	r2, r5
 8014114:	4b05      	ldr	r3, [pc, #20]	; (801412c <_svfiprintf_r+0x1f4>)
 8014116:	a904      	add	r1, sp, #16
 8014118:	4638      	mov	r0, r7
 801411a:	f7fe fd15 	bl	8012b48 <_printf_i>
 801411e:	e7eb      	b.n	80140f8 <_svfiprintf_r+0x1c0>
 8014120:	08015ada 	.word	0x08015ada
 8014124:	08015ae4 	.word	0x08015ae4
 8014128:	08012601 	.word	0x08012601
 801412c:	08013e85 	.word	0x08013e85
 8014130:	08015ae0 	.word	0x08015ae0

08014134 <malloc>:
 8014134:	4b02      	ldr	r3, [pc, #8]	; (8014140 <malloc+0xc>)
 8014136:	4601      	mov	r1, r0
 8014138:	6818      	ldr	r0, [r3, #0]
 801413a:	f000 b823 	b.w	8014184 <_malloc_r>
 801413e:	bf00      	nop
 8014140:	20000068 	.word	0x20000068

08014144 <sbrk_aligned>:
 8014144:	b570      	push	{r4, r5, r6, lr}
 8014146:	4e0e      	ldr	r6, [pc, #56]	; (8014180 <sbrk_aligned+0x3c>)
 8014148:	460c      	mov	r4, r1
 801414a:	6831      	ldr	r1, [r6, #0]
 801414c:	4605      	mov	r5, r0
 801414e:	b911      	cbnz	r1, 8014156 <sbrk_aligned+0x12>
 8014150:	f000 fda2 	bl	8014c98 <_sbrk_r>
 8014154:	6030      	str	r0, [r6, #0]
 8014156:	4621      	mov	r1, r4
 8014158:	4628      	mov	r0, r5
 801415a:	f000 fd9d 	bl	8014c98 <_sbrk_r>
 801415e:	1c43      	adds	r3, r0, #1
 8014160:	d00a      	beq.n	8014178 <sbrk_aligned+0x34>
 8014162:	1cc4      	adds	r4, r0, #3
 8014164:	f024 0403 	bic.w	r4, r4, #3
 8014168:	42a0      	cmp	r0, r4
 801416a:	d007      	beq.n	801417c <sbrk_aligned+0x38>
 801416c:	1a21      	subs	r1, r4, r0
 801416e:	4628      	mov	r0, r5
 8014170:	f000 fd92 	bl	8014c98 <_sbrk_r>
 8014174:	3001      	adds	r0, #1
 8014176:	d101      	bne.n	801417c <sbrk_aligned+0x38>
 8014178:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801417c:	4620      	mov	r0, r4
 801417e:	bd70      	pop	{r4, r5, r6, pc}
 8014180:	20002a28 	.word	0x20002a28

08014184 <_malloc_r>:
 8014184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014188:	1ccd      	adds	r5, r1, #3
 801418a:	f025 0503 	bic.w	r5, r5, #3
 801418e:	3508      	adds	r5, #8
 8014190:	2d0c      	cmp	r5, #12
 8014192:	bf38      	it	cc
 8014194:	250c      	movcc	r5, #12
 8014196:	2d00      	cmp	r5, #0
 8014198:	4607      	mov	r7, r0
 801419a:	db01      	blt.n	80141a0 <_malloc_r+0x1c>
 801419c:	42a9      	cmp	r1, r5
 801419e:	d905      	bls.n	80141ac <_malloc_r+0x28>
 80141a0:	230c      	movs	r3, #12
 80141a2:	603b      	str	r3, [r7, #0]
 80141a4:	2600      	movs	r6, #0
 80141a6:	4630      	mov	r0, r6
 80141a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014280 <_malloc_r+0xfc>
 80141b0:	f000 f916 	bl	80143e0 <__malloc_lock>
 80141b4:	f8d8 3000 	ldr.w	r3, [r8]
 80141b8:	461c      	mov	r4, r3
 80141ba:	bb5c      	cbnz	r4, 8014214 <_malloc_r+0x90>
 80141bc:	4629      	mov	r1, r5
 80141be:	4638      	mov	r0, r7
 80141c0:	f7ff ffc0 	bl	8014144 <sbrk_aligned>
 80141c4:	1c43      	adds	r3, r0, #1
 80141c6:	4604      	mov	r4, r0
 80141c8:	d155      	bne.n	8014276 <_malloc_r+0xf2>
 80141ca:	f8d8 4000 	ldr.w	r4, [r8]
 80141ce:	4626      	mov	r6, r4
 80141d0:	2e00      	cmp	r6, #0
 80141d2:	d145      	bne.n	8014260 <_malloc_r+0xdc>
 80141d4:	2c00      	cmp	r4, #0
 80141d6:	d048      	beq.n	801426a <_malloc_r+0xe6>
 80141d8:	6823      	ldr	r3, [r4, #0]
 80141da:	4631      	mov	r1, r6
 80141dc:	4638      	mov	r0, r7
 80141de:	eb04 0903 	add.w	r9, r4, r3
 80141e2:	f000 fd59 	bl	8014c98 <_sbrk_r>
 80141e6:	4581      	cmp	r9, r0
 80141e8:	d13f      	bne.n	801426a <_malloc_r+0xe6>
 80141ea:	6821      	ldr	r1, [r4, #0]
 80141ec:	1a6d      	subs	r5, r5, r1
 80141ee:	4629      	mov	r1, r5
 80141f0:	4638      	mov	r0, r7
 80141f2:	f7ff ffa7 	bl	8014144 <sbrk_aligned>
 80141f6:	3001      	adds	r0, #1
 80141f8:	d037      	beq.n	801426a <_malloc_r+0xe6>
 80141fa:	6823      	ldr	r3, [r4, #0]
 80141fc:	442b      	add	r3, r5
 80141fe:	6023      	str	r3, [r4, #0]
 8014200:	f8d8 3000 	ldr.w	r3, [r8]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d038      	beq.n	801427a <_malloc_r+0xf6>
 8014208:	685a      	ldr	r2, [r3, #4]
 801420a:	42a2      	cmp	r2, r4
 801420c:	d12b      	bne.n	8014266 <_malloc_r+0xe2>
 801420e:	2200      	movs	r2, #0
 8014210:	605a      	str	r2, [r3, #4]
 8014212:	e00f      	b.n	8014234 <_malloc_r+0xb0>
 8014214:	6822      	ldr	r2, [r4, #0]
 8014216:	1b52      	subs	r2, r2, r5
 8014218:	d41f      	bmi.n	801425a <_malloc_r+0xd6>
 801421a:	2a0b      	cmp	r2, #11
 801421c:	d917      	bls.n	801424e <_malloc_r+0xca>
 801421e:	1961      	adds	r1, r4, r5
 8014220:	42a3      	cmp	r3, r4
 8014222:	6025      	str	r5, [r4, #0]
 8014224:	bf18      	it	ne
 8014226:	6059      	strne	r1, [r3, #4]
 8014228:	6863      	ldr	r3, [r4, #4]
 801422a:	bf08      	it	eq
 801422c:	f8c8 1000 	streq.w	r1, [r8]
 8014230:	5162      	str	r2, [r4, r5]
 8014232:	604b      	str	r3, [r1, #4]
 8014234:	4638      	mov	r0, r7
 8014236:	f104 060b 	add.w	r6, r4, #11
 801423a:	f000 f8d7 	bl	80143ec <__malloc_unlock>
 801423e:	f026 0607 	bic.w	r6, r6, #7
 8014242:	1d23      	adds	r3, r4, #4
 8014244:	1af2      	subs	r2, r6, r3
 8014246:	d0ae      	beq.n	80141a6 <_malloc_r+0x22>
 8014248:	1b9b      	subs	r3, r3, r6
 801424a:	50a3      	str	r3, [r4, r2]
 801424c:	e7ab      	b.n	80141a6 <_malloc_r+0x22>
 801424e:	42a3      	cmp	r3, r4
 8014250:	6862      	ldr	r2, [r4, #4]
 8014252:	d1dd      	bne.n	8014210 <_malloc_r+0x8c>
 8014254:	f8c8 2000 	str.w	r2, [r8]
 8014258:	e7ec      	b.n	8014234 <_malloc_r+0xb0>
 801425a:	4623      	mov	r3, r4
 801425c:	6864      	ldr	r4, [r4, #4]
 801425e:	e7ac      	b.n	80141ba <_malloc_r+0x36>
 8014260:	4634      	mov	r4, r6
 8014262:	6876      	ldr	r6, [r6, #4]
 8014264:	e7b4      	b.n	80141d0 <_malloc_r+0x4c>
 8014266:	4613      	mov	r3, r2
 8014268:	e7cc      	b.n	8014204 <_malloc_r+0x80>
 801426a:	230c      	movs	r3, #12
 801426c:	603b      	str	r3, [r7, #0]
 801426e:	4638      	mov	r0, r7
 8014270:	f000 f8bc 	bl	80143ec <__malloc_unlock>
 8014274:	e797      	b.n	80141a6 <_malloc_r+0x22>
 8014276:	6025      	str	r5, [r4, #0]
 8014278:	e7dc      	b.n	8014234 <_malloc_r+0xb0>
 801427a:	605b      	str	r3, [r3, #4]
 801427c:	deff      	udf	#255	; 0xff
 801427e:	bf00      	nop
 8014280:	20002a24 	.word	0x20002a24

08014284 <__sflush_r>:
 8014284:	898a      	ldrh	r2, [r1, #12]
 8014286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801428a:	4605      	mov	r5, r0
 801428c:	0710      	lsls	r0, r2, #28
 801428e:	460c      	mov	r4, r1
 8014290:	d458      	bmi.n	8014344 <__sflush_r+0xc0>
 8014292:	684b      	ldr	r3, [r1, #4]
 8014294:	2b00      	cmp	r3, #0
 8014296:	dc05      	bgt.n	80142a4 <__sflush_r+0x20>
 8014298:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801429a:	2b00      	cmp	r3, #0
 801429c:	dc02      	bgt.n	80142a4 <__sflush_r+0x20>
 801429e:	2000      	movs	r0, #0
 80142a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80142a6:	2e00      	cmp	r6, #0
 80142a8:	d0f9      	beq.n	801429e <__sflush_r+0x1a>
 80142aa:	2300      	movs	r3, #0
 80142ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80142b0:	682f      	ldr	r7, [r5, #0]
 80142b2:	6a21      	ldr	r1, [r4, #32]
 80142b4:	602b      	str	r3, [r5, #0]
 80142b6:	d032      	beq.n	801431e <__sflush_r+0x9a>
 80142b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80142ba:	89a3      	ldrh	r3, [r4, #12]
 80142bc:	075a      	lsls	r2, r3, #29
 80142be:	d505      	bpl.n	80142cc <__sflush_r+0x48>
 80142c0:	6863      	ldr	r3, [r4, #4]
 80142c2:	1ac0      	subs	r0, r0, r3
 80142c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80142c6:	b10b      	cbz	r3, 80142cc <__sflush_r+0x48>
 80142c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80142ca:	1ac0      	subs	r0, r0, r3
 80142cc:	2300      	movs	r3, #0
 80142ce:	4602      	mov	r2, r0
 80142d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80142d2:	6a21      	ldr	r1, [r4, #32]
 80142d4:	4628      	mov	r0, r5
 80142d6:	47b0      	blx	r6
 80142d8:	1c43      	adds	r3, r0, #1
 80142da:	89a3      	ldrh	r3, [r4, #12]
 80142dc:	d106      	bne.n	80142ec <__sflush_r+0x68>
 80142de:	6829      	ldr	r1, [r5, #0]
 80142e0:	291d      	cmp	r1, #29
 80142e2:	d82b      	bhi.n	801433c <__sflush_r+0xb8>
 80142e4:	4a29      	ldr	r2, [pc, #164]	; (801438c <__sflush_r+0x108>)
 80142e6:	410a      	asrs	r2, r1
 80142e8:	07d6      	lsls	r6, r2, #31
 80142ea:	d427      	bmi.n	801433c <__sflush_r+0xb8>
 80142ec:	2200      	movs	r2, #0
 80142ee:	6062      	str	r2, [r4, #4]
 80142f0:	04d9      	lsls	r1, r3, #19
 80142f2:	6922      	ldr	r2, [r4, #16]
 80142f4:	6022      	str	r2, [r4, #0]
 80142f6:	d504      	bpl.n	8014302 <__sflush_r+0x7e>
 80142f8:	1c42      	adds	r2, r0, #1
 80142fa:	d101      	bne.n	8014300 <__sflush_r+0x7c>
 80142fc:	682b      	ldr	r3, [r5, #0]
 80142fe:	b903      	cbnz	r3, 8014302 <__sflush_r+0x7e>
 8014300:	6560      	str	r0, [r4, #84]	; 0x54
 8014302:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014304:	602f      	str	r7, [r5, #0]
 8014306:	2900      	cmp	r1, #0
 8014308:	d0c9      	beq.n	801429e <__sflush_r+0x1a>
 801430a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801430e:	4299      	cmp	r1, r3
 8014310:	d002      	beq.n	8014318 <__sflush_r+0x94>
 8014312:	4628      	mov	r0, r5
 8014314:	f000 fd00 	bl	8014d18 <_free_r>
 8014318:	2000      	movs	r0, #0
 801431a:	6360      	str	r0, [r4, #52]	; 0x34
 801431c:	e7c0      	b.n	80142a0 <__sflush_r+0x1c>
 801431e:	2301      	movs	r3, #1
 8014320:	4628      	mov	r0, r5
 8014322:	47b0      	blx	r6
 8014324:	1c41      	adds	r1, r0, #1
 8014326:	d1c8      	bne.n	80142ba <__sflush_r+0x36>
 8014328:	682b      	ldr	r3, [r5, #0]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d0c5      	beq.n	80142ba <__sflush_r+0x36>
 801432e:	2b1d      	cmp	r3, #29
 8014330:	d001      	beq.n	8014336 <__sflush_r+0xb2>
 8014332:	2b16      	cmp	r3, #22
 8014334:	d101      	bne.n	801433a <__sflush_r+0xb6>
 8014336:	602f      	str	r7, [r5, #0]
 8014338:	e7b1      	b.n	801429e <__sflush_r+0x1a>
 801433a:	89a3      	ldrh	r3, [r4, #12]
 801433c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014340:	81a3      	strh	r3, [r4, #12]
 8014342:	e7ad      	b.n	80142a0 <__sflush_r+0x1c>
 8014344:	690f      	ldr	r7, [r1, #16]
 8014346:	2f00      	cmp	r7, #0
 8014348:	d0a9      	beq.n	801429e <__sflush_r+0x1a>
 801434a:	0793      	lsls	r3, r2, #30
 801434c:	680e      	ldr	r6, [r1, #0]
 801434e:	bf08      	it	eq
 8014350:	694b      	ldreq	r3, [r1, #20]
 8014352:	600f      	str	r7, [r1, #0]
 8014354:	bf18      	it	ne
 8014356:	2300      	movne	r3, #0
 8014358:	eba6 0807 	sub.w	r8, r6, r7
 801435c:	608b      	str	r3, [r1, #8]
 801435e:	f1b8 0f00 	cmp.w	r8, #0
 8014362:	dd9c      	ble.n	801429e <__sflush_r+0x1a>
 8014364:	6a21      	ldr	r1, [r4, #32]
 8014366:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014368:	4643      	mov	r3, r8
 801436a:	463a      	mov	r2, r7
 801436c:	4628      	mov	r0, r5
 801436e:	47b0      	blx	r6
 8014370:	2800      	cmp	r0, #0
 8014372:	dc06      	bgt.n	8014382 <__sflush_r+0xfe>
 8014374:	89a3      	ldrh	r3, [r4, #12]
 8014376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801437a:	81a3      	strh	r3, [r4, #12]
 801437c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014380:	e78e      	b.n	80142a0 <__sflush_r+0x1c>
 8014382:	4407      	add	r7, r0
 8014384:	eba8 0800 	sub.w	r8, r8, r0
 8014388:	e7e9      	b.n	801435e <__sflush_r+0xda>
 801438a:	bf00      	nop
 801438c:	dfbffffe 	.word	0xdfbffffe

08014390 <_fflush_r>:
 8014390:	b538      	push	{r3, r4, r5, lr}
 8014392:	690b      	ldr	r3, [r1, #16]
 8014394:	4605      	mov	r5, r0
 8014396:	460c      	mov	r4, r1
 8014398:	b913      	cbnz	r3, 80143a0 <_fflush_r+0x10>
 801439a:	2500      	movs	r5, #0
 801439c:	4628      	mov	r0, r5
 801439e:	bd38      	pop	{r3, r4, r5, pc}
 80143a0:	b118      	cbz	r0, 80143aa <_fflush_r+0x1a>
 80143a2:	6a03      	ldr	r3, [r0, #32]
 80143a4:	b90b      	cbnz	r3, 80143aa <_fflush_r+0x1a>
 80143a6:	f7fe fdcb 	bl	8012f40 <__sinit>
 80143aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d0f3      	beq.n	801439a <_fflush_r+0xa>
 80143b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80143b4:	07d0      	lsls	r0, r2, #31
 80143b6:	d404      	bmi.n	80143c2 <_fflush_r+0x32>
 80143b8:	0599      	lsls	r1, r3, #22
 80143ba:	d402      	bmi.n	80143c2 <_fflush_r+0x32>
 80143bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80143be:	f7fe feb8 	bl	8013132 <__retarget_lock_acquire_recursive>
 80143c2:	4628      	mov	r0, r5
 80143c4:	4621      	mov	r1, r4
 80143c6:	f7ff ff5d 	bl	8014284 <__sflush_r>
 80143ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80143cc:	07da      	lsls	r2, r3, #31
 80143ce:	4605      	mov	r5, r0
 80143d0:	d4e4      	bmi.n	801439c <_fflush_r+0xc>
 80143d2:	89a3      	ldrh	r3, [r4, #12]
 80143d4:	059b      	lsls	r3, r3, #22
 80143d6:	d4e1      	bmi.n	801439c <_fflush_r+0xc>
 80143d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80143da:	f7fe feab 	bl	8013134 <__retarget_lock_release_recursive>
 80143de:	e7dd      	b.n	801439c <_fflush_r+0xc>

080143e0 <__malloc_lock>:
 80143e0:	4801      	ldr	r0, [pc, #4]	; (80143e8 <__malloc_lock+0x8>)
 80143e2:	f7fe bea6 	b.w	8013132 <__retarget_lock_acquire_recursive>
 80143e6:	bf00      	nop
 80143e8:	20002a20 	.word	0x20002a20

080143ec <__malloc_unlock>:
 80143ec:	4801      	ldr	r0, [pc, #4]	; (80143f4 <__malloc_unlock+0x8>)
 80143ee:	f7fe bea1 	b.w	8013134 <__retarget_lock_release_recursive>
 80143f2:	bf00      	nop
 80143f4:	20002a20 	.word	0x20002a20

080143f8 <_Balloc>:
 80143f8:	b570      	push	{r4, r5, r6, lr}
 80143fa:	69c6      	ldr	r6, [r0, #28]
 80143fc:	4604      	mov	r4, r0
 80143fe:	460d      	mov	r5, r1
 8014400:	b976      	cbnz	r6, 8014420 <_Balloc+0x28>
 8014402:	2010      	movs	r0, #16
 8014404:	f7ff fe96 	bl	8014134 <malloc>
 8014408:	4602      	mov	r2, r0
 801440a:	61e0      	str	r0, [r4, #28]
 801440c:	b920      	cbnz	r0, 8014418 <_Balloc+0x20>
 801440e:	4b18      	ldr	r3, [pc, #96]	; (8014470 <_Balloc+0x78>)
 8014410:	4818      	ldr	r0, [pc, #96]	; (8014474 <_Balloc+0x7c>)
 8014412:	216b      	movs	r1, #107	; 0x6b
 8014414:	f7fe fe9e 	bl	8013154 <__assert_func>
 8014418:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801441c:	6006      	str	r6, [r0, #0]
 801441e:	60c6      	str	r6, [r0, #12]
 8014420:	69e6      	ldr	r6, [r4, #28]
 8014422:	68f3      	ldr	r3, [r6, #12]
 8014424:	b183      	cbz	r3, 8014448 <_Balloc+0x50>
 8014426:	69e3      	ldr	r3, [r4, #28]
 8014428:	68db      	ldr	r3, [r3, #12]
 801442a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801442e:	b9b8      	cbnz	r0, 8014460 <_Balloc+0x68>
 8014430:	2101      	movs	r1, #1
 8014432:	fa01 f605 	lsl.w	r6, r1, r5
 8014436:	1d72      	adds	r2, r6, #5
 8014438:	0092      	lsls	r2, r2, #2
 801443a:	4620      	mov	r0, r4
 801443c:	f000 fc55 	bl	8014cea <_calloc_r>
 8014440:	b160      	cbz	r0, 801445c <_Balloc+0x64>
 8014442:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014446:	e00e      	b.n	8014466 <_Balloc+0x6e>
 8014448:	2221      	movs	r2, #33	; 0x21
 801444a:	2104      	movs	r1, #4
 801444c:	4620      	mov	r0, r4
 801444e:	f000 fc4c 	bl	8014cea <_calloc_r>
 8014452:	69e3      	ldr	r3, [r4, #28]
 8014454:	60f0      	str	r0, [r6, #12]
 8014456:	68db      	ldr	r3, [r3, #12]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d1e4      	bne.n	8014426 <_Balloc+0x2e>
 801445c:	2000      	movs	r0, #0
 801445e:	bd70      	pop	{r4, r5, r6, pc}
 8014460:	6802      	ldr	r2, [r0, #0]
 8014462:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014466:	2300      	movs	r3, #0
 8014468:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801446c:	e7f7      	b.n	801445e <_Balloc+0x66>
 801446e:	bf00      	nop
 8014470:	080158b8 	.word	0x080158b8
 8014474:	08015aeb 	.word	0x08015aeb

08014478 <_Bfree>:
 8014478:	b570      	push	{r4, r5, r6, lr}
 801447a:	69c6      	ldr	r6, [r0, #28]
 801447c:	4605      	mov	r5, r0
 801447e:	460c      	mov	r4, r1
 8014480:	b976      	cbnz	r6, 80144a0 <_Bfree+0x28>
 8014482:	2010      	movs	r0, #16
 8014484:	f7ff fe56 	bl	8014134 <malloc>
 8014488:	4602      	mov	r2, r0
 801448a:	61e8      	str	r0, [r5, #28]
 801448c:	b920      	cbnz	r0, 8014498 <_Bfree+0x20>
 801448e:	4b09      	ldr	r3, [pc, #36]	; (80144b4 <_Bfree+0x3c>)
 8014490:	4809      	ldr	r0, [pc, #36]	; (80144b8 <_Bfree+0x40>)
 8014492:	218f      	movs	r1, #143	; 0x8f
 8014494:	f7fe fe5e 	bl	8013154 <__assert_func>
 8014498:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801449c:	6006      	str	r6, [r0, #0]
 801449e:	60c6      	str	r6, [r0, #12]
 80144a0:	b13c      	cbz	r4, 80144b2 <_Bfree+0x3a>
 80144a2:	69eb      	ldr	r3, [r5, #28]
 80144a4:	6862      	ldr	r2, [r4, #4]
 80144a6:	68db      	ldr	r3, [r3, #12]
 80144a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80144ac:	6021      	str	r1, [r4, #0]
 80144ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80144b2:	bd70      	pop	{r4, r5, r6, pc}
 80144b4:	080158b8 	.word	0x080158b8
 80144b8:	08015aeb 	.word	0x08015aeb

080144bc <__multadd>:
 80144bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144c0:	690d      	ldr	r5, [r1, #16]
 80144c2:	4607      	mov	r7, r0
 80144c4:	460c      	mov	r4, r1
 80144c6:	461e      	mov	r6, r3
 80144c8:	f101 0c14 	add.w	ip, r1, #20
 80144cc:	2000      	movs	r0, #0
 80144ce:	f8dc 3000 	ldr.w	r3, [ip]
 80144d2:	b299      	uxth	r1, r3
 80144d4:	fb02 6101 	mla	r1, r2, r1, r6
 80144d8:	0c1e      	lsrs	r6, r3, #16
 80144da:	0c0b      	lsrs	r3, r1, #16
 80144dc:	fb02 3306 	mla	r3, r2, r6, r3
 80144e0:	b289      	uxth	r1, r1
 80144e2:	3001      	adds	r0, #1
 80144e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80144e8:	4285      	cmp	r5, r0
 80144ea:	f84c 1b04 	str.w	r1, [ip], #4
 80144ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80144f2:	dcec      	bgt.n	80144ce <__multadd+0x12>
 80144f4:	b30e      	cbz	r6, 801453a <__multadd+0x7e>
 80144f6:	68a3      	ldr	r3, [r4, #8]
 80144f8:	42ab      	cmp	r3, r5
 80144fa:	dc19      	bgt.n	8014530 <__multadd+0x74>
 80144fc:	6861      	ldr	r1, [r4, #4]
 80144fe:	4638      	mov	r0, r7
 8014500:	3101      	adds	r1, #1
 8014502:	f7ff ff79 	bl	80143f8 <_Balloc>
 8014506:	4680      	mov	r8, r0
 8014508:	b928      	cbnz	r0, 8014516 <__multadd+0x5a>
 801450a:	4602      	mov	r2, r0
 801450c:	4b0c      	ldr	r3, [pc, #48]	; (8014540 <__multadd+0x84>)
 801450e:	480d      	ldr	r0, [pc, #52]	; (8014544 <__multadd+0x88>)
 8014510:	21ba      	movs	r1, #186	; 0xba
 8014512:	f7fe fe1f 	bl	8013154 <__assert_func>
 8014516:	6922      	ldr	r2, [r4, #16]
 8014518:	3202      	adds	r2, #2
 801451a:	f104 010c 	add.w	r1, r4, #12
 801451e:	0092      	lsls	r2, r2, #2
 8014520:	300c      	adds	r0, #12
 8014522:	f7fe fe08 	bl	8013136 <memcpy>
 8014526:	4621      	mov	r1, r4
 8014528:	4638      	mov	r0, r7
 801452a:	f7ff ffa5 	bl	8014478 <_Bfree>
 801452e:	4644      	mov	r4, r8
 8014530:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014534:	3501      	adds	r5, #1
 8014536:	615e      	str	r6, [r3, #20]
 8014538:	6125      	str	r5, [r4, #16]
 801453a:	4620      	mov	r0, r4
 801453c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014540:	08015ac9 	.word	0x08015ac9
 8014544:	08015aeb 	.word	0x08015aeb

08014548 <__hi0bits>:
 8014548:	0c03      	lsrs	r3, r0, #16
 801454a:	041b      	lsls	r3, r3, #16
 801454c:	b9d3      	cbnz	r3, 8014584 <__hi0bits+0x3c>
 801454e:	0400      	lsls	r0, r0, #16
 8014550:	2310      	movs	r3, #16
 8014552:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014556:	bf04      	itt	eq
 8014558:	0200      	lsleq	r0, r0, #8
 801455a:	3308      	addeq	r3, #8
 801455c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014560:	bf04      	itt	eq
 8014562:	0100      	lsleq	r0, r0, #4
 8014564:	3304      	addeq	r3, #4
 8014566:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801456a:	bf04      	itt	eq
 801456c:	0080      	lsleq	r0, r0, #2
 801456e:	3302      	addeq	r3, #2
 8014570:	2800      	cmp	r0, #0
 8014572:	db05      	blt.n	8014580 <__hi0bits+0x38>
 8014574:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014578:	f103 0301 	add.w	r3, r3, #1
 801457c:	bf08      	it	eq
 801457e:	2320      	moveq	r3, #32
 8014580:	4618      	mov	r0, r3
 8014582:	4770      	bx	lr
 8014584:	2300      	movs	r3, #0
 8014586:	e7e4      	b.n	8014552 <__hi0bits+0xa>

08014588 <__lo0bits>:
 8014588:	6803      	ldr	r3, [r0, #0]
 801458a:	f013 0207 	ands.w	r2, r3, #7
 801458e:	d00c      	beq.n	80145aa <__lo0bits+0x22>
 8014590:	07d9      	lsls	r1, r3, #31
 8014592:	d422      	bmi.n	80145da <__lo0bits+0x52>
 8014594:	079a      	lsls	r2, r3, #30
 8014596:	bf49      	itett	mi
 8014598:	085b      	lsrmi	r3, r3, #1
 801459a:	089b      	lsrpl	r3, r3, #2
 801459c:	6003      	strmi	r3, [r0, #0]
 801459e:	2201      	movmi	r2, #1
 80145a0:	bf5c      	itt	pl
 80145a2:	6003      	strpl	r3, [r0, #0]
 80145a4:	2202      	movpl	r2, #2
 80145a6:	4610      	mov	r0, r2
 80145a8:	4770      	bx	lr
 80145aa:	b299      	uxth	r1, r3
 80145ac:	b909      	cbnz	r1, 80145b2 <__lo0bits+0x2a>
 80145ae:	0c1b      	lsrs	r3, r3, #16
 80145b0:	2210      	movs	r2, #16
 80145b2:	b2d9      	uxtb	r1, r3
 80145b4:	b909      	cbnz	r1, 80145ba <__lo0bits+0x32>
 80145b6:	3208      	adds	r2, #8
 80145b8:	0a1b      	lsrs	r3, r3, #8
 80145ba:	0719      	lsls	r1, r3, #28
 80145bc:	bf04      	itt	eq
 80145be:	091b      	lsreq	r3, r3, #4
 80145c0:	3204      	addeq	r2, #4
 80145c2:	0799      	lsls	r1, r3, #30
 80145c4:	bf04      	itt	eq
 80145c6:	089b      	lsreq	r3, r3, #2
 80145c8:	3202      	addeq	r2, #2
 80145ca:	07d9      	lsls	r1, r3, #31
 80145cc:	d403      	bmi.n	80145d6 <__lo0bits+0x4e>
 80145ce:	085b      	lsrs	r3, r3, #1
 80145d0:	f102 0201 	add.w	r2, r2, #1
 80145d4:	d003      	beq.n	80145de <__lo0bits+0x56>
 80145d6:	6003      	str	r3, [r0, #0]
 80145d8:	e7e5      	b.n	80145a6 <__lo0bits+0x1e>
 80145da:	2200      	movs	r2, #0
 80145dc:	e7e3      	b.n	80145a6 <__lo0bits+0x1e>
 80145de:	2220      	movs	r2, #32
 80145e0:	e7e1      	b.n	80145a6 <__lo0bits+0x1e>
	...

080145e4 <__i2b>:
 80145e4:	b510      	push	{r4, lr}
 80145e6:	460c      	mov	r4, r1
 80145e8:	2101      	movs	r1, #1
 80145ea:	f7ff ff05 	bl	80143f8 <_Balloc>
 80145ee:	4602      	mov	r2, r0
 80145f0:	b928      	cbnz	r0, 80145fe <__i2b+0x1a>
 80145f2:	4b05      	ldr	r3, [pc, #20]	; (8014608 <__i2b+0x24>)
 80145f4:	4805      	ldr	r0, [pc, #20]	; (801460c <__i2b+0x28>)
 80145f6:	f240 1145 	movw	r1, #325	; 0x145
 80145fa:	f7fe fdab 	bl	8013154 <__assert_func>
 80145fe:	2301      	movs	r3, #1
 8014600:	6144      	str	r4, [r0, #20]
 8014602:	6103      	str	r3, [r0, #16]
 8014604:	bd10      	pop	{r4, pc}
 8014606:	bf00      	nop
 8014608:	08015ac9 	.word	0x08015ac9
 801460c:	08015aeb 	.word	0x08015aeb

08014610 <__multiply>:
 8014610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014614:	4691      	mov	r9, r2
 8014616:	690a      	ldr	r2, [r1, #16]
 8014618:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801461c:	429a      	cmp	r2, r3
 801461e:	bfb8      	it	lt
 8014620:	460b      	movlt	r3, r1
 8014622:	460c      	mov	r4, r1
 8014624:	bfbc      	itt	lt
 8014626:	464c      	movlt	r4, r9
 8014628:	4699      	movlt	r9, r3
 801462a:	6927      	ldr	r7, [r4, #16]
 801462c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014630:	68a3      	ldr	r3, [r4, #8]
 8014632:	6861      	ldr	r1, [r4, #4]
 8014634:	eb07 060a 	add.w	r6, r7, sl
 8014638:	42b3      	cmp	r3, r6
 801463a:	b085      	sub	sp, #20
 801463c:	bfb8      	it	lt
 801463e:	3101      	addlt	r1, #1
 8014640:	f7ff feda 	bl	80143f8 <_Balloc>
 8014644:	b930      	cbnz	r0, 8014654 <__multiply+0x44>
 8014646:	4602      	mov	r2, r0
 8014648:	4b44      	ldr	r3, [pc, #272]	; (801475c <__multiply+0x14c>)
 801464a:	4845      	ldr	r0, [pc, #276]	; (8014760 <__multiply+0x150>)
 801464c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8014650:	f7fe fd80 	bl	8013154 <__assert_func>
 8014654:	f100 0514 	add.w	r5, r0, #20
 8014658:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801465c:	462b      	mov	r3, r5
 801465e:	2200      	movs	r2, #0
 8014660:	4543      	cmp	r3, r8
 8014662:	d321      	bcc.n	80146a8 <__multiply+0x98>
 8014664:	f104 0314 	add.w	r3, r4, #20
 8014668:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801466c:	f109 0314 	add.w	r3, r9, #20
 8014670:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014674:	9202      	str	r2, [sp, #8]
 8014676:	1b3a      	subs	r2, r7, r4
 8014678:	3a15      	subs	r2, #21
 801467a:	f022 0203 	bic.w	r2, r2, #3
 801467e:	3204      	adds	r2, #4
 8014680:	f104 0115 	add.w	r1, r4, #21
 8014684:	428f      	cmp	r7, r1
 8014686:	bf38      	it	cc
 8014688:	2204      	movcc	r2, #4
 801468a:	9201      	str	r2, [sp, #4]
 801468c:	9a02      	ldr	r2, [sp, #8]
 801468e:	9303      	str	r3, [sp, #12]
 8014690:	429a      	cmp	r2, r3
 8014692:	d80c      	bhi.n	80146ae <__multiply+0x9e>
 8014694:	2e00      	cmp	r6, #0
 8014696:	dd03      	ble.n	80146a0 <__multiply+0x90>
 8014698:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801469c:	2b00      	cmp	r3, #0
 801469e:	d05b      	beq.n	8014758 <__multiply+0x148>
 80146a0:	6106      	str	r6, [r0, #16]
 80146a2:	b005      	add	sp, #20
 80146a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146a8:	f843 2b04 	str.w	r2, [r3], #4
 80146ac:	e7d8      	b.n	8014660 <__multiply+0x50>
 80146ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80146b2:	f1ba 0f00 	cmp.w	sl, #0
 80146b6:	d024      	beq.n	8014702 <__multiply+0xf2>
 80146b8:	f104 0e14 	add.w	lr, r4, #20
 80146bc:	46a9      	mov	r9, r5
 80146be:	f04f 0c00 	mov.w	ip, #0
 80146c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80146c6:	f8d9 1000 	ldr.w	r1, [r9]
 80146ca:	fa1f fb82 	uxth.w	fp, r2
 80146ce:	b289      	uxth	r1, r1
 80146d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80146d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80146d8:	f8d9 2000 	ldr.w	r2, [r9]
 80146dc:	4461      	add	r1, ip
 80146de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80146e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80146e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80146ea:	b289      	uxth	r1, r1
 80146ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80146f0:	4577      	cmp	r7, lr
 80146f2:	f849 1b04 	str.w	r1, [r9], #4
 80146f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80146fa:	d8e2      	bhi.n	80146c2 <__multiply+0xb2>
 80146fc:	9a01      	ldr	r2, [sp, #4]
 80146fe:	f845 c002 	str.w	ip, [r5, r2]
 8014702:	9a03      	ldr	r2, [sp, #12]
 8014704:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014708:	3304      	adds	r3, #4
 801470a:	f1b9 0f00 	cmp.w	r9, #0
 801470e:	d021      	beq.n	8014754 <__multiply+0x144>
 8014710:	6829      	ldr	r1, [r5, #0]
 8014712:	f104 0c14 	add.w	ip, r4, #20
 8014716:	46ae      	mov	lr, r5
 8014718:	f04f 0a00 	mov.w	sl, #0
 801471c:	f8bc b000 	ldrh.w	fp, [ip]
 8014720:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014724:	fb09 220b 	mla	r2, r9, fp, r2
 8014728:	4452      	add	r2, sl
 801472a:	b289      	uxth	r1, r1
 801472c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014730:	f84e 1b04 	str.w	r1, [lr], #4
 8014734:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014738:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801473c:	f8be 1000 	ldrh.w	r1, [lr]
 8014740:	fb09 110a 	mla	r1, r9, sl, r1
 8014744:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8014748:	4567      	cmp	r7, ip
 801474a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801474e:	d8e5      	bhi.n	801471c <__multiply+0x10c>
 8014750:	9a01      	ldr	r2, [sp, #4]
 8014752:	50a9      	str	r1, [r5, r2]
 8014754:	3504      	adds	r5, #4
 8014756:	e799      	b.n	801468c <__multiply+0x7c>
 8014758:	3e01      	subs	r6, #1
 801475a:	e79b      	b.n	8014694 <__multiply+0x84>
 801475c:	08015ac9 	.word	0x08015ac9
 8014760:	08015aeb 	.word	0x08015aeb

08014764 <__pow5mult>:
 8014764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014768:	4615      	mov	r5, r2
 801476a:	f012 0203 	ands.w	r2, r2, #3
 801476e:	4606      	mov	r6, r0
 8014770:	460f      	mov	r7, r1
 8014772:	d007      	beq.n	8014784 <__pow5mult+0x20>
 8014774:	4c25      	ldr	r4, [pc, #148]	; (801480c <__pow5mult+0xa8>)
 8014776:	3a01      	subs	r2, #1
 8014778:	2300      	movs	r3, #0
 801477a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801477e:	f7ff fe9d 	bl	80144bc <__multadd>
 8014782:	4607      	mov	r7, r0
 8014784:	10ad      	asrs	r5, r5, #2
 8014786:	d03d      	beq.n	8014804 <__pow5mult+0xa0>
 8014788:	69f4      	ldr	r4, [r6, #28]
 801478a:	b97c      	cbnz	r4, 80147ac <__pow5mult+0x48>
 801478c:	2010      	movs	r0, #16
 801478e:	f7ff fcd1 	bl	8014134 <malloc>
 8014792:	4602      	mov	r2, r0
 8014794:	61f0      	str	r0, [r6, #28]
 8014796:	b928      	cbnz	r0, 80147a4 <__pow5mult+0x40>
 8014798:	4b1d      	ldr	r3, [pc, #116]	; (8014810 <__pow5mult+0xac>)
 801479a:	481e      	ldr	r0, [pc, #120]	; (8014814 <__pow5mult+0xb0>)
 801479c:	f240 11b3 	movw	r1, #435	; 0x1b3
 80147a0:	f7fe fcd8 	bl	8013154 <__assert_func>
 80147a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80147a8:	6004      	str	r4, [r0, #0]
 80147aa:	60c4      	str	r4, [r0, #12]
 80147ac:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80147b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80147b4:	b94c      	cbnz	r4, 80147ca <__pow5mult+0x66>
 80147b6:	f240 2171 	movw	r1, #625	; 0x271
 80147ba:	4630      	mov	r0, r6
 80147bc:	f7ff ff12 	bl	80145e4 <__i2b>
 80147c0:	2300      	movs	r3, #0
 80147c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80147c6:	4604      	mov	r4, r0
 80147c8:	6003      	str	r3, [r0, #0]
 80147ca:	f04f 0900 	mov.w	r9, #0
 80147ce:	07eb      	lsls	r3, r5, #31
 80147d0:	d50a      	bpl.n	80147e8 <__pow5mult+0x84>
 80147d2:	4639      	mov	r1, r7
 80147d4:	4622      	mov	r2, r4
 80147d6:	4630      	mov	r0, r6
 80147d8:	f7ff ff1a 	bl	8014610 <__multiply>
 80147dc:	4639      	mov	r1, r7
 80147de:	4680      	mov	r8, r0
 80147e0:	4630      	mov	r0, r6
 80147e2:	f7ff fe49 	bl	8014478 <_Bfree>
 80147e6:	4647      	mov	r7, r8
 80147e8:	106d      	asrs	r5, r5, #1
 80147ea:	d00b      	beq.n	8014804 <__pow5mult+0xa0>
 80147ec:	6820      	ldr	r0, [r4, #0]
 80147ee:	b938      	cbnz	r0, 8014800 <__pow5mult+0x9c>
 80147f0:	4622      	mov	r2, r4
 80147f2:	4621      	mov	r1, r4
 80147f4:	4630      	mov	r0, r6
 80147f6:	f7ff ff0b 	bl	8014610 <__multiply>
 80147fa:	6020      	str	r0, [r4, #0]
 80147fc:	f8c0 9000 	str.w	r9, [r0]
 8014800:	4604      	mov	r4, r0
 8014802:	e7e4      	b.n	80147ce <__pow5mult+0x6a>
 8014804:	4638      	mov	r0, r7
 8014806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801480a:	bf00      	nop
 801480c:	08015c38 	.word	0x08015c38
 8014810:	080158b8 	.word	0x080158b8
 8014814:	08015aeb 	.word	0x08015aeb

08014818 <__lshift>:
 8014818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801481c:	460c      	mov	r4, r1
 801481e:	6849      	ldr	r1, [r1, #4]
 8014820:	6923      	ldr	r3, [r4, #16]
 8014822:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014826:	68a3      	ldr	r3, [r4, #8]
 8014828:	4607      	mov	r7, r0
 801482a:	4691      	mov	r9, r2
 801482c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014830:	f108 0601 	add.w	r6, r8, #1
 8014834:	42b3      	cmp	r3, r6
 8014836:	db0b      	blt.n	8014850 <__lshift+0x38>
 8014838:	4638      	mov	r0, r7
 801483a:	f7ff fddd 	bl	80143f8 <_Balloc>
 801483e:	4605      	mov	r5, r0
 8014840:	b948      	cbnz	r0, 8014856 <__lshift+0x3e>
 8014842:	4602      	mov	r2, r0
 8014844:	4b28      	ldr	r3, [pc, #160]	; (80148e8 <__lshift+0xd0>)
 8014846:	4829      	ldr	r0, [pc, #164]	; (80148ec <__lshift+0xd4>)
 8014848:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801484c:	f7fe fc82 	bl	8013154 <__assert_func>
 8014850:	3101      	adds	r1, #1
 8014852:	005b      	lsls	r3, r3, #1
 8014854:	e7ee      	b.n	8014834 <__lshift+0x1c>
 8014856:	2300      	movs	r3, #0
 8014858:	f100 0114 	add.w	r1, r0, #20
 801485c:	f100 0210 	add.w	r2, r0, #16
 8014860:	4618      	mov	r0, r3
 8014862:	4553      	cmp	r3, sl
 8014864:	db33      	blt.n	80148ce <__lshift+0xb6>
 8014866:	6920      	ldr	r0, [r4, #16]
 8014868:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801486c:	f104 0314 	add.w	r3, r4, #20
 8014870:	f019 091f 	ands.w	r9, r9, #31
 8014874:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014878:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801487c:	d02b      	beq.n	80148d6 <__lshift+0xbe>
 801487e:	f1c9 0e20 	rsb	lr, r9, #32
 8014882:	468a      	mov	sl, r1
 8014884:	2200      	movs	r2, #0
 8014886:	6818      	ldr	r0, [r3, #0]
 8014888:	fa00 f009 	lsl.w	r0, r0, r9
 801488c:	4310      	orrs	r0, r2
 801488e:	f84a 0b04 	str.w	r0, [sl], #4
 8014892:	f853 2b04 	ldr.w	r2, [r3], #4
 8014896:	459c      	cmp	ip, r3
 8014898:	fa22 f20e 	lsr.w	r2, r2, lr
 801489c:	d8f3      	bhi.n	8014886 <__lshift+0x6e>
 801489e:	ebac 0304 	sub.w	r3, ip, r4
 80148a2:	3b15      	subs	r3, #21
 80148a4:	f023 0303 	bic.w	r3, r3, #3
 80148a8:	3304      	adds	r3, #4
 80148aa:	f104 0015 	add.w	r0, r4, #21
 80148ae:	4584      	cmp	ip, r0
 80148b0:	bf38      	it	cc
 80148b2:	2304      	movcc	r3, #4
 80148b4:	50ca      	str	r2, [r1, r3]
 80148b6:	b10a      	cbz	r2, 80148bc <__lshift+0xa4>
 80148b8:	f108 0602 	add.w	r6, r8, #2
 80148bc:	3e01      	subs	r6, #1
 80148be:	4638      	mov	r0, r7
 80148c0:	612e      	str	r6, [r5, #16]
 80148c2:	4621      	mov	r1, r4
 80148c4:	f7ff fdd8 	bl	8014478 <_Bfree>
 80148c8:	4628      	mov	r0, r5
 80148ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80148d2:	3301      	adds	r3, #1
 80148d4:	e7c5      	b.n	8014862 <__lshift+0x4a>
 80148d6:	3904      	subs	r1, #4
 80148d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80148dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80148e0:	459c      	cmp	ip, r3
 80148e2:	d8f9      	bhi.n	80148d8 <__lshift+0xc0>
 80148e4:	e7ea      	b.n	80148bc <__lshift+0xa4>
 80148e6:	bf00      	nop
 80148e8:	08015ac9 	.word	0x08015ac9
 80148ec:	08015aeb 	.word	0x08015aeb

080148f0 <__mcmp>:
 80148f0:	b530      	push	{r4, r5, lr}
 80148f2:	6902      	ldr	r2, [r0, #16]
 80148f4:	690c      	ldr	r4, [r1, #16]
 80148f6:	1b12      	subs	r2, r2, r4
 80148f8:	d10e      	bne.n	8014918 <__mcmp+0x28>
 80148fa:	f100 0314 	add.w	r3, r0, #20
 80148fe:	3114      	adds	r1, #20
 8014900:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014904:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014908:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801490c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014910:	42a5      	cmp	r5, r4
 8014912:	d003      	beq.n	801491c <__mcmp+0x2c>
 8014914:	d305      	bcc.n	8014922 <__mcmp+0x32>
 8014916:	2201      	movs	r2, #1
 8014918:	4610      	mov	r0, r2
 801491a:	bd30      	pop	{r4, r5, pc}
 801491c:	4283      	cmp	r3, r0
 801491e:	d3f3      	bcc.n	8014908 <__mcmp+0x18>
 8014920:	e7fa      	b.n	8014918 <__mcmp+0x28>
 8014922:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014926:	e7f7      	b.n	8014918 <__mcmp+0x28>

08014928 <__mdiff>:
 8014928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801492c:	460c      	mov	r4, r1
 801492e:	4606      	mov	r6, r0
 8014930:	4611      	mov	r1, r2
 8014932:	4620      	mov	r0, r4
 8014934:	4690      	mov	r8, r2
 8014936:	f7ff ffdb 	bl	80148f0 <__mcmp>
 801493a:	1e05      	subs	r5, r0, #0
 801493c:	d110      	bne.n	8014960 <__mdiff+0x38>
 801493e:	4629      	mov	r1, r5
 8014940:	4630      	mov	r0, r6
 8014942:	f7ff fd59 	bl	80143f8 <_Balloc>
 8014946:	b930      	cbnz	r0, 8014956 <__mdiff+0x2e>
 8014948:	4b3a      	ldr	r3, [pc, #232]	; (8014a34 <__mdiff+0x10c>)
 801494a:	4602      	mov	r2, r0
 801494c:	f240 2137 	movw	r1, #567	; 0x237
 8014950:	4839      	ldr	r0, [pc, #228]	; (8014a38 <__mdiff+0x110>)
 8014952:	f7fe fbff 	bl	8013154 <__assert_func>
 8014956:	2301      	movs	r3, #1
 8014958:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801495c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014960:	bfa4      	itt	ge
 8014962:	4643      	movge	r3, r8
 8014964:	46a0      	movge	r8, r4
 8014966:	4630      	mov	r0, r6
 8014968:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801496c:	bfa6      	itte	ge
 801496e:	461c      	movge	r4, r3
 8014970:	2500      	movge	r5, #0
 8014972:	2501      	movlt	r5, #1
 8014974:	f7ff fd40 	bl	80143f8 <_Balloc>
 8014978:	b920      	cbnz	r0, 8014984 <__mdiff+0x5c>
 801497a:	4b2e      	ldr	r3, [pc, #184]	; (8014a34 <__mdiff+0x10c>)
 801497c:	4602      	mov	r2, r0
 801497e:	f240 2145 	movw	r1, #581	; 0x245
 8014982:	e7e5      	b.n	8014950 <__mdiff+0x28>
 8014984:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014988:	6926      	ldr	r6, [r4, #16]
 801498a:	60c5      	str	r5, [r0, #12]
 801498c:	f104 0914 	add.w	r9, r4, #20
 8014990:	f108 0514 	add.w	r5, r8, #20
 8014994:	f100 0e14 	add.w	lr, r0, #20
 8014998:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801499c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80149a0:	f108 0210 	add.w	r2, r8, #16
 80149a4:	46f2      	mov	sl, lr
 80149a6:	2100      	movs	r1, #0
 80149a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80149ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80149b0:	fa11 f88b 	uxtah	r8, r1, fp
 80149b4:	b299      	uxth	r1, r3
 80149b6:	0c1b      	lsrs	r3, r3, #16
 80149b8:	eba8 0801 	sub.w	r8, r8, r1
 80149bc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80149c0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80149c4:	fa1f f888 	uxth.w	r8, r8
 80149c8:	1419      	asrs	r1, r3, #16
 80149ca:	454e      	cmp	r6, r9
 80149cc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80149d0:	f84a 3b04 	str.w	r3, [sl], #4
 80149d4:	d8e8      	bhi.n	80149a8 <__mdiff+0x80>
 80149d6:	1b33      	subs	r3, r6, r4
 80149d8:	3b15      	subs	r3, #21
 80149da:	f023 0303 	bic.w	r3, r3, #3
 80149de:	3304      	adds	r3, #4
 80149e0:	3415      	adds	r4, #21
 80149e2:	42a6      	cmp	r6, r4
 80149e4:	bf38      	it	cc
 80149e6:	2304      	movcc	r3, #4
 80149e8:	441d      	add	r5, r3
 80149ea:	4473      	add	r3, lr
 80149ec:	469e      	mov	lr, r3
 80149ee:	462e      	mov	r6, r5
 80149f0:	4566      	cmp	r6, ip
 80149f2:	d30e      	bcc.n	8014a12 <__mdiff+0xea>
 80149f4:	f10c 0203 	add.w	r2, ip, #3
 80149f8:	1b52      	subs	r2, r2, r5
 80149fa:	f022 0203 	bic.w	r2, r2, #3
 80149fe:	3d03      	subs	r5, #3
 8014a00:	45ac      	cmp	ip, r5
 8014a02:	bf38      	it	cc
 8014a04:	2200      	movcc	r2, #0
 8014a06:	4413      	add	r3, r2
 8014a08:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014a0c:	b17a      	cbz	r2, 8014a2e <__mdiff+0x106>
 8014a0e:	6107      	str	r7, [r0, #16]
 8014a10:	e7a4      	b.n	801495c <__mdiff+0x34>
 8014a12:	f856 8b04 	ldr.w	r8, [r6], #4
 8014a16:	fa11 f288 	uxtah	r2, r1, r8
 8014a1a:	1414      	asrs	r4, r2, #16
 8014a1c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014a20:	b292      	uxth	r2, r2
 8014a22:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014a26:	f84e 2b04 	str.w	r2, [lr], #4
 8014a2a:	1421      	asrs	r1, r4, #16
 8014a2c:	e7e0      	b.n	80149f0 <__mdiff+0xc8>
 8014a2e:	3f01      	subs	r7, #1
 8014a30:	e7ea      	b.n	8014a08 <__mdiff+0xe0>
 8014a32:	bf00      	nop
 8014a34:	08015ac9 	.word	0x08015ac9
 8014a38:	08015aeb 	.word	0x08015aeb

08014a3c <__d2b>:
 8014a3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014a40:	460f      	mov	r7, r1
 8014a42:	2101      	movs	r1, #1
 8014a44:	ec59 8b10 	vmov	r8, r9, d0
 8014a48:	4616      	mov	r6, r2
 8014a4a:	f7ff fcd5 	bl	80143f8 <_Balloc>
 8014a4e:	4604      	mov	r4, r0
 8014a50:	b930      	cbnz	r0, 8014a60 <__d2b+0x24>
 8014a52:	4602      	mov	r2, r0
 8014a54:	4b24      	ldr	r3, [pc, #144]	; (8014ae8 <__d2b+0xac>)
 8014a56:	4825      	ldr	r0, [pc, #148]	; (8014aec <__d2b+0xb0>)
 8014a58:	f240 310f 	movw	r1, #783	; 0x30f
 8014a5c:	f7fe fb7a 	bl	8013154 <__assert_func>
 8014a60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014a64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014a68:	bb2d      	cbnz	r5, 8014ab6 <__d2b+0x7a>
 8014a6a:	9301      	str	r3, [sp, #4]
 8014a6c:	f1b8 0300 	subs.w	r3, r8, #0
 8014a70:	d026      	beq.n	8014ac0 <__d2b+0x84>
 8014a72:	4668      	mov	r0, sp
 8014a74:	9300      	str	r3, [sp, #0]
 8014a76:	f7ff fd87 	bl	8014588 <__lo0bits>
 8014a7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014a7e:	b1e8      	cbz	r0, 8014abc <__d2b+0x80>
 8014a80:	f1c0 0320 	rsb	r3, r0, #32
 8014a84:	fa02 f303 	lsl.w	r3, r2, r3
 8014a88:	430b      	orrs	r3, r1
 8014a8a:	40c2      	lsrs	r2, r0
 8014a8c:	6163      	str	r3, [r4, #20]
 8014a8e:	9201      	str	r2, [sp, #4]
 8014a90:	9b01      	ldr	r3, [sp, #4]
 8014a92:	61a3      	str	r3, [r4, #24]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	bf14      	ite	ne
 8014a98:	2202      	movne	r2, #2
 8014a9a:	2201      	moveq	r2, #1
 8014a9c:	6122      	str	r2, [r4, #16]
 8014a9e:	b1bd      	cbz	r5, 8014ad0 <__d2b+0x94>
 8014aa0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014aa4:	4405      	add	r5, r0
 8014aa6:	603d      	str	r5, [r7, #0]
 8014aa8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014aac:	6030      	str	r0, [r6, #0]
 8014aae:	4620      	mov	r0, r4
 8014ab0:	b003      	add	sp, #12
 8014ab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014aba:	e7d6      	b.n	8014a6a <__d2b+0x2e>
 8014abc:	6161      	str	r1, [r4, #20]
 8014abe:	e7e7      	b.n	8014a90 <__d2b+0x54>
 8014ac0:	a801      	add	r0, sp, #4
 8014ac2:	f7ff fd61 	bl	8014588 <__lo0bits>
 8014ac6:	9b01      	ldr	r3, [sp, #4]
 8014ac8:	6163      	str	r3, [r4, #20]
 8014aca:	3020      	adds	r0, #32
 8014acc:	2201      	movs	r2, #1
 8014ace:	e7e5      	b.n	8014a9c <__d2b+0x60>
 8014ad0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014ad4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014ad8:	6038      	str	r0, [r7, #0]
 8014ada:	6918      	ldr	r0, [r3, #16]
 8014adc:	f7ff fd34 	bl	8014548 <__hi0bits>
 8014ae0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014ae4:	e7e2      	b.n	8014aac <__d2b+0x70>
 8014ae6:	bf00      	nop
 8014ae8:	08015ac9 	.word	0x08015ac9
 8014aec:	08015aeb 	.word	0x08015aeb

08014af0 <__sread>:
 8014af0:	b510      	push	{r4, lr}
 8014af2:	460c      	mov	r4, r1
 8014af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014af8:	f000 f8bc 	bl	8014c74 <_read_r>
 8014afc:	2800      	cmp	r0, #0
 8014afe:	bfab      	itete	ge
 8014b00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014b02:	89a3      	ldrhlt	r3, [r4, #12]
 8014b04:	181b      	addge	r3, r3, r0
 8014b06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014b0a:	bfac      	ite	ge
 8014b0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8014b0e:	81a3      	strhlt	r3, [r4, #12]
 8014b10:	bd10      	pop	{r4, pc}

08014b12 <__swrite>:
 8014b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b16:	461f      	mov	r7, r3
 8014b18:	898b      	ldrh	r3, [r1, #12]
 8014b1a:	05db      	lsls	r3, r3, #23
 8014b1c:	4605      	mov	r5, r0
 8014b1e:	460c      	mov	r4, r1
 8014b20:	4616      	mov	r6, r2
 8014b22:	d505      	bpl.n	8014b30 <__swrite+0x1e>
 8014b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b28:	2302      	movs	r3, #2
 8014b2a:	2200      	movs	r2, #0
 8014b2c:	f000 f890 	bl	8014c50 <_lseek_r>
 8014b30:	89a3      	ldrh	r3, [r4, #12]
 8014b32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014b3a:	81a3      	strh	r3, [r4, #12]
 8014b3c:	4632      	mov	r2, r6
 8014b3e:	463b      	mov	r3, r7
 8014b40:	4628      	mov	r0, r5
 8014b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014b46:	f000 b8b7 	b.w	8014cb8 <_write_r>

08014b4a <__sseek>:
 8014b4a:	b510      	push	{r4, lr}
 8014b4c:	460c      	mov	r4, r1
 8014b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b52:	f000 f87d 	bl	8014c50 <_lseek_r>
 8014b56:	1c43      	adds	r3, r0, #1
 8014b58:	89a3      	ldrh	r3, [r4, #12]
 8014b5a:	bf15      	itete	ne
 8014b5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8014b5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014b62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014b66:	81a3      	strheq	r3, [r4, #12]
 8014b68:	bf18      	it	ne
 8014b6a:	81a3      	strhne	r3, [r4, #12]
 8014b6c:	bd10      	pop	{r4, pc}

08014b6e <__sclose>:
 8014b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b72:	f000 b85d 	b.w	8014c30 <_close_r>
	...

08014b78 <fiprintf>:
 8014b78:	b40e      	push	{r1, r2, r3}
 8014b7a:	b503      	push	{r0, r1, lr}
 8014b7c:	4601      	mov	r1, r0
 8014b7e:	ab03      	add	r3, sp, #12
 8014b80:	4805      	ldr	r0, [pc, #20]	; (8014b98 <fiprintf+0x20>)
 8014b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b86:	6800      	ldr	r0, [r0, #0]
 8014b88:	9301      	str	r3, [sp, #4]
 8014b8a:	f000 f93b 	bl	8014e04 <_vfiprintf_r>
 8014b8e:	b002      	add	sp, #8
 8014b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b94:	b003      	add	sp, #12
 8014b96:	4770      	bx	lr
 8014b98:	20000068 	.word	0x20000068

08014b9c <_realloc_r>:
 8014b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ba0:	4680      	mov	r8, r0
 8014ba2:	4614      	mov	r4, r2
 8014ba4:	460e      	mov	r6, r1
 8014ba6:	b921      	cbnz	r1, 8014bb2 <_realloc_r+0x16>
 8014ba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014bac:	4611      	mov	r1, r2
 8014bae:	f7ff bae9 	b.w	8014184 <_malloc_r>
 8014bb2:	b92a      	cbnz	r2, 8014bc0 <_realloc_r+0x24>
 8014bb4:	f000 f8b0 	bl	8014d18 <_free_r>
 8014bb8:	4625      	mov	r5, r4
 8014bba:	4628      	mov	r0, r5
 8014bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bc0:	f000 fa4c 	bl	801505c <_malloc_usable_size_r>
 8014bc4:	4284      	cmp	r4, r0
 8014bc6:	4607      	mov	r7, r0
 8014bc8:	d802      	bhi.n	8014bd0 <_realloc_r+0x34>
 8014bca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014bce:	d812      	bhi.n	8014bf6 <_realloc_r+0x5a>
 8014bd0:	4621      	mov	r1, r4
 8014bd2:	4640      	mov	r0, r8
 8014bd4:	f7ff fad6 	bl	8014184 <_malloc_r>
 8014bd8:	4605      	mov	r5, r0
 8014bda:	2800      	cmp	r0, #0
 8014bdc:	d0ed      	beq.n	8014bba <_realloc_r+0x1e>
 8014bde:	42bc      	cmp	r4, r7
 8014be0:	4622      	mov	r2, r4
 8014be2:	4631      	mov	r1, r6
 8014be4:	bf28      	it	cs
 8014be6:	463a      	movcs	r2, r7
 8014be8:	f7fe faa5 	bl	8013136 <memcpy>
 8014bec:	4631      	mov	r1, r6
 8014bee:	4640      	mov	r0, r8
 8014bf0:	f000 f892 	bl	8014d18 <_free_r>
 8014bf4:	e7e1      	b.n	8014bba <_realloc_r+0x1e>
 8014bf6:	4635      	mov	r5, r6
 8014bf8:	e7df      	b.n	8014bba <_realloc_r+0x1e>

08014bfa <memmove>:
 8014bfa:	4288      	cmp	r0, r1
 8014bfc:	b510      	push	{r4, lr}
 8014bfe:	eb01 0402 	add.w	r4, r1, r2
 8014c02:	d902      	bls.n	8014c0a <memmove+0x10>
 8014c04:	4284      	cmp	r4, r0
 8014c06:	4623      	mov	r3, r4
 8014c08:	d807      	bhi.n	8014c1a <memmove+0x20>
 8014c0a:	1e43      	subs	r3, r0, #1
 8014c0c:	42a1      	cmp	r1, r4
 8014c0e:	d008      	beq.n	8014c22 <memmove+0x28>
 8014c10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014c14:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014c18:	e7f8      	b.n	8014c0c <memmove+0x12>
 8014c1a:	4402      	add	r2, r0
 8014c1c:	4601      	mov	r1, r0
 8014c1e:	428a      	cmp	r2, r1
 8014c20:	d100      	bne.n	8014c24 <memmove+0x2a>
 8014c22:	bd10      	pop	{r4, pc}
 8014c24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014c28:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014c2c:	e7f7      	b.n	8014c1e <memmove+0x24>
	...

08014c30 <_close_r>:
 8014c30:	b538      	push	{r3, r4, r5, lr}
 8014c32:	4d06      	ldr	r5, [pc, #24]	; (8014c4c <_close_r+0x1c>)
 8014c34:	2300      	movs	r3, #0
 8014c36:	4604      	mov	r4, r0
 8014c38:	4608      	mov	r0, r1
 8014c3a:	602b      	str	r3, [r5, #0]
 8014c3c:	f7f5 fce7 	bl	800a60e <_close>
 8014c40:	1c43      	adds	r3, r0, #1
 8014c42:	d102      	bne.n	8014c4a <_close_r+0x1a>
 8014c44:	682b      	ldr	r3, [r5, #0]
 8014c46:	b103      	cbz	r3, 8014c4a <_close_r+0x1a>
 8014c48:	6023      	str	r3, [r4, #0]
 8014c4a:	bd38      	pop	{r3, r4, r5, pc}
 8014c4c:	20002a2c 	.word	0x20002a2c

08014c50 <_lseek_r>:
 8014c50:	b538      	push	{r3, r4, r5, lr}
 8014c52:	4d07      	ldr	r5, [pc, #28]	; (8014c70 <_lseek_r+0x20>)
 8014c54:	4604      	mov	r4, r0
 8014c56:	4608      	mov	r0, r1
 8014c58:	4611      	mov	r1, r2
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	602a      	str	r2, [r5, #0]
 8014c5e:	461a      	mov	r2, r3
 8014c60:	f7f5 fcfc 	bl	800a65c <_lseek>
 8014c64:	1c43      	adds	r3, r0, #1
 8014c66:	d102      	bne.n	8014c6e <_lseek_r+0x1e>
 8014c68:	682b      	ldr	r3, [r5, #0]
 8014c6a:	b103      	cbz	r3, 8014c6e <_lseek_r+0x1e>
 8014c6c:	6023      	str	r3, [r4, #0]
 8014c6e:	bd38      	pop	{r3, r4, r5, pc}
 8014c70:	20002a2c 	.word	0x20002a2c

08014c74 <_read_r>:
 8014c74:	b538      	push	{r3, r4, r5, lr}
 8014c76:	4d07      	ldr	r5, [pc, #28]	; (8014c94 <_read_r+0x20>)
 8014c78:	4604      	mov	r4, r0
 8014c7a:	4608      	mov	r0, r1
 8014c7c:	4611      	mov	r1, r2
 8014c7e:	2200      	movs	r2, #0
 8014c80:	602a      	str	r2, [r5, #0]
 8014c82:	461a      	mov	r2, r3
 8014c84:	f7f5 fc8a 	bl	800a59c <_read>
 8014c88:	1c43      	adds	r3, r0, #1
 8014c8a:	d102      	bne.n	8014c92 <_read_r+0x1e>
 8014c8c:	682b      	ldr	r3, [r5, #0]
 8014c8e:	b103      	cbz	r3, 8014c92 <_read_r+0x1e>
 8014c90:	6023      	str	r3, [r4, #0]
 8014c92:	bd38      	pop	{r3, r4, r5, pc}
 8014c94:	20002a2c 	.word	0x20002a2c

08014c98 <_sbrk_r>:
 8014c98:	b538      	push	{r3, r4, r5, lr}
 8014c9a:	4d06      	ldr	r5, [pc, #24]	; (8014cb4 <_sbrk_r+0x1c>)
 8014c9c:	2300      	movs	r3, #0
 8014c9e:	4604      	mov	r4, r0
 8014ca0:	4608      	mov	r0, r1
 8014ca2:	602b      	str	r3, [r5, #0]
 8014ca4:	f7f5 fce8 	bl	800a678 <_sbrk>
 8014ca8:	1c43      	adds	r3, r0, #1
 8014caa:	d102      	bne.n	8014cb2 <_sbrk_r+0x1a>
 8014cac:	682b      	ldr	r3, [r5, #0]
 8014cae:	b103      	cbz	r3, 8014cb2 <_sbrk_r+0x1a>
 8014cb0:	6023      	str	r3, [r4, #0]
 8014cb2:	bd38      	pop	{r3, r4, r5, pc}
 8014cb4:	20002a2c 	.word	0x20002a2c

08014cb8 <_write_r>:
 8014cb8:	b538      	push	{r3, r4, r5, lr}
 8014cba:	4d07      	ldr	r5, [pc, #28]	; (8014cd8 <_write_r+0x20>)
 8014cbc:	4604      	mov	r4, r0
 8014cbe:	4608      	mov	r0, r1
 8014cc0:	4611      	mov	r1, r2
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	602a      	str	r2, [r5, #0]
 8014cc6:	461a      	mov	r2, r3
 8014cc8:	f7f5 fc85 	bl	800a5d6 <_write>
 8014ccc:	1c43      	adds	r3, r0, #1
 8014cce:	d102      	bne.n	8014cd6 <_write_r+0x1e>
 8014cd0:	682b      	ldr	r3, [r5, #0]
 8014cd2:	b103      	cbz	r3, 8014cd6 <_write_r+0x1e>
 8014cd4:	6023      	str	r3, [r4, #0]
 8014cd6:	bd38      	pop	{r3, r4, r5, pc}
 8014cd8:	20002a2c 	.word	0x20002a2c

08014cdc <abort>:
 8014cdc:	b508      	push	{r3, lr}
 8014cde:	2006      	movs	r0, #6
 8014ce0:	f000 fb14 	bl	801530c <raise>
 8014ce4:	2001      	movs	r0, #1
 8014ce6:	f7f5 fc4f 	bl	800a588 <_exit>

08014cea <_calloc_r>:
 8014cea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014cec:	fba1 2402 	umull	r2, r4, r1, r2
 8014cf0:	b94c      	cbnz	r4, 8014d06 <_calloc_r+0x1c>
 8014cf2:	4611      	mov	r1, r2
 8014cf4:	9201      	str	r2, [sp, #4]
 8014cf6:	f7ff fa45 	bl	8014184 <_malloc_r>
 8014cfa:	9a01      	ldr	r2, [sp, #4]
 8014cfc:	4605      	mov	r5, r0
 8014cfe:	b930      	cbnz	r0, 8014d0e <_calloc_r+0x24>
 8014d00:	4628      	mov	r0, r5
 8014d02:	b003      	add	sp, #12
 8014d04:	bd30      	pop	{r4, r5, pc}
 8014d06:	220c      	movs	r2, #12
 8014d08:	6002      	str	r2, [r0, #0]
 8014d0a:	2500      	movs	r5, #0
 8014d0c:	e7f8      	b.n	8014d00 <_calloc_r+0x16>
 8014d0e:	4621      	mov	r1, r4
 8014d10:	f7fe f9d8 	bl	80130c4 <memset>
 8014d14:	e7f4      	b.n	8014d00 <_calloc_r+0x16>
	...

08014d18 <_free_r>:
 8014d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014d1a:	2900      	cmp	r1, #0
 8014d1c:	d044      	beq.n	8014da8 <_free_r+0x90>
 8014d1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014d22:	9001      	str	r0, [sp, #4]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	f1a1 0404 	sub.w	r4, r1, #4
 8014d2a:	bfb8      	it	lt
 8014d2c:	18e4      	addlt	r4, r4, r3
 8014d2e:	f7ff fb57 	bl	80143e0 <__malloc_lock>
 8014d32:	4a1e      	ldr	r2, [pc, #120]	; (8014dac <_free_r+0x94>)
 8014d34:	9801      	ldr	r0, [sp, #4]
 8014d36:	6813      	ldr	r3, [r2, #0]
 8014d38:	b933      	cbnz	r3, 8014d48 <_free_r+0x30>
 8014d3a:	6063      	str	r3, [r4, #4]
 8014d3c:	6014      	str	r4, [r2, #0]
 8014d3e:	b003      	add	sp, #12
 8014d40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d44:	f7ff bb52 	b.w	80143ec <__malloc_unlock>
 8014d48:	42a3      	cmp	r3, r4
 8014d4a:	d908      	bls.n	8014d5e <_free_r+0x46>
 8014d4c:	6825      	ldr	r5, [r4, #0]
 8014d4e:	1961      	adds	r1, r4, r5
 8014d50:	428b      	cmp	r3, r1
 8014d52:	bf01      	itttt	eq
 8014d54:	6819      	ldreq	r1, [r3, #0]
 8014d56:	685b      	ldreq	r3, [r3, #4]
 8014d58:	1949      	addeq	r1, r1, r5
 8014d5a:	6021      	streq	r1, [r4, #0]
 8014d5c:	e7ed      	b.n	8014d3a <_free_r+0x22>
 8014d5e:	461a      	mov	r2, r3
 8014d60:	685b      	ldr	r3, [r3, #4]
 8014d62:	b10b      	cbz	r3, 8014d68 <_free_r+0x50>
 8014d64:	42a3      	cmp	r3, r4
 8014d66:	d9fa      	bls.n	8014d5e <_free_r+0x46>
 8014d68:	6811      	ldr	r1, [r2, #0]
 8014d6a:	1855      	adds	r5, r2, r1
 8014d6c:	42a5      	cmp	r5, r4
 8014d6e:	d10b      	bne.n	8014d88 <_free_r+0x70>
 8014d70:	6824      	ldr	r4, [r4, #0]
 8014d72:	4421      	add	r1, r4
 8014d74:	1854      	adds	r4, r2, r1
 8014d76:	42a3      	cmp	r3, r4
 8014d78:	6011      	str	r1, [r2, #0]
 8014d7a:	d1e0      	bne.n	8014d3e <_free_r+0x26>
 8014d7c:	681c      	ldr	r4, [r3, #0]
 8014d7e:	685b      	ldr	r3, [r3, #4]
 8014d80:	6053      	str	r3, [r2, #4]
 8014d82:	440c      	add	r4, r1
 8014d84:	6014      	str	r4, [r2, #0]
 8014d86:	e7da      	b.n	8014d3e <_free_r+0x26>
 8014d88:	d902      	bls.n	8014d90 <_free_r+0x78>
 8014d8a:	230c      	movs	r3, #12
 8014d8c:	6003      	str	r3, [r0, #0]
 8014d8e:	e7d6      	b.n	8014d3e <_free_r+0x26>
 8014d90:	6825      	ldr	r5, [r4, #0]
 8014d92:	1961      	adds	r1, r4, r5
 8014d94:	428b      	cmp	r3, r1
 8014d96:	bf04      	itt	eq
 8014d98:	6819      	ldreq	r1, [r3, #0]
 8014d9a:	685b      	ldreq	r3, [r3, #4]
 8014d9c:	6063      	str	r3, [r4, #4]
 8014d9e:	bf04      	itt	eq
 8014da0:	1949      	addeq	r1, r1, r5
 8014da2:	6021      	streq	r1, [r4, #0]
 8014da4:	6054      	str	r4, [r2, #4]
 8014da6:	e7ca      	b.n	8014d3e <_free_r+0x26>
 8014da8:	b003      	add	sp, #12
 8014daa:	bd30      	pop	{r4, r5, pc}
 8014dac:	20002a24 	.word	0x20002a24

08014db0 <__sfputc_r>:
 8014db0:	6893      	ldr	r3, [r2, #8]
 8014db2:	3b01      	subs	r3, #1
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	b410      	push	{r4}
 8014db8:	6093      	str	r3, [r2, #8]
 8014dba:	da08      	bge.n	8014dce <__sfputc_r+0x1e>
 8014dbc:	6994      	ldr	r4, [r2, #24]
 8014dbe:	42a3      	cmp	r3, r4
 8014dc0:	db01      	blt.n	8014dc6 <__sfputc_r+0x16>
 8014dc2:	290a      	cmp	r1, #10
 8014dc4:	d103      	bne.n	8014dce <__sfputc_r+0x1e>
 8014dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014dca:	f000 b94f 	b.w	801506c <__swbuf_r>
 8014dce:	6813      	ldr	r3, [r2, #0]
 8014dd0:	1c58      	adds	r0, r3, #1
 8014dd2:	6010      	str	r0, [r2, #0]
 8014dd4:	7019      	strb	r1, [r3, #0]
 8014dd6:	4608      	mov	r0, r1
 8014dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ddc:	4770      	bx	lr

08014dde <__sfputs_r>:
 8014dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014de0:	4606      	mov	r6, r0
 8014de2:	460f      	mov	r7, r1
 8014de4:	4614      	mov	r4, r2
 8014de6:	18d5      	adds	r5, r2, r3
 8014de8:	42ac      	cmp	r4, r5
 8014dea:	d101      	bne.n	8014df0 <__sfputs_r+0x12>
 8014dec:	2000      	movs	r0, #0
 8014dee:	e007      	b.n	8014e00 <__sfputs_r+0x22>
 8014df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014df4:	463a      	mov	r2, r7
 8014df6:	4630      	mov	r0, r6
 8014df8:	f7ff ffda 	bl	8014db0 <__sfputc_r>
 8014dfc:	1c43      	adds	r3, r0, #1
 8014dfe:	d1f3      	bne.n	8014de8 <__sfputs_r+0xa>
 8014e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014e04 <_vfiprintf_r>:
 8014e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e08:	460d      	mov	r5, r1
 8014e0a:	b09d      	sub	sp, #116	; 0x74
 8014e0c:	4614      	mov	r4, r2
 8014e0e:	4698      	mov	r8, r3
 8014e10:	4606      	mov	r6, r0
 8014e12:	b118      	cbz	r0, 8014e1c <_vfiprintf_r+0x18>
 8014e14:	6a03      	ldr	r3, [r0, #32]
 8014e16:	b90b      	cbnz	r3, 8014e1c <_vfiprintf_r+0x18>
 8014e18:	f7fe f892 	bl	8012f40 <__sinit>
 8014e1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014e1e:	07d9      	lsls	r1, r3, #31
 8014e20:	d405      	bmi.n	8014e2e <_vfiprintf_r+0x2a>
 8014e22:	89ab      	ldrh	r3, [r5, #12]
 8014e24:	059a      	lsls	r2, r3, #22
 8014e26:	d402      	bmi.n	8014e2e <_vfiprintf_r+0x2a>
 8014e28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014e2a:	f7fe f982 	bl	8013132 <__retarget_lock_acquire_recursive>
 8014e2e:	89ab      	ldrh	r3, [r5, #12]
 8014e30:	071b      	lsls	r3, r3, #28
 8014e32:	d501      	bpl.n	8014e38 <_vfiprintf_r+0x34>
 8014e34:	692b      	ldr	r3, [r5, #16]
 8014e36:	b99b      	cbnz	r3, 8014e60 <_vfiprintf_r+0x5c>
 8014e38:	4629      	mov	r1, r5
 8014e3a:	4630      	mov	r0, r6
 8014e3c:	f000 f954 	bl	80150e8 <__swsetup_r>
 8014e40:	b170      	cbz	r0, 8014e60 <_vfiprintf_r+0x5c>
 8014e42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014e44:	07dc      	lsls	r4, r3, #31
 8014e46:	d504      	bpl.n	8014e52 <_vfiprintf_r+0x4e>
 8014e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014e4c:	b01d      	add	sp, #116	; 0x74
 8014e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e52:	89ab      	ldrh	r3, [r5, #12]
 8014e54:	0598      	lsls	r0, r3, #22
 8014e56:	d4f7      	bmi.n	8014e48 <_vfiprintf_r+0x44>
 8014e58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014e5a:	f7fe f96b 	bl	8013134 <__retarget_lock_release_recursive>
 8014e5e:	e7f3      	b.n	8014e48 <_vfiprintf_r+0x44>
 8014e60:	2300      	movs	r3, #0
 8014e62:	9309      	str	r3, [sp, #36]	; 0x24
 8014e64:	2320      	movs	r3, #32
 8014e66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014e6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014e6e:	2330      	movs	r3, #48	; 0x30
 8014e70:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015024 <_vfiprintf_r+0x220>
 8014e74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014e78:	f04f 0901 	mov.w	r9, #1
 8014e7c:	4623      	mov	r3, r4
 8014e7e:	469a      	mov	sl, r3
 8014e80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e84:	b10a      	cbz	r2, 8014e8a <_vfiprintf_r+0x86>
 8014e86:	2a25      	cmp	r2, #37	; 0x25
 8014e88:	d1f9      	bne.n	8014e7e <_vfiprintf_r+0x7a>
 8014e8a:	ebba 0b04 	subs.w	fp, sl, r4
 8014e8e:	d00b      	beq.n	8014ea8 <_vfiprintf_r+0xa4>
 8014e90:	465b      	mov	r3, fp
 8014e92:	4622      	mov	r2, r4
 8014e94:	4629      	mov	r1, r5
 8014e96:	4630      	mov	r0, r6
 8014e98:	f7ff ffa1 	bl	8014dde <__sfputs_r>
 8014e9c:	3001      	adds	r0, #1
 8014e9e:	f000 80a9 	beq.w	8014ff4 <_vfiprintf_r+0x1f0>
 8014ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ea4:	445a      	add	r2, fp
 8014ea6:	9209      	str	r2, [sp, #36]	; 0x24
 8014ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	f000 80a1 	beq.w	8014ff4 <_vfiprintf_r+0x1f0>
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014eb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014ebc:	f10a 0a01 	add.w	sl, sl, #1
 8014ec0:	9304      	str	r3, [sp, #16]
 8014ec2:	9307      	str	r3, [sp, #28]
 8014ec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014ec8:	931a      	str	r3, [sp, #104]	; 0x68
 8014eca:	4654      	mov	r4, sl
 8014ecc:	2205      	movs	r2, #5
 8014ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ed2:	4854      	ldr	r0, [pc, #336]	; (8015024 <_vfiprintf_r+0x220>)
 8014ed4:	f7eb f99c 	bl	8000210 <memchr>
 8014ed8:	9a04      	ldr	r2, [sp, #16]
 8014eda:	b9d8      	cbnz	r0, 8014f14 <_vfiprintf_r+0x110>
 8014edc:	06d1      	lsls	r1, r2, #27
 8014ede:	bf44      	itt	mi
 8014ee0:	2320      	movmi	r3, #32
 8014ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ee6:	0713      	lsls	r3, r2, #28
 8014ee8:	bf44      	itt	mi
 8014eea:	232b      	movmi	r3, #43	; 0x2b
 8014eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8014ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8014ef6:	d015      	beq.n	8014f24 <_vfiprintf_r+0x120>
 8014ef8:	9a07      	ldr	r2, [sp, #28]
 8014efa:	4654      	mov	r4, sl
 8014efc:	2000      	movs	r0, #0
 8014efe:	f04f 0c0a 	mov.w	ip, #10
 8014f02:	4621      	mov	r1, r4
 8014f04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014f08:	3b30      	subs	r3, #48	; 0x30
 8014f0a:	2b09      	cmp	r3, #9
 8014f0c:	d94d      	bls.n	8014faa <_vfiprintf_r+0x1a6>
 8014f0e:	b1b0      	cbz	r0, 8014f3e <_vfiprintf_r+0x13a>
 8014f10:	9207      	str	r2, [sp, #28]
 8014f12:	e014      	b.n	8014f3e <_vfiprintf_r+0x13a>
 8014f14:	eba0 0308 	sub.w	r3, r0, r8
 8014f18:	fa09 f303 	lsl.w	r3, r9, r3
 8014f1c:	4313      	orrs	r3, r2
 8014f1e:	9304      	str	r3, [sp, #16]
 8014f20:	46a2      	mov	sl, r4
 8014f22:	e7d2      	b.n	8014eca <_vfiprintf_r+0xc6>
 8014f24:	9b03      	ldr	r3, [sp, #12]
 8014f26:	1d19      	adds	r1, r3, #4
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	9103      	str	r1, [sp, #12]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	bfbb      	ittet	lt
 8014f30:	425b      	neglt	r3, r3
 8014f32:	f042 0202 	orrlt.w	r2, r2, #2
 8014f36:	9307      	strge	r3, [sp, #28]
 8014f38:	9307      	strlt	r3, [sp, #28]
 8014f3a:	bfb8      	it	lt
 8014f3c:	9204      	strlt	r2, [sp, #16]
 8014f3e:	7823      	ldrb	r3, [r4, #0]
 8014f40:	2b2e      	cmp	r3, #46	; 0x2e
 8014f42:	d10c      	bne.n	8014f5e <_vfiprintf_r+0x15a>
 8014f44:	7863      	ldrb	r3, [r4, #1]
 8014f46:	2b2a      	cmp	r3, #42	; 0x2a
 8014f48:	d134      	bne.n	8014fb4 <_vfiprintf_r+0x1b0>
 8014f4a:	9b03      	ldr	r3, [sp, #12]
 8014f4c:	1d1a      	adds	r2, r3, #4
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	9203      	str	r2, [sp, #12]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	bfb8      	it	lt
 8014f56:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014f5a:	3402      	adds	r4, #2
 8014f5c:	9305      	str	r3, [sp, #20]
 8014f5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015034 <_vfiprintf_r+0x230>
 8014f62:	7821      	ldrb	r1, [r4, #0]
 8014f64:	2203      	movs	r2, #3
 8014f66:	4650      	mov	r0, sl
 8014f68:	f7eb f952 	bl	8000210 <memchr>
 8014f6c:	b138      	cbz	r0, 8014f7e <_vfiprintf_r+0x17a>
 8014f6e:	9b04      	ldr	r3, [sp, #16]
 8014f70:	eba0 000a 	sub.w	r0, r0, sl
 8014f74:	2240      	movs	r2, #64	; 0x40
 8014f76:	4082      	lsls	r2, r0
 8014f78:	4313      	orrs	r3, r2
 8014f7a:	3401      	adds	r4, #1
 8014f7c:	9304      	str	r3, [sp, #16]
 8014f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f82:	4829      	ldr	r0, [pc, #164]	; (8015028 <_vfiprintf_r+0x224>)
 8014f84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014f88:	2206      	movs	r2, #6
 8014f8a:	f7eb f941 	bl	8000210 <memchr>
 8014f8e:	2800      	cmp	r0, #0
 8014f90:	d03f      	beq.n	8015012 <_vfiprintf_r+0x20e>
 8014f92:	4b26      	ldr	r3, [pc, #152]	; (801502c <_vfiprintf_r+0x228>)
 8014f94:	bb1b      	cbnz	r3, 8014fde <_vfiprintf_r+0x1da>
 8014f96:	9b03      	ldr	r3, [sp, #12]
 8014f98:	3307      	adds	r3, #7
 8014f9a:	f023 0307 	bic.w	r3, r3, #7
 8014f9e:	3308      	adds	r3, #8
 8014fa0:	9303      	str	r3, [sp, #12]
 8014fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fa4:	443b      	add	r3, r7
 8014fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8014fa8:	e768      	b.n	8014e7c <_vfiprintf_r+0x78>
 8014faa:	fb0c 3202 	mla	r2, ip, r2, r3
 8014fae:	460c      	mov	r4, r1
 8014fb0:	2001      	movs	r0, #1
 8014fb2:	e7a6      	b.n	8014f02 <_vfiprintf_r+0xfe>
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	3401      	adds	r4, #1
 8014fb8:	9305      	str	r3, [sp, #20]
 8014fba:	4619      	mov	r1, r3
 8014fbc:	f04f 0c0a 	mov.w	ip, #10
 8014fc0:	4620      	mov	r0, r4
 8014fc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014fc6:	3a30      	subs	r2, #48	; 0x30
 8014fc8:	2a09      	cmp	r2, #9
 8014fca:	d903      	bls.n	8014fd4 <_vfiprintf_r+0x1d0>
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d0c6      	beq.n	8014f5e <_vfiprintf_r+0x15a>
 8014fd0:	9105      	str	r1, [sp, #20]
 8014fd2:	e7c4      	b.n	8014f5e <_vfiprintf_r+0x15a>
 8014fd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8014fd8:	4604      	mov	r4, r0
 8014fda:	2301      	movs	r3, #1
 8014fdc:	e7f0      	b.n	8014fc0 <_vfiprintf_r+0x1bc>
 8014fde:	ab03      	add	r3, sp, #12
 8014fe0:	9300      	str	r3, [sp, #0]
 8014fe2:	462a      	mov	r2, r5
 8014fe4:	4b12      	ldr	r3, [pc, #72]	; (8015030 <_vfiprintf_r+0x22c>)
 8014fe6:	a904      	add	r1, sp, #16
 8014fe8:	4630      	mov	r0, r6
 8014fea:	f7fd fb09 	bl	8012600 <_printf_float>
 8014fee:	4607      	mov	r7, r0
 8014ff0:	1c78      	adds	r0, r7, #1
 8014ff2:	d1d6      	bne.n	8014fa2 <_vfiprintf_r+0x19e>
 8014ff4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ff6:	07d9      	lsls	r1, r3, #31
 8014ff8:	d405      	bmi.n	8015006 <_vfiprintf_r+0x202>
 8014ffa:	89ab      	ldrh	r3, [r5, #12]
 8014ffc:	059a      	lsls	r2, r3, #22
 8014ffe:	d402      	bmi.n	8015006 <_vfiprintf_r+0x202>
 8015000:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015002:	f7fe f897 	bl	8013134 <__retarget_lock_release_recursive>
 8015006:	89ab      	ldrh	r3, [r5, #12]
 8015008:	065b      	lsls	r3, r3, #25
 801500a:	f53f af1d 	bmi.w	8014e48 <_vfiprintf_r+0x44>
 801500e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015010:	e71c      	b.n	8014e4c <_vfiprintf_r+0x48>
 8015012:	ab03      	add	r3, sp, #12
 8015014:	9300      	str	r3, [sp, #0]
 8015016:	462a      	mov	r2, r5
 8015018:	4b05      	ldr	r3, [pc, #20]	; (8015030 <_vfiprintf_r+0x22c>)
 801501a:	a904      	add	r1, sp, #16
 801501c:	4630      	mov	r0, r6
 801501e:	f7fd fd93 	bl	8012b48 <_printf_i>
 8015022:	e7e4      	b.n	8014fee <_vfiprintf_r+0x1ea>
 8015024:	08015ada 	.word	0x08015ada
 8015028:	08015ae4 	.word	0x08015ae4
 801502c:	08012601 	.word	0x08012601
 8015030:	08014ddf 	.word	0x08014ddf
 8015034:	08015ae0 	.word	0x08015ae0

08015038 <__ascii_mbtowc>:
 8015038:	b082      	sub	sp, #8
 801503a:	b901      	cbnz	r1, 801503e <__ascii_mbtowc+0x6>
 801503c:	a901      	add	r1, sp, #4
 801503e:	b142      	cbz	r2, 8015052 <__ascii_mbtowc+0x1a>
 8015040:	b14b      	cbz	r3, 8015056 <__ascii_mbtowc+0x1e>
 8015042:	7813      	ldrb	r3, [r2, #0]
 8015044:	600b      	str	r3, [r1, #0]
 8015046:	7812      	ldrb	r2, [r2, #0]
 8015048:	1e10      	subs	r0, r2, #0
 801504a:	bf18      	it	ne
 801504c:	2001      	movne	r0, #1
 801504e:	b002      	add	sp, #8
 8015050:	4770      	bx	lr
 8015052:	4610      	mov	r0, r2
 8015054:	e7fb      	b.n	801504e <__ascii_mbtowc+0x16>
 8015056:	f06f 0001 	mvn.w	r0, #1
 801505a:	e7f8      	b.n	801504e <__ascii_mbtowc+0x16>

0801505c <_malloc_usable_size_r>:
 801505c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015060:	1f18      	subs	r0, r3, #4
 8015062:	2b00      	cmp	r3, #0
 8015064:	bfbc      	itt	lt
 8015066:	580b      	ldrlt	r3, [r1, r0]
 8015068:	18c0      	addlt	r0, r0, r3
 801506a:	4770      	bx	lr

0801506c <__swbuf_r>:
 801506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801506e:	460e      	mov	r6, r1
 8015070:	4614      	mov	r4, r2
 8015072:	4605      	mov	r5, r0
 8015074:	b118      	cbz	r0, 801507e <__swbuf_r+0x12>
 8015076:	6a03      	ldr	r3, [r0, #32]
 8015078:	b90b      	cbnz	r3, 801507e <__swbuf_r+0x12>
 801507a:	f7fd ff61 	bl	8012f40 <__sinit>
 801507e:	69a3      	ldr	r3, [r4, #24]
 8015080:	60a3      	str	r3, [r4, #8]
 8015082:	89a3      	ldrh	r3, [r4, #12]
 8015084:	071a      	lsls	r2, r3, #28
 8015086:	d525      	bpl.n	80150d4 <__swbuf_r+0x68>
 8015088:	6923      	ldr	r3, [r4, #16]
 801508a:	b31b      	cbz	r3, 80150d4 <__swbuf_r+0x68>
 801508c:	6823      	ldr	r3, [r4, #0]
 801508e:	6922      	ldr	r2, [r4, #16]
 8015090:	1a98      	subs	r0, r3, r2
 8015092:	6963      	ldr	r3, [r4, #20]
 8015094:	b2f6      	uxtb	r6, r6
 8015096:	4283      	cmp	r3, r0
 8015098:	4637      	mov	r7, r6
 801509a:	dc04      	bgt.n	80150a6 <__swbuf_r+0x3a>
 801509c:	4621      	mov	r1, r4
 801509e:	4628      	mov	r0, r5
 80150a0:	f7ff f976 	bl	8014390 <_fflush_r>
 80150a4:	b9e0      	cbnz	r0, 80150e0 <__swbuf_r+0x74>
 80150a6:	68a3      	ldr	r3, [r4, #8]
 80150a8:	3b01      	subs	r3, #1
 80150aa:	60a3      	str	r3, [r4, #8]
 80150ac:	6823      	ldr	r3, [r4, #0]
 80150ae:	1c5a      	adds	r2, r3, #1
 80150b0:	6022      	str	r2, [r4, #0]
 80150b2:	701e      	strb	r6, [r3, #0]
 80150b4:	6962      	ldr	r2, [r4, #20]
 80150b6:	1c43      	adds	r3, r0, #1
 80150b8:	429a      	cmp	r2, r3
 80150ba:	d004      	beq.n	80150c6 <__swbuf_r+0x5a>
 80150bc:	89a3      	ldrh	r3, [r4, #12]
 80150be:	07db      	lsls	r3, r3, #31
 80150c0:	d506      	bpl.n	80150d0 <__swbuf_r+0x64>
 80150c2:	2e0a      	cmp	r6, #10
 80150c4:	d104      	bne.n	80150d0 <__swbuf_r+0x64>
 80150c6:	4621      	mov	r1, r4
 80150c8:	4628      	mov	r0, r5
 80150ca:	f7ff f961 	bl	8014390 <_fflush_r>
 80150ce:	b938      	cbnz	r0, 80150e0 <__swbuf_r+0x74>
 80150d0:	4638      	mov	r0, r7
 80150d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150d4:	4621      	mov	r1, r4
 80150d6:	4628      	mov	r0, r5
 80150d8:	f000 f806 	bl	80150e8 <__swsetup_r>
 80150dc:	2800      	cmp	r0, #0
 80150de:	d0d5      	beq.n	801508c <__swbuf_r+0x20>
 80150e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80150e4:	e7f4      	b.n	80150d0 <__swbuf_r+0x64>
	...

080150e8 <__swsetup_r>:
 80150e8:	b538      	push	{r3, r4, r5, lr}
 80150ea:	4b2a      	ldr	r3, [pc, #168]	; (8015194 <__swsetup_r+0xac>)
 80150ec:	4605      	mov	r5, r0
 80150ee:	6818      	ldr	r0, [r3, #0]
 80150f0:	460c      	mov	r4, r1
 80150f2:	b118      	cbz	r0, 80150fc <__swsetup_r+0x14>
 80150f4:	6a03      	ldr	r3, [r0, #32]
 80150f6:	b90b      	cbnz	r3, 80150fc <__swsetup_r+0x14>
 80150f8:	f7fd ff22 	bl	8012f40 <__sinit>
 80150fc:	89a3      	ldrh	r3, [r4, #12]
 80150fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015102:	0718      	lsls	r0, r3, #28
 8015104:	d422      	bmi.n	801514c <__swsetup_r+0x64>
 8015106:	06d9      	lsls	r1, r3, #27
 8015108:	d407      	bmi.n	801511a <__swsetup_r+0x32>
 801510a:	2309      	movs	r3, #9
 801510c:	602b      	str	r3, [r5, #0]
 801510e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015112:	81a3      	strh	r3, [r4, #12]
 8015114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015118:	e034      	b.n	8015184 <__swsetup_r+0x9c>
 801511a:	0758      	lsls	r0, r3, #29
 801511c:	d512      	bpl.n	8015144 <__swsetup_r+0x5c>
 801511e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015120:	b141      	cbz	r1, 8015134 <__swsetup_r+0x4c>
 8015122:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015126:	4299      	cmp	r1, r3
 8015128:	d002      	beq.n	8015130 <__swsetup_r+0x48>
 801512a:	4628      	mov	r0, r5
 801512c:	f7ff fdf4 	bl	8014d18 <_free_r>
 8015130:	2300      	movs	r3, #0
 8015132:	6363      	str	r3, [r4, #52]	; 0x34
 8015134:	89a3      	ldrh	r3, [r4, #12]
 8015136:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801513a:	81a3      	strh	r3, [r4, #12]
 801513c:	2300      	movs	r3, #0
 801513e:	6063      	str	r3, [r4, #4]
 8015140:	6923      	ldr	r3, [r4, #16]
 8015142:	6023      	str	r3, [r4, #0]
 8015144:	89a3      	ldrh	r3, [r4, #12]
 8015146:	f043 0308 	orr.w	r3, r3, #8
 801514a:	81a3      	strh	r3, [r4, #12]
 801514c:	6923      	ldr	r3, [r4, #16]
 801514e:	b94b      	cbnz	r3, 8015164 <__swsetup_r+0x7c>
 8015150:	89a3      	ldrh	r3, [r4, #12]
 8015152:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801515a:	d003      	beq.n	8015164 <__swsetup_r+0x7c>
 801515c:	4621      	mov	r1, r4
 801515e:	4628      	mov	r0, r5
 8015160:	f000 f84d 	bl	80151fe <__smakebuf_r>
 8015164:	89a0      	ldrh	r0, [r4, #12]
 8015166:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801516a:	f010 0301 	ands.w	r3, r0, #1
 801516e:	d00a      	beq.n	8015186 <__swsetup_r+0x9e>
 8015170:	2300      	movs	r3, #0
 8015172:	60a3      	str	r3, [r4, #8]
 8015174:	6963      	ldr	r3, [r4, #20]
 8015176:	425b      	negs	r3, r3
 8015178:	61a3      	str	r3, [r4, #24]
 801517a:	6923      	ldr	r3, [r4, #16]
 801517c:	b943      	cbnz	r3, 8015190 <__swsetup_r+0xa8>
 801517e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015182:	d1c4      	bne.n	801510e <__swsetup_r+0x26>
 8015184:	bd38      	pop	{r3, r4, r5, pc}
 8015186:	0781      	lsls	r1, r0, #30
 8015188:	bf58      	it	pl
 801518a:	6963      	ldrpl	r3, [r4, #20]
 801518c:	60a3      	str	r3, [r4, #8]
 801518e:	e7f4      	b.n	801517a <__swsetup_r+0x92>
 8015190:	2000      	movs	r0, #0
 8015192:	e7f7      	b.n	8015184 <__swsetup_r+0x9c>
 8015194:	20000068 	.word	0x20000068

08015198 <__ascii_wctomb>:
 8015198:	b149      	cbz	r1, 80151ae <__ascii_wctomb+0x16>
 801519a:	2aff      	cmp	r2, #255	; 0xff
 801519c:	bf85      	ittet	hi
 801519e:	238a      	movhi	r3, #138	; 0x8a
 80151a0:	6003      	strhi	r3, [r0, #0]
 80151a2:	700a      	strbls	r2, [r1, #0]
 80151a4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80151a8:	bf98      	it	ls
 80151aa:	2001      	movls	r0, #1
 80151ac:	4770      	bx	lr
 80151ae:	4608      	mov	r0, r1
 80151b0:	4770      	bx	lr

080151b2 <__swhatbuf_r>:
 80151b2:	b570      	push	{r4, r5, r6, lr}
 80151b4:	460c      	mov	r4, r1
 80151b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151ba:	2900      	cmp	r1, #0
 80151bc:	b096      	sub	sp, #88	; 0x58
 80151be:	4615      	mov	r5, r2
 80151c0:	461e      	mov	r6, r3
 80151c2:	da0d      	bge.n	80151e0 <__swhatbuf_r+0x2e>
 80151c4:	89a3      	ldrh	r3, [r4, #12]
 80151c6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80151ca:	f04f 0100 	mov.w	r1, #0
 80151ce:	bf0c      	ite	eq
 80151d0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80151d4:	2340      	movne	r3, #64	; 0x40
 80151d6:	2000      	movs	r0, #0
 80151d8:	6031      	str	r1, [r6, #0]
 80151da:	602b      	str	r3, [r5, #0]
 80151dc:	b016      	add	sp, #88	; 0x58
 80151de:	bd70      	pop	{r4, r5, r6, pc}
 80151e0:	466a      	mov	r2, sp
 80151e2:	f000 f849 	bl	8015278 <_fstat_r>
 80151e6:	2800      	cmp	r0, #0
 80151e8:	dbec      	blt.n	80151c4 <__swhatbuf_r+0x12>
 80151ea:	9901      	ldr	r1, [sp, #4]
 80151ec:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80151f0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80151f4:	4259      	negs	r1, r3
 80151f6:	4159      	adcs	r1, r3
 80151f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80151fc:	e7eb      	b.n	80151d6 <__swhatbuf_r+0x24>

080151fe <__smakebuf_r>:
 80151fe:	898b      	ldrh	r3, [r1, #12]
 8015200:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015202:	079d      	lsls	r5, r3, #30
 8015204:	4606      	mov	r6, r0
 8015206:	460c      	mov	r4, r1
 8015208:	d507      	bpl.n	801521a <__smakebuf_r+0x1c>
 801520a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801520e:	6023      	str	r3, [r4, #0]
 8015210:	6123      	str	r3, [r4, #16]
 8015212:	2301      	movs	r3, #1
 8015214:	6163      	str	r3, [r4, #20]
 8015216:	b002      	add	sp, #8
 8015218:	bd70      	pop	{r4, r5, r6, pc}
 801521a:	ab01      	add	r3, sp, #4
 801521c:	466a      	mov	r2, sp
 801521e:	f7ff ffc8 	bl	80151b2 <__swhatbuf_r>
 8015222:	9900      	ldr	r1, [sp, #0]
 8015224:	4605      	mov	r5, r0
 8015226:	4630      	mov	r0, r6
 8015228:	f7fe ffac 	bl	8014184 <_malloc_r>
 801522c:	b948      	cbnz	r0, 8015242 <__smakebuf_r+0x44>
 801522e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015232:	059a      	lsls	r2, r3, #22
 8015234:	d4ef      	bmi.n	8015216 <__smakebuf_r+0x18>
 8015236:	f023 0303 	bic.w	r3, r3, #3
 801523a:	f043 0302 	orr.w	r3, r3, #2
 801523e:	81a3      	strh	r3, [r4, #12]
 8015240:	e7e3      	b.n	801520a <__smakebuf_r+0xc>
 8015242:	89a3      	ldrh	r3, [r4, #12]
 8015244:	6020      	str	r0, [r4, #0]
 8015246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801524a:	81a3      	strh	r3, [r4, #12]
 801524c:	9b00      	ldr	r3, [sp, #0]
 801524e:	6163      	str	r3, [r4, #20]
 8015250:	9b01      	ldr	r3, [sp, #4]
 8015252:	6120      	str	r0, [r4, #16]
 8015254:	b15b      	cbz	r3, 801526e <__smakebuf_r+0x70>
 8015256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801525a:	4630      	mov	r0, r6
 801525c:	f000 f81e 	bl	801529c <_isatty_r>
 8015260:	b128      	cbz	r0, 801526e <__smakebuf_r+0x70>
 8015262:	89a3      	ldrh	r3, [r4, #12]
 8015264:	f023 0303 	bic.w	r3, r3, #3
 8015268:	f043 0301 	orr.w	r3, r3, #1
 801526c:	81a3      	strh	r3, [r4, #12]
 801526e:	89a3      	ldrh	r3, [r4, #12]
 8015270:	431d      	orrs	r5, r3
 8015272:	81a5      	strh	r5, [r4, #12]
 8015274:	e7cf      	b.n	8015216 <__smakebuf_r+0x18>
	...

08015278 <_fstat_r>:
 8015278:	b538      	push	{r3, r4, r5, lr}
 801527a:	4d07      	ldr	r5, [pc, #28]	; (8015298 <_fstat_r+0x20>)
 801527c:	2300      	movs	r3, #0
 801527e:	4604      	mov	r4, r0
 8015280:	4608      	mov	r0, r1
 8015282:	4611      	mov	r1, r2
 8015284:	602b      	str	r3, [r5, #0]
 8015286:	f7f5 f9ce 	bl	800a626 <_fstat>
 801528a:	1c43      	adds	r3, r0, #1
 801528c:	d102      	bne.n	8015294 <_fstat_r+0x1c>
 801528e:	682b      	ldr	r3, [r5, #0]
 8015290:	b103      	cbz	r3, 8015294 <_fstat_r+0x1c>
 8015292:	6023      	str	r3, [r4, #0]
 8015294:	bd38      	pop	{r3, r4, r5, pc}
 8015296:	bf00      	nop
 8015298:	20002a2c 	.word	0x20002a2c

0801529c <_isatty_r>:
 801529c:	b538      	push	{r3, r4, r5, lr}
 801529e:	4d06      	ldr	r5, [pc, #24]	; (80152b8 <_isatty_r+0x1c>)
 80152a0:	2300      	movs	r3, #0
 80152a2:	4604      	mov	r4, r0
 80152a4:	4608      	mov	r0, r1
 80152a6:	602b      	str	r3, [r5, #0]
 80152a8:	f7f5 f9cd 	bl	800a646 <_isatty>
 80152ac:	1c43      	adds	r3, r0, #1
 80152ae:	d102      	bne.n	80152b6 <_isatty_r+0x1a>
 80152b0:	682b      	ldr	r3, [r5, #0]
 80152b2:	b103      	cbz	r3, 80152b6 <_isatty_r+0x1a>
 80152b4:	6023      	str	r3, [r4, #0]
 80152b6:	bd38      	pop	{r3, r4, r5, pc}
 80152b8:	20002a2c 	.word	0x20002a2c

080152bc <_raise_r>:
 80152bc:	291f      	cmp	r1, #31
 80152be:	b538      	push	{r3, r4, r5, lr}
 80152c0:	4604      	mov	r4, r0
 80152c2:	460d      	mov	r5, r1
 80152c4:	d904      	bls.n	80152d0 <_raise_r+0x14>
 80152c6:	2316      	movs	r3, #22
 80152c8:	6003      	str	r3, [r0, #0]
 80152ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80152ce:	bd38      	pop	{r3, r4, r5, pc}
 80152d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80152d2:	b112      	cbz	r2, 80152da <_raise_r+0x1e>
 80152d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80152d8:	b94b      	cbnz	r3, 80152ee <_raise_r+0x32>
 80152da:	4620      	mov	r0, r4
 80152dc:	f000 f830 	bl	8015340 <_getpid_r>
 80152e0:	462a      	mov	r2, r5
 80152e2:	4601      	mov	r1, r0
 80152e4:	4620      	mov	r0, r4
 80152e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80152ea:	f000 b817 	b.w	801531c <_kill_r>
 80152ee:	2b01      	cmp	r3, #1
 80152f0:	d00a      	beq.n	8015308 <_raise_r+0x4c>
 80152f2:	1c59      	adds	r1, r3, #1
 80152f4:	d103      	bne.n	80152fe <_raise_r+0x42>
 80152f6:	2316      	movs	r3, #22
 80152f8:	6003      	str	r3, [r0, #0]
 80152fa:	2001      	movs	r0, #1
 80152fc:	e7e7      	b.n	80152ce <_raise_r+0x12>
 80152fe:	2400      	movs	r4, #0
 8015300:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015304:	4628      	mov	r0, r5
 8015306:	4798      	blx	r3
 8015308:	2000      	movs	r0, #0
 801530a:	e7e0      	b.n	80152ce <_raise_r+0x12>

0801530c <raise>:
 801530c:	4b02      	ldr	r3, [pc, #8]	; (8015318 <raise+0xc>)
 801530e:	4601      	mov	r1, r0
 8015310:	6818      	ldr	r0, [r3, #0]
 8015312:	f7ff bfd3 	b.w	80152bc <_raise_r>
 8015316:	bf00      	nop
 8015318:	20000068 	.word	0x20000068

0801531c <_kill_r>:
 801531c:	b538      	push	{r3, r4, r5, lr}
 801531e:	4d07      	ldr	r5, [pc, #28]	; (801533c <_kill_r+0x20>)
 8015320:	2300      	movs	r3, #0
 8015322:	4604      	mov	r4, r0
 8015324:	4608      	mov	r0, r1
 8015326:	4611      	mov	r1, r2
 8015328:	602b      	str	r3, [r5, #0]
 801532a:	f7f5 f91d 	bl	800a568 <_kill>
 801532e:	1c43      	adds	r3, r0, #1
 8015330:	d102      	bne.n	8015338 <_kill_r+0x1c>
 8015332:	682b      	ldr	r3, [r5, #0]
 8015334:	b103      	cbz	r3, 8015338 <_kill_r+0x1c>
 8015336:	6023      	str	r3, [r4, #0]
 8015338:	bd38      	pop	{r3, r4, r5, pc}
 801533a:	bf00      	nop
 801533c:	20002a2c 	.word	0x20002a2c

08015340 <_getpid_r>:
 8015340:	f7f5 b90a 	b.w	800a558 <_getpid>

08015344 <atan2>:
 8015344:	f000 b800 	b.w	8015348 <__ieee754_atan2>

08015348 <__ieee754_atan2>:
 8015348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801534c:	ec57 6b11 	vmov	r6, r7, d1
 8015350:	4273      	negs	r3, r6
 8015352:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80154d0 <__ieee754_atan2+0x188>
 8015356:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801535a:	4333      	orrs	r3, r6
 801535c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8015360:	4543      	cmp	r3, r8
 8015362:	ec51 0b10 	vmov	r0, r1, d0
 8015366:	ee11 5a10 	vmov	r5, s2
 801536a:	d80a      	bhi.n	8015382 <__ieee754_atan2+0x3a>
 801536c:	4244      	negs	r4, r0
 801536e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015372:	4304      	orrs	r4, r0
 8015374:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8015378:	4544      	cmp	r4, r8
 801537a:	ee10 9a10 	vmov	r9, s0
 801537e:	468e      	mov	lr, r1
 8015380:	d907      	bls.n	8015392 <__ieee754_atan2+0x4a>
 8015382:	4632      	mov	r2, r6
 8015384:	463b      	mov	r3, r7
 8015386:	f7ea ffa1 	bl	80002cc <__adddf3>
 801538a:	ec41 0b10 	vmov	d0, r0, r1
 801538e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015392:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8015396:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801539a:	4334      	orrs	r4, r6
 801539c:	d103      	bne.n	80153a6 <__ieee754_atan2+0x5e>
 801539e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80153a2:	f000 b899 	b.w	80154d8 <atan>
 80153a6:	17bc      	asrs	r4, r7, #30
 80153a8:	f004 0402 	and.w	r4, r4, #2
 80153ac:	ea53 0909 	orrs.w	r9, r3, r9
 80153b0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80153b4:	d107      	bne.n	80153c6 <__ieee754_atan2+0x7e>
 80153b6:	2c02      	cmp	r4, #2
 80153b8:	d05f      	beq.n	801547a <__ieee754_atan2+0x132>
 80153ba:	2c03      	cmp	r4, #3
 80153bc:	d1e5      	bne.n	801538a <__ieee754_atan2+0x42>
 80153be:	a140      	add	r1, pc, #256	; (adr r1, 80154c0 <__ieee754_atan2+0x178>)
 80153c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80153c4:	e7e1      	b.n	801538a <__ieee754_atan2+0x42>
 80153c6:	4315      	orrs	r5, r2
 80153c8:	d106      	bne.n	80153d8 <__ieee754_atan2+0x90>
 80153ca:	f1be 0f00 	cmp.w	lr, #0
 80153ce:	da5f      	bge.n	8015490 <__ieee754_atan2+0x148>
 80153d0:	a13d      	add	r1, pc, #244	; (adr r1, 80154c8 <__ieee754_atan2+0x180>)
 80153d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80153d6:	e7d8      	b.n	801538a <__ieee754_atan2+0x42>
 80153d8:	4542      	cmp	r2, r8
 80153da:	d10f      	bne.n	80153fc <__ieee754_atan2+0xb4>
 80153dc:	4293      	cmp	r3, r2
 80153de:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80153e2:	d107      	bne.n	80153f4 <__ieee754_atan2+0xac>
 80153e4:	2c02      	cmp	r4, #2
 80153e6:	d84c      	bhi.n	8015482 <__ieee754_atan2+0x13a>
 80153e8:	4b33      	ldr	r3, [pc, #204]	; (80154b8 <__ieee754_atan2+0x170>)
 80153ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80153ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80153f2:	e7ca      	b.n	801538a <__ieee754_atan2+0x42>
 80153f4:	2c02      	cmp	r4, #2
 80153f6:	d848      	bhi.n	801548a <__ieee754_atan2+0x142>
 80153f8:	4b30      	ldr	r3, [pc, #192]	; (80154bc <__ieee754_atan2+0x174>)
 80153fa:	e7f6      	b.n	80153ea <__ieee754_atan2+0xa2>
 80153fc:	4543      	cmp	r3, r8
 80153fe:	d0e4      	beq.n	80153ca <__ieee754_atan2+0x82>
 8015400:	1a9b      	subs	r3, r3, r2
 8015402:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8015406:	ea4f 5223 	mov.w	r2, r3, asr #20
 801540a:	da1e      	bge.n	801544a <__ieee754_atan2+0x102>
 801540c:	2f00      	cmp	r7, #0
 801540e:	da01      	bge.n	8015414 <__ieee754_atan2+0xcc>
 8015410:	323c      	adds	r2, #60	; 0x3c
 8015412:	db1e      	blt.n	8015452 <__ieee754_atan2+0x10a>
 8015414:	4632      	mov	r2, r6
 8015416:	463b      	mov	r3, r7
 8015418:	f7eb fa38 	bl	800088c <__aeabi_ddiv>
 801541c:	ec41 0b10 	vmov	d0, r0, r1
 8015420:	f000 f9fa 	bl	8015818 <fabs>
 8015424:	f000 f858 	bl	80154d8 <atan>
 8015428:	ec51 0b10 	vmov	r0, r1, d0
 801542c:	2c01      	cmp	r4, #1
 801542e:	d013      	beq.n	8015458 <__ieee754_atan2+0x110>
 8015430:	2c02      	cmp	r4, #2
 8015432:	d015      	beq.n	8015460 <__ieee754_atan2+0x118>
 8015434:	2c00      	cmp	r4, #0
 8015436:	d0a8      	beq.n	801538a <__ieee754_atan2+0x42>
 8015438:	a317      	add	r3, pc, #92	; (adr r3, 8015498 <__ieee754_atan2+0x150>)
 801543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801543e:	f7ea ff43 	bl	80002c8 <__aeabi_dsub>
 8015442:	a317      	add	r3, pc, #92	; (adr r3, 80154a0 <__ieee754_atan2+0x158>)
 8015444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015448:	e014      	b.n	8015474 <__ieee754_atan2+0x12c>
 801544a:	a117      	add	r1, pc, #92	; (adr r1, 80154a8 <__ieee754_atan2+0x160>)
 801544c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015450:	e7ec      	b.n	801542c <__ieee754_atan2+0xe4>
 8015452:	2000      	movs	r0, #0
 8015454:	2100      	movs	r1, #0
 8015456:	e7e9      	b.n	801542c <__ieee754_atan2+0xe4>
 8015458:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801545c:	4619      	mov	r1, r3
 801545e:	e794      	b.n	801538a <__ieee754_atan2+0x42>
 8015460:	a30d      	add	r3, pc, #52	; (adr r3, 8015498 <__ieee754_atan2+0x150>)
 8015462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015466:	f7ea ff2f 	bl	80002c8 <__aeabi_dsub>
 801546a:	4602      	mov	r2, r0
 801546c:	460b      	mov	r3, r1
 801546e:	a10c      	add	r1, pc, #48	; (adr r1, 80154a0 <__ieee754_atan2+0x158>)
 8015470:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015474:	f7ea ff28 	bl	80002c8 <__aeabi_dsub>
 8015478:	e787      	b.n	801538a <__ieee754_atan2+0x42>
 801547a:	a109      	add	r1, pc, #36	; (adr r1, 80154a0 <__ieee754_atan2+0x158>)
 801547c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015480:	e783      	b.n	801538a <__ieee754_atan2+0x42>
 8015482:	a10b      	add	r1, pc, #44	; (adr r1, 80154b0 <__ieee754_atan2+0x168>)
 8015484:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015488:	e77f      	b.n	801538a <__ieee754_atan2+0x42>
 801548a:	2000      	movs	r0, #0
 801548c:	2100      	movs	r1, #0
 801548e:	e77c      	b.n	801538a <__ieee754_atan2+0x42>
 8015490:	a105      	add	r1, pc, #20	; (adr r1, 80154a8 <__ieee754_atan2+0x160>)
 8015492:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015496:	e778      	b.n	801538a <__ieee754_atan2+0x42>
 8015498:	33145c07 	.word	0x33145c07
 801549c:	3ca1a626 	.word	0x3ca1a626
 80154a0:	54442d18 	.word	0x54442d18
 80154a4:	400921fb 	.word	0x400921fb
 80154a8:	54442d18 	.word	0x54442d18
 80154ac:	3ff921fb 	.word	0x3ff921fb
 80154b0:	54442d18 	.word	0x54442d18
 80154b4:	3fe921fb 	.word	0x3fe921fb
 80154b8:	08015c50 	.word	0x08015c50
 80154bc:	08015c68 	.word	0x08015c68
 80154c0:	54442d18 	.word	0x54442d18
 80154c4:	c00921fb 	.word	0xc00921fb
 80154c8:	54442d18 	.word	0x54442d18
 80154cc:	bff921fb 	.word	0xbff921fb
 80154d0:	7ff00000 	.word	0x7ff00000
 80154d4:	00000000 	.word	0x00000000

080154d8 <atan>:
 80154d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154dc:	ec55 4b10 	vmov	r4, r5, d0
 80154e0:	4bc3      	ldr	r3, [pc, #780]	; (80157f0 <atan+0x318>)
 80154e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80154e6:	429e      	cmp	r6, r3
 80154e8:	46ab      	mov	fp, r5
 80154ea:	dd18      	ble.n	801551e <atan+0x46>
 80154ec:	4bc1      	ldr	r3, [pc, #772]	; (80157f4 <atan+0x31c>)
 80154ee:	429e      	cmp	r6, r3
 80154f0:	dc01      	bgt.n	80154f6 <atan+0x1e>
 80154f2:	d109      	bne.n	8015508 <atan+0x30>
 80154f4:	b144      	cbz	r4, 8015508 <atan+0x30>
 80154f6:	4622      	mov	r2, r4
 80154f8:	462b      	mov	r3, r5
 80154fa:	4620      	mov	r0, r4
 80154fc:	4629      	mov	r1, r5
 80154fe:	f7ea fee5 	bl	80002cc <__adddf3>
 8015502:	4604      	mov	r4, r0
 8015504:	460d      	mov	r5, r1
 8015506:	e006      	b.n	8015516 <atan+0x3e>
 8015508:	f1bb 0f00 	cmp.w	fp, #0
 801550c:	f300 8131 	bgt.w	8015772 <atan+0x29a>
 8015510:	a59b      	add	r5, pc, #620	; (adr r5, 8015780 <atan+0x2a8>)
 8015512:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015516:	ec45 4b10 	vmov	d0, r4, r5
 801551a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801551e:	4bb6      	ldr	r3, [pc, #728]	; (80157f8 <atan+0x320>)
 8015520:	429e      	cmp	r6, r3
 8015522:	dc14      	bgt.n	801554e <atan+0x76>
 8015524:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8015528:	429e      	cmp	r6, r3
 801552a:	dc0d      	bgt.n	8015548 <atan+0x70>
 801552c:	a396      	add	r3, pc, #600	; (adr r3, 8015788 <atan+0x2b0>)
 801552e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015532:	ee10 0a10 	vmov	r0, s0
 8015536:	4629      	mov	r1, r5
 8015538:	f7ea fec8 	bl	80002cc <__adddf3>
 801553c:	4baf      	ldr	r3, [pc, #700]	; (80157fc <atan+0x324>)
 801553e:	2200      	movs	r2, #0
 8015540:	f7eb fb0a 	bl	8000b58 <__aeabi_dcmpgt>
 8015544:	2800      	cmp	r0, #0
 8015546:	d1e6      	bne.n	8015516 <atan+0x3e>
 8015548:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801554c:	e02b      	b.n	80155a6 <atan+0xce>
 801554e:	f000 f963 	bl	8015818 <fabs>
 8015552:	4bab      	ldr	r3, [pc, #684]	; (8015800 <atan+0x328>)
 8015554:	429e      	cmp	r6, r3
 8015556:	ec55 4b10 	vmov	r4, r5, d0
 801555a:	f300 80bf 	bgt.w	80156dc <atan+0x204>
 801555e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8015562:	429e      	cmp	r6, r3
 8015564:	f300 80a0 	bgt.w	80156a8 <atan+0x1d0>
 8015568:	ee10 2a10 	vmov	r2, s0
 801556c:	ee10 0a10 	vmov	r0, s0
 8015570:	462b      	mov	r3, r5
 8015572:	4629      	mov	r1, r5
 8015574:	f7ea feaa 	bl	80002cc <__adddf3>
 8015578:	4ba0      	ldr	r3, [pc, #640]	; (80157fc <atan+0x324>)
 801557a:	2200      	movs	r2, #0
 801557c:	f7ea fea4 	bl	80002c8 <__aeabi_dsub>
 8015580:	2200      	movs	r2, #0
 8015582:	4606      	mov	r6, r0
 8015584:	460f      	mov	r7, r1
 8015586:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801558a:	4620      	mov	r0, r4
 801558c:	4629      	mov	r1, r5
 801558e:	f7ea fe9d 	bl	80002cc <__adddf3>
 8015592:	4602      	mov	r2, r0
 8015594:	460b      	mov	r3, r1
 8015596:	4630      	mov	r0, r6
 8015598:	4639      	mov	r1, r7
 801559a:	f7eb f977 	bl	800088c <__aeabi_ddiv>
 801559e:	f04f 0a00 	mov.w	sl, #0
 80155a2:	4604      	mov	r4, r0
 80155a4:	460d      	mov	r5, r1
 80155a6:	4622      	mov	r2, r4
 80155a8:	462b      	mov	r3, r5
 80155aa:	4620      	mov	r0, r4
 80155ac:	4629      	mov	r1, r5
 80155ae:	f7eb f843 	bl	8000638 <__aeabi_dmul>
 80155b2:	4602      	mov	r2, r0
 80155b4:	460b      	mov	r3, r1
 80155b6:	4680      	mov	r8, r0
 80155b8:	4689      	mov	r9, r1
 80155ba:	f7eb f83d 	bl	8000638 <__aeabi_dmul>
 80155be:	a374      	add	r3, pc, #464	; (adr r3, 8015790 <atan+0x2b8>)
 80155c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155c4:	4606      	mov	r6, r0
 80155c6:	460f      	mov	r7, r1
 80155c8:	f7eb f836 	bl	8000638 <__aeabi_dmul>
 80155cc:	a372      	add	r3, pc, #456	; (adr r3, 8015798 <atan+0x2c0>)
 80155ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155d2:	f7ea fe7b 	bl	80002cc <__adddf3>
 80155d6:	4632      	mov	r2, r6
 80155d8:	463b      	mov	r3, r7
 80155da:	f7eb f82d 	bl	8000638 <__aeabi_dmul>
 80155de:	a370      	add	r3, pc, #448	; (adr r3, 80157a0 <atan+0x2c8>)
 80155e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155e4:	f7ea fe72 	bl	80002cc <__adddf3>
 80155e8:	4632      	mov	r2, r6
 80155ea:	463b      	mov	r3, r7
 80155ec:	f7eb f824 	bl	8000638 <__aeabi_dmul>
 80155f0:	a36d      	add	r3, pc, #436	; (adr r3, 80157a8 <atan+0x2d0>)
 80155f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155f6:	f7ea fe69 	bl	80002cc <__adddf3>
 80155fa:	4632      	mov	r2, r6
 80155fc:	463b      	mov	r3, r7
 80155fe:	f7eb f81b 	bl	8000638 <__aeabi_dmul>
 8015602:	a36b      	add	r3, pc, #428	; (adr r3, 80157b0 <atan+0x2d8>)
 8015604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015608:	f7ea fe60 	bl	80002cc <__adddf3>
 801560c:	4632      	mov	r2, r6
 801560e:	463b      	mov	r3, r7
 8015610:	f7eb f812 	bl	8000638 <__aeabi_dmul>
 8015614:	a368      	add	r3, pc, #416	; (adr r3, 80157b8 <atan+0x2e0>)
 8015616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801561a:	f7ea fe57 	bl	80002cc <__adddf3>
 801561e:	4642      	mov	r2, r8
 8015620:	464b      	mov	r3, r9
 8015622:	f7eb f809 	bl	8000638 <__aeabi_dmul>
 8015626:	a366      	add	r3, pc, #408	; (adr r3, 80157c0 <atan+0x2e8>)
 8015628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801562c:	4680      	mov	r8, r0
 801562e:	4689      	mov	r9, r1
 8015630:	4630      	mov	r0, r6
 8015632:	4639      	mov	r1, r7
 8015634:	f7eb f800 	bl	8000638 <__aeabi_dmul>
 8015638:	a363      	add	r3, pc, #396	; (adr r3, 80157c8 <atan+0x2f0>)
 801563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801563e:	f7ea fe43 	bl	80002c8 <__aeabi_dsub>
 8015642:	4632      	mov	r2, r6
 8015644:	463b      	mov	r3, r7
 8015646:	f7ea fff7 	bl	8000638 <__aeabi_dmul>
 801564a:	a361      	add	r3, pc, #388	; (adr r3, 80157d0 <atan+0x2f8>)
 801564c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015650:	f7ea fe3a 	bl	80002c8 <__aeabi_dsub>
 8015654:	4632      	mov	r2, r6
 8015656:	463b      	mov	r3, r7
 8015658:	f7ea ffee 	bl	8000638 <__aeabi_dmul>
 801565c:	a35e      	add	r3, pc, #376	; (adr r3, 80157d8 <atan+0x300>)
 801565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015662:	f7ea fe31 	bl	80002c8 <__aeabi_dsub>
 8015666:	4632      	mov	r2, r6
 8015668:	463b      	mov	r3, r7
 801566a:	f7ea ffe5 	bl	8000638 <__aeabi_dmul>
 801566e:	a35c      	add	r3, pc, #368	; (adr r3, 80157e0 <atan+0x308>)
 8015670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015674:	f7ea fe28 	bl	80002c8 <__aeabi_dsub>
 8015678:	4632      	mov	r2, r6
 801567a:	463b      	mov	r3, r7
 801567c:	f7ea ffdc 	bl	8000638 <__aeabi_dmul>
 8015680:	4602      	mov	r2, r0
 8015682:	460b      	mov	r3, r1
 8015684:	4640      	mov	r0, r8
 8015686:	4649      	mov	r1, r9
 8015688:	f7ea fe20 	bl	80002cc <__adddf3>
 801568c:	4622      	mov	r2, r4
 801568e:	462b      	mov	r3, r5
 8015690:	f7ea ffd2 	bl	8000638 <__aeabi_dmul>
 8015694:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8015698:	4602      	mov	r2, r0
 801569a:	460b      	mov	r3, r1
 801569c:	d14b      	bne.n	8015736 <atan+0x25e>
 801569e:	4620      	mov	r0, r4
 80156a0:	4629      	mov	r1, r5
 80156a2:	f7ea fe11 	bl	80002c8 <__aeabi_dsub>
 80156a6:	e72c      	b.n	8015502 <atan+0x2a>
 80156a8:	ee10 0a10 	vmov	r0, s0
 80156ac:	4b53      	ldr	r3, [pc, #332]	; (80157fc <atan+0x324>)
 80156ae:	2200      	movs	r2, #0
 80156b0:	4629      	mov	r1, r5
 80156b2:	f7ea fe09 	bl	80002c8 <__aeabi_dsub>
 80156b6:	4b51      	ldr	r3, [pc, #324]	; (80157fc <atan+0x324>)
 80156b8:	4606      	mov	r6, r0
 80156ba:	460f      	mov	r7, r1
 80156bc:	2200      	movs	r2, #0
 80156be:	4620      	mov	r0, r4
 80156c0:	4629      	mov	r1, r5
 80156c2:	f7ea fe03 	bl	80002cc <__adddf3>
 80156c6:	4602      	mov	r2, r0
 80156c8:	460b      	mov	r3, r1
 80156ca:	4630      	mov	r0, r6
 80156cc:	4639      	mov	r1, r7
 80156ce:	f7eb f8dd 	bl	800088c <__aeabi_ddiv>
 80156d2:	f04f 0a01 	mov.w	sl, #1
 80156d6:	4604      	mov	r4, r0
 80156d8:	460d      	mov	r5, r1
 80156da:	e764      	b.n	80155a6 <atan+0xce>
 80156dc:	4b49      	ldr	r3, [pc, #292]	; (8015804 <atan+0x32c>)
 80156de:	429e      	cmp	r6, r3
 80156e0:	da1d      	bge.n	801571e <atan+0x246>
 80156e2:	ee10 0a10 	vmov	r0, s0
 80156e6:	4b48      	ldr	r3, [pc, #288]	; (8015808 <atan+0x330>)
 80156e8:	2200      	movs	r2, #0
 80156ea:	4629      	mov	r1, r5
 80156ec:	f7ea fdec 	bl	80002c8 <__aeabi_dsub>
 80156f0:	4b45      	ldr	r3, [pc, #276]	; (8015808 <atan+0x330>)
 80156f2:	4606      	mov	r6, r0
 80156f4:	460f      	mov	r7, r1
 80156f6:	2200      	movs	r2, #0
 80156f8:	4620      	mov	r0, r4
 80156fa:	4629      	mov	r1, r5
 80156fc:	f7ea ff9c 	bl	8000638 <__aeabi_dmul>
 8015700:	4b3e      	ldr	r3, [pc, #248]	; (80157fc <atan+0x324>)
 8015702:	2200      	movs	r2, #0
 8015704:	f7ea fde2 	bl	80002cc <__adddf3>
 8015708:	4602      	mov	r2, r0
 801570a:	460b      	mov	r3, r1
 801570c:	4630      	mov	r0, r6
 801570e:	4639      	mov	r1, r7
 8015710:	f7eb f8bc 	bl	800088c <__aeabi_ddiv>
 8015714:	f04f 0a02 	mov.w	sl, #2
 8015718:	4604      	mov	r4, r0
 801571a:	460d      	mov	r5, r1
 801571c:	e743      	b.n	80155a6 <atan+0xce>
 801571e:	462b      	mov	r3, r5
 8015720:	ee10 2a10 	vmov	r2, s0
 8015724:	4939      	ldr	r1, [pc, #228]	; (801580c <atan+0x334>)
 8015726:	2000      	movs	r0, #0
 8015728:	f7eb f8b0 	bl	800088c <__aeabi_ddiv>
 801572c:	f04f 0a03 	mov.w	sl, #3
 8015730:	4604      	mov	r4, r0
 8015732:	460d      	mov	r5, r1
 8015734:	e737      	b.n	80155a6 <atan+0xce>
 8015736:	4b36      	ldr	r3, [pc, #216]	; (8015810 <atan+0x338>)
 8015738:	4e36      	ldr	r6, [pc, #216]	; (8015814 <atan+0x33c>)
 801573a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801573e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015742:	f7ea fdc1 	bl	80002c8 <__aeabi_dsub>
 8015746:	4622      	mov	r2, r4
 8015748:	462b      	mov	r3, r5
 801574a:	f7ea fdbd 	bl	80002c8 <__aeabi_dsub>
 801574e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8015752:	4602      	mov	r2, r0
 8015754:	460b      	mov	r3, r1
 8015756:	e9d6 0100 	ldrd	r0, r1, [r6]
 801575a:	f7ea fdb5 	bl	80002c8 <__aeabi_dsub>
 801575e:	f1bb 0f00 	cmp.w	fp, #0
 8015762:	4604      	mov	r4, r0
 8015764:	460d      	mov	r5, r1
 8015766:	f6bf aed6 	bge.w	8015516 <atan+0x3e>
 801576a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801576e:	461d      	mov	r5, r3
 8015770:	e6d1      	b.n	8015516 <atan+0x3e>
 8015772:	a51d      	add	r5, pc, #116	; (adr r5, 80157e8 <atan+0x310>)
 8015774:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015778:	e6cd      	b.n	8015516 <atan+0x3e>
 801577a:	bf00      	nop
 801577c:	f3af 8000 	nop.w
 8015780:	54442d18 	.word	0x54442d18
 8015784:	bff921fb 	.word	0xbff921fb
 8015788:	8800759c 	.word	0x8800759c
 801578c:	7e37e43c 	.word	0x7e37e43c
 8015790:	e322da11 	.word	0xe322da11
 8015794:	3f90ad3a 	.word	0x3f90ad3a
 8015798:	24760deb 	.word	0x24760deb
 801579c:	3fa97b4b 	.word	0x3fa97b4b
 80157a0:	a0d03d51 	.word	0xa0d03d51
 80157a4:	3fb10d66 	.word	0x3fb10d66
 80157a8:	c54c206e 	.word	0xc54c206e
 80157ac:	3fb745cd 	.word	0x3fb745cd
 80157b0:	920083ff 	.word	0x920083ff
 80157b4:	3fc24924 	.word	0x3fc24924
 80157b8:	5555550d 	.word	0x5555550d
 80157bc:	3fd55555 	.word	0x3fd55555
 80157c0:	2c6a6c2f 	.word	0x2c6a6c2f
 80157c4:	bfa2b444 	.word	0xbfa2b444
 80157c8:	52defd9a 	.word	0x52defd9a
 80157cc:	3fadde2d 	.word	0x3fadde2d
 80157d0:	af749a6d 	.word	0xaf749a6d
 80157d4:	3fb3b0f2 	.word	0x3fb3b0f2
 80157d8:	fe231671 	.word	0xfe231671
 80157dc:	3fbc71c6 	.word	0x3fbc71c6
 80157e0:	9998ebc4 	.word	0x9998ebc4
 80157e4:	3fc99999 	.word	0x3fc99999
 80157e8:	54442d18 	.word	0x54442d18
 80157ec:	3ff921fb 	.word	0x3ff921fb
 80157f0:	440fffff 	.word	0x440fffff
 80157f4:	7ff00000 	.word	0x7ff00000
 80157f8:	3fdbffff 	.word	0x3fdbffff
 80157fc:	3ff00000 	.word	0x3ff00000
 8015800:	3ff2ffff 	.word	0x3ff2ffff
 8015804:	40038000 	.word	0x40038000
 8015808:	3ff80000 	.word	0x3ff80000
 801580c:	bff00000 	.word	0xbff00000
 8015810:	08015ca0 	.word	0x08015ca0
 8015814:	08015c80 	.word	0x08015c80

08015818 <fabs>:
 8015818:	ec51 0b10 	vmov	r0, r1, d0
 801581c:	ee10 2a10 	vmov	r2, s0
 8015820:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015824:	ec43 2b10 	vmov	d0, r2, r3
 8015828:	4770      	bx	lr
	...

0801582c <_init>:
 801582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801582e:	bf00      	nop
 8015830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015832:	bc08      	pop	{r3}
 8015834:	469e      	mov	lr, r3
 8015836:	4770      	bx	lr

08015838 <_fini>:
 8015838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801583a:	bf00      	nop
 801583c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801583e:	bc08      	pop	{r3}
 8015840:	469e      	mov	lr, r3
 8015842:	4770      	bx	lr
